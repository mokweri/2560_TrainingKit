
TK2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800200  00000bec  00000c80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002a  00800202  00800202  00000c82  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c82  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000cb4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e1b  00000000  00000000  00000d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010aa  00000000  00000000  00002bb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000af9  00000000  00000000  00003c61  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000174  00000000  00000000  0000475c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000082d  00000000  00000000  000048d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001052  00000000  00000000  000050fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  0000614f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	f1 c0       	rjmp	.+482    	; 0x1e4 <__ctors_end>
   2:	00 00       	nop
   4:	0e c1       	rjmp	.+540    	; 0x222 <__bad_interrupt>
   6:	00 00       	nop
   8:	0c c1       	rjmp	.+536    	; 0x222 <__bad_interrupt>
   a:	00 00       	nop
   c:	0a c1       	rjmp	.+532    	; 0x222 <__bad_interrupt>
   e:	00 00       	nop
  10:	08 c1       	rjmp	.+528    	; 0x222 <__bad_interrupt>
  12:	00 00       	nop
  14:	06 c1       	rjmp	.+524    	; 0x222 <__bad_interrupt>
  16:	00 00       	nop
  18:	04 c1       	rjmp	.+520    	; 0x222 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	02 c1       	rjmp	.+516    	; 0x222 <__bad_interrupt>
  1e:	00 00       	nop
  20:	00 c1       	rjmp	.+512    	; 0x222 <__bad_interrupt>
  22:	00 00       	nop
  24:	fe c0       	rjmp	.+508    	; 0x222 <__bad_interrupt>
  26:	00 00       	nop
  28:	fc c0       	rjmp	.+504    	; 0x222 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	fa c0       	rjmp	.+500    	; 0x222 <__bad_interrupt>
  2e:	00 00       	nop
  30:	f8 c0       	rjmp	.+496    	; 0x222 <__bad_interrupt>
  32:	00 00       	nop
  34:	f6 c0       	rjmp	.+492    	; 0x222 <__bad_interrupt>
  36:	00 00       	nop
  38:	f4 c0       	rjmp	.+488    	; 0x222 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	f2 c0       	rjmp	.+484    	; 0x222 <__bad_interrupt>
  3e:	00 00       	nop
  40:	f0 c0       	rjmp	.+480    	; 0x222 <__bad_interrupt>
  42:	00 00       	nop
  44:	ee c0       	rjmp	.+476    	; 0x222 <__bad_interrupt>
  46:	00 00       	nop
  48:	ec c0       	rjmp	.+472    	; 0x222 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	ea c0       	rjmp	.+468    	; 0x222 <__bad_interrupt>
  4e:	00 00       	nop
  50:	e8 c0       	rjmp	.+464    	; 0x222 <__bad_interrupt>
  52:	00 00       	nop
  54:	e6 c0       	rjmp	.+460    	; 0x222 <__bad_interrupt>
  56:	00 00       	nop
  58:	e4 c0       	rjmp	.+456    	; 0x222 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	e2 c0       	rjmp	.+452    	; 0x222 <__bad_interrupt>
  5e:	00 00       	nop
  60:	e0 c0       	rjmp	.+448    	; 0x222 <__bad_interrupt>
  62:	00 00       	nop
  64:	de c0       	rjmp	.+444    	; 0x222 <__bad_interrupt>
  66:	00 00       	nop
  68:	dc c0       	rjmp	.+440    	; 0x222 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	da c0       	rjmp	.+436    	; 0x222 <__bad_interrupt>
  6e:	00 00       	nop
  70:	d8 c0       	rjmp	.+432    	; 0x222 <__bad_interrupt>
  72:	00 00       	nop
  74:	d6 c0       	rjmp	.+428    	; 0x222 <__bad_interrupt>
  76:	00 00       	nop
  78:	d4 c0       	rjmp	.+424    	; 0x222 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	d2 c0       	rjmp	.+420    	; 0x222 <__bad_interrupt>
  7e:	00 00       	nop
  80:	ef c4       	rjmp	.+2526   	; 0xa60 <__vector_32>
  82:	00 00       	nop
  84:	ce c0       	rjmp	.+412    	; 0x222 <__bad_interrupt>
  86:	00 00       	nop
  88:	cc c0       	rjmp	.+408    	; 0x222 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	ca c0       	rjmp	.+404    	; 0x222 <__bad_interrupt>
  8e:	00 00       	nop
  90:	c8 c0       	rjmp	.+400    	; 0x222 <__bad_interrupt>
  92:	00 00       	nop
  94:	c6 c0       	rjmp	.+396    	; 0x222 <__bad_interrupt>
  96:	00 00       	nop
  98:	c4 c0       	rjmp	.+392    	; 0x222 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	c2 c0       	rjmp	.+388    	; 0x222 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	c0 c0       	rjmp	.+384    	; 0x222 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	be c0       	rjmp	.+380    	; 0x222 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	bc c0       	rjmp	.+376    	; 0x222 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	ba c0       	rjmp	.+372    	; 0x222 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	b8 c0       	rjmp	.+368    	; 0x222 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	b6 c0       	rjmp	.+364    	; 0x222 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	b4 c0       	rjmp	.+360    	; 0x222 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	b2 c0       	rjmp	.+356    	; 0x222 <__bad_interrupt>
  be:	00 00       	nop
  c0:	b0 c0       	rjmp	.+352    	; 0x222 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	ae c0       	rjmp	.+348    	; 0x222 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	ac c0       	rjmp	.+344    	; 0x222 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	aa c0       	rjmp	.+340    	; 0x222 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	a8 c0       	rjmp	.+336    	; 0x222 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	a6 c0       	rjmp	.+332    	; 0x222 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	a4 c0       	rjmp	.+328    	; 0x222 <__bad_interrupt>
  da:	00 00       	nop
  dc:	a2 c0       	rjmp	.+324    	; 0x222 <__bad_interrupt>
  de:	00 00       	nop
  e0:	a0 c0       	rjmp	.+320    	; 0x222 <__bad_interrupt>
	...

000000e4 <__trampolines_end>:
  e4:	00 20       	and	r0, r0
  e6:	01 02       	muls	r16, r17
  e8:	04 08       	sbc	r0, r4
  ea:	10 20       	and	r1, r0
  ec:	40 80       	ld	r4, Z
  ee:	00 00       	nop
  f0:	01 02       	muls	r16, r17
  f2:	04 08       	sbc	r0, r4
  f4:	10 20       	and	r1, r0
  f6:	40 01       	movw	r8, r0
  f8:	02 04       	cpc	r0, r2
  fa:	08 10       	cpse	r0, r8
  fc:	20 40       	sbci	r18, 0x00	; 0
  fe:	80 80       	ld	r8, Z
 100:	08 10       	cpse	r0, r8
 102:	00 00       	nop
 104:	00 00       	nop
 106:	00 01       	movw	r0, r0
 108:	02 04       	cpc	r0, r2
 10a:	08 10       	cpse	r0, r8
 10c:	20 40       	sbci	r18, 0x00	; 0
 10e:	80 01       	movw	r16, r0
 110:	02 04       	cpc	r0, r2
 112:	08 10       	cpse	r0, r8
 114:	20 40       	sbci	r18, 0x00	; 0
 116:	80 01       	movw	r16, r0
 118:	02 01       	movw	r0, r4
 11a:	02 04       	cpc	r0, r2
 11c:	08 10       	cpse	r0, r8
 11e:	20 40       	sbci	r18, 0x00	; 0
 120:	80 00       	.word	0x0080	; ????
 122:	00 01       	movw	r0, r0
 124:	02 04       	cpc	r0, r2
 126:	08 10       	cpse	r0, r8
 128:	20 40       	sbci	r18, 0x00	; 0
 12a:	04 80       	ldd	r0, Z+4	; 0x04
 12c:	40 20       	and	r4, r0
 12e:	10 08       	sbc	r1, r0
 130:	04 02       	muls	r16, r20
 132:	01 80       	ldd	r0, Z+1	; 0x01
 134:	00 00       	nop
 136:	80 40       	sbci	r24, 0x00	; 0
 138:	20 10       	cpse	r2, r0
 13a:	08 04       	cpc	r0, r8
 13c:	02 01       	movw	r0, r4
 13e:	80 40       	sbci	r24, 0x00	; 0
 140:	20 10       	cpse	r2, r0
 142:	08 04       	cpc	r0, r8
 144:	02 01       	movw	r0, r4
 146:	00 00       	nop
	...

00000149 <pin_to_port_PGM>:
 149:	00 07 05 05 05 05 05 05 05 05 00 00 08 08 08 08     ................
 159:	08 08 08 02 02 02 02 02 02 02 02 08 07 07 00 00     ................
 169:	00 00 00 0c 0c 0c 0c 0c 0c 0c 0c 04 04 04 04 04     ................
 179:	04 04 04 07 07 03 03 03 03 03 03 03 03 00 00 0a     ................
 189:	0a 0a 0a 0a 0a 0a 07 01 01 01 01 01 01 01 01 0a     ................
 199:	00 00 0b 0b 0b 0b 0b 0b 0b 0b 06 06 06 06 06 06     ................
 1a9:	06 06 00 00 00                                      .....

000001ae <port_to_output_PGM>:
 1ae:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
 1be:	02 01 00 00 05 01 08 01 0b 01                       ..........

000001c8 <port_to_ddr_PGM>:
 1c8:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
 1d8:	01 01 00 00 04 01 07 01 0a 01                       ..........

000001e2 <tone_pin_to_timer_PGM>:
 1e2:	03 00                                               ..

000001e4 <__ctors_end>:
 1e4:	11 24       	eor	r1, r1
 1e6:	1f be       	out	0x3f, r1	; 63
 1e8:	cf ef       	ldi	r28, 0xFF	; 255
 1ea:	d1 e2       	ldi	r29, 0x21	; 33
 1ec:	de bf       	out	0x3e, r29	; 62
 1ee:	cd bf       	out	0x3d, r28	; 61
 1f0:	00 e0       	ldi	r16, 0x00	; 0
 1f2:	0c bf       	out	0x3c, r16	; 60

000001f4 <__do_copy_data>:
 1f4:	12 e0       	ldi	r17, 0x02	; 2
 1f6:	a0 e0       	ldi	r26, 0x00	; 0
 1f8:	b2 e0       	ldi	r27, 0x02	; 2
 1fa:	ec ee       	ldi	r30, 0xEC	; 236
 1fc:	fb e0       	ldi	r31, 0x0B	; 11
 1fe:	00 e0       	ldi	r16, 0x00	; 0
 200:	0b bf       	out	0x3b, r16	; 59
 202:	02 c0       	rjmp	.+4      	; 0x208 <__do_copy_data+0x14>
 204:	07 90       	elpm	r0, Z+
 206:	0d 92       	st	X+, r0
 208:	a2 30       	cpi	r26, 0x02	; 2
 20a:	b1 07       	cpc	r27, r17
 20c:	d9 f7       	brne	.-10     	; 0x204 <__do_copy_data+0x10>

0000020e <__do_clear_bss>:
 20e:	22 e0       	ldi	r18, 0x02	; 2
 210:	a2 e0       	ldi	r26, 0x02	; 2
 212:	b2 e0       	ldi	r27, 0x02	; 2
 214:	01 c0       	rjmp	.+2      	; 0x218 <.do_clear_bss_start>

00000216 <.do_clear_bss_loop>:
 216:	1d 92       	st	X+, r1

00000218 <.do_clear_bss_start>:
 218:	ac 32       	cpi	r26, 0x2C	; 44
 21a:	b2 07       	cpc	r27, r18
 21c:	e1 f7       	brne	.-8      	; 0x216 <.do_clear_bss_loop>
 21e:	88 d4       	rcall	.+2320   	; 0xb30 <main>
 220:	e3 c4       	rjmp	.+2502   	; 0xbe8 <_exit>

00000222 <__bad_interrupt>:
 222:	ee ce       	rjmp	.-548    	; 0x0 <__vectors>

00000224 <pinMode>:
 */ 
#include "gpio.h"


void pinMode(uint8_t pin, uint8_t mode)
{
 224:	cf 93       	push	r28
 226:	df 93       	push	r29
	uint8_t bit = pinToBitMask(pin);
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	fc 01       	movw	r30, r24
 22c:	ec 51       	subi	r30, 0x1C	; 28
 22e:	ff 4f       	sbci	r31, 0xFF	; 255
 230:	24 91       	lpm	r18, Z
	uint8_t port = pinToPort(pin);
 232:	fc 01       	movw	r30, r24
 234:	e7 5b       	subi	r30, 0xB7	; 183
 236:	fe 4f       	sbci	r31, 0xFE	; 254
 238:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;
	
	if (port == NOT_A_PIN) return;
 23a:	88 23       	and	r24, r24
 23c:	79 f1       	breq	.+94     	; 0x29c <pinMode+0x78>
	
	reg = portDDRRegister(port);
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	88 0f       	add	r24, r24
 242:	99 1f       	adc	r25, r25
 244:	fc 01       	movw	r30, r24
 246:	e8 53       	subi	r30, 0x38	; 56
 248:	fe 4f       	sbci	r31, 0xFE	; 254
 24a:	a5 91       	lpm	r26, Z+
 24c:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
 24e:	fc 01       	movw	r30, r24
 250:	e2 55       	subi	r30, 0x52	; 82
 252:	fe 4f       	sbci	r31, 0xFE	; 254
 254:	c5 91       	lpm	r28, Z+
 256:	d4 91       	lpm	r29, Z
	
	if (mode == INPUT)
 258:	61 11       	cpse	r22, r1
 25a:	0c c0       	rjmp	.+24     	; 0x274 <pinMode+0x50>
	{
		uint8_t oldSREG = SREG;
 25c:	9f b7       	in	r25, 0x3f	; 63
		cli();
 25e:	f8 94       	cli
		*reg &= ~bit;
 260:	8c 91       	ld	r24, X
 262:	e2 2f       	mov	r30, r18
 264:	e0 95       	com	r30
 266:	8e 23       	and	r24, r30
 268:	8c 93       	st	X, r24
		*out &= ~bit;
 26a:	28 81       	ld	r18, Y
 26c:	e2 23       	and	r30, r18
 26e:	e8 83       	st	Y, r30
		SREG = oldSREG;
 270:	9f bf       	out	0x3f, r25	; 63
 272:	14 c0       	rjmp	.+40     	; 0x29c <pinMode+0x78>
	}else if(mode == INPUT_PULLUP)
 274:	62 30       	cpi	r22, 0x02	; 2
 276:	61 f4       	brne	.+24     	; 0x290 <pinMode+0x6c>
	{
		uint8_t oldSREG = SREG;
 278:	9f b7       	in	r25, 0x3f	; 63
		cli();
 27a:	f8 94       	cli
		*reg &= ~bit;
 27c:	8c 91       	ld	r24, X
 27e:	32 2f       	mov	r19, r18
 280:	30 95       	com	r19
 282:	83 23       	and	r24, r19
 284:	8c 93       	st	X, r24
		*out |= bit;
 286:	e8 81       	ld	r30, Y
 288:	e2 2b       	or	r30, r18
 28a:	e8 83       	st	Y, r30
		SREG = oldSREG;
 28c:	9f bf       	out	0x3f, r25	; 63
 28e:	06 c0       	rjmp	.+12     	; 0x29c <pinMode+0x78>
	}else{
		//output
		uint8_t oldSREG = SREG;
 290:	8f b7       	in	r24, 0x3f	; 63
		cli();
 292:	f8 94       	cli
		*reg |= bit;
 294:	ec 91       	ld	r30, X
 296:	e2 2b       	or	r30, r18
 298:	ec 93       	st	X, r30
		SREG = oldSREG;
 29a:	8f bf       	out	0x3f, r24	; 63
	}
		
}
 29c:	df 91       	pop	r29
 29e:	cf 91       	pop	r28
 2a0:	08 95       	ret

000002a2 <digitalWrite>:

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t bit = pinToBitMask(pin);
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	fc 01       	movw	r30, r24
 2a6:	ec 51       	subi	r30, 0x1C	; 28
 2a8:	ff 4f       	sbci	r31, 0xFF	; 255
 2aa:	24 91       	lpm	r18, Z
	uint8_t port = pinToPort(pin);
 2ac:	fc 01       	movw	r30, r24
 2ae:	e7 5b       	subi	r30, 0xB7	; 183
 2b0:	fe 4f       	sbci	r31, 0xFE	; 254
 2b2:	84 91       	lpm	r24, Z
	volatile uint8_t *out;
	
	if (port == NOT_A_PIN) return;
 2b4:	88 23       	and	r24, r24
 2b6:	b1 f0       	breq	.+44     	; 0x2e4 <digitalWrite+0x42>
	
	out = portOutputRegister(port);
 2b8:	e8 2f       	mov	r30, r24
 2ba:	f0 e0       	ldi	r31, 0x00	; 0
 2bc:	ee 0f       	add	r30, r30
 2be:	ff 1f       	adc	r31, r31
 2c0:	e2 55       	subi	r30, 0x52	; 82
 2c2:	fe 4f       	sbci	r31, 0xFE	; 254
 2c4:	a5 91       	lpm	r26, Z+
 2c6:	b4 91       	lpm	r27, Z
	
	uint8_t oldSREG = SREG;
 2c8:	8f b7       	in	r24, 0x3f	; 63
	cli();
 2ca:	f8 94       	cli
	
	if (val == LOW) {
 2cc:	61 11       	cpse	r22, r1
 2ce:	06 c0       	rjmp	.+12     	; 0x2dc <digitalWrite+0x3a>
		*out &= ~bit;
 2d0:	9c 91       	ld	r25, X
 2d2:	e2 2f       	mov	r30, r18
 2d4:	e0 95       	com	r30
 2d6:	e9 23       	and	r30, r25
 2d8:	ec 93       	st	X, r30
 2da:	03 c0       	rjmp	.+6      	; 0x2e2 <digitalWrite+0x40>
	} else {
		*out |= bit;
 2dc:	ec 91       	ld	r30, X
 2de:	e2 2b       	or	r30, r18
 2e0:	ec 93       	st	X, r30
	}
	
	SREG = oldSREG;
 2e2:	8f bf       	out	0x3f, r24	; 63
 2e4:	08 95       	ret

000002e6 <tone>:
}


//Generate frequency (in hertz) and duration (in milliseconds)
void tone(uint8_t _pin, unsigned int frequency, unsigned long duration)
{
 2e6:	4f 92       	push	r4
 2e8:	5f 92       	push	r5
 2ea:	6f 92       	push	r6
 2ec:	7f 92       	push	r7
 2ee:	8f 92       	push	r8
 2f0:	9f 92       	push	r9
 2f2:	af 92       	push	r10
 2f4:	bf 92       	push	r11
 2f6:	cf 92       	push	r12
 2f8:	df 92       	push	r13
 2fa:	ef 92       	push	r14
 2fc:	ff 92       	push	r15
 2fe:	0f 93       	push	r16
 300:	1f 93       	push	r17
 302:	cf 93       	push	r28
 304:	8b 01       	movw	r16, r22
 306:	49 01       	movw	r8, r18
 308:	5a 01       	movw	r10, r20
{
	int8_t _timer = -1;
	
	// if we're already using the pin, the timer should be configured.
	for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
		if (tone_pins[i] == _pin) {
 30a:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 30e:	89 13       	cpse	r24, r25
 310:	04 c3       	rjmp	.+1544   	; 0x91a <__LOCK_REGION_LENGTH__+0x51a>
			return pgm_read_byte(tone_pin_to_timer_PGM + i);
 312:	e2 ee       	ldi	r30, 0xE2	; 226
 314:	f1 e0       	ldi	r31, 0x01	; 1
 316:	c4 91       	lpm	r28, Z
 318:	f4 c0       	rjmp	.+488    	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
	}
	  
	// search for an unused timer.
	for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
		if (tone_pins[i] == 255) {
			tone_pins[i] = _pin;
 31a:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
			_timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
 31e:	e2 ee       	ldi	r30, 0xE2	; 226
 320:	f1 e0       	ldi	r31, 0x01	; 1
 322:	c4 91       	lpm	r28, Z
			break;
		}
	}
	
	//Found timer
	if (_timer != -1)
 324:	cf 3f       	cpi	r28, 0xFF	; 255
 326:	09 f4       	brne	.+2      	; 0x32a <tone+0x44>
 328:	3d c3       	rjmp	.+1658   	; 0x9a4 <__LOCK_REGION_LENGTH__+0x5a4>
	{
		// Set timer specific stuff
		// All timers in CTC mode
		// 8 bit timers will require changing prescalar values,
		// whereas 16 bit timers are set to either clk/1 or clk/64 prescalar
		switch(_timer)
 32a:	c2 30       	cpi	r28, 0x02	; 2
 32c:	09 f4       	brne	.+2      	; 0x330 <tone+0x4a>
 32e:	56 c0       	rjmp	.+172    	; 0x3dc <tone+0xf6>
 330:	28 f4       	brcc	.+10     	; 0x33c <tone+0x56>
 332:	cc 23       	and	r28, r28
 334:	61 f0       	breq	.+24     	; 0x34e <tone+0x68>
 336:	c1 30       	cpi	r28, 0x01	; 1
 338:	69 f1       	breq	.+90     	; 0x394 <tone+0xae>
 33a:	e3 c0       	rjmp	.+454    	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
 33c:	c4 30       	cpi	r28, 0x04	; 4
 33e:	09 f4       	brne	.+2      	; 0x342 <tone+0x5c>
 340:	98 c0       	rjmp	.+304    	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 342:	08 f4       	brcc	.+2      	; 0x346 <tone+0x60>
 344:	72 c0       	rjmp	.+228    	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 346:	c5 30       	cpi	r28, 0x05	; 5
 348:	09 f4       	brne	.+2      	; 0x34c <tone+0x66>
 34a:	b7 c0       	rjmp	.+366    	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
 34c:	da c0       	rjmp	.+436    	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
		{
			//TIMER 0 - 8 bit timer
			case 0:
				TCCR0A = 0;
 34e:	14 bc       	out	0x24, r1	; 36
				TCCR0B = 0;
 350:	15 bc       	out	0x25, r1	; 37
				bitWrite(TCCR0A, WGM01, 1); // set CTC mode
 352:	94 b5       	in	r25, 0x24	; 36
 354:	92 60       	ori	r25, 0x02	; 2
 356:	94 bd       	out	0x24, r25	; 36
				bitWrite(TCCR0B, CS00, 1);  // No prescaling
 358:	95 b5       	in	r25, 0x25	; 37
 35a:	91 60       	ori	r25, 0x01	; 1
 35c:	95 bd       	out	0x25, r25	; 37
				timer0_pin_port = portOutputRegister(pinToPort(_pin));
 35e:	28 2f       	mov	r18, r24
 360:	30 e0       	ldi	r19, 0x00	; 0
 362:	f9 01       	movw	r30, r18
 364:	e7 5b       	subi	r30, 0xB7	; 183
 366:	fe 4f       	sbci	r31, 0xFE	; 254
 368:	e4 91       	lpm	r30, Z
 36a:	f0 e0       	ldi	r31, 0x00	; 0
 36c:	ee 0f       	add	r30, r30
 36e:	ff 1f       	adc	r31, r31
 370:	e2 55       	subi	r30, 0x52	; 82
 372:	fe 4f       	sbci	r31, 0xFE	; 254
 374:	45 91       	lpm	r20, Z+
 376:	54 91       	lpm	r21, Z
 378:	50 93 1b 02 	sts	0x021B, r21	; 0x80021b <timer0_pin_port+0x1>
 37c:	40 93 1a 02 	sts	0x021A, r20	; 0x80021a <timer0_pin_port>
				timer0_pin_mask = pinToBitMask(_pin);
 380:	f9 01       	movw	r30, r18
 382:	ec 51       	subi	r30, 0x1C	; 28
 384:	ff 4f       	sbci	r31, 0xFF	; 255
 386:	24 91       	lpm	r18, Z
 388:	20 93 02 02 	sts	0x0202, r18	; 0x800202 <__data_end>
	_timer = toneBegin(_pin);
	
	if (_timer >= 0)
	{
		//1. set the pin as OUTPUT
		pinMode(_pin, OUTPUT);
 38c:	61 e0       	ldi	r22, 0x01	; 1
 38e:	4a df       	rcall	.-364    	; 0x224 <pinMode>
				timer5_pin_mask = pinToBitMask(_pin);
			break;
		}
	}
	
	return _timer;	
 390:	c0 e0       	ldi	r28, 0x00	; 0
 392:	8b c2       	rjmp	.+1302   	; 0x8aa <__LOCK_REGION_LENGTH__+0x4aa>
				timer0_pin_port = portOutputRegister(pinToPort(_pin));
				timer0_pin_mask = pinToBitMask(_pin);
			break;			
			//TIMER 1 - 16 bit timer
			case 1:
				TCCR1A = 0;
 394:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
				TCCR1B = 0;
 398:	e1 e8       	ldi	r30, 0x81	; 129
 39a:	f0 e0       	ldi	r31, 0x00	; 0
 39c:	10 82       	st	Z, r1
				bitWrite(TCCR1B, WGM12, 1); // Set CTC mode
 39e:	90 81       	ld	r25, Z
 3a0:	98 60       	ori	r25, 0x08	; 8
 3a2:	90 83       	st	Z, r25
				bitWrite(TCCR1B, CS10, 1) ; // No prescaling
 3a4:	90 81       	ld	r25, Z
 3a6:	91 60       	ori	r25, 0x01	; 1
 3a8:	90 83       	st	Z, r25
				timer1_pin_port = portOutputRegister(pinToPort(_pin));
 3aa:	28 2f       	mov	r18, r24
 3ac:	30 e0       	ldi	r19, 0x00	; 0
 3ae:	f9 01       	movw	r30, r18
 3b0:	e7 5b       	subi	r30, 0xB7	; 183
 3b2:	fe 4f       	sbci	r31, 0xFE	; 254
 3b4:	e4 91       	lpm	r30, Z
 3b6:	f0 e0       	ldi	r31, 0x00	; 0
 3b8:	ee 0f       	add	r30, r30
 3ba:	ff 1f       	adc	r31, r31
 3bc:	e2 55       	subi	r30, 0x52	; 82
 3be:	fe 4f       	sbci	r31, 0xFE	; 254
 3c0:	45 91       	lpm	r20, Z+
 3c2:	54 91       	lpm	r21, Z
 3c4:	50 93 22 02 	sts	0x0222, r21	; 0x800222 <timer1_pin_port+0x1>
 3c8:	40 93 21 02 	sts	0x0221, r20	; 0x800221 <timer1_pin_port>
				timer1_pin_mask = pinToBitMask(_pin);
 3cc:	f9 01       	movw	r30, r18
 3ce:	ec 51       	subi	r30, 0x1C	; 28
 3d0:	ff 4f       	sbci	r31, 0xFF	; 255
 3d2:	24 91       	lpm	r18, Z
 3d4:	20 93 20 02 	sts	0x0220, r18	; 0x800220 <timer1_pin_mask>
				timer5_pin_mask = pinToBitMask(_pin);
			break;
		}
	}
	
	return _timer;	
 3d8:	c1 e0       	ldi	r28, 0x01	; 1
 3da:	e1 c2       	rjmp	.+1474   	; 0x99e <__LOCK_REGION_LENGTH__+0x59e>
				timer1_pin_port = portOutputRegister(pinToPort(_pin));
				timer1_pin_mask = pinToBitMask(_pin);
			break;			
			//TIMER 2 - 8 bit timer
			case 2:
				TCCR2A = 0;
 3dc:	a0 eb       	ldi	r26, 0xB0	; 176
 3de:	b0 e0       	ldi	r27, 0x00	; 0
 3e0:	1c 92       	st	X, r1
				TCCR2B = 0;
 3e2:	e1 eb       	ldi	r30, 0xB1	; 177
 3e4:	f0 e0       	ldi	r31, 0x00	; 0
 3e6:	10 82       	st	Z, r1
				bitWrite(TCCR2A, WGM21, 1); //Set CTC mode
 3e8:	9c 91       	ld	r25, X
 3ea:	92 60       	ori	r25, 0x02	; 2
 3ec:	9c 93       	st	X, r25
				bitWrite(TCCR2B, CS20, 1); // No prescaling
 3ee:	90 81       	ld	r25, Z
 3f0:	91 60       	ori	r25, 0x01	; 1
 3f2:	90 83       	st	Z, r25
				timer2_pin_port = portOutputRegister(pinToPort(_pin));
 3f4:	28 2f       	mov	r18, r24
 3f6:	30 e0       	ldi	r19, 0x00	; 0
 3f8:	f9 01       	movw	r30, r18
 3fa:	e7 5b       	subi	r30, 0xB7	; 183
 3fc:	fe 4f       	sbci	r31, 0xFE	; 254
 3fe:	e4 91       	lpm	r30, Z
 400:	f0 e0       	ldi	r31, 0x00	; 0
 402:	ee 0f       	add	r30, r30
 404:	ff 1f       	adc	r31, r31
 406:	e2 55       	subi	r30, 0x52	; 82
 408:	fe 4f       	sbci	r31, 0xFE	; 254
 40a:	45 91       	lpm	r20, Z+
 40c:	54 91       	lpm	r21, Z
 40e:	50 93 09 02 	sts	0x0209, r21	; 0x800209 <timer2_pin_port+0x1>
 412:	40 93 08 02 	sts	0x0208, r20	; 0x800208 <timer2_pin_port>
				timer2_pin_mask = pinToBitMask(_pin);
 416:	f9 01       	movw	r30, r18
 418:	ec 51       	subi	r30, 0x1C	; 28
 41a:	ff 4f       	sbci	r31, 0xFF	; 255
 41c:	24 91       	lpm	r18, Z
 41e:	20 93 15 02 	sts	0x0215, r18	; 0x800215 <timer2_pin_mask>
	_timer = toneBegin(_pin);
	
	if (_timer >= 0)
	{
		//1. set the pin as OUTPUT
		pinMode(_pin, OUTPUT);
 422:	61 e0       	ldi	r22, 0x01	; 1
 424:	ff de       	rcall	.-514    	; 0x224 <pinMode>
				timer5_pin_mask = pinToBitMask(_pin);
			break;
		}
	}
	
	return _timer;	
 426:	c2 e0       	ldi	r28, 0x02	; 2
 428:	07 c2       	rjmp	.+1038   	; 0x838 <__LOCK_REGION_LENGTH__+0x438>
				timer2_pin_port = portOutputRegister(pinToPort(_pin));
				timer2_pin_mask = pinToBitMask(_pin);
			break;			
			//TIMER 3 - 16 bit timer
			case 3:
				TCCR3A = 0;
 42a:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
				TCCR3B = 0;
 42e:	e1 e9       	ldi	r30, 0x91	; 145
 430:	f0 e0       	ldi	r31, 0x00	; 0
 432:	10 82       	st	Z, r1
				bitWrite(TCCR3B, WGM32, 1); //CTC Mode
 434:	90 81       	ld	r25, Z
 436:	98 60       	ori	r25, 0x08	; 8
 438:	90 83       	st	Z, r25
				bitWrite(TCCR3B, CS30, 1);	//No prescaling
 43a:	90 81       	ld	r25, Z
 43c:	91 60       	ori	r25, 0x01	; 1
 43e:	90 83       	st	Z, r25
				timer3_pin_port = portOutputRegister(pinToPort(_pin));
 440:	28 2f       	mov	r18, r24
 442:	30 e0       	ldi	r19, 0x00	; 0
 444:	f9 01       	movw	r30, r18
 446:	e7 5b       	subi	r30, 0xB7	; 183
 448:	fe 4f       	sbci	r31, 0xFE	; 254
 44a:	e4 91       	lpm	r30, Z
 44c:	f0 e0       	ldi	r31, 0x00	; 0
 44e:	ee 0f       	add	r30, r30
 450:	ff 1f       	adc	r31, r31
 452:	e2 55       	subi	r30, 0x52	; 82
 454:	fe 4f       	sbci	r31, 0xFE	; 254
 456:	45 91       	lpm	r20, Z+
 458:	54 91       	lpm	r21, Z
 45a:	50 93 0c 02 	sts	0x020C, r21	; 0x80020c <timer3_pin_port+0x1>
 45e:	40 93 0b 02 	sts	0x020B, r20	; 0x80020b <timer3_pin_port>
				timer3_pin_mask = pinToBitMask(_pin);
 462:	f9 01       	movw	r30, r18
 464:	ec 51       	subi	r30, 0x1C	; 28
 466:	ff 4f       	sbci	r31, 0xFF	; 255
 468:	24 91       	lpm	r18, Z
 46a:	20 93 03 02 	sts	0x0203, r18	; 0x800203 <timer3_pin_mask>
				timer5_pin_mask = pinToBitMask(_pin);
			break;
		}
	}
	
	return _timer;	
 46e:	c3 e0       	ldi	r28, 0x03	; 3
 470:	96 c2       	rjmp	.+1324   	; 0x99e <__LOCK_REGION_LENGTH__+0x59e>
				timer3_pin_port = portOutputRegister(pinToPort(_pin));
				timer3_pin_mask = pinToBitMask(_pin);
			break;		
			//TIMER 4 - 16 bit timer
			case 4:
				TCCR4A = 0;
 472:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
				TCCR4B = 0;
 476:	e1 ea       	ldi	r30, 0xA1	; 161
 478:	f0 e0       	ldi	r31, 0x00	; 0
 47a:	10 82       	st	Z, r1
				bitWrite(TCCR4B, WGM42, 1); //CTC Mode
 47c:	90 81       	ld	r25, Z
 47e:	98 60       	ori	r25, 0x08	; 8
 480:	90 83       	st	Z, r25
				bitWrite(TCCR4B, CS40, 1);  //No prescaling
 482:	90 81       	ld	r25, Z
 484:	91 60       	ori	r25, 0x01	; 1
 486:	90 83       	st	Z, r25
				timer4_pin_port = portOutputRegister(pinToPort(_pin));
 488:	28 2f       	mov	r18, r24
 48a:	30 e0       	ldi	r19, 0x00	; 0
 48c:	f9 01       	movw	r30, r18
 48e:	e7 5b       	subi	r30, 0xB7	; 183
 490:	fe 4f       	sbci	r31, 0xFE	; 254
 492:	e4 91       	lpm	r30, Z
 494:	f0 e0       	ldi	r31, 0x00	; 0
 496:	ee 0f       	add	r30, r30
 498:	ff 1f       	adc	r31, r31
 49a:	e2 55       	subi	r30, 0x52	; 82
 49c:	fe 4f       	sbci	r31, 0xFE	; 254
 49e:	45 91       	lpm	r20, Z+
 4a0:	54 91       	lpm	r21, Z
 4a2:	50 93 19 02 	sts	0x0219, r21	; 0x800219 <timer4_pin_port+0x1>
 4a6:	40 93 18 02 	sts	0x0218, r20	; 0x800218 <timer4_pin_port>
				timer4_pin_mask = pinToBitMask(_pin);
 4aa:	f9 01       	movw	r30, r18
 4ac:	ec 51       	subi	r30, 0x1C	; 28
 4ae:	ff 4f       	sbci	r31, 0xFF	; 255
 4b0:	24 91       	lpm	r18, Z
 4b2:	20 93 0a 02 	sts	0x020A, r18	; 0x80020a <timer4_pin_mask>
				timer5_pin_mask = pinToBitMask(_pin);
			break;
		}
	}
	
	return _timer;	
 4b6:	c4 e0       	ldi	r28, 0x04	; 4
 4b8:	72 c2       	rjmp	.+1252   	; 0x99e <__LOCK_REGION_LENGTH__+0x59e>
				timer4_pin_port = portOutputRegister(pinToPort(_pin));
				timer4_pin_mask = pinToBitMask(_pin);
			break;	
			//TIMER 5 - 16 bit timer
			case 5:
				TCCR5A = 0;
 4ba:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
				TCCR5B = 0;
 4be:	e1 e2       	ldi	r30, 0x21	; 33
 4c0:	f1 e0       	ldi	r31, 0x01	; 1
 4c2:	10 82       	st	Z, r1
				bitWrite(TCCR5B, WGM52, 1);
 4c4:	90 81       	ld	r25, Z
 4c6:	98 60       	ori	r25, 0x08	; 8
 4c8:	90 83       	st	Z, r25
				bitWrite(TCCR5B, CS50, 1);
 4ca:	90 81       	ld	r25, Z
 4cc:	91 60       	ori	r25, 0x01	; 1
 4ce:	90 83       	st	Z, r25
				timer5_pin_port = portOutputRegister(pinToPort(_pin));
 4d0:	28 2f       	mov	r18, r24
 4d2:	30 e0       	ldi	r19, 0x00	; 0
 4d4:	f9 01       	movw	r30, r18
 4d6:	e7 5b       	subi	r30, 0xB7	; 183
 4d8:	fe 4f       	sbci	r31, 0xFE	; 254
 4da:	e4 91       	lpm	r30, Z
 4dc:	f0 e0       	ldi	r31, 0x00	; 0
 4de:	ee 0f       	add	r30, r30
 4e0:	ff 1f       	adc	r31, r31
 4e2:	e2 55       	subi	r30, 0x52	; 82
 4e4:	fe 4f       	sbci	r31, 0xFE	; 254
 4e6:	45 91       	lpm	r20, Z+
 4e8:	54 91       	lpm	r21, Z
 4ea:	50 93 17 02 	sts	0x0217, r21	; 0x800217 <timer5_pin_port+0x1>
 4ee:	40 93 16 02 	sts	0x0216, r20	; 0x800216 <timer5_pin_port>
				timer5_pin_mask = pinToBitMask(_pin);
 4f2:	f9 01       	movw	r30, r18
 4f4:	ec 51       	subi	r30, 0x1C	; 28
 4f6:	ff 4f       	sbci	r31, 0xFF	; 255
 4f8:	24 91       	lpm	r18, Z
 4fa:	20 93 27 02 	sts	0x0227, r18	; 0x800227 <timer5_pin_mask>
			break;
		}
	}
	
	return _timer;	
 4fe:	c5 e0       	ldi	r28, 0x05	; 5
 500:	4e c2       	rjmp	.+1180   	; 0x99e <__LOCK_REGION_LENGTH__+0x59e>
	uint32_t ocr = 0;
	int8_t _timer;
	
	_timer = toneBegin(_pin);
	
	if (_timer >= 0)
 502:	cc 23       	and	r28, r28
 504:	0c f4       	brge	.+2      	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
	{
		//1. set the pin as OUTPUT
		pinMode(_pin, OUTPUT);
 506:	4e c2       	rjmp	.+1180   	; 0x9a4 <__LOCK_REGION_LENGTH__+0x5a4>
 508:	61 e0       	ldi	r22, 0x01	; 1
 50a:	8c de       	rcall	.-744    	; 0x224 <pinMode>
		
		//2. if we are using an 8 bit timer, scan through prescalers to find the best fit
		if (_timer == 0 || _timer == 2)
 50c:	cc 23       	and	r28, r28
 50e:	09 f4       	brne	.+2      	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
 510:	cc c1       	rjmp	.+920    	; 0x8aa <__LOCK_REGION_LENGTH__+0x4aa>
 512:	c2 30       	cpi	r28, 0x02	; 2
 514:	09 f0       	breq	.+2      	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
 516:	74 c0       	rjmp	.+232    	; 0x600 <__LOCK_REGION_LENGTH__+0x200>
 518:	8f c1       	rjmp	.+798    	; 0x838 <__LOCK_REGION_LENGTH__+0x438>
				ocr = (F_CPU / (frequency * 2 * 8)) - 1;
				prescalarbits = 0b010; // clk/8 prescaler : For both timers
				
				if (_timer == 2 && ocr > 255)
				{
					ocr = (F_CPU / frequency / 2 / 32) - 1;
 51a:	69 e0       	ldi	r22, 0x09	; 9
 51c:	7d e3       	ldi	r23, 0x3D	; 61
 51e:	80 e0       	ldi	r24, 0x00	; 0
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	a3 01       	movw	r20, r6
 524:	92 01       	movw	r18, r4
 526:	25 d3       	rcall	.+1610   	; 0xb72 <__udivmodsi4>
 528:	69 01       	movw	r12, r18
 52a:	7a 01       	movw	r14, r20
 52c:	81 e0       	ldi	r24, 0x01	; 1
 52e:	c8 1a       	sub	r12, r24
 530:	d1 08       	sbc	r13, r1
 532:	e1 08       	sbc	r14, r1
 534:	f1 08       	sbc	r15, r1
					prescalarbits = 0b011; // clk/32
				}
					
				if(ocr > 255)
 536:	9f ef       	ldi	r25, 0xFF	; 255
 538:	c9 16       	cp	r12, r25
 53a:	d1 04       	cpc	r13, r1
 53c:	e1 04       	cpc	r14, r1
 53e:	f1 04       	cpc	r15, r1
 540:	11 f0       	breq	.+4      	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
 542:	08 f0       	brcs	.+2      	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
 544:	cc c1       	rjmp	.+920    	; 0x8de <__LOCK_REGION_LENGTH__+0x4de>
				prescalarbits = 0b010; // clk/8 prescaler : For both timers
				
				if (_timer == 2 && ocr > 255)
				{
					ocr = (F_CPU / frequency / 2 / 32) - 1;
					prescalarbits = 0b011; // clk/32
 546:	83 e0       	ldi	r24, 0x03	; 3
 548:	54 c0       	rjmp	.+168    	; 0x5f2 <__LOCK_REGION_LENGTH__+0x1f2>
				}
					
				if(ocr > 255)
				{
					ocr = (F_CPU / (frequency * 2 * 64)) - 1;
 54a:	98 01       	movw	r18, r16
 54c:	36 95       	lsr	r19
 54e:	32 2f       	mov	r19, r18
 550:	22 27       	eor	r18, r18
 552:	37 95       	ror	r19
 554:	27 95       	ror	r18
 556:	40 e0       	ldi	r20, 0x00	; 0
 558:	50 e0       	ldi	r21, 0x00	; 0
 55a:	60 e4       	ldi	r22, 0x40	; 64
 55c:	72 e4       	ldi	r23, 0x42	; 66
 55e:	8f e0       	ldi	r24, 0x0F	; 15
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	07 d3       	rcall	.+1550   	; 0xb72 <__udivmodsi4>
 564:	69 01       	movw	r12, r18
 566:	7a 01       	movw	r14, r20
 568:	81 e0       	ldi	r24, 0x01	; 1
 56a:	c8 1a       	sub	r12, r24
 56c:	d1 08       	sbc	r13, r1
 56e:	e1 08       	sbc	r14, r1
 570:	f1 08       	sbc	r15, r1
					prescalarbits = _timer == 0 ? 0b011 : 0b100; // clk/32 for timer 1: clk/64 for timer 2
 572:	83 e0       	ldi	r24, 0x03	; 3
 574:	11 c0       	rjmp	.+34     	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
					
					if (_timer == 2 && ocr > 255)
					{
						ocr = (F_CPU / (frequency * 2 * 128)) - 1;
 576:	30 2f       	mov	r19, r16
 578:	22 27       	eor	r18, r18
 57a:	40 e0       	ldi	r20, 0x00	; 0
 57c:	50 e0       	ldi	r21, 0x00	; 0
 57e:	60 e4       	ldi	r22, 0x40	; 64
 580:	72 e4       	ldi	r23, 0x42	; 66
 582:	8f e0       	ldi	r24, 0x0F	; 15
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	f5 d2       	rcall	.+1514   	; 0xb72 <__udivmodsi4>
 588:	69 01       	movw	r12, r18
 58a:	7a 01       	movw	r14, r20
 58c:	91 e0       	ldi	r25, 0x01	; 1
 58e:	c9 1a       	sub	r12, r25
 590:	d1 08       	sbc	r13, r1
 592:	e1 08       	sbc	r14, r1
 594:	f1 08       	sbc	r15, r1
						prescalarbits = 0b101; //clk/128
 596:	85 e0       	ldi	r24, 0x05	; 5
					}

					if (ocr > 255)
 598:	9f ef       	ldi	r25, 0xFF	; 255
 59a:	c9 16       	cp	r12, r25
 59c:	d1 04       	cpc	r13, r1
 59e:	e1 04       	cpc	r14, r1
 5a0:	f1 04       	cpc	r15, r1
 5a2:	b9 f0       	breq	.+46     	; 0x5d2 <__LOCK_REGION_LENGTH__+0x1d2>
 5a4:	b0 f0       	brcs	.+44     	; 0x5d2 <__LOCK_REGION_LENGTH__+0x1d2>
					{
						ocr = (F_CPU / (frequency * 2 * 256))- 1;
 5a6:	98 01       	movw	r18, r16
 5a8:	32 2f       	mov	r19, r18
 5aa:	22 27       	eor	r18, r18
 5ac:	33 0f       	add	r19, r19
 5ae:	40 e0       	ldi	r20, 0x00	; 0
 5b0:	50 e0       	ldi	r21, 0x00	; 0
 5b2:	60 e4       	ldi	r22, 0x40	; 64
 5b4:	72 e4       	ldi	r23, 0x42	; 66
 5b6:	8f e0       	ldi	r24, 0x0F	; 15
 5b8:	90 e0       	ldi	r25, 0x00	; 0
 5ba:	db d2       	rcall	.+1462   	; 0xb72 <__udivmodsi4>
 5bc:	69 01       	movw	r12, r18
 5be:	7a 01       	movw	r14, r20
 5c0:	81 e0       	ldi	r24, 0x01	; 1
 5c2:	c8 1a       	sub	r12, r24
 5c4:	d1 08       	sbc	r13, r1
 5c6:	e1 08       	sbc	r14, r1
 5c8:	f1 08       	sbc	r15, r1
						prescalarbits = _timer == 0 ? 0b100 : 0b110;  // clk/64 for timer 1: clk/256 for timer 2
 5ca:	cc 23       	and	r28, r28
 5cc:	09 f4       	brne	.+2      	; 0x5d0 <__LOCK_REGION_LENGTH__+0x1d0>
 5ce:	bf c1       	rjmp	.+894    	; 0x94e <__LOCK_REGION_LENGTH__+0x54e>
 5d0:	dd c1       	rjmp	.+954    	; 0x98c <__LOCK_REGION_LENGTH__+0x58c>
			}
				
			
			//2(b) Set the prescaler for 8 bit timers
			      //TIMER 0
			if (_timer == 0)
 5d2:	c1 11       	cpse	r28, r1
 5d4:	0e c0       	rjmp	.+28     	; 0x5f2 <__LOCK_REGION_LENGTH__+0x1f2>
			{
				TCCR0B = (TCCR0B & 0b11111000) | prescalarbits;
 5d6:	95 b5       	in	r25, 0x25	; 37
 5d8:	98 7f       	andi	r25, 0xF8	; 248
 5da:	89 2b       	or	r24, r25
 5dc:	85 bd       	out	0x25, r24	; 37
				TCCR5B = (TCCR5B & 0b11111000) | prescalarbits;
			}
		}
		
		//4. Calculate the toggle count
		if (duration > 0)
 5de:	81 14       	cp	r8, r1
 5e0:	91 04       	cpc	r9, r1
 5e2:	a1 04       	cpc	r10, r1
 5e4:	b1 04       	cpc	r11, r1
 5e6:	09 f0       	breq	.+2      	; 0x5ea <__LOCK_REGION_LENGTH__+0x1ea>
 5e8:	82 c0       	rjmp	.+260    	; 0x6ee <__LOCK_REGION_LENGTH__+0x2ee>
		{
			toggle_count = (2 * frequency * duration)/ 1000;
		}else{
			toggle_count = -1;
 5ea:	2f ef       	ldi	r18, 0xFF	; 255
 5ec:	3f ef       	ldi	r19, 0xFF	; 255
 5ee:	a9 01       	movw	r20, r18
 5f0:	9d c0       	rjmp	.+314    	; 0x72c <__LOCK_REGION_LENGTH__+0x32c>
			{
				TCCR0B = (TCCR0B & 0b11111000) | prescalarbits;
			}
			else   //TIMER 2
			{
				TCCR2B = (TCCR2B & 0b11111000) | prescalarbits;
 5f2:	e1 eb       	ldi	r30, 0xB1	; 177
 5f4:	f0 e0       	ldi	r31, 0x00	; 0
 5f6:	90 81       	ld	r25, Z
 5f8:	98 7f       	andi	r25, 0xF8	; 248
 5fa:	89 2b       	or	r24, r25
 5fc:	80 83       	st	Z, r24
 5fe:	72 c0       	rjmp	.+228    	; 0x6e4 <__LOCK_REGION_LENGTH__+0x2e4>
			}
			
		}else{
			//3. Prescaling for 16 bit timers
			// two choices for the 16 bit timers: clk/1 or clk/64
			ocr = (F_CPU / (frequency * 2)) - 1;
 600:	98 01       	movw	r18, r16
 602:	22 0f       	add	r18, r18
 604:	33 1f       	adc	r19, r19
 606:	40 e0       	ldi	r20, 0x00	; 0
 608:	50 e0       	ldi	r21, 0x00	; 0
 60a:	60 e4       	ldi	r22, 0x40	; 64
 60c:	72 e4       	ldi	r23, 0x42	; 66
 60e:	8f e0       	ldi	r24, 0x0F	; 15
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	af d2       	rcall	.+1374   	; 0xb72 <__udivmodsi4>
 614:	69 01       	movw	r12, r18
 616:	7a 01       	movw	r14, r20
 618:	91 e0       	ldi	r25, 0x01	; 1
 61a:	c9 1a       	sub	r12, r25
 61c:	d1 08       	sbc	r13, r1
 61e:	e1 08       	sbc	r14, r1
 620:	f1 08       	sbc	r15, r1
			
			prescalarbits = 0b001; //clk1
			if(ocr > 0xffff) //>65535
 622:	c1 14       	cp	r12, r1
 624:	d1 04       	cpc	r13, r1
 626:	81 e0       	ldi	r24, 0x01	; 1
 628:	e8 06       	cpc	r14, r24
 62a:	f1 04       	cpc	r15, r1
 62c:	b0 f0       	brcs	.+44     	; 0x65a <__LOCK_REGION_LENGTH__+0x25a>
			{
				ocr = (F_CPU / (frequency * 2 * 64 ))- 1;
 62e:	98 01       	movw	r18, r16
 630:	36 95       	lsr	r19
 632:	32 2f       	mov	r19, r18
 634:	22 27       	eor	r18, r18
 636:	37 95       	ror	r19
 638:	27 95       	ror	r18
 63a:	40 e0       	ldi	r20, 0x00	; 0
 63c:	50 e0       	ldi	r21, 0x00	; 0
 63e:	60 e4       	ldi	r22, 0x40	; 64
 640:	72 e4       	ldi	r23, 0x42	; 66
 642:	8f e0       	ldi	r24, 0x0F	; 15
 644:	90 e0       	ldi	r25, 0x00	; 0
 646:	95 d2       	rcall	.+1322   	; 0xb72 <__udivmodsi4>
 648:	69 01       	movw	r12, r18
 64a:	7a 01       	movw	r14, r20
 64c:	91 e0       	ldi	r25, 0x01	; 1
 64e:	c9 1a       	sub	r12, r25
 650:	d1 08       	sbc	r13, r1
 652:	e1 08       	sbc	r14, r1
 654:	f1 08       	sbc	r15, r1
				prescalarbits = 0b011; //clk/64
 656:	83 e0       	ldi	r24, 0x03	; 3
 658:	01 c0       	rjmp	.+2      	; 0x65c <__LOCK_REGION_LENGTH__+0x25c>
		}else{
			//3. Prescaling for 16 bit timers
			// two choices for the 16 bit timers: clk/1 or clk/64
			ocr = (F_CPU / (frequency * 2)) - 1;
			
			prescalarbits = 0b001; //clk1
 65a:	81 e0       	ldi	r24, 0x01	; 1
				ocr = (F_CPU / (frequency * 2 * 64 ))- 1;
				prescalarbits = 0b011; //clk/64
			}
			
			//3(b) Set the prescaler for 16 bit timers
			if (_timer == 1)
 65c:	c1 30       	cpi	r28, 0x01	; 1
 65e:	79 f4       	brne	.+30     	; 0x67e <__LOCK_REGION_LENGTH__+0x27e>
			{
				TCCR1B = (TCCR1B & 0b11111000) | prescalarbits;
 660:	e1 e8       	ldi	r30, 0x81	; 129
 662:	f0 e0       	ldi	r31, 0x00	; 0
 664:	90 81       	ld	r25, Z
 666:	98 7f       	andi	r25, 0xF8	; 248
 668:	89 2b       	or	r24, r25
 66a:	80 83       	st	Z, r24
				TCCR5B = (TCCR5B & 0b11111000) | prescalarbits;
			}
		}
		
		//4. Calculate the toggle count
		if (duration > 0)
 66c:	81 14       	cp	r8, r1
 66e:	91 04       	cpc	r9, r1
 670:	a1 04       	cpc	r10, r1
 672:	b1 04       	cpc	r11, r1
 674:	e1 f5       	brne	.+120    	; 0x6ee <__LOCK_REGION_LENGTH__+0x2ee>
		{
			toggle_count = (2 * frequency * duration)/ 1000;
		}else{
			toggle_count = -1;
 676:	2f ef       	ldi	r18, 0xFF	; 255
 678:	3f ef       	ldi	r19, 0xFF	; 255
 67a:	a9 01       	movw	r20, r18
 67c:	66 c0       	rjmp	.+204    	; 0x74a <__LOCK_REGION_LENGTH__+0x34a>
			//3(b) Set the prescaler for 16 bit timers
			if (_timer == 1)
			{
				TCCR1B = (TCCR1B & 0b11111000) | prescalarbits;
			}
			else if (_timer == 3)
 67e:	c3 30       	cpi	r28, 0x03	; 3
 680:	79 f4       	brne	.+30     	; 0x6a0 <__LOCK_REGION_LENGTH__+0x2a0>
			{
				TCCR3B = (TCCR3B & 0b11111000) | prescalarbits;
 682:	e1 e9       	ldi	r30, 0x91	; 145
 684:	f0 e0       	ldi	r31, 0x00	; 0
 686:	90 81       	ld	r25, Z
 688:	98 7f       	andi	r25, 0xF8	; 248
 68a:	89 2b       	or	r24, r25
 68c:	80 83       	st	Z, r24
				TCCR5B = (TCCR5B & 0b11111000) | prescalarbits;
			}
		}
		
		//4. Calculate the toggle count
		if (duration > 0)
 68e:	81 14       	cp	r8, r1
 690:	91 04       	cpc	r9, r1
 692:	a1 04       	cpc	r10, r1
 694:	b1 04       	cpc	r11, r1
 696:	59 f5       	brne	.+86     	; 0x6ee <__LOCK_REGION_LENGTH__+0x2ee>
		{
			toggle_count = (2 * frequency * duration)/ 1000;
		}else{
			toggle_count = -1;
 698:	2f ef       	ldi	r18, 0xFF	; 255
 69a:	3f ef       	ldi	r19, 0xFF	; 255
 69c:	a9 01       	movw	r20, r18
 69e:	77 c0       	rjmp	.+238    	; 0x78e <__LOCK_REGION_LENGTH__+0x38e>
			}
			else if (_timer == 3)
			{
				TCCR3B = (TCCR3B & 0b11111000) | prescalarbits;
			}
			else if (_timer == 4)
 6a0:	c4 30       	cpi	r28, 0x04	; 4
 6a2:	79 f4       	brne	.+30     	; 0x6c2 <__LOCK_REGION_LENGTH__+0x2c2>
			{
				TCCR4B = (TCCR4B & 0b11111000) | prescalarbits;
 6a4:	e1 ea       	ldi	r30, 0xA1	; 161
 6a6:	f0 e0       	ldi	r31, 0x00	; 0
 6a8:	90 81       	ld	r25, Z
 6aa:	98 7f       	andi	r25, 0xF8	; 248
 6ac:	89 2b       	or	r24, r25
 6ae:	80 83       	st	Z, r24
				TCCR5B = (TCCR5B & 0b11111000) | prescalarbits;
			}
		}
		
		//4. Calculate the toggle count
		if (duration > 0)
 6b0:	81 14       	cp	r8, r1
 6b2:	91 04       	cpc	r9, r1
 6b4:	a1 04       	cpc	r10, r1
 6b6:	b1 04       	cpc	r11, r1
 6b8:	d1 f4       	brne	.+52     	; 0x6ee <__LOCK_REGION_LENGTH__+0x2ee>
		{
			toggle_count = (2 * frequency * duration)/ 1000;
		}else{
			toggle_count = -1;
 6ba:	2f ef       	ldi	r18, 0xFF	; 255
 6bc:	3f ef       	ldi	r19, 0xFF	; 255
 6be:	a9 01       	movw	r20, r18
 6c0:	78 c0       	rjmp	.+240    	; 0x7b2 <__LOCK_REGION_LENGTH__+0x3b2>
			}
			else if (_timer == 4)
			{
				TCCR4B = (TCCR4B & 0b11111000) | prescalarbits;
			}
			else if (_timer == 5)
 6c2:	c5 30       	cpi	r28, 0x05	; 5
 6c4:	79 f4       	brne	.+30     	; 0x6e4 <__LOCK_REGION_LENGTH__+0x2e4>
			{
				TCCR5B = (TCCR5B & 0b11111000) | prescalarbits;
 6c6:	e1 e2       	ldi	r30, 0x21	; 33
 6c8:	f1 e0       	ldi	r31, 0x01	; 1
 6ca:	90 81       	ld	r25, Z
 6cc:	98 7f       	andi	r25, 0xF8	; 248
 6ce:	89 2b       	or	r24, r25
 6d0:	80 83       	st	Z, r24
			}
		}
		
		//4. Calculate the toggle count
		if (duration > 0)
 6d2:	81 14       	cp	r8, r1
 6d4:	91 04       	cpc	r9, r1
 6d6:	a1 04       	cpc	r10, r1
 6d8:	b1 04       	cpc	r11, r1
 6da:	49 f4       	brne	.+18     	; 0x6ee <__LOCK_REGION_LENGTH__+0x2ee>
		{
			toggle_count = (2 * frequency * duration)/ 1000;
		}else{
			toggle_count = -1;
 6dc:	2f ef       	ldi	r18, 0xFF	; 255
 6de:	3f ef       	ldi	r19, 0xFF	; 255
 6e0:	a9 01       	movw	r20, r18
 6e2:	79 c0       	rjmp	.+242    	; 0x7d6 <__LOCK_REGION_LENGTH__+0x3d6>
				TCCR5B = (TCCR5B & 0b11111000) | prescalarbits;
			}
		}
		
		//4. Calculate the toggle count
		if (duration > 0)
 6e4:	81 14       	cp	r8, r1
 6e6:	91 04       	cpc	r9, r1
 6e8:	a1 04       	cpc	r10, r1
 6ea:	b1 04       	cpc	r11, r1
		{
			toggle_count = (2 * frequency * duration)/ 1000;
 6ec:	61 f0       	breq	.+24     	; 0x706 <__LOCK_REGION_LENGTH__+0x306>
 6ee:	d8 01       	movw	r26, r16
 6f0:	aa 0f       	add	r26, r26
 6f2:	bb 1f       	adc	r27, r27
 6f4:	a5 01       	movw	r20, r10
 6f6:	94 01       	movw	r18, r8
 6f8:	5e d2       	rcall	.+1212   	; 0xbb6 <__muluhisi3>
 6fa:	28 ee       	ldi	r18, 0xE8	; 232
 6fc:	33 e0       	ldi	r19, 0x03	; 3
 6fe:	40 e0       	ldi	r20, 0x00	; 0
 700:	50 e0       	ldi	r21, 0x00	; 0
 702:	37 d2       	rcall	.+1134   	; 0xb72 <__udivmodsi4>
 704:	03 c0       	rjmp	.+6      	; 0x70c <__LOCK_REGION_LENGTH__+0x30c>
		}else{
			toggle_count = -1;
 706:	2f ef       	ldi	r18, 0xFF	; 255
 708:	3f ef       	ldi	r19, 0xFF	; 255
 70a:	a9 01       	movw	r20, r18
		}
		
		//5.Set the OCR for the given timer
		//Set the toggle count and then turn on the interrupts
		switch(_timer)
 70c:	c2 30       	cpi	r28, 0x02	; 2
 70e:	79 f1       	breq	.+94     	; 0x76e <__LOCK_REGION_LENGTH__+0x36e>
 710:	2c f4       	brge	.+10     	; 0x71c <__LOCK_REGION_LENGTH__+0x31c>
 712:	cc 23       	and	r28, r28
 714:	59 f0       	breq	.+22     	; 0x72c <__LOCK_REGION_LENGTH__+0x32c>
 716:	c1 30       	cpi	r28, 0x01	; 1
 718:	c1 f0       	breq	.+48     	; 0x74a <__LOCK_REGION_LENGTH__+0x34a>
 71a:	44 c1       	rjmp	.+648    	; 0x9a4 <__LOCK_REGION_LENGTH__+0x5a4>
 71c:	c4 30       	cpi	r28, 0x04	; 4
 71e:	09 f4       	brne	.+2      	; 0x722 <__LOCK_REGION_LENGTH__+0x322>
 720:	48 c0       	rjmp	.+144    	; 0x7b2 <__LOCK_REGION_LENGTH__+0x3b2>
 722:	ac f1       	brlt	.+106    	; 0x78e <__LOCK_REGION_LENGTH__+0x38e>
 724:	c5 30       	cpi	r28, 0x05	; 5
 726:	09 f4       	brne	.+2      	; 0x72a <__LOCK_REGION_LENGTH__+0x32a>
 728:	56 c0       	rjmp	.+172    	; 0x7d6 <__LOCK_REGION_LENGTH__+0x3d6>
 72a:	3c c1       	rjmp	.+632    	; 0x9a4 <__LOCK_REGION_LENGTH__+0x5a4>
		{
			case 0:
				OCR0A = ocr;
 72c:	c7 bc       	out	0x27, r12	; 39
				timer0_toggle_count = toggle_count;
 72e:	20 93 23 02 	sts	0x0223, r18	; 0x800223 <timer0_toggle_count>
 732:	30 93 24 02 	sts	0x0224, r19	; 0x800224 <timer0_toggle_count+0x1>
 736:	40 93 25 02 	sts	0x0225, r20	; 0x800225 <timer0_toggle_count+0x2>
 73a:	50 93 26 02 	sts	0x0226, r21	; 0x800226 <timer0_toggle_count+0x3>
				bitWrite(TIMSK0, OCIE0A, 1); //turn on interrupt
 73e:	ee e6       	ldi	r30, 0x6E	; 110
 740:	f0 e0       	ldi	r31, 0x00	; 0
 742:	80 81       	ld	r24, Z
 744:	82 60       	ori	r24, 0x02	; 2
 746:	80 83       	st	Z, r24
			break;
 748:	2d c1       	rjmp	.+602    	; 0x9a4 <__LOCK_REGION_LENGTH__+0x5a4>
			
			case 1:
				OCR1A = ocr;
 74a:	d0 92 89 00 	sts	0x0089, r13	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 74e:	c0 92 88 00 	sts	0x0088, r12	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
				timer1_toggle_count = toggle_count;
 752:	20 93 1c 02 	sts	0x021C, r18	; 0x80021c <timer1_toggle_count>
 756:	30 93 1d 02 	sts	0x021D, r19	; 0x80021d <timer1_toggle_count+0x1>
 75a:	40 93 1e 02 	sts	0x021E, r20	; 0x80021e <timer1_toggle_count+0x2>
 75e:	50 93 1f 02 	sts	0x021F, r21	; 0x80021f <timer1_toggle_count+0x3>
				bitWrite(TIMSK1, OCIE1A, 1);
 762:	ef e6       	ldi	r30, 0x6F	; 111
 764:	f0 e0       	ldi	r31, 0x00	; 0
 766:	80 81       	ld	r24, Z
 768:	82 60       	ori	r24, 0x02	; 2
 76a:	80 83       	st	Z, r24
			break;
 76c:	1b c1       	rjmp	.+566    	; 0x9a4 <__LOCK_REGION_LENGTH__+0x5a4>
			
			case 2:
				OCR2A = ocr;
 76e:	c0 92 b3 00 	sts	0x00B3, r12	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
				timer2_toggle_count = toggle_count;
 772:	20 93 28 02 	sts	0x0228, r18	; 0x800228 <timer2_toggle_count>
 776:	30 93 29 02 	sts	0x0229, r19	; 0x800229 <timer2_toggle_count+0x1>
 77a:	40 93 2a 02 	sts	0x022A, r20	; 0x80022a <timer2_toggle_count+0x2>
 77e:	50 93 2b 02 	sts	0x022B, r21	; 0x80022b <timer2_toggle_count+0x3>
				bitWrite(TIMSK2, OCIE2A, 1);
 782:	e0 e7       	ldi	r30, 0x70	; 112
 784:	f0 e0       	ldi	r31, 0x00	; 0
 786:	80 81       	ld	r24, Z
 788:	82 60       	ori	r24, 0x02	; 2
 78a:	80 83       	st	Z, r24
			break;
 78c:	0b c1       	rjmp	.+534    	; 0x9a4 <__LOCK_REGION_LENGTH__+0x5a4>
			
			case 3:
				OCR3A = ocr;
 78e:	d0 92 99 00 	sts	0x0099, r13	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
 792:	c0 92 98 00 	sts	0x0098, r12	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
				timer3_toggle_count = toggle_count;
 796:	20 93 11 02 	sts	0x0211, r18	; 0x800211 <timer3_toggle_count>
 79a:	30 93 12 02 	sts	0x0212, r19	; 0x800212 <timer3_toggle_count+0x1>
 79e:	40 93 13 02 	sts	0x0213, r20	; 0x800213 <timer3_toggle_count+0x2>
 7a2:	50 93 14 02 	sts	0x0214, r21	; 0x800214 <timer3_toggle_count+0x3>
				bitWrite(TIMSK3, OCIE3A, 1);
 7a6:	e1 e7       	ldi	r30, 0x71	; 113
 7a8:	f0 e0       	ldi	r31, 0x00	; 0
 7aa:	80 81       	ld	r24, Z
 7ac:	82 60       	ori	r24, 0x02	; 2
 7ae:	80 83       	st	Z, r24
			break;
 7b0:	f9 c0       	rjmp	.+498    	; 0x9a4 <__LOCK_REGION_LENGTH__+0x5a4>
			
			case 4:
				OCR4A = ocr;
 7b2:	d0 92 a9 00 	sts	0x00A9, r13	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
 7b6:	c0 92 a8 00 	sts	0x00A8, r12	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
				timer4_toggle_count = toggle_count;
 7ba:	20 93 0d 02 	sts	0x020D, r18	; 0x80020d <timer4_toggle_count>
 7be:	30 93 0e 02 	sts	0x020E, r19	; 0x80020e <timer4_toggle_count+0x1>
 7c2:	40 93 0f 02 	sts	0x020F, r20	; 0x80020f <timer4_toggle_count+0x2>
 7c6:	50 93 10 02 	sts	0x0210, r21	; 0x800210 <timer4_toggle_count+0x3>
				bitWrite(TIMSK4, OCIE4A, 1);
 7ca:	e2 e7       	ldi	r30, 0x72	; 114
 7cc:	f0 e0       	ldi	r31, 0x00	; 0
 7ce:	80 81       	ld	r24, Z
 7d0:	82 60       	ori	r24, 0x02	; 2
 7d2:	80 83       	st	Z, r24
			break;
 7d4:	e7 c0       	rjmp	.+462    	; 0x9a4 <__LOCK_REGION_LENGTH__+0x5a4>
			
			case 5:
				OCR5A = ocr;
 7d6:	d0 92 29 01 	sts	0x0129, r13	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
 7da:	c0 92 28 01 	sts	0x0128, r12	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
				timer5_toggle_count = toggle_count;
 7de:	20 93 04 02 	sts	0x0204, r18	; 0x800204 <timer5_toggle_count>
 7e2:	30 93 05 02 	sts	0x0205, r19	; 0x800205 <timer5_toggle_count+0x1>
 7e6:	40 93 06 02 	sts	0x0206, r20	; 0x800206 <timer5_toggle_count+0x2>
 7ea:	50 93 07 02 	sts	0x0207, r21	; 0x800207 <timer5_toggle_count+0x3>
				bitWrite(TIMSK5, OCIE5A, 1);
 7ee:	e3 e7       	ldi	r30, 0x73	; 115
 7f0:	f0 e0       	ldi	r31, 0x00	; 0
 7f2:	80 81       	ld	r24, Z
 7f4:	82 60       	ori	r24, 0x02	; 2
 7f6:	80 83       	st	Z, r24
			break;
		}		
	}
}
 7f8:	d5 c0       	rjmp	.+426    	; 0x9a4 <__LOCK_REGION_LENGTH__+0x5a4>
			ocr = F_CPU / frequency / 2 - 1;
			prescalarbits = 0b001; // clk/1 prescaler (No prescaling) : For both timers
			
			if (ocr > 255) // above prescaler failed
			{
				ocr = (F_CPU / (frequency * 2 * 8)) - 1;
 7fa:	98 01       	movw	r18, r16
 7fc:	22 95       	swap	r18
 7fe:	32 95       	swap	r19
 800:	30 7f       	andi	r19, 0xF0	; 240
 802:	32 27       	eor	r19, r18
 804:	20 7f       	andi	r18, 0xF0	; 240
 806:	32 27       	eor	r19, r18
 808:	40 e0       	ldi	r20, 0x00	; 0
 80a:	50 e0       	ldi	r21, 0x00	; 0
 80c:	60 e4       	ldi	r22, 0x40	; 64
 80e:	72 e4       	ldi	r23, 0x42	; 66
 810:	8f e0       	ldi	r24, 0x0F	; 15
 812:	90 e0       	ldi	r25, 0x00	; 0
 814:	ae d1       	rcall	.+860    	; 0xb72 <__udivmodsi4>
 816:	69 01       	movw	r12, r18
 818:	7a 01       	movw	r14, r20
 81a:	81 e0       	ldi	r24, 0x01	; 1
 81c:	c8 1a       	sub	r12, r24
 81e:	d1 08       	sbc	r13, r1
 820:	e1 08       	sbc	r14, r1
 822:	f1 08       	sbc	r15, r1
				prescalarbits = 0b010; // clk/8 prescaler : For both timers
				
				if (_timer == 2 && ocr > 255)
 824:	9f ef       	ldi	r25, 0xFF	; 255
 826:	c9 16       	cp	r12, r25
 828:	d1 04       	cpc	r13, r1
 82a:	e1 04       	cpc	r14, r1
 82c:	f1 04       	cpc	r15, r1
 82e:	11 f0       	breq	.+4      	; 0x834 <__LOCK_REGION_LENGTH__+0x434>
 830:	08 f0       	brcs	.+2      	; 0x834 <__LOCK_REGION_LENGTH__+0x434>
			prescalarbits = 0b001; // clk/1 prescaler (No prescaling) : For both timers
			
			if (ocr > 255) // above prescaler failed
			{
				ocr = (F_CPU / (frequency * 2 * 8)) - 1;
				prescalarbits = 0b010; // clk/8 prescaler : For both timers
 832:	73 ce       	rjmp	.-794    	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
 834:	82 e0       	ldi	r24, 0x02	; 2
		pinMode(_pin, OUTPUT);
		
		//2. if we are using an 8 bit timer, scan through prescalers to find the best fit
		if (_timer == 0 || _timer == 2)
		{
			ocr = F_CPU / frequency / 2 - 1;
 836:	dd ce       	rjmp	.-582    	; 0x5f2 <__LOCK_REGION_LENGTH__+0x1f2>
 838:	28 01       	movw	r4, r16
 83a:	61 2c       	mov	r6, r1
 83c:	71 2c       	mov	r7, r1
 83e:	60 e2       	ldi	r22, 0x20	; 32
 840:	71 ea       	ldi	r23, 0xA1	; 161
 842:	87 e0       	ldi	r24, 0x07	; 7
 844:	90 e0       	ldi	r25, 0x00	; 0
 846:	a3 01       	movw	r20, r6
 848:	92 01       	movw	r18, r4
 84a:	93 d1       	rcall	.+806    	; 0xb72 <__udivmodsi4>
 84c:	69 01       	movw	r12, r18
 84e:	7a 01       	movw	r14, r20
 850:	81 e0       	ldi	r24, 0x01	; 1
 852:	c8 1a       	sub	r12, r24
 854:	d1 08       	sbc	r13, r1
 856:	e1 08       	sbc	r14, r1
 858:	f1 08       	sbc	r15, r1
			prescalarbits = 0b001; // clk/1 prescaler (No prescaling) : For both timers
			
			if (ocr > 255) // above prescaler failed
 85a:	9f ef       	ldi	r25, 0xFF	; 255
 85c:	c9 16       	cp	r12, r25
 85e:	d1 04       	cpc	r13, r1
 860:	e1 04       	cpc	r14, r1
 862:	f1 04       	cpc	r15, r1
 864:	09 f0       	breq	.+2      	; 0x868 <__LOCK_REGION_LENGTH__+0x468>
 866:	48 f6       	brcc	.-110    	; 0x7fa <__LOCK_REGION_LENGTH__+0x3fa>
		
		//2. if we are using an 8 bit timer, scan through prescalers to find the best fit
		if (_timer == 0 || _timer == 2)
		{
			ocr = F_CPU / frequency / 2 - 1;
			prescalarbits = 0b001; // clk/1 prescaler (No prescaling) : For both timers
 868:	81 e0       	ldi	r24, 0x01	; 1
 86a:	c3 ce       	rjmp	.-634    	; 0x5f2 <__LOCK_REGION_LENGTH__+0x1f2>
			
			if (ocr > 255) // above prescaler failed
			{
				ocr = (F_CPU / (frequency * 2 * 8)) - 1;
 86c:	98 01       	movw	r18, r16
 86e:	22 95       	swap	r18
 870:	32 95       	swap	r19
 872:	30 7f       	andi	r19, 0xF0	; 240
 874:	32 27       	eor	r19, r18
 876:	20 7f       	andi	r18, 0xF0	; 240
 878:	32 27       	eor	r19, r18
 87a:	40 e0       	ldi	r20, 0x00	; 0
 87c:	50 e0       	ldi	r21, 0x00	; 0
 87e:	60 e4       	ldi	r22, 0x40	; 64
 880:	72 e4       	ldi	r23, 0x42	; 66
 882:	8f e0       	ldi	r24, 0x0F	; 15
 884:	90 e0       	ldi	r25, 0x00	; 0
 886:	75 d1       	rcall	.+746    	; 0xb72 <__udivmodsi4>
 888:	69 01       	movw	r12, r18
 88a:	7a 01       	movw	r14, r20
 88c:	81 e0       	ldi	r24, 0x01	; 1
 88e:	c8 1a       	sub	r12, r24
 890:	d1 08       	sbc	r13, r1
 892:	e1 08       	sbc	r14, r1
 894:	f1 08       	sbc	r15, r1
				{
					ocr = (F_CPU / frequency / 2 / 32) - 1;
					prescalarbits = 0b011; // clk/32
				}
					
				if(ocr > 255)
 896:	9f ef       	ldi	r25, 0xFF	; 255
 898:	c9 16       	cp	r12, r25
 89a:	d1 04       	cpc	r13, r1
 89c:	e1 04       	cpc	r14, r1
 89e:	f1 04       	cpc	r15, r1
 8a0:	11 f0       	breq	.+4      	; 0x8a6 <__LOCK_REGION_LENGTH__+0x4a6>
 8a2:	08 f0       	brcs	.+2      	; 0x8a6 <__LOCK_REGION_LENGTH__+0x4a6>
			prescalarbits = 0b001; // clk/1 prescaler (No prescaling) : For both timers
			
			if (ocr > 255) // above prescaler failed
			{
				ocr = (F_CPU / (frequency * 2 * 8)) - 1;
				prescalarbits = 0b010; // clk/8 prescaler : For both timers
 8a4:	52 ce       	rjmp	.-860    	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
 8a6:	82 e0       	ldi	r24, 0x02	; 2
		pinMode(_pin, OUTPUT);
		
		//2. if we are using an 8 bit timer, scan through prescalers to find the best fit
		if (_timer == 0 || _timer == 2)
		{
			ocr = F_CPU / frequency / 2 - 1;
 8a8:	96 ce       	rjmp	.-724    	; 0x5d6 <__LOCK_REGION_LENGTH__+0x1d6>
 8aa:	68 01       	movw	r12, r16
 8ac:	e1 2c       	mov	r14, r1
 8ae:	f1 2c       	mov	r15, r1
 8b0:	60 e2       	ldi	r22, 0x20	; 32
 8b2:	71 ea       	ldi	r23, 0xA1	; 161
 8b4:	87 e0       	ldi	r24, 0x07	; 7
 8b6:	90 e0       	ldi	r25, 0x00	; 0
 8b8:	a7 01       	movw	r20, r14
 8ba:	96 01       	movw	r18, r12
 8bc:	5a d1       	rcall	.+692    	; 0xb72 <__udivmodsi4>
 8be:	69 01       	movw	r12, r18
 8c0:	7a 01       	movw	r14, r20
 8c2:	81 e0       	ldi	r24, 0x01	; 1
 8c4:	c8 1a       	sub	r12, r24
 8c6:	d1 08       	sbc	r13, r1
 8c8:	e1 08       	sbc	r14, r1
 8ca:	f1 08       	sbc	r15, r1
			prescalarbits = 0b001; // clk/1 prescaler (No prescaling) : For both timers
			
			if (ocr > 255) // above prescaler failed
 8cc:	9f ef       	ldi	r25, 0xFF	; 255
 8ce:	c9 16       	cp	r12, r25
 8d0:	d1 04       	cpc	r13, r1
 8d2:	e1 04       	cpc	r14, r1
 8d4:	f1 04       	cpc	r15, r1
 8d6:	09 f0       	breq	.+2      	; 0x8da <__LOCK_REGION_LENGTH__+0x4da>
		
		//2. if we are using an 8 bit timer, scan through prescalers to find the best fit
		if (_timer == 0 || _timer == 2)
		{
			ocr = F_CPU / frequency / 2 - 1;
			prescalarbits = 0b001; // clk/1 prescaler (No prescaling) : For both timers
 8d8:	48 f6       	brcc	.-110    	; 0x86c <__LOCK_REGION_LENGTH__+0x46c>
 8da:	81 e0       	ldi	r24, 0x01	; 1
					prescalarbits = 0b011; // clk/32
				}
					
				if(ocr > 255)
				{
					ocr = (F_CPU / (frequency * 2 * 64)) - 1;
 8dc:	7c ce       	rjmp	.-776    	; 0x5d6 <__LOCK_REGION_LENGTH__+0x1d6>
 8de:	98 01       	movw	r18, r16
 8e0:	36 95       	lsr	r19
 8e2:	32 2f       	mov	r19, r18
 8e4:	22 27       	eor	r18, r18
 8e6:	37 95       	ror	r19
 8e8:	27 95       	ror	r18
 8ea:	40 e0       	ldi	r20, 0x00	; 0
 8ec:	50 e0       	ldi	r21, 0x00	; 0
 8ee:	60 e4       	ldi	r22, 0x40	; 64
 8f0:	72 e4       	ldi	r23, 0x42	; 66
 8f2:	8f e0       	ldi	r24, 0x0F	; 15
 8f4:	90 e0       	ldi	r25, 0x00	; 0
 8f6:	3d d1       	rcall	.+634    	; 0xb72 <__udivmodsi4>
 8f8:	69 01       	movw	r12, r18
 8fa:	7a 01       	movw	r14, r20
 8fc:	81 e0       	ldi	r24, 0x01	; 1
 8fe:	c8 1a       	sub	r12, r24
 900:	d1 08       	sbc	r13, r1
 902:	e1 08       	sbc	r14, r1
 904:	f1 08       	sbc	r15, r1
					prescalarbits = _timer == 0 ? 0b011 : 0b100; // clk/32 for timer 1: clk/64 for timer 2
					
					if (_timer == 2 && ocr > 255)
 906:	9f ef       	ldi	r25, 0xFF	; 255
 908:	c9 16       	cp	r12, r25
 90a:	d1 04       	cpc	r13, r1
 90c:	e1 04       	cpc	r14, r1
 90e:	f1 04       	cpc	r15, r1
 910:	11 f0       	breq	.+4      	; 0x916 <__LOCK_REGION_LENGTH__+0x516>
 912:	08 f0       	brcs	.+2      	; 0x916 <__LOCK_REGION_LENGTH__+0x516>
 914:	30 ce       	rjmp	.-928    	; 0x576 <__LOCK_REGION_LENGTH__+0x176>
 916:	84 e0       	ldi	r24, 0x04	; 4
 918:	6c ce       	rjmp	.-808    	; 0x5f2 <__LOCK_REGION_LENGTH__+0x1f2>
		}
	}
	  
	// search for an unused timer.
	for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
		if (tone_pins[i] == 255) {
 91a:	9f 3f       	cpi	r25, 0xFF	; 255
 91c:	09 f0       	breq	.+2      	; 0x920 <__LOCK_REGION_LENGTH__+0x520>
 91e:	42 c0       	rjmp	.+132    	; 0x9a4 <__LOCK_REGION_LENGTH__+0x5a4>
						ocr = (F_CPU / (frequency * 2 * 256))- 1;
						prescalarbits = _timer == 0 ? 0b100 : 0b110;  // clk/64 for timer 1: clk/256 for timer 2
						if (ocr > 255)
						{
							// can't do any better than /1024
							ocr = (F_CPU / (frequency * 2 * 1024)) - 1;
 920:	fc cc       	rjmp	.-1544   	; 0x31a <tone+0x34>
 922:	98 01       	movw	r18, r16
 924:	32 2f       	mov	r19, r18
 926:	22 27       	eor	r18, r18
 928:	33 0f       	add	r19, r19
 92a:	33 0f       	add	r19, r19
 92c:	33 0f       	add	r19, r19
 92e:	40 e0       	ldi	r20, 0x00	; 0
 930:	50 e0       	ldi	r21, 0x00	; 0
 932:	60 e4       	ldi	r22, 0x40	; 64
 934:	72 e4       	ldi	r23, 0x42	; 66
 936:	8f e0       	ldi	r24, 0x0F	; 15
 938:	90 e0       	ldi	r25, 0x00	; 0
 93a:	1b d1       	rcall	.+566    	; 0xb72 <__udivmodsi4>
 93c:	69 01       	movw	r12, r18
 93e:	7a 01       	movw	r14, r20
 940:	81 e0       	ldi	r24, 0x01	; 1
 942:	c8 1a       	sub	r12, r24
 944:	d1 08       	sbc	r13, r1
 946:	e1 08       	sbc	r14, r1
 948:	f1 08       	sbc	r15, r1
							prescalarbits = _timer == 0 ? 0b101 : 0b111; // clk/128 for timer 1: clk/1024 for timer 2
 94a:	85 e0       	ldi	r24, 0x05	; 5
 94c:	44 ce       	rjmp	.-888    	; 0x5d6 <__LOCK_REGION_LENGTH__+0x1d6>

					if (ocr > 255)
					{
						ocr = (F_CPU / (frequency * 2 * 256))- 1;
						prescalarbits = _timer == 0 ? 0b100 : 0b110;  // clk/64 for timer 1: clk/256 for timer 2
						if (ocr > 255)
 94e:	9f ef       	ldi	r25, 0xFF	; 255
 950:	c9 16       	cp	r12, r25
 952:	d1 04       	cpc	r13, r1
 954:	e1 04       	cpc	r14, r1
 956:	f1 04       	cpc	r15, r1
 958:	09 f0       	breq	.+2      	; 0x95c <__LOCK_REGION_LENGTH__+0x55c>
					}

					if (ocr > 255)
					{
						ocr = (F_CPU / (frequency * 2 * 256))- 1;
						prescalarbits = _timer == 0 ? 0b100 : 0b110;  // clk/64 for timer 1: clk/256 for timer 2
 95a:	18 f7       	brcc	.-58     	; 0x922 <__LOCK_REGION_LENGTH__+0x522>
 95c:	84 e0       	ldi	r24, 0x04	; 4
						if (ocr > 255)
						{
							// can't do any better than /1024
							ocr = (F_CPU / (frequency * 2 * 1024)) - 1;
 95e:	39 ce       	rjmp	.-910    	; 0x5d2 <__LOCK_REGION_LENGTH__+0x1d2>
 960:	98 01       	movw	r18, r16
 962:	32 2f       	mov	r19, r18
 964:	22 27       	eor	r18, r18
 966:	33 0f       	add	r19, r19
 968:	33 0f       	add	r19, r19
 96a:	33 0f       	add	r19, r19
 96c:	40 e0       	ldi	r20, 0x00	; 0
 96e:	50 e0       	ldi	r21, 0x00	; 0
 970:	60 e4       	ldi	r22, 0x40	; 64
 972:	72 e4       	ldi	r23, 0x42	; 66
 974:	8f e0       	ldi	r24, 0x0F	; 15
 976:	90 e0       	ldi	r25, 0x00	; 0
 978:	fc d0       	rcall	.+504    	; 0xb72 <__udivmodsi4>
 97a:	69 01       	movw	r12, r18
 97c:	7a 01       	movw	r14, r20
 97e:	81 e0       	ldi	r24, 0x01	; 1
 980:	c8 1a       	sub	r12, r24
 982:	d1 08       	sbc	r13, r1
 984:	e1 08       	sbc	r14, r1
							prescalarbits = _timer == 0 ? 0b101 : 0b111; // clk/128 for timer 1: clk/1024 for timer 2
 986:	f1 08       	sbc	r15, r1
 988:	87 e0       	ldi	r24, 0x07	; 7

					if (ocr > 255)
					{
						ocr = (F_CPU / (frequency * 2 * 256))- 1;
						prescalarbits = _timer == 0 ? 0b100 : 0b110;  // clk/64 for timer 1: clk/256 for timer 2
						if (ocr > 255)
 98a:	33 ce       	rjmp	.-922    	; 0x5f2 <__LOCK_REGION_LENGTH__+0x1f2>
 98c:	9f ef       	ldi	r25, 0xFF	; 255
 98e:	c9 16       	cp	r12, r25
 990:	d1 04       	cpc	r13, r1
 992:	e1 04       	cpc	r14, r1
 994:	f1 04       	cpc	r15, r1
 996:	09 f0       	breq	.+2      	; 0x99a <__LOCK_REGION_LENGTH__+0x59a>
					}

					if (ocr > 255)
					{
						ocr = (F_CPU / (frequency * 2 * 256))- 1;
						prescalarbits = _timer == 0 ? 0b100 : 0b110;  // clk/64 for timer 1: clk/256 for timer 2
 998:	18 f7       	brcc	.-58     	; 0x960 <__LOCK_REGION_LENGTH__+0x560>
 99a:	86 e0       	ldi	r24, 0x06	; 6
	_timer = toneBegin(_pin);
	
	if (_timer >= 0)
	{
		//1. set the pin as OUTPUT
		pinMode(_pin, OUTPUT);
 99c:	1a ce       	rjmp	.-972    	; 0x5d2 <__LOCK_REGION_LENGTH__+0x1d2>
 99e:	61 e0       	ldi	r22, 0x01	; 1
 9a0:	41 dc       	rcall	.-1918   	; 0x224 <pinMode>
 9a2:	2e ce       	rjmp	.-932    	; 0x600 <__LOCK_REGION_LENGTH__+0x200>
				timer5_toggle_count = toggle_count;
				bitWrite(TIMSK5, OCIE5A, 1);
			break;
		}		
	}
}
 9a4:	cf 91       	pop	r28
 9a6:	1f 91       	pop	r17
 9a8:	0f 91       	pop	r16
 9aa:	ff 90       	pop	r15
 9ac:	ef 90       	pop	r14
 9ae:	df 90       	pop	r13
 9b0:	cf 90       	pop	r12
 9b2:	bf 90       	pop	r11
 9b4:	af 90       	pop	r10
 9b6:	9f 90       	pop	r9
 9b8:	8f 90       	pop	r8
 9ba:	7f 90       	pop	r7
 9bc:	6f 90       	pop	r6
 9be:	5f 90       	pop	r5
 9c0:	4f 90       	pop	r4
 9c2:	08 95       	ret

000009c4 <disableTimer>:
This function only works properly for timer 2 (the only one we use currently).  
for the others, it should end the tone, but won't restore proper PWM functionality for the timer. TODO
*/
void disableTimer(uint8_t _timer)
{
	switch(_timer)
 9c4:	82 30       	cpi	r24, 0x02	; 2
 9c6:	a9 f0       	breq	.+42     	; 0x9f2 <disableTimer+0x2e>
 9c8:	28 f4       	brcc	.+10     	; 0x9d4 <disableTimer+0x10>
 9ca:	88 23       	and	r24, r24
 9cc:	49 f0       	breq	.+18     	; 0x9e0 <disableTimer+0x1c>
 9ce:	81 30       	cpi	r24, 0x01	; 1
 9d0:	51 f0       	breq	.+20     	; 0x9e6 <disableTimer+0x22>
 9d2:	08 95       	ret
 9d4:	84 30       	cpi	r24, 0x04	; 4
 9d6:	21 f1       	breq	.+72     	; 0xa20 <disableTimer+0x5c>
 9d8:	e8 f0       	brcs	.+58     	; 0xa14 <disableTimer+0x50>
 9da:	85 30       	cpi	r24, 0x05	; 5
 9dc:	39 f1       	breq	.+78     	; 0xa2c <disableTimer+0x68>
 9de:	08 95       	ret
	{
		case 0:
		TIMSK0 = 0;
 9e0:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
		break;
 9e4:	08 95       	ret
		case 1:
			bitWrite(TIMSK1, OCIE1A, 0);
 9e6:	ef e6       	ldi	r30, 0x6F	; 111
 9e8:	f0 e0       	ldi	r31, 0x00	; 0
 9ea:	80 81       	ld	r24, Z
 9ec:	8d 7f       	andi	r24, 0xFD	; 253
 9ee:	80 83       	st	Z, r24
		break;
 9f0:	08 95       	ret
		case 2:
			bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
 9f2:	e0 e7       	ldi	r30, 0x70	; 112
 9f4:	f0 e0       	ldi	r31, 0x00	; 0
 9f6:	80 81       	ld	r24, Z
 9f8:	8d 7f       	andi	r24, 0xFD	; 253
 9fa:	80 83       	st	Z, r24
			TCCR2A = (1 << WGM20);		 // restore normal  PWM mode
 9fc:	81 e0       	ldi	r24, 0x01	; 1
 9fe:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
			TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22); //clk/64 prescaler
 a02:	e1 eb       	ldi	r30, 0xB1	; 177
 a04:	f0 e0       	ldi	r31, 0x00	; 0
 a06:	80 81       	ld	r24, Z
 a08:	88 7f       	andi	r24, 0xF8	; 248
 a0a:	84 60       	ori	r24, 0x04	; 4
 a0c:	80 83       	st	Z, r24
			OCR2A = 0;
 a0e:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
		break;
 a12:	08 95       	ret
		case 3:
			bitWrite(TIMSK3, OCIE3A, 0);
 a14:	e1 e7       	ldi	r30, 0x71	; 113
 a16:	f0 e0       	ldi	r31, 0x00	; 0
 a18:	80 81       	ld	r24, Z
 a1a:	8d 7f       	andi	r24, 0xFD	; 253
 a1c:	80 83       	st	Z, r24
		break;
 a1e:	08 95       	ret
		case 4:
			bitWrite(TIMSK4, OCIE4A, 0);
 a20:	e2 e7       	ldi	r30, 0x72	; 114
 a22:	f0 e0       	ldi	r31, 0x00	; 0
 a24:	80 81       	ld	r24, Z
 a26:	8d 7f       	andi	r24, 0xFD	; 253
 a28:	80 83       	st	Z, r24
		break;
 a2a:	08 95       	ret
		case 5:
			bitWrite(TIMSK5, OCIE5A, 0);
 a2c:	e3 e7       	ldi	r30, 0x73	; 115
 a2e:	f0 e0       	ldi	r31, 0x00	; 0
 a30:	80 81       	ld	r24, Z
 a32:	8d 7f       	andi	r24, 0xFD	; 253
 a34:	80 83       	st	Z, r24
 a36:	08 95       	ret

00000a38 <noTone>:
	}
}


void noTone(uint8_t _pin)
{
 a38:	cf 93       	push	r28
 a3a:	c8 2f       	mov	r28, r24
	int8_t _timer = -1;
	  
	for (int i = 0; i < AVAILABLE_TONE_PINS; i++)
	{
		if (tone_pins[i] == _pin) {
 a3c:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 a40:	c8 13       	cpse	r28, r24
 a42:	07 c0       	rjmp	.+14     	; 0xa52 <noTone+0x1a>
			_timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
 a44:	e2 ee       	ldi	r30, 0xE2	; 226
 a46:	f1 e0       	ldi	r31, 0x01	; 1
 a48:	84 91       	lpm	r24, Z
			tone_pins[i] = 255;
 a4a:	9f ef       	ldi	r25, 0xFF	; 255
 a4c:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <__DATA_REGION_ORIGIN__>
			break;
 a50:	01 c0       	rjmp	.+2      	; 0xa54 <noTone+0x1c>
}


void noTone(uint8_t _pin)
{
	int8_t _timer = -1;
 a52:	8f ef       	ldi	r24, 0xFF	; 255
			tone_pins[i] = 255;
			break;
		}
	}
	  
	disableTimer(_timer);
 a54:	b7 df       	rcall	.-146    	; 0x9c4 <disableTimer>
	digitalWrite(_pin, 0);
 a56:	60 e0       	ldi	r22, 0x00	; 0
 a58:	8c 2f       	mov	r24, r28
 a5a:	23 dc       	rcall	.-1978   	; 0x2a2 <digitalWrite>
}
 a5c:	cf 91       	pop	r28
 a5e:	08 95       	ret

00000a60 <__vector_32>:
}
#endif

#ifdef USE_TIMER3
ISR(TIMER3_COMPA_vect)
{
 a60:	1f 92       	push	r1
 a62:	0f 92       	push	r0
 a64:	0f b6       	in	r0, 0x3f	; 63
 a66:	0f 92       	push	r0
 a68:	11 24       	eor	r1, r1
 a6a:	0b b6       	in	r0, 0x3b	; 59
 a6c:	0f 92       	push	r0
 a6e:	2f 93       	push	r18
 a70:	3f 93       	push	r19
 a72:	4f 93       	push	r20
 a74:	5f 93       	push	r21
 a76:	6f 93       	push	r22
 a78:	7f 93       	push	r23
 a7a:	8f 93       	push	r24
 a7c:	9f 93       	push	r25
 a7e:	af 93       	push	r26
 a80:	bf 93       	push	r27
 a82:	ef 93       	push	r30
 a84:	ff 93       	push	r31
	if (timer3_toggle_count != 0)
 a86:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <timer3_toggle_count>
 a8a:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <timer3_toggle_count+0x1>
 a8e:	a0 91 13 02 	lds	r26, 0x0213	; 0x800213 <timer3_toggle_count+0x2>
 a92:	b0 91 14 02 	lds	r27, 0x0214	; 0x800214 <timer3_toggle_count+0x3>
 a96:	89 2b       	or	r24, r25
 a98:	8a 2b       	or	r24, r26
 a9a:	8b 2b       	or	r24, r27
 a9c:	51 f1       	breq	.+84     	; 0xaf2 <__vector_32+0x92>
	{
		// toggle the pin
		*timer3_pin_port ^= timer3_pin_mask;
 a9e:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <timer3_pin_mask>
 aa2:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <timer3_pin_port>
 aa6:	f0 91 0c 02 	lds	r31, 0x020C	; 0x80020c <timer3_pin_port+0x1>
 aaa:	80 81       	ld	r24, Z
 aac:	89 27       	eor	r24, r25
 aae:	80 83       	st	Z, r24

		if (timer3_toggle_count > 0)
 ab0:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <timer3_toggle_count>
 ab4:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <timer3_toggle_count+0x1>
 ab8:	a0 91 13 02 	lds	r26, 0x0213	; 0x800213 <timer3_toggle_count+0x2>
 abc:	b0 91 14 02 	lds	r27, 0x0214	; 0x800214 <timer3_toggle_count+0x3>
 ac0:	18 16       	cp	r1, r24
 ac2:	19 06       	cpc	r1, r25
 ac4:	1a 06       	cpc	r1, r26
 ac6:	1b 06       	cpc	r1, r27
 ac8:	04 f5       	brge	.+64     	; 0xb0a <__vector_32+0xaa>
			timer3_toggle_count--;
 aca:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <timer3_toggle_count>
 ace:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <timer3_toggle_count+0x1>
 ad2:	a0 91 13 02 	lds	r26, 0x0213	; 0x800213 <timer3_toggle_count+0x2>
 ad6:	b0 91 14 02 	lds	r27, 0x0214	; 0x800214 <timer3_toggle_count+0x3>
 ada:	01 97       	sbiw	r24, 0x01	; 1
 adc:	a1 09       	sbc	r26, r1
 ade:	b1 09       	sbc	r27, r1
 ae0:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <timer3_toggle_count>
 ae4:	90 93 12 02 	sts	0x0212, r25	; 0x800212 <timer3_toggle_count+0x1>
 ae8:	a0 93 13 02 	sts	0x0213, r26	; 0x800213 <timer3_toggle_count+0x2>
 aec:	b0 93 14 02 	sts	0x0214, r27	; 0x800214 <timer3_toggle_count+0x3>
 af0:	0c c0       	rjmp	.+24     	; 0xb0a <__vector_32+0xaa>
	}
	else
	{
		disableTimer(3);
 af2:	83 e0       	ldi	r24, 0x03	; 3
 af4:	67 df       	rcall	.-306    	; 0x9c4 <disableTimer>
		*timer3_pin_port &= ~(timer3_pin_mask);  // keep pin low after stop
 af6:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <timer3_pin_mask>
 afa:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <timer3_pin_port>
 afe:	f0 91 0c 02 	lds	r31, 0x020C	; 0x80020c <timer3_pin_port+0x1>
 b02:	90 81       	ld	r25, Z
 b04:	80 95       	com	r24
 b06:	89 23       	and	r24, r25
 b08:	80 83       	st	Z, r24
	}
}
 b0a:	ff 91       	pop	r31
 b0c:	ef 91       	pop	r30
 b0e:	bf 91       	pop	r27
 b10:	af 91       	pop	r26
 b12:	9f 91       	pop	r25
 b14:	8f 91       	pop	r24
 b16:	7f 91       	pop	r23
 b18:	6f 91       	pop	r22
 b1a:	5f 91       	pop	r21
 b1c:	4f 91       	pop	r20
 b1e:	3f 91       	pop	r19
 b20:	2f 91       	pop	r18
 b22:	0f 90       	pop	r0
 b24:	0b be       	out	0x3b, r0	; 59
 b26:	0f 90       	pop	r0
 b28:	0f be       	out	0x3f, r0	; 63
 b2a:	0f 90       	pop	r0
 b2c:	1f 90       	pop	r1
 b2e:	18 95       	reti

00000b30 <main>:
};

int main(void)
{
    /* Replace with your application code */
	pinMode(Pin_PK0, OUTPUT);
 b30:	61 e0       	ldi	r22, 0x01	; 1
 b32:	89 e5       	ldi	r24, 0x59	; 89
 b34:	77 db       	rcall	.-2322   	; 0x224 <pinMode>
	pinMode(Pin_PK3, OUTPUT);
 b36:	61 e0       	ldi	r22, 0x01	; 1
 b38:	86 e5       	ldi	r24, 0x56	; 86
 b3a:	74 db       	rcall	.-2328   	; 0x224 <pinMode>
	pinMode(Pin_PJ2, INPUT);
 b3c:	60 e0       	ldi	r22, 0x00	; 0
 b3e:	81 e4       	ldi	r24, 0x41	; 65
 b40:	71 db       	rcall	.-2334   	; 0x224 <pinMode>
 b42:	c8 e0       	ldi	r28, 0x08	; 8
 b44:	d0 e0       	ldi	r29, 0x00	; 0
// 		noTone(Pin_PE3);
// 
// 	}
	  for(int i=0; i<8; i++)
	  {
		  tone(Pin_PE3,432, 300);
 b46:	2c e2       	ldi	r18, 0x2C	; 44
 b48:	31 e0       	ldi	r19, 0x01	; 1
 b4a:	40 e0       	ldi	r20, 0x00	; 0
 b4c:	50 e0       	ldi	r21, 0x00	; 0
 b4e:	60 eb       	ldi	r22, 0xB0	; 176
 b50:	71 e0       	ldi	r23, 0x01	; 1
 b52:	85 e0       	ldi	r24, 0x05	; 5
 b54:	c8 db       	rcall	.-2160   	; 0x2e6 <tone>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 b56:	2f e6       	ldi	r18, 0x6F	; 111
 b58:	81 e1       	ldi	r24, 0x11	; 17
 b5a:	91 e0       	ldi	r25, 0x01	; 1
 b5c:	21 50       	subi	r18, 0x01	; 1
 b5e:	80 40       	sbci	r24, 0x00	; 0
 b60:	90 40       	sbci	r25, 0x00	; 0
 b62:	e1 f7       	brne	.-8      	; 0xb5c <main+0x2c>
 b64:	00 c0       	rjmp	.+0      	; 0xb66 <main+0x36>
		  _delay_ms(350);
		  noTone(Pin_PE3);
 b66:	00 00       	nop
 b68:	85 e0       	ldi	r24, 0x05	; 5
 b6a:	66 df       	rcall	.-308    	; 0xa38 <noTone>
 b6c:	21 97       	sbiw	r28, 0x01	; 1
// 		
// 		// stop the tone playing:
// 		noTone(Pin_PE3);
// 
// 	}
	  for(int i=0; i<8; i++)
 b6e:	59 f7       	brne	.-42     	; 0xb46 <main+0x16>
 b70:	ff cf       	rjmp	.-2      	; 0xb70 <main+0x40>

00000b72 <__udivmodsi4>:
 b72:	a1 e2       	ldi	r26, 0x21	; 33
 b74:	1a 2e       	mov	r1, r26
 b76:	aa 1b       	sub	r26, r26
 b78:	bb 1b       	sub	r27, r27
 b7a:	fd 01       	movw	r30, r26
 b7c:	0d c0       	rjmp	.+26     	; 0xb98 <__udivmodsi4_ep>

00000b7e <__udivmodsi4_loop>:
 b7e:	aa 1f       	adc	r26, r26
 b80:	bb 1f       	adc	r27, r27
 b82:	ee 1f       	adc	r30, r30
 b84:	ff 1f       	adc	r31, r31
 b86:	a2 17       	cp	r26, r18
 b88:	b3 07       	cpc	r27, r19
 b8a:	e4 07       	cpc	r30, r20
 b8c:	f5 07       	cpc	r31, r21
 b8e:	20 f0       	brcs	.+8      	; 0xb98 <__udivmodsi4_ep>
 b90:	a2 1b       	sub	r26, r18
 b92:	b3 0b       	sbc	r27, r19
 b94:	e4 0b       	sbc	r30, r20
 b96:	f5 0b       	sbc	r31, r21

00000b98 <__udivmodsi4_ep>:
 b98:	66 1f       	adc	r22, r22
 b9a:	77 1f       	adc	r23, r23
 b9c:	88 1f       	adc	r24, r24
 b9e:	99 1f       	adc	r25, r25
 ba0:	1a 94       	dec	r1
 ba2:	69 f7       	brne	.-38     	; 0xb7e <__udivmodsi4_loop>
 ba4:	60 95       	com	r22
 ba6:	70 95       	com	r23
 ba8:	80 95       	com	r24
 baa:	90 95       	com	r25
 bac:	9b 01       	movw	r18, r22
 bae:	ac 01       	movw	r20, r24
 bb0:	bd 01       	movw	r22, r26
 bb2:	cf 01       	movw	r24, r30
 bb4:	08 95       	ret

00000bb6 <__muluhisi3>:
 bb6:	09 d0       	rcall	.+18     	; 0xbca <__umulhisi3>
 bb8:	a5 9f       	mul	r26, r21
 bba:	90 0d       	add	r25, r0
 bbc:	b4 9f       	mul	r27, r20
 bbe:	90 0d       	add	r25, r0
 bc0:	a4 9f       	mul	r26, r20
 bc2:	80 0d       	add	r24, r0
 bc4:	91 1d       	adc	r25, r1
 bc6:	11 24       	eor	r1, r1
 bc8:	08 95       	ret

00000bca <__umulhisi3>:
 bca:	a2 9f       	mul	r26, r18
 bcc:	b0 01       	movw	r22, r0
 bce:	b3 9f       	mul	r27, r19
 bd0:	c0 01       	movw	r24, r0
 bd2:	a3 9f       	mul	r26, r19
 bd4:	70 0d       	add	r23, r0
 bd6:	81 1d       	adc	r24, r1
 bd8:	11 24       	eor	r1, r1
 bda:	91 1d       	adc	r25, r1
 bdc:	b2 9f       	mul	r27, r18
 bde:	70 0d       	add	r23, r0
 be0:	81 1d       	adc	r24, r1
 be2:	11 24       	eor	r1, r1
 be4:	91 1d       	adc	r25, r1
 be6:	08 95       	ret

00000be8 <_exit>:
 be8:	f8 94       	cli

00000bea <__stop_program>:
 bea:	ff cf       	rjmp	.-2      	; 0xbea <__stop_program>
