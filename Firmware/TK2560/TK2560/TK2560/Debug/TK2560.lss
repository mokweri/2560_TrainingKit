
TK2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000064  00800200  000025d4  00002668  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000025d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000019d  00800264  00800264  000026cc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000026cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000026fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000510  00000000  00000000  0000273c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005cfd  00000000  00000000  00002c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001f28  00000000  00000000  00008949  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000030df  00000000  00000000  0000a871  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001000  00000000  00000000  0000d950  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000161a  00000000  00000000  0000e950  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003fd7  00000000  00000000  0000ff6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004b8  00000000  00000000  00013f41  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	3d c1       	rjmp	.+634    	; 0x27c <__ctors_end>
       2:	00 00       	nop
       4:	c6 c5       	rjmp	.+2956   	; 0xb92 <__vector_1>
       6:	00 00       	nop
       8:	ef c5       	rjmp	.+3038   	; 0xbe8 <__vector_2>
       a:	00 00       	nop
       c:	18 c6       	rjmp	.+3120   	; 0xc3e <__vector_3>
       e:	00 00       	nop
      10:	41 c6       	rjmp	.+3202   	; 0xc94 <__vector_4>
      12:	00 00       	nop
      14:	6a c6       	rjmp	.+3284   	; 0xcea <__vector_5>
      16:	00 00       	nop
      18:	93 c6       	rjmp	.+3366   	; 0xd40 <__vector_6>
      1a:	00 00       	nop
      1c:	bc c6       	rjmp	.+3448   	; 0xd96 <__vector_7>
      1e:	00 00       	nop
      20:	e5 c6       	rjmp	.+3530   	; 0xdec <__vector_8>
      22:	00 00       	nop
      24:	0c 94 70 08 	jmp	0x10e0	; 0x10e0 <__vector_9>
      28:	0c 94 e8 08 	jmp	0x11d0	; 0x11d0 <__vector_10>
      2c:	0c 94 65 09 	jmp	0x12ca	; 0x12ca <__vector_11>
      30:	46 c1       	rjmp	.+652    	; 0x2be <__bad_interrupt>
      32:	00 00       	nop
      34:	44 c1       	rjmp	.+648    	; 0x2be <__bad_interrupt>
      36:	00 00       	nop
      38:	42 c1       	rjmp	.+644    	; 0x2be <__bad_interrupt>
      3a:	00 00       	nop
      3c:	40 c1       	rjmp	.+640    	; 0x2be <__bad_interrupt>
      3e:	00 00       	nop
      40:	3e c1       	rjmp	.+636    	; 0x2be <__bad_interrupt>
      42:	00 00       	nop
      44:	3c c1       	rjmp	.+632    	; 0x2be <__bad_interrupt>
      46:	00 00       	nop
      48:	3a c1       	rjmp	.+628    	; 0x2be <__bad_interrupt>
      4a:	00 00       	nop
      4c:	38 c1       	rjmp	.+624    	; 0x2be <__bad_interrupt>
      4e:	00 00       	nop
      50:	36 c1       	rjmp	.+620    	; 0x2be <__bad_interrupt>
      52:	00 00       	nop
      54:	34 c1       	rjmp	.+616    	; 0x2be <__bad_interrupt>
      56:	00 00       	nop
      58:	32 c1       	rjmp	.+612    	; 0x2be <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 c7 0b 	jmp	0x178e	; 0x178e <__vector_23>
      60:	2e c1       	rjmp	.+604    	; 0x2be <__bad_interrupt>
      62:	00 00       	nop
      64:	ca c4       	rjmp	.+2452   	; 0x9fa <__vector_25>
      66:	00 00       	nop
      68:	ef c4       	rjmp	.+2526   	; 0xa48 <__vector_26>
      6a:	00 00       	nop
      6c:	28 c1       	rjmp	.+592    	; 0x2be <__bad_interrupt>
      6e:	00 00       	nop
      70:	26 c1       	rjmp	.+588    	; 0x2be <__bad_interrupt>
      72:	00 00       	nop
      74:	24 c1       	rjmp	.+584    	; 0x2be <__bad_interrupt>
      76:	00 00       	nop
      78:	22 c1       	rjmp	.+580    	; 0x2be <__bad_interrupt>
      7a:	00 00       	nop
      7c:	20 c1       	rjmp	.+576    	; 0x2be <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 cf 0f 	jmp	0x1f9e	; 0x1f9e <__vector_32>
      84:	1c c1       	rjmp	.+568    	; 0x2be <__bad_interrupt>
      86:	00 00       	nop
      88:	1a c1       	rjmp	.+564    	; 0x2be <__bad_interrupt>
      8a:	00 00       	nop
      8c:	18 c1       	rjmp	.+560    	; 0x2be <__bad_interrupt>
      8e:	00 00       	nop
      90:	16 c1       	rjmp	.+556    	; 0x2be <__bad_interrupt>
      92:	00 00       	nop
      94:	14 c1       	rjmp	.+552    	; 0x2be <__bad_interrupt>
      96:	00 00       	nop
      98:	12 c1       	rjmp	.+548    	; 0x2be <__bad_interrupt>
      9a:	00 00       	nop
      9c:	10 c1       	rjmp	.+544    	; 0x2be <__bad_interrupt>
      9e:	00 00       	nop
      a0:	0e c1       	rjmp	.+540    	; 0x2be <__bad_interrupt>
      a2:	00 00       	nop
      a4:	0c c1       	rjmp	.+536    	; 0x2be <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0a c1       	rjmp	.+532    	; 0x2be <__bad_interrupt>
      aa:	00 00       	nop
      ac:	08 c1       	rjmp	.+528    	; 0x2be <__bad_interrupt>
      ae:	00 00       	nop
      b0:	06 c1       	rjmp	.+524    	; 0x2be <__bad_interrupt>
      b2:	00 00       	nop
      b4:	04 c1       	rjmp	.+520    	; 0x2be <__bad_interrupt>
      b6:	00 00       	nop
      b8:	02 c1       	rjmp	.+516    	; 0x2be <__bad_interrupt>
      ba:	00 00       	nop
      bc:	00 c1       	rjmp	.+512    	; 0x2be <__bad_interrupt>
      be:	00 00       	nop
      c0:	fe c0       	rjmp	.+508    	; 0x2be <__bad_interrupt>
      c2:	00 00       	nop
      c4:	fc c0       	rjmp	.+504    	; 0x2be <__bad_interrupt>
      c6:	00 00       	nop
      c8:	fa c0       	rjmp	.+500    	; 0x2be <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 f7 0a 	jmp	0x15ee	; 0x15ee <__vector_51>
      d0:	0c 94 1e 0b 	jmp	0x163c	; 0x163c <__vector_52>
      d4:	f4 c0       	rjmp	.+488    	; 0x2be <__bad_interrupt>
      d6:	00 00       	nop
      d8:	f2 c0       	rjmp	.+484    	; 0x2be <__bad_interrupt>
      da:	00 00       	nop
      dc:	f0 c0       	rjmp	.+480    	; 0x2be <__bad_interrupt>
      de:	00 00       	nop
      e0:	ee c0       	rjmp	.+476    	; 0x2be <__bad_interrupt>
      e2:	00 00       	nop
      e4:	63 05       	cpc	r22, r3
      e6:	6b 05       	cpc	r22, r11
      e8:	77 05       	cpc	r23, r7
      ea:	85 05       	cpc	r24, r5
      ec:	96 05       	cpc	r25, r6
      ee:	9e 05       	cpc	r25, r14
      f0:	aa 05       	cpc	r26, r10
      f2:	b8 05       	cpc	r27, r8
      f4:	15 0a       	sbc	r1, r21
      f6:	1a 0a       	sbc	r1, r26
      f8:	1f 0a       	sbc	r1, r31
      fa:	29 0a       	sbc	r2, r25
      fc:	33 0a       	sbc	r3, r19
      fe:	a7 0a       	sbc	r10, r23
     100:	3d 0a       	sbc	r3, r29
     102:	45 0a       	sbc	r4, r21
     104:	4d 0a       	sbc	r4, r29
     106:	57 0a       	sbc	r5, r23
     108:	61 0a       	sbc	r6, r17
     10a:	6b 0a       	sbc	r6, r27
     10c:	75 0a       	sbc	r7, r21
     10e:	7f 0a       	sbc	r7, r31
     110:	a7 0a       	sbc	r10, r23
     112:	89 0a       	sbc	r8, r25
     114:	93 0a       	sbc	r9, r19
     116:	9d 0a       	sbc	r9, r29

00000118 <__trampolines_end>:
     118:	00 02       	muls	r16, r16
     11a:	00 00       	nop
     11c:	00 09       	sbc	r16, r0
     11e:	0a 0b       	sbc	r16, r26
     120:	00 00       	nop
     122:	00 00       	nop
     124:	00 00       	nop
     126:	00 0c       	add	r0, r0
     128:	0d 0e       	add	r0, r29
     12a:	08 00       	.word	0x0008	; ????
     12c:	00 00       	nop
     12e:	00 07       	cpc	r16, r16
     130:	03 04       	cpc	r0, r3
     132:	01 00       	.word	0x0001	; ????
	...
     13c:	00 00       	nop
     13e:	10 11       	cpse	r17, r0
     140:	12 00       	.word	0x0012	; ????
	...

0000017d <pin_to_bit_mask_PGM>:
     17d:	00 20 01 02 04 08 10 20 40 80 00 00 01 02 04 08     . ..... @.......
     18d:	10 20 40 01 02 04 08 10 20 40 80 80 08 10 00 00     . @..... @......
     19d:	00 00 00 01 02 04 08 10 20 40 80 01 02 04 08 10     ........ @......
     1ad:	20 40 80 01 02 01 02 04 08 10 20 40 80 00 00 01      @........ @....
     1bd:	02 04 08 10 20 40 04 80 40 20 10 08 04 02 01 80     .... @..@ ......
     1cd:	00 00 80 40 20 10 08 04 02 01 80 40 20 10 08 04     ...@ ......@ ...
     1dd:	02 01 00 00 00                                      .....

000001e2 <pin_to_port_PGM>:
     1e2:	00 07 05 05 05 05 05 05 05 05 00 00 08 08 08 08     ................
     1f2:	08 08 08 02 02 02 02 02 02 02 02 08 07 07 00 00     ................
     202:	00 00 00 0c 0c 0c 0c 0c 0c 0c 0c 04 04 04 04 04     ................
     212:	04 04 04 07 07 03 03 03 03 03 03 03 03 00 00 0a     ................
     222:	0a 0a 0a 0a 0a 0a 07 01 01 01 01 01 01 01 01 0a     ................
     232:	00 00 0b 0b 0b 0b 0b 0b 0b 0b 06 06 06 06 06 06     ................
     242:	06 06 00 00 00                                      .....

00000247 <port_to_output_PGM>:
     247:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     257:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000261 <port_to_ddr_PGM>:
     261:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     271:	01 01 00 00 04 01 07 01 0a 01                       ..........

0000027b <tone_pin_to_timer_PGM>:
     27b:	03                                                  .

0000027c <__ctors_end>:
     27c:	11 24       	eor	r1, r1
     27e:	1f be       	out	0x3f, r1	; 63
     280:	cf ef       	ldi	r28, 0xFF	; 255
     282:	d1 e2       	ldi	r29, 0x21	; 33
     284:	de bf       	out	0x3e, r29	; 62
     286:	cd bf       	out	0x3d, r28	; 61
     288:	00 e0       	ldi	r16, 0x00	; 0
     28a:	0c bf       	out	0x3c, r16	; 60

0000028c <__do_copy_data>:
     28c:	12 e0       	ldi	r17, 0x02	; 2
     28e:	a0 e0       	ldi	r26, 0x00	; 0
     290:	b2 e0       	ldi	r27, 0x02	; 2
     292:	e4 ed       	ldi	r30, 0xD4	; 212
     294:	f5 e2       	ldi	r31, 0x25	; 37
     296:	00 e0       	ldi	r16, 0x00	; 0
     298:	0b bf       	out	0x3b, r16	; 59
     29a:	02 c0       	rjmp	.+4      	; 0x2a0 <__do_copy_data+0x14>
     29c:	07 90       	elpm	r0, Z+
     29e:	0d 92       	st	X+, r0
     2a0:	a4 36       	cpi	r26, 0x64	; 100
     2a2:	b1 07       	cpc	r27, r17
     2a4:	d9 f7       	brne	.-10     	; 0x29c <__do_copy_data+0x10>

000002a6 <__do_clear_bss>:
     2a6:	24 e0       	ldi	r18, 0x04	; 4
     2a8:	a4 e6       	ldi	r26, 0x64	; 100
     2aa:	b2 e0       	ldi	r27, 0x02	; 2
     2ac:	01 c0       	rjmp	.+2      	; 0x2b0 <.do_clear_bss_start>

000002ae <.do_clear_bss_loop>:
     2ae:	1d 92       	st	X+, r1

000002b0 <.do_clear_bss_start>:
     2b0:	a1 30       	cpi	r26, 0x01	; 1
     2b2:	b2 07       	cpc	r27, r18
     2b4:	e1 f7       	brne	.-8      	; 0x2ae <.do_clear_bss_loop>
     2b6:	0e 94 72 10 	call	0x20e4	; 0x20e4 <main>
     2ba:	0c 94 e8 12 	jmp	0x25d0	; 0x25d0 <_exit>

000002be <__bad_interrupt>:
     2be:	a0 ce       	rjmp	.-704    	; 0x0 <__vectors>

000002c0 <pulseEnable>:
	location &= 0x7; // we only have 8 locations 0-7
	command(LCD_SETCGRAMADDR | (location << 3));
	for (int i=0; i<8; i++) {
		write(charmap[i]);
	}
}
     2c0:	15 98       	cbi	0x02, 5	; 2
     2c2:	85 e0       	ldi	r24, 0x05	; 5
     2c4:	8a 95       	dec	r24
     2c6:	f1 f7       	brne	.-4      	; 0x2c4 <pulseEnable+0x4>
     2c8:	00 00       	nop
     2ca:	15 9a       	sbi	0x02, 5	; 2
     2cc:	95 e0       	ldi	r25, 0x05	; 5
     2ce:	9a 95       	dec	r25
     2d0:	f1 f7       	brne	.-4      	; 0x2ce <pulseEnable+0xe>
     2d2:	00 00       	nop
     2d4:	15 98       	cbi	0x02, 5	; 2
     2d6:	8f e8       	ldi	r24, 0x8F	; 143
     2d8:	91 e0       	ldi	r25, 0x01	; 1
     2da:	01 97       	sbiw	r24, 0x01	; 1
     2dc:	f1 f7       	brne	.-4      	; 0x2da <pulseEnable+0x1a>
     2de:	00 c0       	rjmp	.+0      	; 0x2e0 <pulseEnable+0x20>
     2e0:	00 00       	nop
     2e2:	08 95       	ret

000002e4 <write4bits>:
     2e4:	cf 93       	push	r28
     2e6:	df 93       	push	r29
     2e8:	ec e7       	ldi	r30, 0x7C	; 124
     2ea:	f2 e0       	ldi	r31, 0x02	; 2
     2ec:	20 e0       	ldi	r18, 0x00	; 0
     2ee:	30 e0       	ldi	r19, 0x00	; 0
     2f0:	a8 2f       	mov	r26, r24
     2f2:	b0 e0       	ldi	r27, 0x00	; 0
     2f4:	c1 e0       	ldi	r28, 0x01	; 1
     2f6:	d0 e0       	ldi	r29, 0x00	; 0
     2f8:	ad 01       	movw	r20, r26
     2fa:	02 2e       	mov	r0, r18
     2fc:	02 c0       	rjmp	.+4      	; 0x302 <write4bits+0x1e>
     2fe:	55 95       	asr	r21
     300:	47 95       	ror	r20
     302:	0a 94       	dec	r0
     304:	e2 f7       	brpl	.-8      	; 0x2fe <write4bits+0x1a>
     306:	40 ff       	sbrs	r20, 0
     308:	0b c0       	rjmp	.+22     	; 0x320 <write4bits+0x3c>
     30a:	82 b1       	in	r24, 0x02	; 2
     30c:	ae 01       	movw	r20, r28
     30e:	00 80       	ld	r0, Z
     310:	02 c0       	rjmp	.+4      	; 0x316 <write4bits+0x32>
     312:	44 0f       	add	r20, r20
     314:	55 1f       	adc	r21, r21
     316:	0a 94       	dec	r0
     318:	e2 f7       	brpl	.-8      	; 0x312 <write4bits+0x2e>
     31a:	48 2b       	or	r20, r24
     31c:	42 b9       	out	0x02, r20	; 2
     31e:	0c c0       	rjmp	.+24     	; 0x338 <write4bits+0x54>
     320:	42 b1       	in	r20, 0x02	; 2
     322:	be 01       	movw	r22, r28
     324:	00 80       	ld	r0, Z
     326:	02 c0       	rjmp	.+4      	; 0x32c <write4bits+0x48>
     328:	66 0f       	add	r22, r22
     32a:	77 1f       	adc	r23, r23
     32c:	0a 94       	dec	r0
     32e:	e2 f7       	brpl	.-8      	; 0x328 <write4bits+0x44>
     330:	96 2f       	mov	r25, r22
     332:	90 95       	com	r25
     334:	94 23       	and	r25, r20
     336:	92 b9       	out	0x02, r25	; 2
     338:	2f 5f       	subi	r18, 0xFF	; 255
     33a:	3f 4f       	sbci	r19, 0xFF	; 255
     33c:	31 96       	adiw	r30, 0x01	; 1
     33e:	24 30       	cpi	r18, 0x04	; 4
     340:	31 05       	cpc	r19, r1
     342:	d1 f6       	brne	.-76     	; 0x2f8 <write4bits+0x14>
     344:	bd df       	rcall	.-134    	; 0x2c0 <pulseEnable>
     346:	df 91       	pop	r29
     348:	cf 91       	pop	r28
     34a:	08 95       	ret

0000034c <write8bits>:
     34c:	86 95       	lsr	r24
     34e:	81 70       	andi	r24, 0x01	; 1
     350:	ec e7       	ldi	r30, 0x7C	; 124
     352:	f2 e0       	ldi	r31, 0x02	; 2
     354:	64 e8       	ldi	r22, 0x84	; 132
     356:	72 e0       	ldi	r23, 0x02	; 2
     358:	a1 e0       	ldi	r26, 0x01	; 1
     35a:	b0 e0       	ldi	r27, 0x00	; 0
     35c:	88 23       	and	r24, r24
     35e:	59 f0       	breq	.+22     	; 0x376 <write8bits+0x2a>
     360:	92 b1       	in	r25, 0x02	; 2
     362:	9d 01       	movw	r18, r26
     364:	00 80       	ld	r0, Z
     366:	02 c0       	rjmp	.+4      	; 0x36c <write8bits+0x20>
     368:	22 0f       	add	r18, r18
     36a:	33 1f       	adc	r19, r19
     36c:	0a 94       	dec	r0
     36e:	e2 f7       	brpl	.-8      	; 0x368 <write8bits+0x1c>
     370:	29 2b       	or	r18, r25
     372:	22 b9       	out	0x02, r18	; 2
     374:	0c c0       	rjmp	.+24     	; 0x38e <write8bits+0x42>
     376:	22 b1       	in	r18, 0x02	; 2
     378:	ad 01       	movw	r20, r26
     37a:	00 80       	ld	r0, Z
     37c:	02 c0       	rjmp	.+4      	; 0x382 <write8bits+0x36>
     37e:	44 0f       	add	r20, r20
     380:	55 1f       	adc	r21, r21
     382:	0a 94       	dec	r0
     384:	e2 f7       	brpl	.-8      	; 0x37e <write8bits+0x32>
     386:	94 2f       	mov	r25, r20
     388:	90 95       	com	r25
     38a:	92 23       	and	r25, r18
     38c:	92 b9       	out	0x02, r25	; 2
     38e:	31 96       	adiw	r30, 0x01	; 1
     390:	e6 17       	cp	r30, r22
     392:	f7 07       	cpc	r31, r23
     394:	19 f7       	brne	.-58     	; 0x35c <write8bits+0x10>
     396:	94 cf       	rjmp	.-216    	; 0x2c0 <pulseEnable>
     398:	08 95       	ret

0000039a <send>:
     39a:	cf 93       	push	r28
     39c:	c8 2f       	mov	r28, r24
     39e:	66 23       	and	r22, r22
     3a0:	11 f0       	breq	.+4      	; 0x3a6 <send+0xc>
     3a2:	17 9a       	sbi	0x02, 7	; 2
     3a4:	01 c0       	rjmp	.+2      	; 0x3a8 <send+0xe>
     3a6:	17 98       	cbi	0x02, 7	; 2
     3a8:	16 98       	cbi	0x02, 6	; 2
     3aa:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <_displayfunction>
     3ae:	84 ff       	sbrs	r24, 4
     3b0:	03 c0       	rjmp	.+6      	; 0x3b8 <send+0x1e>
     3b2:	8c 2f       	mov	r24, r28
     3b4:	cb df       	rcall	.-106    	; 0x34c <write8bits>
     3b6:	06 c0       	rjmp	.+12     	; 0x3c4 <send+0x2a>
     3b8:	8c 2f       	mov	r24, r28
     3ba:	82 95       	swap	r24
     3bc:	8f 70       	andi	r24, 0x0F	; 15
     3be:	92 df       	rcall	.-220    	; 0x2e4 <write4bits>
     3c0:	8c 2f       	mov	r24, r28
     3c2:	90 df       	rcall	.-224    	; 0x2e4 <write4bits>
     3c4:	cf 91       	pop	r28
     3c6:	08 95       	ret

000003c8 <command>:
     3c8:	60 e0       	ldi	r22, 0x00	; 0
     3ca:	e7 cf       	rjmp	.-50     	; 0x39a <send>
     3cc:	08 95       	ret

000003ce <lcd_clear>:
     3ce:	81 e0       	ldi	r24, 0x01	; 1
     3d0:	fb df       	rcall	.-10     	; 0x3c8 <command>
     3d2:	8f e3       	ldi	r24, 0x3F	; 63
     3d4:	9f e1       	ldi	r25, 0x1F	; 31
     3d6:	01 97       	sbiw	r24, 0x01	; 1
     3d8:	f1 f7       	brne	.-4      	; 0x3d6 <lcd_clear+0x8>
     3da:	00 c0       	rjmp	.+0      	; 0x3dc <lcd_clear+0xe>
     3dc:	00 00       	nop
     3de:	08 95       	ret

000003e0 <lcd_setCursor>:
     3e0:	e6 e7       	ldi	r30, 0x76	; 118
     3e2:	f2 e0       	ldi	r31, 0x02	; 2
     3e4:	10 82       	st	Z, r1
     3e6:	90 e4       	ldi	r25, 0x40	; 64
     3e8:	91 83       	std	Z+1, r25	; 0x01
     3ea:	94 e1       	ldi	r25, 0x14	; 20
     3ec:	92 83       	std	Z+2, r25	; 0x02
     3ee:	94 e5       	ldi	r25, 0x54	; 84
     3f0:	93 83       	std	Z+3, r25	; 0x03
     3f2:	64 30       	cpi	r22, 0x04	; 4
     3f4:	08 f0       	brcs	.+2      	; 0x3f8 <lcd_setCursor+0x18>
     3f6:	63 e0       	ldi	r22, 0x03	; 3
     3f8:	90 91 7b 02 	lds	r25, 0x027B	; 0x80027b <_numlines>
     3fc:	69 17       	cp	r22, r25
     3fe:	10 f0       	brcs	.+4      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     400:	6f ef       	ldi	r22, 0xFF	; 255
     402:	69 0f       	add	r22, r25
     404:	e6 2f       	mov	r30, r22
     406:	f0 e0       	ldi	r31, 0x00	; 0
     408:	ea 58       	subi	r30, 0x8A	; 138
     40a:	fd 4f       	sbci	r31, 0xFD	; 253
     40c:	90 81       	ld	r25, Z
     40e:	89 0f       	add	r24, r25
     410:	80 68       	ori	r24, 0x80	; 128
     412:	da cf       	rjmp	.-76     	; 0x3c8 <command>
     414:	08 95       	ret

00000416 <lcd_display_on>:
     416:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <_displaycontrol>
     41a:	98 2f       	mov	r25, r24
     41c:	94 60       	ori	r25, 0x04	; 4
     41e:	90 93 7a 02 	sts	0x027A, r25	; 0x80027a <_displaycontrol>
     422:	8c 60       	ori	r24, 0x0C	; 12
     424:	d1 cf       	rjmp	.-94     	; 0x3c8 <command>
     426:	08 95       	ret

00000428 <lcd_init>:
     428:	cf 93       	push	r28
     42a:	ec e7       	ldi	r30, 0x7C	; 124
     42c:	f2 e0       	ldi	r31, 0x02	; 2
     42e:	83 e0       	ldi	r24, 0x03	; 3
     430:	80 83       	st	Z, r24
     432:	82 e0       	ldi	r24, 0x02	; 2
     434:	81 83       	std	Z+1, r24	; 0x01
     436:	91 e0       	ldi	r25, 0x01	; 1
     438:	92 83       	std	Z+2, r25	; 0x02
     43a:	13 82       	std	Z+3, r1	; 0x03
     43c:	14 82       	std	Z+4, r1	; 0x04
     43e:	15 82       	std	Z+5, r1	; 0x05
     440:	16 82       	std	Z+6, r1	; 0x06
     442:	17 82       	std	Z+7, r1	; 0x07
     444:	98 e0       	ldi	r25, 0x08	; 8
     446:	90 93 85 02 	sts	0x0285, r25	; 0x800285 <_displayfunction>
     44a:	80 93 7b 02 	sts	0x027B, r24	; 0x80027b <_numlines>
     44e:	0f 9a       	sbi	0x01, 7	; 1
     450:	0e 9a       	sbi	0x01, 6	; 1
     452:	0d 9a       	sbi	0x01, 5	; 1
     454:	0c 9a       	sbi	0x01, 4	; 1
     456:	14 9a       	sbi	0x02, 4	; 2
     458:	20 e0       	ldi	r18, 0x00	; 0
     45a:	30 e0       	ldi	r19, 0x00	; 0
     45c:	c8 e0       	ldi	r28, 0x08	; 8
     45e:	b0 e0       	ldi	r27, 0x00	; 0
     460:	a4 e0       	ldi	r26, 0x04	; 4
     462:	50 e0       	ldi	r21, 0x00	; 0
     464:	61 e0       	ldi	r22, 0x01	; 1
     466:	70 e0       	ldi	r23, 0x00	; 0
     468:	0c c0       	rjmp	.+24     	; 0x482 <lcd_init+0x5a>
     46a:	41 b1       	in	r20, 0x01	; 1
     46c:	cb 01       	movw	r24, r22
     46e:	01 90       	ld	r0, Z+
     470:	02 c0       	rjmp	.+4      	; 0x476 <lcd_init+0x4e>
     472:	88 0f       	add	r24, r24
     474:	99 1f       	adc	r25, r25
     476:	0a 94       	dec	r0
     478:	e2 f7       	brpl	.-8      	; 0x472 <lcd_init+0x4a>
     47a:	84 2b       	or	r24, r20
     47c:	81 b9       	out	0x01, r24	; 1
     47e:	2f 5f       	subi	r18, 0xFF	; 255
     480:	3f 4f       	sbci	r19, 0xFF	; 255
     482:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <_displayfunction>
     486:	84 fd       	sbrc	r24, 4
     488:	03 c0       	rjmp	.+6      	; 0x490 <lcd_init+0x68>
     48a:	8a 2f       	mov	r24, r26
     48c:	95 2f       	mov	r25, r21
     48e:	02 c0       	rjmp	.+4      	; 0x494 <lcd_init+0x6c>
     490:	8c 2f       	mov	r24, r28
     492:	9b 2f       	mov	r25, r27
     494:	28 17       	cp	r18, r24
     496:	39 07       	cpc	r19, r25
     498:	44 f3       	brlt	.-48     	; 0x46a <lcd_init+0x42>
     49a:	2f ef       	ldi	r18, 0xFF	; 255
     49c:	80 e7       	ldi	r24, 0x70	; 112
     49e:	92 e0       	ldi	r25, 0x02	; 2
     4a0:	21 50       	subi	r18, 0x01	; 1
     4a2:	80 40       	sbci	r24, 0x00	; 0
     4a4:	90 40       	sbci	r25, 0x00	; 0
     4a6:	e1 f7       	brne	.-8      	; 0x4a0 <lcd_init+0x78>
     4a8:	00 c0       	rjmp	.+0      	; 0x4aa <lcd_init+0x82>
     4aa:	00 00       	nop
     4ac:	17 98       	cbi	0x02, 7	; 2
     4ae:	15 98       	cbi	0x02, 5	; 2
     4b0:	16 98       	cbi	0x02, 6	; 2
     4b2:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <_displayfunction>
     4b6:	84 fd       	sbrc	r24, 4
     4b8:	1b c0       	rjmp	.+54     	; 0x4f0 <lcd_init+0xc8>
     4ba:	83 e0       	ldi	r24, 0x03	; 3
     4bc:	13 df       	rcall	.-474    	; 0x2e4 <write4bits>
     4be:	8f e4       	ldi	r24, 0x4F	; 79
     4c0:	96 e4       	ldi	r25, 0x46	; 70
     4c2:	01 97       	sbiw	r24, 0x01	; 1
     4c4:	f1 f7       	brne	.-4      	; 0x4c2 <lcd_init+0x9a>
     4c6:	00 c0       	rjmp	.+0      	; 0x4c8 <lcd_init+0xa0>
     4c8:	00 00       	nop
     4ca:	83 e0       	ldi	r24, 0x03	; 3
     4cc:	0b df       	rcall	.-490    	; 0x2e4 <write4bits>
     4ce:	8f e4       	ldi	r24, 0x4F	; 79
     4d0:	96 e4       	ldi	r25, 0x46	; 70
     4d2:	01 97       	sbiw	r24, 0x01	; 1
     4d4:	f1 f7       	brne	.-4      	; 0x4d2 <lcd_init+0xaa>
     4d6:	00 c0       	rjmp	.+0      	; 0x4d8 <lcd_init+0xb0>
     4d8:	00 00       	nop
     4da:	83 e0       	ldi	r24, 0x03	; 3
     4dc:	03 df       	rcall	.-506    	; 0x2e4 <write4bits>
     4de:	87 e5       	ldi	r24, 0x57	; 87
     4e0:	92 e0       	ldi	r25, 0x02	; 2
     4e2:	01 97       	sbiw	r24, 0x01	; 1
     4e4:	f1 f7       	brne	.-4      	; 0x4e2 <lcd_init+0xba>
     4e6:	00 c0       	rjmp	.+0      	; 0x4e8 <lcd_init+0xc0>
     4e8:	00 00       	nop
     4ea:	82 e0       	ldi	r24, 0x02	; 2
     4ec:	fb de       	rcall	.-522    	; 0x2e4 <write4bits>
     4ee:	16 c0       	rjmp	.+44     	; 0x51c <lcd_init+0xf4>
     4f0:	80 62       	ori	r24, 0x20	; 32
     4f2:	6a df       	rcall	.-300    	; 0x3c8 <command>
     4f4:	8f e4       	ldi	r24, 0x4F	; 79
     4f6:	96 e4       	ldi	r25, 0x46	; 70
     4f8:	01 97       	sbiw	r24, 0x01	; 1
     4fa:	f1 f7       	brne	.-4      	; 0x4f8 <lcd_init+0xd0>
     4fc:	00 c0       	rjmp	.+0      	; 0x4fe <lcd_init+0xd6>
     4fe:	00 00       	nop
     500:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <_displayfunction>
     504:	80 62       	ori	r24, 0x20	; 32
     506:	60 df       	rcall	.-320    	; 0x3c8 <command>
     508:	87 e5       	ldi	r24, 0x57	; 87
     50a:	92 e0       	ldi	r25, 0x02	; 2
     50c:	01 97       	sbiw	r24, 0x01	; 1
     50e:	f1 f7       	brne	.-4      	; 0x50c <lcd_init+0xe4>
     510:	00 c0       	rjmp	.+0      	; 0x512 <lcd_init+0xea>
     512:	00 00       	nop
     514:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <_displayfunction>
     518:	80 62       	ori	r24, 0x20	; 32
     51a:	56 df       	rcall	.-340    	; 0x3c8 <command>
     51c:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <_displayfunction>
     520:	80 62       	ori	r24, 0x20	; 32
     522:	52 df       	rcall	.-348    	; 0x3c8 <command>
     524:	84 e0       	ldi	r24, 0x04	; 4
     526:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <_displaycontrol>
     52a:	75 df       	rcall	.-278    	; 0x416 <lcd_display_on>
     52c:	50 df       	rcall	.-352    	; 0x3ce <lcd_clear>
     52e:	82 e0       	ldi	r24, 0x02	; 2
     530:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <_displaymode>
     534:	86 e0       	ldi	r24, 0x06	; 6
     536:	48 df       	rcall	.-368    	; 0x3c8 <command>
     538:	cf 91       	pop	r28
     53a:	08 95       	ret

0000053c <write>:
     53c:	61 e0       	ldi	r22, 0x01	; 1
     53e:	2d df       	rcall	.-422    	; 0x39a <send>
     540:	81 e0       	ldi	r24, 0x01	; 1
     542:	08 95       	ret

00000544 <lcd_puts>:
	}
	pulseEnable();
}

//------Print------------
void lcd_puts(char *string) {
     544:	cf 93       	push	r28
     546:	df 93       	push	r29
     548:	ec 01       	movw	r28, r24
	for (char *it = string; *it; it++) {
     54a:	88 81       	ld	r24, Y
     54c:	88 23       	and	r24, r24
     54e:	29 f0       	breq	.+10     	; 0x55a <lcd_puts+0x16>
     550:	21 96       	adiw	r28, 0x01	; 1
		write(*it);
     552:	f4 df       	rcall	.-24     	; 0x53c <write>
	pulseEnable();
}

//------Print------------
void lcd_puts(char *string) {
	for (char *it = string; *it; it++) {
     554:	89 91       	ld	r24, Y+
     556:	81 11       	cpse	r24, r1
     558:	fc cf       	rjmp	.-8      	; 0x552 <lcd_puts+0xe>
		write(*it);
	}
}
     55a:	df 91       	pop	r29
     55c:	cf 91       	pop	r28
     55e:	08 95       	ret

00000560 <LCD_PrintString>:

void LCD_PrintString(char *string, uint8_t x, uint8_t y)
{
     560:	cf 93       	push	r28
     562:	df 93       	push	r29
     564:	ec 01       	movw	r28, r24
     566:	86 2f       	mov	r24, r22
	lcd_setCursor(x,y);
     568:	64 2f       	mov	r22, r20
     56a:	3a df       	rcall	.-396    	; 0x3e0 <lcd_setCursor>
	lcd_puts(string);
     56c:	ce 01       	movw	r24, r28
     56e:	ea df       	rcall	.-44     	; 0x544 <lcd_puts>
}
     570:	df 91       	pop	r29
     572:	cf 91       	pop	r28
     574:	08 95       	ret

00000576 <adc_init>:

void adc_init(void)
{
	// set ADC prescaler so we are inside the desired 50-200 KHz range.
#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
	bitSet(ADCSRA, ADPS2);
     576:	ea e7       	ldi	r30, 0x7A	; 122
     578:	f0 e0       	ldi	r31, 0x00	; 0
     57a:	80 81       	ld	r24, Z
     57c:	84 60       	ori	r24, 0x04	; 4
     57e:	80 83       	st	Z, r24
	bitSet(ADCSRA, ADPS1);
     580:	80 81       	ld	r24, Z
     582:	82 60       	ori	r24, 0x02	; 2
     584:	80 83       	st	Z, r24
	bitSet(ADCSRA, ADPS0);
     586:	80 81       	ld	r24, Z
     588:	81 60       	ori	r24, 0x01	; 1
     58a:	80 83       	st	Z, r24
	bitSet(ADCSRA, ADPS1);
	bitSet(ADCSRA, ADPS0);
#endif

	//Enable ADC conversions
	bitSet(ADCSRA, ADEN);
     58c:	80 81       	ld	r24, Z
     58e:	80 68       	ori	r24, 0x80	; 128
     590:	80 83       	st	Z, r24
     592:	08 95       	ret

00000594 <analogRead>:
	
}

int analogRead(uint8_t pin)
{
	uint8_t channel = pinToADCChannel(pin);
     594:	96 ea       	ldi	r25, 0xA6	; 166
     596:	98 0f       	add	r25, r24
     598:	98 30       	cpi	r25, 0x08	; 8
     59a:	20 f4       	brcc	.+8      	; 0x5a4 <analogRead+0x10>
     59c:	91 e6       	ldi	r25, 0x61	; 97
     59e:	98 1b       	sub	r25, r24
     5a0:	89 2f       	mov	r24, r25
     5a2:	09 c0       	rjmp	.+18     	; 0x5b6 <analogRead+0x22>
     5a4:	9e ea       	ldi	r25, 0xAE	; 174
     5a6:	98 0f       	add	r25, r24
     5a8:	98 30       	cpi	r25, 0x08	; 8
     5aa:	20 f4       	brcc	.+8      	; 0x5b4 <analogRead+0x20>
     5ac:	91 e6       	ldi	r25, 0x61	; 97
     5ae:	98 1b       	sub	r25, r24
     5b0:	89 2f       	mov	r24, r25
     5b2:	01 c0       	rjmp	.+2      	; 0x5b6 <analogRead+0x22>
     5b4:	8f ef       	ldi	r24, 0xFF	; 255
	
	if(channel != NOT_ADC_PIN){
		// the MUX5 bit of ADCSRB selects whether we're reading from channels
		// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).
		ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((channel >> 3) & 0x01) << MUX5);
     5b6:	eb e7       	ldi	r30, 0x7B	; 123
     5b8:	f0 e0       	ldi	r31, 0x00	; 0
     5ba:	90 81       	ld	r25, Z
     5bc:	28 2f       	mov	r18, r24
     5be:	28 70       	andi	r18, 0x08	; 8
     5c0:	97 7f       	andi	r25, 0xF7	; 247
     5c2:	92 2b       	or	r25, r18
     5c4:	90 83       	st	Z, r25
		
		// set the analog reference (high two bits of ADMUX) and select the channel (low 4 bits).  
		// this also sets ADLAR (left-adjust result) to 0 (the default- right adjusted).
		ADMUX = (analog_reference << 6) | (channel & 0x0F );
     5c6:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     5ca:	90 e4       	ldi	r25, 0x40	; 64
     5cc:	29 9f       	mul	r18, r25
     5ce:	90 01       	movw	r18, r0
     5d0:	11 24       	eor	r1, r1
     5d2:	8f 70       	andi	r24, 0x0F	; 15
     5d4:	82 2b       	or	r24, r18
     5d6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		
		//Start the conversion
		ADCSRA |= (1<<ADSC);
     5da:	ea e7       	ldi	r30, 0x7A	; 122
     5dc:	f0 e0       	ldi	r31, 0x00	; 0
     5de:	80 81       	ld	r24, Z
     5e0:	80 64       	ori	r24, 0x40	; 64
     5e2:	80 83       	st	Z, r24
		// Wait completion of ADC
		while (bit_is_set(ADCSRA, ADSC));
     5e4:	80 81       	ld	r24, Z
     5e6:	86 fd       	sbrc	r24, 6
     5e8:	fd cf       	rjmp	.-6      	; 0x5e4 <analogRead+0x50>
		
		return (ADC);
     5ea:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
     5ee:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
	}else{
		return 0;
	}
     5f2:	08 95       	ret

000005f4 <pinMode>:
 */ 
#include "tk2560.h"


void pinMode(uint8_t pin, uint8_t mode)
{
     5f4:	cf 93       	push	r28
     5f6:	df 93       	push	r29
	uint8_t bit = pinToBitMask(pin);
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	fc 01       	movw	r30, r24
     5fc:	e3 58       	subi	r30, 0x83	; 131
     5fe:	fe 4f       	sbci	r31, 0xFE	; 254
     600:	24 91       	lpm	r18, Z
	uint8_t port = pinToPort(pin);
     602:	fc 01       	movw	r30, r24
     604:	ee 51       	subi	r30, 0x1E	; 30
     606:	fe 4f       	sbci	r31, 0xFE	; 254
     608:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;
	
	if (port == NOT_A_PIN) return;
     60a:	88 23       	and	r24, r24
     60c:	79 f1       	breq	.+94     	; 0x66c <pinMode+0x78>
	
	reg = portDDRRegister(port);
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	88 0f       	add	r24, r24
     612:	99 1f       	adc	r25, r25
     614:	fc 01       	movw	r30, r24
     616:	ef 59       	subi	r30, 0x9F	; 159
     618:	fd 4f       	sbci	r31, 0xFD	; 253
     61a:	a5 91       	lpm	r26, Z+
     61c:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
     61e:	fc 01       	movw	r30, r24
     620:	e9 5b       	subi	r30, 0xB9	; 185
     622:	fd 4f       	sbci	r31, 0xFD	; 253
     624:	c5 91       	lpm	r28, Z+
     626:	d4 91       	lpm	r29, Z
	
	if (mode == INPUT)
     628:	61 11       	cpse	r22, r1
     62a:	0c c0       	rjmp	.+24     	; 0x644 <pinMode+0x50>
	{
		uint8_t oldSREG = SREG;
     62c:	9f b7       	in	r25, 0x3f	; 63
		cli();
     62e:	f8 94       	cli
		*reg &= ~bit;
     630:	8c 91       	ld	r24, X
     632:	e2 2f       	mov	r30, r18
     634:	e0 95       	com	r30
     636:	8e 23       	and	r24, r30
     638:	8c 93       	st	X, r24
		*out &= ~bit;
     63a:	28 81       	ld	r18, Y
     63c:	e2 23       	and	r30, r18
     63e:	e8 83       	st	Y, r30
		SREG = oldSREG;
     640:	9f bf       	out	0x3f, r25	; 63
     642:	14 c0       	rjmp	.+40     	; 0x66c <pinMode+0x78>
	}else if(mode == INPUT_PULLUP)
     644:	62 30       	cpi	r22, 0x02	; 2
     646:	61 f4       	brne	.+24     	; 0x660 <pinMode+0x6c>
	{
		uint8_t oldSREG = SREG;
     648:	9f b7       	in	r25, 0x3f	; 63
		cli();
     64a:	f8 94       	cli
		*reg &= ~bit;
     64c:	8c 91       	ld	r24, X
     64e:	32 2f       	mov	r19, r18
     650:	30 95       	com	r19
     652:	83 23       	and	r24, r19
     654:	8c 93       	st	X, r24
		*out |= bit;
     656:	e8 81       	ld	r30, Y
     658:	e2 2b       	or	r30, r18
     65a:	e8 83       	st	Y, r30
		SREG = oldSREG;
     65c:	9f bf       	out	0x3f, r25	; 63
     65e:	06 c0       	rjmp	.+12     	; 0x66c <pinMode+0x78>
	}else{
		//output
		uint8_t oldSREG = SREG;
     660:	8f b7       	in	r24, 0x3f	; 63
		cli();
     662:	f8 94       	cli
		*reg |= bit;
     664:	ec 91       	ld	r30, X
     666:	e2 2b       	or	r30, r18
     668:	ec 93       	st	X, r30
		SREG = oldSREG;
     66a:	8f bf       	out	0x3f, r24	; 63
	}
		
}
     66c:	df 91       	pop	r29
     66e:	cf 91       	pop	r28
     670:	08 95       	ret

00000672 <digitalWrite>:

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t bit = pinToBitMask(pin);
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	fc 01       	movw	r30, r24
     676:	e3 58       	subi	r30, 0x83	; 131
     678:	fe 4f       	sbci	r31, 0xFE	; 254
     67a:	24 91       	lpm	r18, Z
	uint8_t port = pinToPort(pin);
     67c:	fc 01       	movw	r30, r24
     67e:	ee 51       	subi	r30, 0x1E	; 30
     680:	fe 4f       	sbci	r31, 0xFE	; 254
     682:	84 91       	lpm	r24, Z
	volatile uint8_t *out;
	
	if (port == NOT_A_PIN) return;
     684:	88 23       	and	r24, r24
     686:	b1 f0       	breq	.+44     	; 0x6b4 <digitalWrite+0x42>
	
	out = portOutputRegister(port);
     688:	e8 2f       	mov	r30, r24
     68a:	f0 e0       	ldi	r31, 0x00	; 0
     68c:	ee 0f       	add	r30, r30
     68e:	ff 1f       	adc	r31, r31
     690:	e9 5b       	subi	r30, 0xB9	; 185
     692:	fd 4f       	sbci	r31, 0xFD	; 253
     694:	a5 91       	lpm	r26, Z+
     696:	b4 91       	lpm	r27, Z
	
	uint8_t oldSREG = SREG;
     698:	8f b7       	in	r24, 0x3f	; 63
	cli();
     69a:	f8 94       	cli
	
	if (val == LOW) {
     69c:	61 11       	cpse	r22, r1
     69e:	06 c0       	rjmp	.+12     	; 0x6ac <digitalWrite+0x3a>
		*out &= ~bit;
     6a0:	9c 91       	ld	r25, X
     6a2:	e2 2f       	mov	r30, r18
     6a4:	e0 95       	com	r30
     6a6:	e9 23       	and	r30, r25
     6a8:	ec 93       	st	X, r30
     6aa:	03 c0       	rjmp	.+6      	; 0x6b2 <digitalWrite+0x40>
	} else {
		*out |= bit;
     6ac:	ec 91       	ld	r30, X
     6ae:	e2 2b       	or	r30, r18
     6b0:	ec 93       	st	X, r30
	}
	
	SREG = oldSREG;
     6b2:	8f bf       	out	0x3f, r24	; 63
     6b4:	08 95       	ret

000006b6 <togglePin>:
	
}

void togglePin(uint8_t pin)
{
	uint8_t bit = pinToBitMask(pin);
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	fc 01       	movw	r30, r24
     6ba:	e3 58       	subi	r30, 0x83	; 131
     6bc:	fe 4f       	sbci	r31, 0xFE	; 254
     6be:	24 91       	lpm	r18, Z
	uint8_t port = pinToPort(pin);
     6c0:	fc 01       	movw	r30, r24
     6c2:	ee 51       	subi	r30, 0x1E	; 30
     6c4:	fe 4f       	sbci	r31, 0xFE	; 254
     6c6:	84 91       	lpm	r24, Z
	volatile uint8_t *out;
	
	if (port == NOT_A_PIN) return;
     6c8:	88 23       	and	r24, r24
     6ca:	71 f0       	breq	.+28     	; 0x6e8 <togglePin+0x32>
	
	out = portOutputRegister(port);
     6cc:	e8 2f       	mov	r30, r24
     6ce:	f0 e0       	ldi	r31, 0x00	; 0
     6d0:	ee 0f       	add	r30, r30
     6d2:	ff 1f       	adc	r31, r31
     6d4:	e9 5b       	subi	r30, 0xB9	; 185
     6d6:	fd 4f       	sbci	r31, 0xFD	; 253
     6d8:	a5 91       	lpm	r26, Z+
     6da:	b4 91       	lpm	r27, Z
	
	uint8_t oldSREG = SREG;
     6dc:	8f b7       	in	r24, 0x3f	; 63
	cli();
     6de:	f8 94       	cli
	
	//toggle
	*out ^= bit;
     6e0:	ec 91       	ld	r30, X
     6e2:	e2 27       	eor	r30, r18
     6e4:	ec 93       	st	X, r30
	
	SREG = oldSREG;
     6e6:	8f bf       	out	0x3f, r24	; 63
     6e8:	08 95       	ret

000006ea <Serial0_begin>:
	bitClear(UCSR0B, TXEN0);
	bitClear(UCSR0B, RXCIE0); //Rx complete interrupt enable
	bitClear(UCSR0B, UDRIE0); //data register empty int -disable
	
	//clear any received data
	_rx_buffer0_head = _rx_buffer0_tail;	
     6ea:	cf 92       	push	r12
     6ec:	df 92       	push	r13
     6ee:	ef 92       	push	r14
     6f0:	ff 92       	push	r15
     6f2:	cf 93       	push	r28
     6f4:	6b 01       	movw	r12, r22
     6f6:	7c 01       	movw	r14, r24
     6f8:	c4 2f       	mov	r28, r20
     6fa:	10 92 13 03 	sts	0x0313, r1	; 0x800313 <_rx_buffer0_head>
     6fe:	10 92 90 02 	sts	0x0290, r1	; 0x800290 <_rx_buffer0_tail>
     702:	10 92 87 02 	sts	0x0287, r1	; 0x800287 <_tx_buffer0_head>
     706:	10 92 d2 02 	sts	0x02D2, r1	; 0x8002d2 <_tx_buffer0_tail>
     70a:	88 ee       	ldi	r24, 0xE8	; 232
     70c:	93 e0       	ldi	r25, 0x03	; 3
     70e:	a0 e0       	ldi	r26, 0x00	; 0
     710:	b0 e0       	ldi	r27, 0x00	; 0
     712:	80 93 a3 03 	sts	0x03A3, r24	; 0x8003a3 <_timeout0>
     716:	90 93 a4 03 	sts	0x03A4, r25	; 0x8003a4 <_timeout0+0x1>
     71a:	a0 93 a5 03 	sts	0x03A5, r26	; 0x8003a5 <_timeout0+0x2>
     71e:	b0 93 a6 03 	sts	0x03A6, r27	; 0x8003a6 <_timeout0+0x3>
     722:	82 e0       	ldi	r24, 0x02	; 2
     724:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
     728:	c1 14       	cp	r12, r1
     72a:	81 ee       	ldi	r24, 0xE1	; 225
     72c:	d8 06       	cpc	r13, r24
     72e:	e1 04       	cpc	r14, r1
     730:	f1 04       	cpc	r15, r1
     732:	b1 f0       	breq	.+44     	; 0x760 <Serial0_begin+0x76>
     734:	60 e0       	ldi	r22, 0x00	; 0
     736:	79 e0       	ldi	r23, 0x09	; 9
     738:	8d e3       	ldi	r24, 0x3D	; 61
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	a7 01       	movw	r20, r14
     73e:	96 01       	movw	r18, r12
     740:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__udivmodsi4>
     744:	da 01       	movw	r26, r20
     746:	c9 01       	movw	r24, r18
     748:	01 97       	sbiw	r24, 0x01	; 1
     74a:	a1 09       	sbc	r26, r1
     74c:	b1 09       	sbc	r27, r1
     74e:	b6 95       	lsr	r27
     750:	a7 95       	ror	r26
     752:	97 95       	ror	r25
     754:	87 95       	ror	r24
     756:	9c 01       	movw	r18, r24
     758:	21 15       	cp	r18, r1
     75a:	80 e1       	ldi	r24, 0x10	; 16
     75c:	38 07       	cpc	r19, r24
     75e:	a0 f0       	brcs	.+40     	; 0x788 <Serial0_begin+0x9e>
     760:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
     764:	60 e8       	ldi	r22, 0x80	; 128
     766:	74 e8       	ldi	r23, 0x84	; 132
     768:	8e e1       	ldi	r24, 0x1E	; 30
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	a7 01       	movw	r20, r14
     76e:	96 01       	movw	r18, r12
     770:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__udivmodsi4>
     774:	da 01       	movw	r26, r20
     776:	c9 01       	movw	r24, r18
     778:	01 97       	sbiw	r24, 0x01	; 1
     77a:	a1 09       	sbc	r26, r1
     77c:	b1 09       	sbc	r27, r1
     77e:	b6 95       	lsr	r27
     780:	a7 95       	ror	r26
     782:	97 95       	ror	r25
     784:	87 95       	ror	r24
     786:	9c 01       	movw	r18, r24
     788:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
     78c:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
     790:	c0 93 c2 00 	sts	0x00C2, r28	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
     794:	e1 ec       	ldi	r30, 0xC1	; 193
     796:	f0 e0       	ldi	r31, 0x00	; 0
     798:	80 81       	ld	r24, Z
     79a:	80 61       	ori	r24, 0x10	; 16
     79c:	80 83       	st	Z, r24
     79e:	80 81       	ld	r24, Z
     7a0:	88 60       	ori	r24, 0x08	; 8
     7a2:	80 83       	st	Z, r24
     7a4:	80 81       	ld	r24, Z
     7a6:	80 68       	ori	r24, 0x80	; 128
     7a8:	80 83       	st	Z, r24
     7aa:	80 81       	ld	r24, Z
     7ac:	8f 7d       	andi	r24, 0xDF	; 223
     7ae:	80 83       	st	Z, r24
     7b0:	cf 91       	pop	r28
     7b2:	ff 90       	pop	r15
     7b4:	ef 90       	pop	r14
     7b6:	df 90       	pop	r13
     7b8:	cf 90       	pop	r12
     7ba:	08 95       	ret

000007bc <Serial0_available>:
     7bc:	80 91 13 03 	lds	r24, 0x0313	; 0x800313 <_rx_buffer0_head>
     7c0:	20 91 90 02 	lds	r18, 0x0290	; 0x800290 <_rx_buffer0_tail>
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	80 5c       	subi	r24, 0xC0	; 192
     7c8:	9f 4f       	sbci	r25, 0xFF	; 255
     7ca:	82 1b       	sub	r24, r18
     7cc:	91 09       	sbc	r25, r1
     7ce:	8f 73       	andi	r24, 0x3F	; 63
     7d0:	99 27       	eor	r25, r25
     7d2:	08 95       	ret

000007d4 <Serial0_read>:
     7d4:	90 91 13 03 	lds	r25, 0x0313	; 0x800313 <_rx_buffer0_head>
     7d8:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <_rx_buffer0_tail>
     7dc:	98 17       	cp	r25, r24
     7de:	71 f0       	breq	.+28     	; 0x7fc <Serial0_read+0x28>
     7e0:	e0 91 90 02 	lds	r30, 0x0290	; 0x800290 <_rx_buffer0_tail>
     7e4:	f0 e0       	ldi	r31, 0x00	; 0
     7e6:	e7 5a       	subi	r30, 0xA7	; 167
     7e8:	fc 4f       	sbci	r31, 0xFC	; 252
     7ea:	80 81       	ld	r24, Z
     7ec:	90 91 90 02 	lds	r25, 0x0290	; 0x800290 <_rx_buffer0_tail>
     7f0:	9f 5f       	subi	r25, 0xFF	; 255
     7f2:	9f 73       	andi	r25, 0x3F	; 63
     7f4:	90 93 90 02 	sts	0x0290, r25	; 0x800290 <_rx_buffer0_tail>
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	08 95       	ret
     7fc:	8f ef       	ldi	r24, 0xFF	; 255
     7fe:	9f ef       	ldi	r25, 0xFF	; 255
     800:	08 95       	ret

00000802 <Serial0_timedRead>:
     802:	0f 93       	push	r16
     804:	1f 93       	push	r17
     806:	54 d7       	rcall	.+3752   	; 0x16b0 <millis>
     808:	60 93 8c 02 	sts	0x028C, r22	; 0x80028c <_startMillis0>
     80c:	70 93 8d 02 	sts	0x028D, r23	; 0x80028d <_startMillis0+0x1>
     810:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <_startMillis0+0x2>
     814:	90 93 8f 02 	sts	0x028F, r25	; 0x80028f <_startMillis0+0x3>
     818:	dd df       	rcall	.-70     	; 0x7d4 <Serial0_read>
     81a:	99 23       	and	r25, r25
     81c:	f4 f4       	brge	.+60     	; 0x85a <Serial0_timedRead+0x58>
     81e:	48 d7       	rcall	.+3728   	; 0x16b0 <millis>
     820:	00 91 8c 02 	lds	r16, 0x028C	; 0x80028c <_startMillis0>
     824:	10 91 8d 02 	lds	r17, 0x028D	; 0x80028d <_startMillis0+0x1>
     828:	20 91 8e 02 	lds	r18, 0x028E	; 0x80028e <_startMillis0+0x2>
     82c:	30 91 8f 02 	lds	r19, 0x028F	; 0x80028f <_startMillis0+0x3>
     830:	dc 01       	movw	r26, r24
     832:	cb 01       	movw	r24, r22
     834:	80 1b       	sub	r24, r16
     836:	91 0b       	sbc	r25, r17
     838:	a2 0b       	sbc	r26, r18
     83a:	b3 0b       	sbc	r27, r19
     83c:	00 91 a3 03 	lds	r16, 0x03A3	; 0x8003a3 <_timeout0>
     840:	10 91 a4 03 	lds	r17, 0x03A4	; 0x8003a4 <_timeout0+0x1>
     844:	20 91 a5 03 	lds	r18, 0x03A5	; 0x8003a5 <_timeout0+0x2>
     848:	30 91 a6 03 	lds	r19, 0x03A6	; 0x8003a6 <_timeout0+0x3>
     84c:	80 17       	cp	r24, r16
     84e:	91 07       	cpc	r25, r17
     850:	a2 07       	cpc	r26, r18
     852:	b3 07       	cpc	r27, r19
     854:	08 f3       	brcs	.-62     	; 0x818 <Serial0_timedRead+0x16>
     856:	8f ef       	ldi	r24, 0xFF	; 255
     858:	9f ef       	ldi	r25, 0xFF	; 255
     85a:	1f 91       	pop	r17
     85c:	0f 91       	pop	r16
     85e:	08 95       	ret

00000860 <Serial0_readAllBytes>:
     860:	ef 92       	push	r14
     862:	ff 92       	push	r15
     864:	0f 93       	push	r16
     866:	1f 93       	push	r17
     868:	cf 93       	push	r28
     86a:	df 93       	push	r29
     86c:	7b 01       	movw	r14, r22
     86e:	67 2b       	or	r22, r23
     870:	81 f0       	breq	.+32     	; 0x892 <Serial0_readAllBytes+0x32>
     872:	08 2f       	mov	r16, r24
     874:	19 2f       	mov	r17, r25
     876:	c0 e0       	ldi	r28, 0x00	; 0
     878:	d0 e0       	ldi	r29, 0x00	; 0
     87a:	c3 df       	rcall	.-122    	; 0x802 <Serial0_timedRead>
     87c:	99 23       	and	r25, r25
     87e:	44 f0       	brlt	.+16     	; 0x890 <Serial0_readAllBytes+0x30>
     880:	f8 01       	movw	r30, r16
     882:	81 93       	st	Z+, r24
     884:	8f 01       	movw	r16, r30
     886:	21 96       	adiw	r28, 0x01	; 1
     888:	ec 16       	cp	r14, r28
     88a:	fd 06       	cpc	r15, r29
     88c:	b1 f7       	brne	.-20     	; 0x87a <Serial0_readAllBytes+0x1a>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <Serial0_readAllBytes+0x32>
     890:	7e 01       	movw	r14, r28
     892:	c7 01       	movw	r24, r14
     894:	df 91       	pop	r29
     896:	cf 91       	pop	r28
     898:	1f 91       	pop	r17
     89a:	0f 91       	pop	r16
     89c:	ff 90       	pop	r15
     89e:	ef 90       	pop	r14
     8a0:	08 95       	ret

000008a2 <_tx0_udr_empty_irq>:
     8a2:	e0 91 d2 02 	lds	r30, 0x02D2	; 0x8002d2 <_tx_buffer0_tail>
     8a6:	f0 e0       	ldi	r31, 0x00	; 0
     8a8:	ec 5e       	subi	r30, 0xEC	; 236
     8aa:	fc 4f       	sbci	r31, 0xFC	; 252
     8ac:	20 81       	ld	r18, Z
     8ae:	80 91 d2 02 	lds	r24, 0x02D2	; 0x8002d2 <_tx_buffer0_tail>
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	01 96       	adiw	r24, 0x01	; 1
     8b6:	8f 73       	andi	r24, 0x3F	; 63
     8b8:	90 78       	andi	r25, 0x80	; 128
     8ba:	99 23       	and	r25, r25
     8bc:	24 f4       	brge	.+8      	; 0x8c6 <_tx0_udr_empty_irq+0x24>
     8be:	01 97       	sbiw	r24, 0x01	; 1
     8c0:	80 6c       	ori	r24, 0xC0	; 192
     8c2:	9f 6f       	ori	r25, 0xFF	; 255
     8c4:	01 96       	adiw	r24, 0x01	; 1
     8c6:	80 93 d2 02 	sts	0x02D2, r24	; 0x8002d2 <_tx_buffer0_tail>
     8ca:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     8ce:	e0 ec       	ldi	r30, 0xC0	; 192
     8d0:	f0 e0       	ldi	r31, 0x00	; 0
     8d2:	80 81       	ld	r24, Z
     8d4:	83 70       	andi	r24, 0x03	; 3
     8d6:	80 64       	ori	r24, 0x40	; 64
     8d8:	80 83       	st	Z, r24
     8da:	90 91 87 02 	lds	r25, 0x0287	; 0x800287 <_tx_buffer0_head>
     8de:	80 91 d2 02 	lds	r24, 0x02D2	; 0x8002d2 <_tx_buffer0_tail>
     8e2:	98 13       	cpse	r25, r24
     8e4:	05 c0       	rjmp	.+10     	; 0x8f0 <_tx0_udr_empty_irq+0x4e>
     8e6:	e1 ec       	ldi	r30, 0xC1	; 193
     8e8:	f0 e0       	ldi	r31, 0x00	; 0
     8ea:	80 81       	ld	r24, Z
     8ec:	8f 7d       	andi	r24, 0xDF	; 223
     8ee:	80 83       	st	Z, r24
     8f0:	08 95       	ret

000008f2 <Serial0_write>:
     8f2:	0f 93       	push	r16
     8f4:	1f 93       	push	r17
     8f6:	cf 93       	push	r28
     8f8:	df 93       	push	r29
     8fa:	20 91 87 02 	lds	r18, 0x0287	; 0x800287 <_tx_buffer0_head>
     8fe:	90 91 d2 02 	lds	r25, 0x02D2	; 0x8002d2 <_tx_buffer0_tail>
     902:	29 13       	cpse	r18, r25
     904:	10 c0       	rjmp	.+32     	; 0x926 <Serial0_write+0x34>
     906:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
     90a:	95 ff       	sbrs	r25, 5
     90c:	0c c0       	rjmp	.+24     	; 0x926 <Serial0_write+0x34>
     90e:	9f b7       	in	r25, 0x3f	; 63
     910:	f8 94       	cli
     912:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     916:	e0 ec       	ldi	r30, 0xC0	; 192
     918:	f0 e0       	ldi	r31, 0x00	; 0
     91a:	80 81       	ld	r24, Z
     91c:	83 70       	andi	r24, 0x03	; 3
     91e:	80 64       	ori	r24, 0x40	; 64
     920:	80 83       	st	Z, r24
     922:	9f bf       	out	0x3f, r25	; 63
     924:	2f c0       	rjmp	.+94     	; 0x984 <Serial0_write+0x92>
     926:	20 91 87 02 	lds	r18, 0x0287	; 0x800287 <_tx_buffer0_head>
     92a:	30 e0       	ldi	r19, 0x00	; 0
     92c:	2f 5f       	subi	r18, 0xFF	; 255
     92e:	3f 4f       	sbci	r19, 0xFF	; 255
     930:	2f 73       	andi	r18, 0x3F	; 63
     932:	30 78       	andi	r19, 0x80	; 128
     934:	33 23       	and	r19, r19
     936:	34 f4       	brge	.+12     	; 0x944 <Serial0_write+0x52>
     938:	21 50       	subi	r18, 0x01	; 1
     93a:	31 09       	sbc	r19, r1
     93c:	20 6c       	ori	r18, 0xC0	; 192
     93e:	3f 6f       	ori	r19, 0xFF	; 255
     940:	2f 5f       	subi	r18, 0xFF	; 255
     942:	3f 4f       	sbci	r19, 0xFF	; 255
     944:	d8 2f       	mov	r29, r24
     946:	c2 2f       	mov	r28, r18
     948:	00 ec       	ldi	r16, 0xC0	; 192
     94a:	10 e0       	ldi	r17, 0x00	; 0
     94c:	07 c0       	rjmp	.+14     	; 0x95c <Serial0_write+0x6a>
     94e:	0f b6       	in	r0, 0x3f	; 63
     950:	07 fc       	sbrc	r0, 7
     952:	04 c0       	rjmp	.+8      	; 0x95c <Serial0_write+0x6a>
     954:	f8 01       	movw	r30, r16
     956:	80 81       	ld	r24, Z
     958:	85 fd       	sbrc	r24, 5
     95a:	a3 df       	rcall	.-186    	; 0x8a2 <_tx0_udr_empty_irq>
     95c:	90 91 d2 02 	lds	r25, 0x02D2	; 0x8002d2 <_tx_buffer0_tail>
     960:	c9 17       	cp	r28, r25
     962:	a9 f3       	breq	.-22     	; 0x94e <Serial0_write+0x5c>
     964:	e0 91 87 02 	lds	r30, 0x0287	; 0x800287 <_tx_buffer0_head>
     968:	f0 e0       	ldi	r31, 0x00	; 0
     96a:	ec 5e       	subi	r30, 0xEC	; 236
     96c:	fc 4f       	sbci	r31, 0xFC	; 252
     96e:	d0 83       	st	Z, r29
     970:	9f b7       	in	r25, 0x3f	; 63
     972:	f8 94       	cli
     974:	c0 93 87 02 	sts	0x0287, r28	; 0x800287 <_tx_buffer0_head>
     978:	e1 ec       	ldi	r30, 0xC1	; 193
     97a:	f0 e0       	ldi	r31, 0x00	; 0
     97c:	80 81       	ld	r24, Z
     97e:	80 62       	ori	r24, 0x20	; 32
     980:	80 83       	st	Z, r24
     982:	9f bf       	out	0x3f, r25	; 63
     984:	81 e0       	ldi	r24, 0x01	; 1
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	df 91       	pop	r29
     98a:	cf 91       	pop	r28
     98c:	1f 91       	pop	r17
     98e:	0f 91       	pop	r16
     990:	08 95       	ret

00000992 <Serial0_print>:
     992:	0f 93       	push	r16
     994:	1f 93       	push	r17
     996:	cf 93       	push	r28
     998:	df 93       	push	r29
     99a:	ec 01       	movw	r28, r24
     99c:	88 81       	ld	r24, Y
     99e:	88 23       	and	r24, r24
     9a0:	51 f0       	breq	.+20     	; 0x9b6 <Serial0_print+0x24>
     9a2:	21 96       	adiw	r28, 0x01	; 1
     9a4:	00 e0       	ldi	r16, 0x00	; 0
     9a6:	10 e0       	ldi	r17, 0x00	; 0
     9a8:	a4 df       	rcall	.-184    	; 0x8f2 <Serial0_write>
     9aa:	0f 5f       	subi	r16, 0xFF	; 255
     9ac:	1f 4f       	sbci	r17, 0xFF	; 255
     9ae:	89 91       	ld	r24, Y+
     9b0:	81 11       	cpse	r24, r1
     9b2:	fa cf       	rjmp	.-12     	; 0x9a8 <Serial0_print+0x16>
     9b4:	02 c0       	rjmp	.+4      	; 0x9ba <Serial0_print+0x28>
     9b6:	00 e0       	ldi	r16, 0x00	; 0
     9b8:	10 e0       	ldi	r17, 0x00	; 0
     9ba:	c8 01       	movw	r24, r16
     9bc:	df 91       	pop	r29
     9be:	cf 91       	pop	r28
     9c0:	1f 91       	pop	r17
     9c2:	0f 91       	pop	r16
     9c4:	08 95       	ret

000009c6 <_rx0_complete_irq>:
	}
}

void _rx0_complete_irq(void)
{
	if (bit_is_clear(UCSR0A, UPE0)){
     9c6:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
     9ca:	82 fd       	sbrc	r24, 2
     9cc:	13 c0       	rjmp	.+38     	; 0x9f4 <_rx0_complete_irq+0x2e>
		// No Parity error, read byte and store it in the buffer if there is room
		unsigned char c = UDR0;
     9ce:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
		rx_buffer_index_t i = (unsigned int)(_rx_buffer0_head + 1) % SERIAL_RX_BUFFER_SIZE;
     9d2:	80 91 13 03 	lds	r24, 0x0313	; 0x800313 <_rx_buffer0_head>
     9d6:	8f 5f       	subi	r24, 0xFF	; 255
     9d8:	8f 73       	andi	r24, 0x3F	; 63
		
		// if we should be storing the received character into the location just before the tail 
		// (meaning that the head would advance to the current location of the tail), we're about to overflow the buffer
		// and so we don't write the character or advance the head.
		if (i != _rx_buffer0_tail) {
     9da:	90 91 90 02 	lds	r25, 0x0290	; 0x800290 <_rx_buffer0_tail>
     9de:	89 17       	cp	r24, r25
     9e0:	59 f0       	breq	.+22     	; 0x9f8 <_rx0_complete_irq+0x32>
			_rx_buffer0[_rx_buffer0_head] = c;
     9e2:	e0 91 13 03 	lds	r30, 0x0313	; 0x800313 <_rx_buffer0_head>
     9e6:	f0 e0       	ldi	r31, 0x00	; 0
     9e8:	e7 5a       	subi	r30, 0xA7	; 167
     9ea:	fc 4f       	sbci	r31, 0xFC	; 252
     9ec:	20 83       	st	Z, r18
			_rx_buffer0_head = i;
     9ee:	80 93 13 03 	sts	0x0313, r24	; 0x800313 <_rx_buffer0_head>
     9f2:	08 95       	ret
		}
	}else{
		// Parity error, read byte but discard it
		UDR0;
     9f4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     9f8:	08 95       	ret

000009fa <__vector_25>:
}

/************************************************************************/
/*					 ISRs                                                */
/************************************************************************/
ISR(USART0_RX_vect){
     9fa:	1f 92       	push	r1
     9fc:	0f 92       	push	r0
     9fe:	0f b6       	in	r0, 0x3f	; 63
     a00:	0f 92       	push	r0
     a02:	11 24       	eor	r1, r1
     a04:	0b b6       	in	r0, 0x3b	; 59
     a06:	0f 92       	push	r0
     a08:	2f 93       	push	r18
     a0a:	3f 93       	push	r19
     a0c:	4f 93       	push	r20
     a0e:	5f 93       	push	r21
     a10:	6f 93       	push	r22
     a12:	7f 93       	push	r23
     a14:	8f 93       	push	r24
     a16:	9f 93       	push	r25
     a18:	af 93       	push	r26
     a1a:	bf 93       	push	r27
     a1c:	ef 93       	push	r30
     a1e:	ff 93       	push	r31
	_rx0_complete_irq();
     a20:	d2 df       	rcall	.-92     	; 0x9c6 <_rx0_complete_irq>
}
     a22:	ff 91       	pop	r31
     a24:	ef 91       	pop	r30
     a26:	bf 91       	pop	r27
     a28:	af 91       	pop	r26
     a2a:	9f 91       	pop	r25
     a2c:	8f 91       	pop	r24
     a2e:	7f 91       	pop	r23
     a30:	6f 91       	pop	r22
     a32:	5f 91       	pop	r21
     a34:	4f 91       	pop	r20
     a36:	3f 91       	pop	r19
     a38:	2f 91       	pop	r18
     a3a:	0f 90       	pop	r0
     a3c:	0b be       	out	0x3b, r0	; 59
     a3e:	0f 90       	pop	r0
     a40:	0f be       	out	0x3f, r0	; 63
     a42:	0f 90       	pop	r0
     a44:	1f 90       	pop	r1
     a46:	18 95       	reti

00000a48 <__vector_26>:

ISR(USART0_UDRE_vect){
     a48:	1f 92       	push	r1
     a4a:	0f 92       	push	r0
     a4c:	0f b6       	in	r0, 0x3f	; 63
     a4e:	0f 92       	push	r0
     a50:	11 24       	eor	r1, r1
     a52:	0b b6       	in	r0, 0x3b	; 59
     a54:	0f 92       	push	r0
     a56:	2f 93       	push	r18
     a58:	3f 93       	push	r19
     a5a:	4f 93       	push	r20
     a5c:	5f 93       	push	r21
     a5e:	6f 93       	push	r22
     a60:	7f 93       	push	r23
     a62:	8f 93       	push	r24
     a64:	9f 93       	push	r25
     a66:	af 93       	push	r26
     a68:	bf 93       	push	r27
     a6a:	ef 93       	push	r30
     a6c:	ff 93       	push	r31
	_tx0_udr_empty_irq();
     a6e:	19 df       	rcall	.-462    	; 0x8a2 <_tx0_udr_empty_irq>
     a70:	ff 91       	pop	r31
     a72:	ef 91       	pop	r30
     a74:	bf 91       	pop	r27
     a76:	af 91       	pop	r26
     a78:	9f 91       	pop	r25
     a7a:	8f 91       	pop	r24
     a7c:	7f 91       	pop	r23
     a7e:	6f 91       	pop	r22
     a80:	5f 91       	pop	r21
     a82:	4f 91       	pop	r20
     a84:	3f 91       	pop	r19
     a86:	2f 91       	pop	r18
     a88:	0f 90       	pop	r0
     a8a:	0b be       	out	0x3b, r0	; 59
     a8c:	0f 90       	pop	r0
     a8e:	0f be       	out	0x3f, r0	; 63
     a90:	0f 90       	pop	r0
     a92:	1f 90       	pop	r1
     a94:	18 95       	reti

00000a96 <nothing>:
			break;
			case 7:
				EIMSK &= ~(1<<INT7);
			break;
		}
		intFunc[interruptNum] = nothing;
     a96:	08 95       	ret

00000a98 <attachInterrupt>:
     a98:	88 30       	cpi	r24, 0x08	; 8
     a9a:	08 f0       	brcs	.+2      	; 0xa9e <attachInterrupt+0x6>
     a9c:	79 c0       	rjmp	.+242    	; 0xb90 <attachInterrupt+0xf8>
     a9e:	e8 2f       	mov	r30, r24
     aa0:	f0 e0       	ldi	r31, 0x00	; 0
     aa2:	ee 0f       	add	r30, r30
     aa4:	ff 1f       	adc	r31, r31
     aa6:	ef 5f       	subi	r30, 0xFF	; 255
     aa8:	fd 4f       	sbci	r31, 0xFD	; 253
     aaa:	71 83       	std	Z+1, r23	; 0x01
     aac:	60 83       	st	Z, r22
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	88 30       	cpi	r24, 0x08	; 8
     ab2:	91 05       	cpc	r25, r1
     ab4:	08 f0       	brcs	.+2      	; 0xab8 <attachInterrupt+0x20>
     ab6:	6c c0       	rjmp	.+216    	; 0xb90 <attachInterrupt+0xf8>
     ab8:	fc 01       	movw	r30, r24
     aba:	88 27       	eor	r24, r24
     abc:	ee 58       	subi	r30, 0x8E	; 142
     abe:	ff 4f       	sbci	r31, 0xFF	; 255
     ac0:	8f 4f       	sbci	r24, 0xFF	; 255
     ac2:	0c 94 80 12 	jmp	0x2500	; 0x2500 <__tablejump2__>
     ac6:	e9 e6       	ldi	r30, 0x69	; 105
     ac8:	f0 e0       	ldi	r31, 0x00	; 0
     aca:	80 81       	ld	r24, Z
     acc:	8c 7f       	andi	r24, 0xFC	; 252
     ace:	48 2b       	or	r20, r24
     ad0:	40 83       	st	Z, r20
     ad2:	e8 9a       	sbi	0x1d, 0	; 29
     ad4:	08 95       	ret
     ad6:	e9 e6       	ldi	r30, 0x69	; 105
     ad8:	f0 e0       	ldi	r31, 0x00	; 0
     ada:	80 81       	ld	r24, Z
     adc:	83 7f       	andi	r24, 0xF3	; 243
     ade:	44 0f       	add	r20, r20
     ae0:	55 1f       	adc	r21, r21
     ae2:	44 0f       	add	r20, r20
     ae4:	55 1f       	adc	r21, r21
     ae6:	48 2b       	or	r20, r24
     ae8:	40 83       	st	Z, r20
     aea:	e9 9a       	sbi	0x1d, 1	; 29
     aec:	08 95       	ret
     aee:	e9 e6       	ldi	r30, 0x69	; 105
     af0:	f0 e0       	ldi	r31, 0x00	; 0
     af2:	80 81       	ld	r24, Z
     af4:	8f 7c       	andi	r24, 0xCF	; 207
     af6:	42 95       	swap	r20
     af8:	52 95       	swap	r21
     afa:	50 7f       	andi	r21, 0xF0	; 240
     afc:	54 27       	eor	r21, r20
     afe:	40 7f       	andi	r20, 0xF0	; 240
     b00:	54 27       	eor	r21, r20
     b02:	48 2b       	or	r20, r24
     b04:	40 83       	st	Z, r20
     b06:	ea 9a       	sbi	0x1d, 2	; 29
     b08:	08 95       	ret
     b0a:	e9 e6       	ldi	r30, 0x69	; 105
     b0c:	f0 e0       	ldi	r31, 0x00	; 0
     b0e:	80 81       	ld	r24, Z
     b10:	8f 73       	andi	r24, 0x3F	; 63
     b12:	00 24       	eor	r0, r0
     b14:	56 95       	lsr	r21
     b16:	47 95       	ror	r20
     b18:	07 94       	ror	r0
     b1a:	56 95       	lsr	r21
     b1c:	47 95       	ror	r20
     b1e:	07 94       	ror	r0
     b20:	54 2f       	mov	r21, r20
     b22:	40 2d       	mov	r20, r0
     b24:	48 2b       	or	r20, r24
     b26:	40 83       	st	Z, r20
     b28:	eb 9a       	sbi	0x1d, 3	; 29
     b2a:	08 95       	ret
     b2c:	ea e6       	ldi	r30, 0x6A	; 106
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	80 81       	ld	r24, Z
     b32:	8c 7f       	andi	r24, 0xFC	; 252
     b34:	48 2b       	or	r20, r24
     b36:	40 83       	st	Z, r20
     b38:	ec 9a       	sbi	0x1d, 4	; 29
     b3a:	08 95       	ret
     b3c:	ea e6       	ldi	r30, 0x6A	; 106
     b3e:	f0 e0       	ldi	r31, 0x00	; 0
     b40:	80 81       	ld	r24, Z
     b42:	83 7f       	andi	r24, 0xF3	; 243
     b44:	44 0f       	add	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	44 0f       	add	r20, r20
     b4a:	55 1f       	adc	r21, r21
     b4c:	48 2b       	or	r20, r24
     b4e:	40 83       	st	Z, r20
     b50:	ed 9a       	sbi	0x1d, 5	; 29
     b52:	08 95       	ret
     b54:	ea e6       	ldi	r30, 0x6A	; 106
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	80 81       	ld	r24, Z
     b5a:	8f 7c       	andi	r24, 0xCF	; 207
     b5c:	42 95       	swap	r20
     b5e:	52 95       	swap	r21
     b60:	50 7f       	andi	r21, 0xF0	; 240
     b62:	54 27       	eor	r21, r20
     b64:	40 7f       	andi	r20, 0xF0	; 240
     b66:	54 27       	eor	r21, r20
     b68:	48 2b       	or	r20, r24
     b6a:	40 83       	st	Z, r20
     b6c:	ee 9a       	sbi	0x1d, 6	; 29
     b6e:	08 95       	ret
     b70:	ea e6       	ldi	r30, 0x6A	; 106
     b72:	f0 e0       	ldi	r31, 0x00	; 0
     b74:	80 81       	ld	r24, Z
     b76:	8f 73       	andi	r24, 0x3F	; 63
     b78:	00 24       	eor	r0, r0
     b7a:	56 95       	lsr	r21
     b7c:	47 95       	ror	r20
     b7e:	07 94       	ror	r0
     b80:	56 95       	lsr	r21
     b82:	47 95       	ror	r20
     b84:	07 94       	ror	r0
     b86:	54 2f       	mov	r21, r20
     b88:	40 2d       	mov	r20, r0
     b8a:	48 2b       	or	r20, r24
     b8c:	40 83       	st	Z, r20
     b8e:	ef 9a       	sbi	0x1d, 7	; 29
     b90:	08 95       	ret

00000b92 <__vector_1>:
#define IMPLEMENT_ISR(vect, interrupt) \
	ISR(vect) { \
		intFunc[interrupt](); \
	}
	
IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
     b92:	1f 92       	push	r1
     b94:	0f 92       	push	r0
     b96:	0f b6       	in	r0, 0x3f	; 63
     b98:	0f 92       	push	r0
     b9a:	11 24       	eor	r1, r1
     b9c:	0b b6       	in	r0, 0x3b	; 59
     b9e:	0f 92       	push	r0
     ba0:	2f 93       	push	r18
     ba2:	3f 93       	push	r19
     ba4:	4f 93       	push	r20
     ba6:	5f 93       	push	r21
     ba8:	6f 93       	push	r22
     baa:	7f 93       	push	r23
     bac:	8f 93       	push	r24
     bae:	9f 93       	push	r25
     bb0:	af 93       	push	r26
     bb2:	bf 93       	push	r27
     bb4:	ef 93       	push	r30
     bb6:	ff 93       	push	r31
     bb8:	e0 91 01 02 	lds	r30, 0x0201	; 0x800201 <intFunc>
     bbc:	f0 91 02 02 	lds	r31, 0x0202	; 0x800202 <intFunc+0x1>
     bc0:	19 95       	eicall
     bc2:	ff 91       	pop	r31
     bc4:	ef 91       	pop	r30
     bc6:	bf 91       	pop	r27
     bc8:	af 91       	pop	r26
     bca:	9f 91       	pop	r25
     bcc:	8f 91       	pop	r24
     bce:	7f 91       	pop	r23
     bd0:	6f 91       	pop	r22
     bd2:	5f 91       	pop	r21
     bd4:	4f 91       	pop	r20
     bd6:	3f 91       	pop	r19
     bd8:	2f 91       	pop	r18
     bda:	0f 90       	pop	r0
     bdc:	0b be       	out	0x3b, r0	; 59
     bde:	0f 90       	pop	r0
     be0:	0f be       	out	0x3f, r0	; 63
     be2:	0f 90       	pop	r0
     be4:	1f 90       	pop	r1
     be6:	18 95       	reti

00000be8 <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
     be8:	1f 92       	push	r1
     bea:	0f 92       	push	r0
     bec:	0f b6       	in	r0, 0x3f	; 63
     bee:	0f 92       	push	r0
     bf0:	11 24       	eor	r1, r1
     bf2:	0b b6       	in	r0, 0x3b	; 59
     bf4:	0f 92       	push	r0
     bf6:	2f 93       	push	r18
     bf8:	3f 93       	push	r19
     bfa:	4f 93       	push	r20
     bfc:	5f 93       	push	r21
     bfe:	6f 93       	push	r22
     c00:	7f 93       	push	r23
     c02:	8f 93       	push	r24
     c04:	9f 93       	push	r25
     c06:	af 93       	push	r26
     c08:	bf 93       	push	r27
     c0a:	ef 93       	push	r30
     c0c:	ff 93       	push	r31
     c0e:	e0 91 03 02 	lds	r30, 0x0203	; 0x800203 <intFunc+0x2>
     c12:	f0 91 04 02 	lds	r31, 0x0204	; 0x800204 <intFunc+0x3>
     c16:	19 95       	eicall
     c18:	ff 91       	pop	r31
     c1a:	ef 91       	pop	r30
     c1c:	bf 91       	pop	r27
     c1e:	af 91       	pop	r26
     c20:	9f 91       	pop	r25
     c22:	8f 91       	pop	r24
     c24:	7f 91       	pop	r23
     c26:	6f 91       	pop	r22
     c28:	5f 91       	pop	r21
     c2a:	4f 91       	pop	r20
     c2c:	3f 91       	pop	r19
     c2e:	2f 91       	pop	r18
     c30:	0f 90       	pop	r0
     c32:	0b be       	out	0x3b, r0	; 59
     c34:	0f 90       	pop	r0
     c36:	0f be       	out	0x3f, r0	; 63
     c38:	0f 90       	pop	r0
     c3a:	1f 90       	pop	r1
     c3c:	18 95       	reti

00000c3e <__vector_3>:
IMPLEMENT_ISR(INT2_vect, EXTERNAL_INT_2)
     c3e:	1f 92       	push	r1
     c40:	0f 92       	push	r0
     c42:	0f b6       	in	r0, 0x3f	; 63
     c44:	0f 92       	push	r0
     c46:	11 24       	eor	r1, r1
     c48:	0b b6       	in	r0, 0x3b	; 59
     c4a:	0f 92       	push	r0
     c4c:	2f 93       	push	r18
     c4e:	3f 93       	push	r19
     c50:	4f 93       	push	r20
     c52:	5f 93       	push	r21
     c54:	6f 93       	push	r22
     c56:	7f 93       	push	r23
     c58:	8f 93       	push	r24
     c5a:	9f 93       	push	r25
     c5c:	af 93       	push	r26
     c5e:	bf 93       	push	r27
     c60:	ef 93       	push	r30
     c62:	ff 93       	push	r31
     c64:	e0 91 05 02 	lds	r30, 0x0205	; 0x800205 <intFunc+0x4>
     c68:	f0 91 06 02 	lds	r31, 0x0206	; 0x800206 <intFunc+0x5>
     c6c:	19 95       	eicall
     c6e:	ff 91       	pop	r31
     c70:	ef 91       	pop	r30
     c72:	bf 91       	pop	r27
     c74:	af 91       	pop	r26
     c76:	9f 91       	pop	r25
     c78:	8f 91       	pop	r24
     c7a:	7f 91       	pop	r23
     c7c:	6f 91       	pop	r22
     c7e:	5f 91       	pop	r21
     c80:	4f 91       	pop	r20
     c82:	3f 91       	pop	r19
     c84:	2f 91       	pop	r18
     c86:	0f 90       	pop	r0
     c88:	0b be       	out	0x3b, r0	; 59
     c8a:	0f 90       	pop	r0
     c8c:	0f be       	out	0x3f, r0	; 63
     c8e:	0f 90       	pop	r0
     c90:	1f 90       	pop	r1
     c92:	18 95       	reti

00000c94 <__vector_4>:
IMPLEMENT_ISR(INT3_vect, EXTERNAL_INT_3)
     c94:	1f 92       	push	r1
     c96:	0f 92       	push	r0
     c98:	0f b6       	in	r0, 0x3f	; 63
     c9a:	0f 92       	push	r0
     c9c:	11 24       	eor	r1, r1
     c9e:	0b b6       	in	r0, 0x3b	; 59
     ca0:	0f 92       	push	r0
     ca2:	2f 93       	push	r18
     ca4:	3f 93       	push	r19
     ca6:	4f 93       	push	r20
     ca8:	5f 93       	push	r21
     caa:	6f 93       	push	r22
     cac:	7f 93       	push	r23
     cae:	8f 93       	push	r24
     cb0:	9f 93       	push	r25
     cb2:	af 93       	push	r26
     cb4:	bf 93       	push	r27
     cb6:	ef 93       	push	r30
     cb8:	ff 93       	push	r31
     cba:	e0 91 07 02 	lds	r30, 0x0207	; 0x800207 <intFunc+0x6>
     cbe:	f0 91 08 02 	lds	r31, 0x0208	; 0x800208 <intFunc+0x7>
     cc2:	19 95       	eicall
     cc4:	ff 91       	pop	r31
     cc6:	ef 91       	pop	r30
     cc8:	bf 91       	pop	r27
     cca:	af 91       	pop	r26
     ccc:	9f 91       	pop	r25
     cce:	8f 91       	pop	r24
     cd0:	7f 91       	pop	r23
     cd2:	6f 91       	pop	r22
     cd4:	5f 91       	pop	r21
     cd6:	4f 91       	pop	r20
     cd8:	3f 91       	pop	r19
     cda:	2f 91       	pop	r18
     cdc:	0f 90       	pop	r0
     cde:	0b be       	out	0x3b, r0	; 59
     ce0:	0f 90       	pop	r0
     ce2:	0f be       	out	0x3f, r0	; 63
     ce4:	0f 90       	pop	r0
     ce6:	1f 90       	pop	r1
     ce8:	18 95       	reti

00000cea <__vector_5>:
IMPLEMENT_ISR(INT4_vect, EXTERNAL_INT_4)
     cea:	1f 92       	push	r1
     cec:	0f 92       	push	r0
     cee:	0f b6       	in	r0, 0x3f	; 63
     cf0:	0f 92       	push	r0
     cf2:	11 24       	eor	r1, r1
     cf4:	0b b6       	in	r0, 0x3b	; 59
     cf6:	0f 92       	push	r0
     cf8:	2f 93       	push	r18
     cfa:	3f 93       	push	r19
     cfc:	4f 93       	push	r20
     cfe:	5f 93       	push	r21
     d00:	6f 93       	push	r22
     d02:	7f 93       	push	r23
     d04:	8f 93       	push	r24
     d06:	9f 93       	push	r25
     d08:	af 93       	push	r26
     d0a:	bf 93       	push	r27
     d0c:	ef 93       	push	r30
     d0e:	ff 93       	push	r31
     d10:	e0 91 09 02 	lds	r30, 0x0209	; 0x800209 <intFunc+0x8>
     d14:	f0 91 0a 02 	lds	r31, 0x020A	; 0x80020a <intFunc+0x9>
     d18:	19 95       	eicall
     d1a:	ff 91       	pop	r31
     d1c:	ef 91       	pop	r30
     d1e:	bf 91       	pop	r27
     d20:	af 91       	pop	r26
     d22:	9f 91       	pop	r25
     d24:	8f 91       	pop	r24
     d26:	7f 91       	pop	r23
     d28:	6f 91       	pop	r22
     d2a:	5f 91       	pop	r21
     d2c:	4f 91       	pop	r20
     d2e:	3f 91       	pop	r19
     d30:	2f 91       	pop	r18
     d32:	0f 90       	pop	r0
     d34:	0b be       	out	0x3b, r0	; 59
     d36:	0f 90       	pop	r0
     d38:	0f be       	out	0x3f, r0	; 63
     d3a:	0f 90       	pop	r0
     d3c:	1f 90       	pop	r1
     d3e:	18 95       	reti

00000d40 <__vector_6>:
IMPLEMENT_ISR(INT5_vect, EXTERNAL_INT_5)
     d40:	1f 92       	push	r1
     d42:	0f 92       	push	r0
     d44:	0f b6       	in	r0, 0x3f	; 63
     d46:	0f 92       	push	r0
     d48:	11 24       	eor	r1, r1
     d4a:	0b b6       	in	r0, 0x3b	; 59
     d4c:	0f 92       	push	r0
     d4e:	2f 93       	push	r18
     d50:	3f 93       	push	r19
     d52:	4f 93       	push	r20
     d54:	5f 93       	push	r21
     d56:	6f 93       	push	r22
     d58:	7f 93       	push	r23
     d5a:	8f 93       	push	r24
     d5c:	9f 93       	push	r25
     d5e:	af 93       	push	r26
     d60:	bf 93       	push	r27
     d62:	ef 93       	push	r30
     d64:	ff 93       	push	r31
     d66:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <intFunc+0xa>
     d6a:	f0 91 0c 02 	lds	r31, 0x020C	; 0x80020c <intFunc+0xb>
     d6e:	19 95       	eicall
     d70:	ff 91       	pop	r31
     d72:	ef 91       	pop	r30
     d74:	bf 91       	pop	r27
     d76:	af 91       	pop	r26
     d78:	9f 91       	pop	r25
     d7a:	8f 91       	pop	r24
     d7c:	7f 91       	pop	r23
     d7e:	6f 91       	pop	r22
     d80:	5f 91       	pop	r21
     d82:	4f 91       	pop	r20
     d84:	3f 91       	pop	r19
     d86:	2f 91       	pop	r18
     d88:	0f 90       	pop	r0
     d8a:	0b be       	out	0x3b, r0	; 59
     d8c:	0f 90       	pop	r0
     d8e:	0f be       	out	0x3f, r0	; 63
     d90:	0f 90       	pop	r0
     d92:	1f 90       	pop	r1
     d94:	18 95       	reti

00000d96 <__vector_7>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
     d96:	1f 92       	push	r1
     d98:	0f 92       	push	r0
     d9a:	0f b6       	in	r0, 0x3f	; 63
     d9c:	0f 92       	push	r0
     d9e:	11 24       	eor	r1, r1
     da0:	0b b6       	in	r0, 0x3b	; 59
     da2:	0f 92       	push	r0
     da4:	2f 93       	push	r18
     da6:	3f 93       	push	r19
     da8:	4f 93       	push	r20
     daa:	5f 93       	push	r21
     dac:	6f 93       	push	r22
     dae:	7f 93       	push	r23
     db0:	8f 93       	push	r24
     db2:	9f 93       	push	r25
     db4:	af 93       	push	r26
     db6:	bf 93       	push	r27
     db8:	ef 93       	push	r30
     dba:	ff 93       	push	r31
     dbc:	e0 91 0d 02 	lds	r30, 0x020D	; 0x80020d <intFunc+0xc>
     dc0:	f0 91 0e 02 	lds	r31, 0x020E	; 0x80020e <intFunc+0xd>
     dc4:	19 95       	eicall
     dc6:	ff 91       	pop	r31
     dc8:	ef 91       	pop	r30
     dca:	bf 91       	pop	r27
     dcc:	af 91       	pop	r26
     dce:	9f 91       	pop	r25
     dd0:	8f 91       	pop	r24
     dd2:	7f 91       	pop	r23
     dd4:	6f 91       	pop	r22
     dd6:	5f 91       	pop	r21
     dd8:	4f 91       	pop	r20
     dda:	3f 91       	pop	r19
     ddc:	2f 91       	pop	r18
     dde:	0f 90       	pop	r0
     de0:	0b be       	out	0x3b, r0	; 59
     de2:	0f 90       	pop	r0
     de4:	0f be       	out	0x3f, r0	; 63
     de6:	0f 90       	pop	r0
     de8:	1f 90       	pop	r1
     dea:	18 95       	reti

00000dec <__vector_8>:
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)
     dec:	1f 92       	push	r1
     dee:	0f 92       	push	r0
     df0:	0f b6       	in	r0, 0x3f	; 63
     df2:	0f 92       	push	r0
     df4:	11 24       	eor	r1, r1
     df6:	0b b6       	in	r0, 0x3b	; 59
     df8:	0f 92       	push	r0
     dfa:	2f 93       	push	r18
     dfc:	3f 93       	push	r19
     dfe:	4f 93       	push	r20
     e00:	5f 93       	push	r21
     e02:	6f 93       	push	r22
     e04:	7f 93       	push	r23
     e06:	8f 93       	push	r24
     e08:	9f 93       	push	r25
     e0a:	af 93       	push	r26
     e0c:	bf 93       	push	r27
     e0e:	ef 93       	push	r30
     e10:	ff 93       	push	r31
     e12:	e0 91 0f 02 	lds	r30, 0x020F	; 0x80020f <intFunc+0xe>
     e16:	f0 91 10 02 	lds	r31, 0x0210	; 0x800210 <intFunc+0xf>
     e1a:	19 95       	eicall
     e1c:	ff 91       	pop	r31
     e1e:	ef 91       	pop	r30
     e20:	bf 91       	pop	r27
     e22:	af 91       	pop	r26
     e24:	9f 91       	pop	r25
     e26:	8f 91       	pop	r24
     e28:	7f 91       	pop	r23
     e2a:	6f 91       	pop	r22
     e2c:	5f 91       	pop	r21
     e2e:	4f 91       	pop	r20
     e30:	3f 91       	pop	r19
     e32:	2f 91       	pop	r18
     e34:	0f 90       	pop	r0
     e36:	0b be       	out	0x3b, r0	; 59
     e38:	0f 90       	pop	r0
     e3a:	0f be       	out	0x3f, r0	; 63
     e3c:	0f 90       	pop	r0
     e3e:	1f 90       	pop	r1
     e40:	18 95       	reti

00000e42 <enablePinChangeInterruptHelper>:
	// delete setting
	risingPorts[arrayPos] &= ~pcintMask;
	fallingPorts[arrayPos] &= ~pcintMask;

	// call the actual hardware disable function
	disablePinChangeInterruptHelper(pcintPort, pcintMask);
     e42:	98 2f       	mov	r25, r24
     e44:	81 30       	cpi	r24, 0x01	; 1
     e46:	59 f0       	breq	.+22     	; 0xe5e <enablePinChangeInterruptHelper+0x1c>
     e48:	18 f0       	brcs	.+6      	; 0xe50 <enablePinChangeInterruptHelper+0xe>
     e4a:	82 30       	cpi	r24, 0x02	; 2
     e4c:	a1 f0       	breq	.+40     	; 0xe76 <enablePinChangeInterruptHelper+0x34>
     e4e:	1b c0       	rjmp	.+54     	; 0xe86 <enablePinChangeInterruptHelper+0x44>
     e50:	83 b1       	in	r24, 0x03	; 3
     e52:	e4 2f       	mov	r30, r20
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	e6 59       	subi	r30, 0x96	; 150
     e58:	fd 4f       	sbci	r31, 0xFD	; 253
     e5a:	80 83       	st	Z, r24
     e5c:	1a c0       	rjmp	.+52     	; 0xe92 <enablePinChangeInterruptHelper+0x50>
     e5e:	2c b1       	in	r18, 0x0c	; 12
     e60:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
     e64:	e4 2f       	mov	r30, r20
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	e6 59       	subi	r30, 0x96	; 150
     e6a:	fd 4f       	sbci	r31, 0xFD	; 253
     e6c:	21 70       	andi	r18, 0x01	; 1
     e6e:	88 0f       	add	r24, r24
     e70:	82 2b       	or	r24, r18
     e72:	80 83       	st	Z, r24
     e74:	14 c0       	rjmp	.+40     	; 0xe9e <enablePinChangeInterruptHelper+0x5c>
     e76:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
     e7a:	e4 2f       	mov	r30, r20
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	e6 59       	subi	r30, 0x96	; 150
     e80:	fd 4f       	sbci	r31, 0xFD	; 253
     e82:	80 83       	st	Z, r24
     e84:	12 c0       	rjmp	.+36     	; 0xeaa <enablePinChangeInterruptHelper+0x68>
     e86:	81 30       	cpi	r24, 0x01	; 1
     e88:	51 f0       	breq	.+20     	; 0xe9e <enablePinChangeInterruptHelper+0x5c>
     e8a:	18 f0       	brcs	.+6      	; 0xe92 <enablePinChangeInterruptHelper+0x50>
     e8c:	82 30       	cpi	r24, 0x02	; 2
     e8e:	91 f4       	brne	.+36     	; 0xeb4 <enablePinChangeInterruptHelper+0x72>
     e90:	0c c0       	rjmp	.+24     	; 0xeaa <enablePinChangeInterruptHelper+0x68>
     e92:	eb e6       	ldi	r30, 0x6B	; 107
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	68 2b       	or	r22, r24
     e9a:	60 83       	st	Z, r22
     e9c:	0b c0       	rjmp	.+22     	; 0xeb4 <enablePinChangeInterruptHelper+0x72>
     e9e:	ec e6       	ldi	r30, 0x6C	; 108
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	68 2b       	or	r22, r24
     ea6:	60 83       	st	Z, r22
     ea8:	05 c0       	rjmp	.+10     	; 0xeb4 <enablePinChangeInterruptHelper+0x72>
     eaa:	ed e6       	ldi	r30, 0x6D	; 109
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	68 2b       	or	r22, r24
     eb2:	60 83       	st	Z, r22
     eb4:	e8 e6       	ldi	r30, 0x68	; 104
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	40 81       	ld	r20, Z
     eba:	21 e0       	ldi	r18, 0x01	; 1
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	b9 01       	movw	r22, r18
     ec0:	02 c0       	rjmp	.+4      	; 0xec6 <enablePinChangeInterruptHelper+0x84>
     ec2:	66 0f       	add	r22, r22
     ec4:	77 1f       	adc	r23, r23
     ec6:	9a 95       	dec	r25
     ec8:	e2 f7       	brpl	.-8      	; 0xec2 <enablePinChangeInterruptHelper+0x80>
     eca:	cb 01       	movw	r24, r22
     ecc:	84 2b       	or	r24, r20
     ece:	80 83       	st	Z, r24
     ed0:	08 95       	ret

00000ed2 <attachPinChangeInterrupt>:
     ed2:	98 2f       	mov	r25, r24
     ed4:	96 95       	lsr	r25
     ed6:	96 95       	lsr	r25
     ed8:	96 95       	lsr	r25
     eda:	28 2f       	mov	r18, r24
     edc:	27 70       	andi	r18, 0x07	; 7
     ede:	78 94       	sei
     ee0:	91 11       	cpse	r25, r1
     ee2:	39 c0       	rjmp	.+114    	; 0xf56 <attachPinChangeInterrupt+0x84>
     ee4:	81 11       	cpse	r24, r1
     ee6:	05 c0       	rjmp	.+10     	; 0xef2 <attachPinChangeInterrupt+0x20>
     ee8:	70 93 a8 03 	sts	0x03A8, r23	; 0x8003a8 <callbackPCINT0+0x1>
     eec:	60 93 a7 03 	sts	0x03A7, r22	; 0x8003a7 <callbackPCINT0>
     ef0:	0e c0       	rjmp	.+28     	; 0xf0e <attachPinChangeInterrupt+0x3c>
     ef2:	81 30       	cpi	r24, 0x01	; 1
     ef4:	29 f4       	brne	.+10     	; 0xf00 <attachPinChangeInterrupt+0x2e>
     ef6:	70 93 ae 03 	sts	0x03AE, r23	; 0x8003ae <callbackPCINT1+0x1>
     efa:	60 93 ad 03 	sts	0x03AD, r22	; 0x8003ad <callbackPCINT1>
     efe:	0e c0       	rjmp	.+28     	; 0xf1c <attachPinChangeInterrupt+0x4a>
     f00:	82 30       	cpi	r24, 0x02	; 2
     f02:	29 f4       	brne	.+10     	; 0xf0e <attachPinChangeInterrupt+0x3c>
     f04:	70 93 c0 03 	sts	0x03C0, r23	; 0x8003c0 <callbackPCINT2+0x1>
     f08:	60 93 bf 03 	sts	0x03BF, r22	; 0x8003bf <callbackPCINT2>
     f0c:	0e c0       	rjmp	.+28     	; 0xf2a <attachPinChangeInterrupt+0x58>
     f0e:	83 30       	cpi	r24, 0x03	; 3
     f10:	29 f4       	brne	.+10     	; 0xf1c <attachPinChangeInterrupt+0x4a>
     f12:	70 93 d2 03 	sts	0x03D2, r23	; 0x8003d2 <callbackPCINT3+0x1>
     f16:	60 93 d1 03 	sts	0x03D1, r22	; 0x8003d1 <callbackPCINT3>
     f1a:	0e c0       	rjmp	.+28     	; 0xf38 <attachPinChangeInterrupt+0x66>
     f1c:	84 30       	cpi	r24, 0x04	; 4
     f1e:	29 f4       	brne	.+10     	; 0xf2a <attachPinChangeInterrupt+0x58>
     f20:	70 93 c2 03 	sts	0x03C2, r23	; 0x8003c2 <callbackPCINT4+0x1>
     f24:	60 93 c1 03 	sts	0x03C1, r22	; 0x8003c1 <callbackPCINT4>
     f28:	0e c0       	rjmp	.+28     	; 0xf46 <attachPinChangeInterrupt+0x74>
     f2a:	85 30       	cpi	r24, 0x05	; 5
     f2c:	29 f4       	brne	.+10     	; 0xf38 <attachPinChangeInterrupt+0x66>
     f2e:	70 93 cc 03 	sts	0x03CC, r23	; 0x8003cc <callbackPCINT5+0x1>
     f32:	60 93 cb 03 	sts	0x03CB, r22	; 0x8003cb <callbackPCINT5>
     f36:	84 c0       	rjmp	.+264    	; 0x1040 <attachPinChangeInterrupt+0x16e>
     f38:	86 30       	cpi	r24, 0x06	; 6
     f3a:	29 f4       	brne	.+10     	; 0xf46 <attachPinChangeInterrupt+0x74>
     f3c:	70 93 bc 03 	sts	0x03BC, r23	; 0x8003bc <callbackPCINT6+0x1>
     f40:	60 93 bb 03 	sts	0x03BB, r22	; 0x8003bb <callbackPCINT6>
     f44:	7d c0       	rjmp	.+250    	; 0x1040 <attachPinChangeInterrupt+0x16e>
     f46:	87 30       	cpi	r24, 0x07	; 7
     f48:	09 f0       	breq	.+2      	; 0xf4c <attachPinChangeInterrupt+0x7a>
     f4a:	7a c0       	rjmp	.+244    	; 0x1040 <attachPinChangeInterrupt+0x16e>
     f4c:	70 93 b0 03 	sts	0x03B0, r23	; 0x8003b0 <callbackPCINT7+0x1>
     f50:	60 93 af 03 	sts	0x03AF, r22	; 0x8003af <callbackPCINT7>
     f54:	75 c0       	rjmp	.+234    	; 0x1040 <attachPinChangeInterrupt+0x16e>
     f56:	91 30       	cpi	r25, 0x01	; 1
     f58:	c9 f5       	brne	.+114    	; 0xfcc <attachPinChangeInterrupt+0xfa>
     f5a:	88 30       	cpi	r24, 0x08	; 8
     f5c:	29 f4       	brne	.+10     	; 0xf68 <attachPinChangeInterrupt+0x96>
     f5e:	70 93 be 03 	sts	0x03BE, r23	; 0x8003be <callbackPCINT8+0x1>
     f62:	60 93 bd 03 	sts	0x03BD, r22	; 0x8003bd <callbackPCINT8>
     f66:	0e c0       	rjmp	.+28     	; 0xf84 <attachPinChangeInterrupt+0xb2>
     f68:	89 30       	cpi	r24, 0x09	; 9
     f6a:	29 f4       	brne	.+10     	; 0xf76 <attachPinChangeInterrupt+0xa4>
     f6c:	70 93 b6 03 	sts	0x03B6, r23	; 0x8003b6 <callbackPCINT9+0x1>
     f70:	60 93 b5 03 	sts	0x03B5, r22	; 0x8003b5 <callbackPCINT9>
     f74:	0e c0       	rjmp	.+28     	; 0xf92 <attachPinChangeInterrupt+0xc0>
     f76:	8a 30       	cpi	r24, 0x0A	; 10
     f78:	29 f4       	brne	.+10     	; 0xf84 <attachPinChangeInterrupt+0xb2>
     f7a:	70 93 c8 03 	sts	0x03C8, r23	; 0x8003c8 <callbackPCINT10+0x1>
     f7e:	60 93 c7 03 	sts	0x03C7, r22	; 0x8003c7 <callbackPCINT10>
     f82:	0e c0       	rjmp	.+28     	; 0xfa0 <attachPinChangeInterrupt+0xce>
     f84:	8b 30       	cpi	r24, 0x0B	; 11
     f86:	29 f4       	brne	.+10     	; 0xf92 <attachPinChangeInterrupt+0xc0>
     f88:	70 93 ba 03 	sts	0x03BA, r23	; 0x8003ba <callbackPCINT11+0x1>
     f8c:	60 93 b9 03 	sts	0x03B9, r22	; 0x8003b9 <callbackPCINT11>
     f90:	0e c0       	rjmp	.+28     	; 0xfae <attachPinChangeInterrupt+0xdc>
     f92:	8c 30       	cpi	r24, 0x0C	; 12
     f94:	29 f4       	brne	.+10     	; 0xfa0 <attachPinChangeInterrupt+0xce>
     f96:	70 93 d4 03 	sts	0x03D4, r23	; 0x8003d4 <callbackPCINT12+0x1>
     f9a:	60 93 d3 03 	sts	0x03D3, r22	; 0x8003d3 <callbackPCINT12>
     f9e:	0e c0       	rjmp	.+28     	; 0xfbc <attachPinChangeInterrupt+0xea>
     fa0:	8d 30       	cpi	r24, 0x0D	; 13
     fa2:	29 f4       	brne	.+10     	; 0xfae <attachPinChangeInterrupt+0xdc>
     fa4:	70 93 c6 03 	sts	0x03C6, r23	; 0x8003c6 <callbackPCINT13+0x1>
     fa8:	60 93 c5 03 	sts	0x03C5, r22	; 0x8003c5 <callbackPCINT13>
     fac:	49 c0       	rjmp	.+146    	; 0x1040 <attachPinChangeInterrupt+0x16e>
     fae:	8e 30       	cpi	r24, 0x0E	; 14
     fb0:	29 f4       	brne	.+10     	; 0xfbc <attachPinChangeInterrupt+0xea>
     fb2:	70 93 c4 03 	sts	0x03C4, r23	; 0x8003c4 <callbackPCINT14+0x1>
     fb6:	60 93 c3 03 	sts	0x03C3, r22	; 0x8003c3 <callbackPCINT14>
     fba:	42 c0       	rjmp	.+132    	; 0x1040 <attachPinChangeInterrupt+0x16e>
     fbc:	8f 30       	cpi	r24, 0x0F	; 15
     fbe:	09 f0       	breq	.+2      	; 0xfc2 <attachPinChangeInterrupt+0xf0>
     fc0:	3f c0       	rjmp	.+126    	; 0x1040 <attachPinChangeInterrupt+0x16e>
     fc2:	70 93 d0 03 	sts	0x03D0, r23	; 0x8003d0 <callbackPCINT15+0x1>
     fc6:	60 93 cf 03 	sts	0x03CF, r22	; 0x8003cf <callbackPCINT15>
     fca:	3a c0       	rjmp	.+116    	; 0x1040 <attachPinChangeInterrupt+0x16e>
     fcc:	92 30       	cpi	r25, 0x02	; 2
     fce:	09 f0       	breq	.+2      	; 0xfd2 <attachPinChangeInterrupt+0x100>
     fd0:	56 c0       	rjmp	.+172    	; 0x107e <attachPinChangeInterrupt+0x1ac>
     fd2:	80 31       	cpi	r24, 0x10	; 16
     fd4:	29 f4       	brne	.+10     	; 0xfe0 <attachPinChangeInterrupt+0x10e>
     fd6:	70 93 b2 03 	sts	0x03B2, r23	; 0x8003b2 <callbackPCINT16+0x1>
     fda:	60 93 b1 03 	sts	0x03B1, r22	; 0x8003b1 <callbackPCINT16>
     fde:	0e c0       	rjmp	.+28     	; 0xffc <attachPinChangeInterrupt+0x12a>
     fe0:	81 31       	cpi	r24, 0x11	; 17
     fe2:	29 f4       	brne	.+10     	; 0xfee <attachPinChangeInterrupt+0x11c>
     fe4:	70 93 ca 03 	sts	0x03CA, r23	; 0x8003ca <callbackPCINT17+0x1>
     fe8:	60 93 c9 03 	sts	0x03C9, r22	; 0x8003c9 <callbackPCINT17>
     fec:	0e c0       	rjmp	.+28     	; 0x100a <attachPinChangeInterrupt+0x138>
     fee:	82 31       	cpi	r24, 0x12	; 18
     ff0:	29 f4       	brne	.+10     	; 0xffc <attachPinChangeInterrupt+0x12a>
     ff2:	70 93 aa 03 	sts	0x03AA, r23	; 0x8003aa <callbackPCINT18+0x1>
     ff6:	60 93 a9 03 	sts	0x03A9, r22	; 0x8003a9 <callbackPCINT18>
     ffa:	0e c0       	rjmp	.+28     	; 0x1018 <attachPinChangeInterrupt+0x146>
     ffc:	83 31       	cpi	r24, 0x13	; 19
     ffe:	29 f4       	brne	.+10     	; 0x100a <attachPinChangeInterrupt+0x138>
    1000:	70 93 b4 03 	sts	0x03B4, r23	; 0x8003b4 <callbackPCINT19+0x1>
    1004:	60 93 b3 03 	sts	0x03B3, r22	; 0x8003b3 <callbackPCINT19>
    1008:	0e c0       	rjmp	.+28     	; 0x1026 <attachPinChangeInterrupt+0x154>
    100a:	84 31       	cpi	r24, 0x14	; 20
    100c:	29 f4       	brne	.+10     	; 0x1018 <attachPinChangeInterrupt+0x146>
    100e:	70 93 d6 03 	sts	0x03D6, r23	; 0x8003d6 <callbackPCINT20+0x1>
    1012:	60 93 d5 03 	sts	0x03D5, r22	; 0x8003d5 <callbackPCINT20>
    1016:	0e c0       	rjmp	.+28     	; 0x1034 <attachPinChangeInterrupt+0x162>
    1018:	85 31       	cpi	r24, 0x15	; 21
    101a:	29 f4       	brne	.+10     	; 0x1026 <attachPinChangeInterrupt+0x154>
    101c:	70 93 ac 03 	sts	0x03AC, r23	; 0x8003ac <callbackPCINT21+0x1>
    1020:	60 93 ab 03 	sts	0x03AB, r22	; 0x8003ab <callbackPCINT21>
    1024:	0d c0       	rjmp	.+26     	; 0x1040 <attachPinChangeInterrupt+0x16e>
    1026:	86 31       	cpi	r24, 0x16	; 22
    1028:	29 f4       	brne	.+10     	; 0x1034 <attachPinChangeInterrupt+0x162>
    102a:	70 93 ce 03 	sts	0x03CE, r23	; 0x8003ce <callbackPCINT22+0x1>
    102e:	60 93 cd 03 	sts	0x03CD, r22	; 0x8003cd <callbackPCINT22>
    1032:	06 c0       	rjmp	.+12     	; 0x1040 <attachPinChangeInterrupt+0x16e>
    1034:	87 31       	cpi	r24, 0x17	; 23
    1036:	21 f4       	brne	.+8      	; 0x1040 <attachPinChangeInterrupt+0x16e>
    1038:	70 93 b8 03 	sts	0x03B8, r23	; 0x8003b8 <callbackPCINT23+0x1>
    103c:	60 93 b7 03 	sts	0x03B7, r22	; 0x8003b7 <callbackPCINT23>
    1040:	61 e0       	ldi	r22, 0x01	; 1
    1042:	70 e0       	ldi	r23, 0x00	; 0
    1044:	02 c0       	rjmp	.+4      	; 0x104a <attachPinChangeInterrupt+0x178>
    1046:	66 0f       	add	r22, r22
    1048:	77 1f       	adc	r23, r23
    104a:	2a 95       	dec	r18
    104c:	e2 f7       	brpl	.-8      	; 0x1046 <attachPinChangeInterrupt+0x174>
    104e:	84 2f       	mov	r24, r20
    1050:	8d 7f       	andi	r24, 0xFD	; 253
    1052:	81 30       	cpi	r24, 0x01	; 1
    1054:	39 f4       	brne	.+14     	; 0x1064 <attachPinChangeInterrupt+0x192>
    1056:	e9 2f       	mov	r30, r25
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	ec 59       	subi	r30, 0x9C	; 156
    105c:	fd 4f       	sbci	r31, 0xFD	; 253
    105e:	80 81       	ld	r24, Z
    1060:	86 2b       	or	r24, r22
    1062:	80 83       	st	Z, r24
    1064:	41 50       	subi	r20, 0x01	; 1
    1066:	42 30       	cpi	r20, 0x02	; 2
    1068:	38 f4       	brcc	.+14     	; 0x1078 <attachPinChangeInterrupt+0x1a6>
    106a:	e9 2f       	mov	r30, r25
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	e9 59       	subi	r30, 0x99	; 153
    1070:	fd 4f       	sbci	r31, 0xFD	; 253
    1072:	80 81       	ld	r24, Z
    1074:	86 2b       	or	r24, r22
    1076:	80 83       	st	Z, r24
    1078:	49 2f       	mov	r20, r25
    107a:	89 2f       	mov	r24, r25
    107c:	e2 ce       	rjmp	.-572    	; 0xe42 <enablePinChangeInterruptHelper>
    107e:	08 95       	ret

00001080 <PinChangeInterruptEventPCINT0>:

//============callbacks==============

#if (PCINT_USE_PCINT0 == true)
void PinChangeInterruptEventPCINT0(void) {
	callbackPCINT0();
    1080:	e0 91 a7 03 	lds	r30, 0x03A7	; 0x8003a7 <callbackPCINT0>
    1084:	f0 91 a8 03 	lds	r31, 0x03A8	; 0x8003a8 <callbackPCINT0+0x1>
    1088:	19 95       	eicall
    108a:	08 95       	ret

0000108c <PinChangeInterruptEventPCINT1>:
}
#endif
#if (PCINT_USE_PCINT1 == true)
void PinChangeInterruptEventPCINT1(void) {
	callbackPCINT1();
    108c:	e0 91 ad 03 	lds	r30, 0x03AD	; 0x8003ad <callbackPCINT1>
    1090:	f0 91 ae 03 	lds	r31, 0x03AE	; 0x8003ae <callbackPCINT1+0x1>
    1094:	19 95       	eicall
    1096:	08 95       	ret

00001098 <PinChangeInterruptEventPCINT2>:
}
#endif
#if (PCINT_USE_PCINT2 == true)
void PinChangeInterruptEventPCINT2(void) {
	callbackPCINT2();
    1098:	e0 91 bf 03 	lds	r30, 0x03BF	; 0x8003bf <callbackPCINT2>
    109c:	f0 91 c0 03 	lds	r31, 0x03C0	; 0x8003c0 <callbackPCINT2+0x1>
    10a0:	19 95       	eicall
    10a2:	08 95       	ret

000010a4 <PinChangeInterruptEventPCINT3>:
}
#endif
#if (PCINT_USE_PCINT3 == true)
void PinChangeInterruptEventPCINT3(void) {
	callbackPCINT3();
    10a4:	e0 91 d1 03 	lds	r30, 0x03D1	; 0x8003d1 <callbackPCINT3>
    10a8:	f0 91 d2 03 	lds	r31, 0x03D2	; 0x8003d2 <callbackPCINT3+0x1>
    10ac:	19 95       	eicall
    10ae:	08 95       	ret

000010b0 <PinChangeInterruptEventPCINT4>:
}
#endif
#if (PCINT_USE_PCINT4 == true)
void PinChangeInterruptEventPCINT4(void) {
	callbackPCINT4();
    10b0:	e0 91 c1 03 	lds	r30, 0x03C1	; 0x8003c1 <callbackPCINT4>
    10b4:	f0 91 c2 03 	lds	r31, 0x03C2	; 0x8003c2 <callbackPCINT4+0x1>
    10b8:	19 95       	eicall
    10ba:	08 95       	ret

000010bc <PinChangeInterruptEventPCINT5>:
}
#endif
#if (PCINT_USE_PCINT5 == true)
void PinChangeInterruptEventPCINT5(void) {
	callbackPCINT5();
    10bc:	e0 91 cb 03 	lds	r30, 0x03CB	; 0x8003cb <callbackPCINT5>
    10c0:	f0 91 cc 03 	lds	r31, 0x03CC	; 0x8003cc <callbackPCINT5+0x1>
    10c4:	19 95       	eicall
    10c6:	08 95       	ret

000010c8 <PinChangeInterruptEventPCINT6>:
}
#endif
#if (PCINT_USE_PCINT6 == true)
void PinChangeInterruptEventPCINT6(void) {
	callbackPCINT6();
    10c8:	e0 91 bb 03 	lds	r30, 0x03BB	; 0x8003bb <callbackPCINT6>
    10cc:	f0 91 bc 03 	lds	r31, 0x03BC	; 0x8003bc <callbackPCINT6+0x1>
    10d0:	19 95       	eicall
    10d2:	08 95       	ret

000010d4 <PinChangeInterruptEventPCINT7>:
}
#endif
#if (PCINT_USE_PCINT7 == true)
void PinChangeInterruptEventPCINT7(void) {
	callbackPCINT7();
    10d4:	e0 91 af 03 	lds	r30, 0x03AF	; 0x8003af <callbackPCINT7>
    10d8:	f0 91 b0 03 	lds	r31, 0x03B0	; 0x8003b0 <callbackPCINT7+0x1>
    10dc:	19 95       	eicall
    10de:	08 95       	ret

000010e0 <__vector_9>:
// Interrupt Handler
//================================================================================
//============= PORT0 ===================================
#if (PCINT_USE_PORT0 == true)

ISR (PCINT0_vect){
    10e0:	1f 92       	push	r1
    10e2:	0f 92       	push	r0
    10e4:	0f b6       	in	r0, 0x3f	; 63
    10e6:	0f 92       	push	r0
    10e8:	11 24       	eor	r1, r1
    10ea:	0b b6       	in	r0, 0x3b	; 59
    10ec:	0f 92       	push	r0
    10ee:	2f 93       	push	r18
    10f0:	3f 93       	push	r19
    10f2:	4f 93       	push	r20
    10f4:	5f 93       	push	r21
    10f6:	6f 93       	push	r22
    10f8:	7f 93       	push	r23
    10fa:	8f 93       	push	r24
    10fc:	9f 93       	push	r25
    10fe:	af 93       	push	r26
    1100:	bf 93       	push	r27
    1102:	cf 93       	push	r28
    1104:	ef 93       	push	r30
    1106:	ff 93       	push	r31
	// get the new and old pin states for port
	uint8_t newPort = PCINT_INPUT_PORT0;
    1108:	23 b1       	in	r18, 0x03	; 3
	
	// compare with the old value to detect a rising or falling
	uint8_t arrayPos = getArrayPosPCINT(0);
	uint8_t change = newPort ^ oldPorts[arrayPos]; //XOR detects change
    110a:	ea e6       	ldi	r30, 0x6A	; 106
    110c:	f2 e0       	ldi	r31, 0x02	; 2
    110e:	c0 81       	ld	r28, Z
    1110:	82 2f       	mov	r24, r18
    1112:	8c 27       	eor	r24, r28
	uint8_t falling = change & oldPorts[arrayPos];
	
	// check which pins are triggered, compared with the settings
	uint8_t risingTrigger = rising & risingPorts[arrayPos];
	uint8_t fallingTrigger = falling & fallingPorts[arrayPos];
	uint8_t trigger = risingTrigger | fallingTrigger;
    1114:	90 91 64 02 	lds	r25, 0x0264	; 0x800264 <__data_end>
    1118:	92 23       	and	r25, r18
    111a:	30 91 67 02 	lds	r19, 0x0267	; 0x800267 <fallingPorts>
    111e:	c3 23       	and	r28, r19
    1120:	c9 2b       	or	r28, r25
    1122:	c8 23       	and	r28, r24
	
	// save the new state for next comparison
	oldPorts[arrayPos] = newPort;
    1124:	20 83       	st	Z, r18
	PCINT_CALLBACK(4, 4);
	PCINT_CALLBACK(5, 5);
	PCINT_CALLBACK(6, 6);
	PCINT_CALLBACK(7, 7);
#else
	PCINT_CALLBACK_PORT0
    1126:	c4 fd       	sbrc	r28, 4
    1128:	c3 df       	rcall	.-122    	; 0x10b0 <PinChangeInterruptEventPCINT4>
    112a:	c5 fd       	sbrc	r28, 5
    112c:	c7 df       	rcall	.-114    	; 0x10bc <PinChangeInterruptEventPCINT5>
    112e:	c6 fd       	sbrc	r28, 6
    1130:	cb df       	rcall	.-106    	; 0x10c8 <PinChangeInterruptEventPCINT6>
    1132:	cc 23       	and	r28, r28
    1134:	0c f4       	brge	.+2      	; 0x1138 <__vector_9+0x58>
    1136:	ce df       	rcall	.-100    	; 0x10d4 <PinChangeInterruptEventPCINT7>
    1138:	c0 fd       	sbrc	r28, 0
    113a:	a2 df       	rcall	.-188    	; 0x1080 <PinChangeInterruptEventPCINT0>
    113c:	c1 fd       	sbrc	r28, 1
    113e:	a6 df       	rcall	.-180    	; 0x108c <PinChangeInterruptEventPCINT1>
    1140:	c2 fd       	sbrc	r28, 2
    1142:	aa df       	rcall	.-172    	; 0x1098 <PinChangeInterruptEventPCINT2>
    1144:	c3 fd       	sbrc	r28, 3
    1146:	ae df       	rcall	.-164    	; 0x10a4 <PinChangeInterruptEventPCINT3>
#endif
	
}
    1148:	ff 91       	pop	r31
    114a:	ef 91       	pop	r30
    114c:	cf 91       	pop	r28
    114e:	bf 91       	pop	r27
    1150:	af 91       	pop	r26
    1152:	9f 91       	pop	r25
    1154:	8f 91       	pop	r24
    1156:	7f 91       	pop	r23
    1158:	6f 91       	pop	r22
    115a:	5f 91       	pop	r21
    115c:	4f 91       	pop	r20
    115e:	3f 91       	pop	r19
    1160:	2f 91       	pop	r18
    1162:	0f 90       	pop	r0
    1164:	0b be       	out	0x3b, r0	; 59
    1166:	0f 90       	pop	r0
    1168:	0f be       	out	0x3f, r0	; 63
    116a:	0f 90       	pop	r0
    116c:	1f 90       	pop	r1
    116e:	18 95       	reti

00001170 <PinChangeInterruptEventPCINT8>:
}
#endif

#if (PCINT_USE_PCINT8 == true)
void PinChangeInterruptEventPCINT8(void) {
	callbackPCINT8();
    1170:	e0 91 bd 03 	lds	r30, 0x03BD	; 0x8003bd <callbackPCINT8>
    1174:	f0 91 be 03 	lds	r31, 0x03BE	; 0x8003be <callbackPCINT8+0x1>
    1178:	19 95       	eicall
    117a:	08 95       	ret

0000117c <PinChangeInterruptEventPCINT9>:
}
#endif
#if (PCINT_USE_PCINT9 == true)
void PinChangeInterruptEventPCINT9(void) {
	callbackPCINT9();
    117c:	e0 91 b5 03 	lds	r30, 0x03B5	; 0x8003b5 <callbackPCINT9>
    1180:	f0 91 b6 03 	lds	r31, 0x03B6	; 0x8003b6 <callbackPCINT9+0x1>
    1184:	19 95       	eicall
    1186:	08 95       	ret

00001188 <PinChangeInterruptEventPCINT10>:
}
#endif
#if (PCINT_USE_PCINT10 == true)
void PinChangeInterruptEventPCINT10(void) {
	callbackPCINT10();
    1188:	e0 91 c7 03 	lds	r30, 0x03C7	; 0x8003c7 <callbackPCINT10>
    118c:	f0 91 c8 03 	lds	r31, 0x03C8	; 0x8003c8 <callbackPCINT10+0x1>
    1190:	19 95       	eicall
    1192:	08 95       	ret

00001194 <PinChangeInterruptEventPCINT11>:
}
#endif
#if (PCINT_USE_PCINT11 == true)
void PinChangeInterruptEventPCINT11(void) {
	callbackPCINT11();
    1194:	e0 91 b9 03 	lds	r30, 0x03B9	; 0x8003b9 <callbackPCINT11>
    1198:	f0 91 ba 03 	lds	r31, 0x03BA	; 0x8003ba <callbackPCINT11+0x1>
    119c:	19 95       	eicall
    119e:	08 95       	ret

000011a0 <PinChangeInterruptEventPCINT12>:
}
#endif
#if (PCINT_USE_PCINT12 == true)
void PinChangeInterruptEventPCINT12(void) {
	callbackPCINT12();
    11a0:	e0 91 d3 03 	lds	r30, 0x03D3	; 0x8003d3 <callbackPCINT12>
    11a4:	f0 91 d4 03 	lds	r31, 0x03D4	; 0x8003d4 <callbackPCINT12+0x1>
    11a8:	19 95       	eicall
    11aa:	08 95       	ret

000011ac <PinChangeInterruptEventPCINT13>:
}
#endif
#if (PCINT_USE_PCINT13 == true)
void PinChangeInterruptEventPCINT13(void) {
	callbackPCINT13();
    11ac:	e0 91 c5 03 	lds	r30, 0x03C5	; 0x8003c5 <callbackPCINT13>
    11b0:	f0 91 c6 03 	lds	r31, 0x03C6	; 0x8003c6 <callbackPCINT13+0x1>
    11b4:	19 95       	eicall
    11b6:	08 95       	ret

000011b8 <PinChangeInterruptEventPCINT14>:
}
#endif
#if (PCINT_USE_PCINT14 == true)
void PinChangeInterruptEventPCINT14(void) {
	callbackPCINT14();
    11b8:	e0 91 c3 03 	lds	r30, 0x03C3	; 0x8003c3 <callbackPCINT14>
    11bc:	f0 91 c4 03 	lds	r31, 0x03C4	; 0x8003c4 <callbackPCINT14+0x1>
    11c0:	19 95       	eicall
    11c2:	08 95       	ret

000011c4 <PinChangeInterruptEventPCINT15>:
}
#endif
#if (PCINT_USE_PCINT15 == true)
void PinChangeInterruptEventPCINT15(void) {
	callbackPCINT15();
    11c4:	e0 91 cf 03 	lds	r30, 0x03CF	; 0x8003cf <callbackPCINT15>
    11c8:	f0 91 d0 03 	lds	r31, 0x03D0	; 0x8003d0 <callbackPCINT15+0x1>
    11cc:	19 95       	eicall
    11ce:	08 95       	ret

000011d0 <__vector_10>:
	
}

//============= PORT1 ===================================
#if (PCINT_USE_PORT1)
ISR(PCINT1_vect) {
    11d0:	1f 92       	push	r1
    11d2:	0f 92       	push	r0
    11d4:	0f b6       	in	r0, 0x3f	; 63
    11d6:	0f 92       	push	r0
    11d8:	11 24       	eor	r1, r1
    11da:	0b b6       	in	r0, 0x3b	; 59
    11dc:	0f 92       	push	r0
    11de:	2f 93       	push	r18
    11e0:	3f 93       	push	r19
    11e2:	4f 93       	push	r20
    11e4:	5f 93       	push	r21
    11e6:	6f 93       	push	r22
    11e8:	7f 93       	push	r23
    11ea:	8f 93       	push	r24
    11ec:	9f 93       	push	r25
    11ee:	af 93       	push	r26
    11f0:	bf 93       	push	r27
    11f2:	cf 93       	push	r28
    11f4:	ef 93       	push	r30
    11f6:	ff 93       	push	r31
	// get the new and old pin states for port
	uint8_t newPort = PCINT_INPUT_PORT1;
    11f8:	8c b1       	in	r24, 0x0c	; 12
    11fa:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
    11fe:	81 70       	andi	r24, 0x01	; 1
    1200:	99 0f       	add	r25, r25
    1202:	98 2b       	or	r25, r24

	// compare with the old value to detect a rising or falling
	uint8_t arrayPos = getArrayPosPCINT(1);
	uint8_t change = newPort ^ oldPorts[arrayPos];
    1204:	ea e6       	ldi	r30, 0x6A	; 106
    1206:	f2 e0       	ldi	r31, 0x02	; 2
    1208:	c1 81       	ldd	r28, Z+1	; 0x01
    120a:	89 2f       	mov	r24, r25
    120c:	8c 27       	eor	r24, r28
	uint8_t falling = change & oldPorts[arrayPos];

	// check which pins are triggered, compared with the settings
	uint8_t risingTrigger = rising & risingPorts[arrayPos];
	uint8_t fallingTrigger = falling & fallingPorts[arrayPos];
	uint8_t trigger = risingTrigger | fallingTrigger;
    120e:	20 91 65 02 	lds	r18, 0x0265	; 0x800265 <__data_end+0x1>
    1212:	29 23       	and	r18, r25
    1214:	30 91 68 02 	lds	r19, 0x0268	; 0x800268 <fallingPorts+0x1>
    1218:	c3 23       	and	r28, r19
    121a:	c2 2b       	or	r28, r18
    121c:	c8 23       	and	r28, r24

	// save the new state for next comparison
	oldPorts[arrayPos] = newPort;
    121e:	91 83       	std	Z+1, r25	; 0x01
	// Execute all functions that should be triggered
	// This way we can exclude a single function
	// and the calling is also much faster
	// We may also reorder the pins for different priority
	#if !defined(PCINT_CALLBACK_PORT1)
	PCINT_CALLBACK(0, 8);
    1220:	c0 fd       	sbrc	r28, 0
    1222:	a6 df       	rcall	.-180    	; 0x1170 <PinChangeInterruptEventPCINT8>
	PCINT_CALLBACK(1, 9);
    1224:	c1 fd       	sbrc	r28, 1
	PCINT_CALLBACK(2, 10);
    1226:	aa df       	rcall	.-172    	; 0x117c <PinChangeInterruptEventPCINT9>
    1228:	c2 fd       	sbrc	r28, 2
	PCINT_CALLBACK(3, 11);
    122a:	ae df       	rcall	.-164    	; 0x1188 <PinChangeInterruptEventPCINT10>
	PCINT_CALLBACK(4, 12);
    122c:	c3 fd       	sbrc	r28, 3
    122e:	b2 df       	rcall	.-156    	; 0x1194 <PinChangeInterruptEventPCINT11>
	PCINT_CALLBACK(5, 13);
    1230:	c4 fd       	sbrc	r28, 4
    1232:	b6 df       	rcall	.-148    	; 0x11a0 <PinChangeInterruptEventPCINT12>
	PCINT_CALLBACK(6, 14);
    1234:	c5 fd       	sbrc	r28, 5
    1236:	ba df       	rcall	.-140    	; 0x11ac <PinChangeInterruptEventPCINT13>
    1238:	c6 fd       	sbrc	r28, 6
	PCINT_CALLBACK(7, 15);
    123a:	be df       	rcall	.-132    	; 0x11b8 <PinChangeInterruptEventPCINT14>
    123c:	cc 23       	and	r28, r28
    123e:	0c f4       	brge	.+2      	; 0x1242 <__vector_10+0x72>
    1240:	c1 df       	rcall	.-126    	; 0x11c4 <PinChangeInterruptEventPCINT15>
	#else
	PCINT_CALLBACK_PORT1
	#endif
}
    1242:	ff 91       	pop	r31
    1244:	ef 91       	pop	r30
    1246:	cf 91       	pop	r28
    1248:	bf 91       	pop	r27
    124a:	af 91       	pop	r26
    124c:	9f 91       	pop	r25
    124e:	8f 91       	pop	r24
    1250:	7f 91       	pop	r23
    1252:	6f 91       	pop	r22
    1254:	5f 91       	pop	r21
    1256:	4f 91       	pop	r20
    1258:	3f 91       	pop	r19
    125a:	2f 91       	pop	r18
    125c:	0f 90       	pop	r0
    125e:	0b be       	out	0x3b, r0	; 59
    1260:	0f 90       	pop	r0
    1262:	0f be       	out	0x3f, r0	; 63
    1264:	0f 90       	pop	r0
    1266:	1f 90       	pop	r1
    1268:	18 95       	reti

0000126a <PinChangeInterruptEventPCINT16>:
}
#endif

#if (PCINT_USE_PCINT16 == true)
void PinChangeInterruptEventPCINT16(void) {
	callbackPCINT16();
    126a:	e0 91 b1 03 	lds	r30, 0x03B1	; 0x8003b1 <callbackPCINT16>
    126e:	f0 91 b2 03 	lds	r31, 0x03B2	; 0x8003b2 <callbackPCINT16+0x1>
    1272:	19 95       	eicall
    1274:	08 95       	ret

00001276 <PinChangeInterruptEventPCINT17>:
}
#endif
#if (PCINT_USE_PCINT17 == true)
void PinChangeInterruptEventPCINT17(void) {
	callbackPCINT17();
    1276:	e0 91 c9 03 	lds	r30, 0x03C9	; 0x8003c9 <callbackPCINT17>
    127a:	f0 91 ca 03 	lds	r31, 0x03CA	; 0x8003ca <callbackPCINT17+0x1>
    127e:	19 95       	eicall
    1280:	08 95       	ret

00001282 <PinChangeInterruptEventPCINT18>:
}
#endif
#if (PCINT_USE_PCINT18 == true)
void PinChangeInterruptEventPCINT18(void) {
	callbackPCINT18();
    1282:	e0 91 a9 03 	lds	r30, 0x03A9	; 0x8003a9 <callbackPCINT18>
    1286:	f0 91 aa 03 	lds	r31, 0x03AA	; 0x8003aa <callbackPCINT18+0x1>
    128a:	19 95       	eicall
    128c:	08 95       	ret

0000128e <PinChangeInterruptEventPCINT19>:
}
#endif
#if (PCINT_USE_PCINT19 == true)
void PinChangeInterruptEventPCINT19(void) {
	callbackPCINT19();
    128e:	e0 91 b3 03 	lds	r30, 0x03B3	; 0x8003b3 <callbackPCINT19>
    1292:	f0 91 b4 03 	lds	r31, 0x03B4	; 0x8003b4 <callbackPCINT19+0x1>
    1296:	19 95       	eicall
    1298:	08 95       	ret

0000129a <PinChangeInterruptEventPCINT20>:
}
#endif
#if (PCINT_USE_PCINT20 == true)
void PinChangeInterruptEventPCINT20(void) {
	callbackPCINT20();
    129a:	e0 91 d5 03 	lds	r30, 0x03D5	; 0x8003d5 <callbackPCINT20>
    129e:	f0 91 d6 03 	lds	r31, 0x03D6	; 0x8003d6 <callbackPCINT20+0x1>
    12a2:	19 95       	eicall
    12a4:	08 95       	ret

000012a6 <PinChangeInterruptEventPCINT21>:
}
#endif
#if (PCINT_USE_PCINT21 == true)
void PinChangeInterruptEventPCINT21(void) {
	callbackPCINT21();
    12a6:	e0 91 ab 03 	lds	r30, 0x03AB	; 0x8003ab <callbackPCINT21>
    12aa:	f0 91 ac 03 	lds	r31, 0x03AC	; 0x8003ac <callbackPCINT21+0x1>
    12ae:	19 95       	eicall
    12b0:	08 95       	ret

000012b2 <PinChangeInterruptEventPCINT22>:
}
#endif
#if (PCINT_USE_PCINT22 == true)
void PinChangeInterruptEventPCINT22(void) {
	callbackPCINT22();
    12b2:	e0 91 cd 03 	lds	r30, 0x03CD	; 0x8003cd <callbackPCINT22>
    12b6:	f0 91 ce 03 	lds	r31, 0x03CE	; 0x8003ce <callbackPCINT22+0x1>
    12ba:	19 95       	eicall
    12bc:	08 95       	ret

000012be <PinChangeInterruptEventPCINT23>:
}
#endif
#if (PCINT_USE_PCINT23 == true)
void PinChangeInterruptEventPCINT23(void) {
	callbackPCINT23();
    12be:	e0 91 b7 03 	lds	r30, 0x03B7	; 0x8003b7 <callbackPCINT23>
    12c2:	f0 91 b8 03 	lds	r31, 0x03B8	; 0x8003b8 <callbackPCINT23+0x1>
    12c6:	19 95       	eicall
    12c8:	08 95       	ret

000012ca <__vector_11>:
	#endif
}
#endif
//============= PORT2 ===================================
#if (PCINT_USE_PORT2)
ISR(PCINT2_vect) {
    12ca:	1f 92       	push	r1
    12cc:	0f 92       	push	r0
    12ce:	0f b6       	in	r0, 0x3f	; 63
    12d0:	0f 92       	push	r0
    12d2:	11 24       	eor	r1, r1
    12d4:	0b b6       	in	r0, 0x3b	; 59
    12d6:	0f 92       	push	r0
    12d8:	2f 93       	push	r18
    12da:	3f 93       	push	r19
    12dc:	4f 93       	push	r20
    12de:	5f 93       	push	r21
    12e0:	6f 93       	push	r22
    12e2:	7f 93       	push	r23
    12e4:	8f 93       	push	r24
    12e6:	9f 93       	push	r25
    12e8:	af 93       	push	r26
    12ea:	bf 93       	push	r27
    12ec:	cf 93       	push	r28
    12ee:	ef 93       	push	r30
    12f0:	ff 93       	push	r31
	// get the new and old pin states for port
	uint8_t newPort = PCINT_INPUT_PORT2;
    12f2:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>

	// compare with the old value to detect a rising or falling
	uint8_t arrayPos = getArrayPosPCINT(2);
	uint8_t change = newPort ^ oldPorts[arrayPos];
    12f6:	ea e6       	ldi	r30, 0x6A	; 106
    12f8:	f2 e0       	ldi	r31, 0x02	; 2
    12fa:	c2 81       	ldd	r28, Z+2	; 0x02
    12fc:	82 2f       	mov	r24, r18
    12fe:	8c 27       	eor	r24, r28
	uint8_t falling = change & oldPorts[arrayPos];

	// check which pins are triggered, compared with the settings
	uint8_t risingTrigger = rising & risingPorts[arrayPos];
	uint8_t fallingTrigger = falling & fallingPorts[arrayPos];
	uint8_t trigger = risingTrigger | fallingTrigger;
    1300:	90 91 66 02 	lds	r25, 0x0266	; 0x800266 <__data_end+0x2>
    1304:	92 23       	and	r25, r18
    1306:	30 91 69 02 	lds	r19, 0x0269	; 0x800269 <fallingPorts+0x2>
    130a:	c3 23       	and	r28, r19
    130c:	c9 2b       	or	r28, r25
    130e:	c8 23       	and	r28, r24

	// save the new state for next comparison
	oldPorts[arrayPos] = newPort;
    1310:	22 83       	std	Z+2, r18	; 0x02
	// Execute all functions that should be triggered
	// This way we can exclude a single function
	// and the calling is also much faster
	// We may also reorder the pins for different priority
	#if !defined(PCINT_CALLBACK_PORT2)
	PCINT_CALLBACK(0, 16);
    1312:	c0 fd       	sbrc	r28, 0
    1314:	aa df       	rcall	.-172    	; 0x126a <PinChangeInterruptEventPCINT16>
	PCINT_CALLBACK(1, 17);
    1316:	c1 fd       	sbrc	r28, 1
	PCINT_CALLBACK(2, 18);
    1318:	ae df       	rcall	.-164    	; 0x1276 <PinChangeInterruptEventPCINT17>
    131a:	c2 fd       	sbrc	r28, 2
	PCINT_CALLBACK(3, 19);
    131c:	b2 df       	rcall	.-156    	; 0x1282 <PinChangeInterruptEventPCINT18>
	PCINT_CALLBACK(4, 20);
    131e:	c3 fd       	sbrc	r28, 3
    1320:	b6 df       	rcall	.-148    	; 0x128e <PinChangeInterruptEventPCINT19>
	PCINT_CALLBACK(5, 21);
    1322:	c4 fd       	sbrc	r28, 4
    1324:	ba df       	rcall	.-140    	; 0x129a <PinChangeInterruptEventPCINT20>
	PCINT_CALLBACK(6, 22);
    1326:	c5 fd       	sbrc	r28, 5
    1328:	be df       	rcall	.-132    	; 0x12a6 <PinChangeInterruptEventPCINT21>
    132a:	c6 fd       	sbrc	r28, 6
	PCINT_CALLBACK(7, 23);
    132c:	c2 df       	rcall	.-124    	; 0x12b2 <PinChangeInterruptEventPCINT22>
    132e:	cc 23       	and	r28, r28
    1330:	0c f4       	brge	.+2      	; 0x1334 <__vector_11+0x6a>
    1332:	c5 df       	rcall	.-118    	; 0x12be <PinChangeInterruptEventPCINT23>
	#else
	PCINT_CALLBACK_PORT2
	#endif
}
    1334:	ff 91       	pop	r31
    1336:	ef 91       	pop	r30
    1338:	cf 91       	pop	r28
    133a:	bf 91       	pop	r27
    133c:	af 91       	pop	r26
    133e:	9f 91       	pop	r25
    1340:	8f 91       	pop	r24
    1342:	7f 91       	pop	r23
    1344:	6f 91       	pop	r22
    1346:	5f 91       	pop	r21
    1348:	4f 91       	pop	r20
    134a:	3f 91       	pop	r19
    134c:	2f 91       	pop	r18
    134e:	0f 90       	pop	r0
    1350:	0b be       	out	0x3b, r0	; 59
    1352:	0f 90       	pop	r0
    1354:	0f be       	out	0x3f, r0	; 63
    1356:	0f 90       	pop	r0
    1358:	1f 90       	pop	r1
    135a:	18 95       	reti

0000135c <pwm_init>:
*/

void pwm_init(void)
{
	// Configure Timer1
	TCCR1B = 0;
    135c:	e1 e8       	ldi	r30, 0x81	; 129
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	10 82       	st	Z, r1
	bitSet(TCCR1B, CS11); 
    1362:	80 81       	ld	r24, Z
    1364:	82 60       	ori	r24, 0x02	; 2
    1366:	80 83       	st	Z, r24
	bitSet(TCCR1B, CS10);	// set clk/64 prescaler
    1368:	80 81       	ld	r24, Z
    136a:	81 60       	ori	r24, 0x01	; 1
    136c:	80 83       	st	Z, r24
	bitSet(TCCR1A, WGM10);	// PWM, Phase Correct, 8-bit
    136e:	e0 e8       	ldi	r30, 0x80	; 128
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	80 81       	ld	r24, Z
    1374:	81 60       	ori	r24, 0x01	; 1
    1376:	80 83       	st	Z, r24
	
	// Configure Timer2
	bitSet(TCCR2B, CS22);	// clk/64 prescaler
    1378:	e1 eb       	ldi	r30, 0xB1	; 177
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	80 81       	ld	r24, Z
    137e:	84 60       	ori	r24, 0x04	; 4
    1380:	80 83       	st	Z, r24
	bitSet(TCCR2A, WGM20);	// PWM, Phase Correct
    1382:	e0 eb       	ldi	r30, 0xB0	; 176
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	80 81       	ld	r24, Z
    1388:	81 60       	ori	r24, 0x01	; 1
    138a:	80 83       	st	Z, r24
	
	// Configure Timer3
	bitSet(TCCR3B, CS31);	
    138c:	e1 e9       	ldi	r30, 0x91	; 145
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	80 81       	ld	r24, Z
    1392:	82 60       	ori	r24, 0x02	; 2
    1394:	80 83       	st	Z, r24
	bitSet(TCCR3B, CS30);	// clk/64 prescaler
    1396:	80 81       	ld	r24, Z
    1398:	81 60       	ori	r24, 0x01	; 1
    139a:	80 83       	st	Z, r24
	bitSet(TCCR3A, WGM30);	// PWM, Phase Correct
    139c:	e0 e9       	ldi	r30, 0x90	; 144
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	80 81       	ld	r24, Z
    13a2:	81 60       	ori	r24, 0x01	; 1
    13a4:	80 83       	st	Z, r24
	
	// Configure Timer4
	bitSet(TCCR4B, CS41);	
    13a6:	e1 ea       	ldi	r30, 0xA1	; 161
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	80 81       	ld	r24, Z
    13ac:	82 60       	ori	r24, 0x02	; 2
    13ae:	80 83       	st	Z, r24
	bitSet(TCCR4B, CS40);	// clk/64 prescaler
    13b0:	80 81       	ld	r24, Z
    13b2:	81 60       	ori	r24, 0x01	; 1
    13b4:	80 83       	st	Z, r24
	bitSet(TCCR4A, WGM40);	// PWM, Phase Correct
    13b6:	e0 ea       	ldi	r30, 0xA0	; 160
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	80 81       	ld	r24, Z
    13bc:	81 60       	ori	r24, 0x01	; 1
    13be:	80 83       	st	Z, r24
	
	// Configure Timer5
	bitSet(TCCR5B, CS51);
    13c0:	e1 e2       	ldi	r30, 0x21	; 33
    13c2:	f1 e0       	ldi	r31, 0x01	; 1
    13c4:	80 81       	ld	r24, Z
    13c6:	82 60       	ori	r24, 0x02	; 2
    13c8:	80 83       	st	Z, r24
	bitSet(TCCR5B, CS50);	// clk/64 prescaler
    13ca:	80 81       	ld	r24, Z
    13cc:	81 60       	ori	r24, 0x01	; 1
    13ce:	80 83       	st	Z, r24
	bitSet(TCCR5A, WGM50);	// PWM, Phase Correct
    13d0:	e0 e2       	ldi	r30, 0x20	; 32
    13d2:	f1 e0       	ldi	r31, 0x01	; 1
    13d4:	80 81       	ld	r24, Z
    13d6:	81 60       	ori	r24, 0x01	; 1
    13d8:	80 83       	st	Z, r24
    13da:	08 95       	ret

000013dc <analogWrite>:
	 
}

// PWM output
void analogWrite(uint8_t pin, int val)
{
    13dc:	1f 93       	push	r17
    13de:	cf 93       	push	r28
    13e0:	df 93       	push	r29
    13e2:	18 2f       	mov	r17, r24
    13e4:	eb 01       	movw	r28, r22
	
	pinMode(pin, OUTPUT);
    13e6:	61 e0       	ldi	r22, 0x01	; 1
    13e8:	05 d9       	rcall	.-3574   	; 0x5f4 <pinMode>
	if (val == 0)
    13ea:	20 97       	sbiw	r28, 0x00	; 0
    13ec:	21 f4       	brne	.+8      	; 0x13f6 <analogWrite+0x1a>
	{
		digitalWrite(pin, LOW);
    13ee:	60 e0       	ldi	r22, 0x00	; 0
    13f0:	81 2f       	mov	r24, r17
    13f2:	3f d9       	rcall	.-3458   	; 0x672 <digitalWrite>
    13f4:	b6 c0       	rjmp	.+364    	; 0x1562 <analogWrite+0x186>
	}
	else if (val == 255)
    13f6:	cf 3f       	cpi	r28, 0xFF	; 255
    13f8:	d1 05       	cpc	r29, r1
    13fa:	21 f4       	brne	.+8      	; 0x1404 <analogWrite+0x28>
	{
		digitalWrite(pin, HIGH);
    13fc:	61 e0       	ldi	r22, 0x01	; 1
    13fe:	81 2f       	mov	r24, r17
    1400:	38 d9       	rcall	.-3472   	; 0x672 <digitalWrite>
    1402:	af c0       	rjmp	.+350    	; 0x1562 <analogWrite+0x186>
	}
	else{
		switch(pinToTimer(pin))
    1404:	e1 2f       	mov	r30, r17
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	e8 5e       	subi	r30, 0xE8	; 232
    140a:	fe 4f       	sbci	r31, 0xFE	; 254
    140c:	e4 91       	lpm	r30, Z
    140e:	8e 2f       	mov	r24, r30
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	fc 01       	movw	r30, r24
    1414:	31 97       	sbiw	r30, 0x01	; 1
    1416:	e2 31       	cpi	r30, 0x12	; 18
    1418:	f1 05       	cpc	r31, r1
    141a:	08 f0       	brcs	.+2      	; 0x141e <analogWrite+0x42>
    141c:	98 c0       	rjmp	.+304    	; 0x154e <analogWrite+0x172>
    141e:	88 27       	eor	r24, r24
    1420:	e6 58       	subi	r30, 0x86	; 134
    1422:	ff 4f       	sbci	r31, 0xFF	; 255
    1424:	8f 4f       	sbci	r24, 0xFF	; 255
    1426:	0c 94 80 12 	jmp	0x2500	; 0x2500 <__tablejump2__>
		{
			//Timer 0
			case TIMER0A:
				//connect pwm to pin on timer 0, channel A
				bitSet(TCCR0A, COM0A1); //clear OC0A on compare match
    142a:	84 b5       	in	r24, 0x24	; 36
    142c:	80 68       	ori	r24, 0x80	; 128
    142e:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; //set pwm duty
    1430:	c7 bd       	out	0x27, r28	; 39
			break;
    1432:	97 c0       	rjmp	.+302    	; 0x1562 <analogWrite+0x186>
			
			case TIMER0B:
				//connect pwm to pin on timer 0, channel B
				bitSet(TCCR0B, COM0B1); //clear OC0A on compare match
    1434:	85 b5       	in	r24, 0x25	; 37
    1436:	80 62       	ori	r24, 0x20	; 32
    1438:	85 bd       	out	0x25, r24	; 37
				OCR0B = val; //set pwm duty
    143a:	c8 bd       	out	0x28, r28	; 40
			break;
    143c:	92 c0       	rjmp	.+292    	; 0x1562 <analogWrite+0x186>
			
			//Timer 1
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				bitSet(TCCR1A, COM1A1);
    143e:	e0 e8       	ldi	r30, 0x80	; 128
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	80 81       	ld	r24, Z
    1444:	80 68       	ori	r24, 0x80	; 128
    1446:	80 83       	st	Z, r24
				OCR1A = val; // set pwm duty
    1448:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
    144c:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
			break;
    1450:	88 c0       	rjmp	.+272    	; 0x1562 <analogWrite+0x186>
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				bitSet(TCCR1A, COM1B1);
    1452:	e0 e8       	ldi	r30, 0x80	; 128
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	80 81       	ld	r24, Z
    1458:	80 62       	ori	r24, 0x20	; 32
    145a:	80 83       	st	Z, r24
				OCR1B = val; // set pwm duty
    145c:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
    1460:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
			break;
    1464:	7e c0       	rjmp	.+252    	; 0x1562 <analogWrite+0x186>
			case TIMER1C:
				// connect pwm to pin on timer 1, channel C
				bitSet(TCCR1A, COM1C1);
    1466:	e0 e8       	ldi	r30, 0x80	; 128
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	80 81       	ld	r24, Z
    146c:	88 60       	ori	r24, 0x08	; 8
    146e:	80 83       	st	Z, r24
				OCR1C = val; // set pwm duty
    1470:	d0 93 8d 00 	sts	0x008D, r29	; 0x80008d <__TEXT_REGION_LENGTH__+0x70008d>
    1474:	c0 93 8c 00 	sts	0x008C, r28	; 0x80008c <__TEXT_REGION_LENGTH__+0x70008c>
			break;
    1478:	74 c0       	rjmp	.+232    	; 0x1562 <analogWrite+0x186>
			
			//Timer 2
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				bitSet(TCCR2A, COM2A1);
    147a:	e0 eb       	ldi	r30, 0xB0	; 176
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	80 81       	ld	r24, Z
    1480:	80 68       	ori	r24, 0x80	; 128
    1482:	80 83       	st	Z, r24
				OCR2A = val; // set pwm duty
    1484:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
			break;
    1488:	6c c0       	rjmp	.+216    	; 0x1562 <analogWrite+0x186>
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				bitSet(TCCR2A, COM2B1);
    148a:	e0 eb       	ldi	r30, 0xB0	; 176
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	80 81       	ld	r24, Z
    1490:	80 62       	ori	r24, 0x20	; 32
    1492:	80 83       	st	Z, r24
				OCR2B = val; // set pwm duty
    1494:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7000b4>
			break;
    1498:	64 c0       	rjmp	.+200    	; 0x1562 <analogWrite+0x186>
			
			//Timer 3
			case TIMER3A:
				// connect pwm to pin on timer 3, channel A
				bitSet(TCCR3A, COM3A1);
    149a:	e0 e9       	ldi	r30, 0x90	; 144
    149c:	f0 e0       	ldi	r31, 0x00	; 0
    149e:	80 81       	ld	r24, Z
    14a0:	80 68       	ori	r24, 0x80	; 128
    14a2:	80 83       	st	Z, r24
				OCR3A = val; // set pwm duty
    14a4:	d0 93 99 00 	sts	0x0099, r29	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
    14a8:	c0 93 98 00 	sts	0x0098, r28	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
			break;
    14ac:	5a c0       	rjmp	.+180    	; 0x1562 <analogWrite+0x186>
			case TIMER3B:
				// connect pwm to pin on timer 3, channel B
				bitSet(TCCR3A, COM3B1);
    14ae:	e0 e9       	ldi	r30, 0x90	; 144
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	80 81       	ld	r24, Z
    14b4:	80 62       	ori	r24, 0x20	; 32
    14b6:	80 83       	st	Z, r24
				OCR3B = val; // set pwm duty
    14b8:	d0 93 9b 00 	sts	0x009B, r29	; 0x80009b <__TEXT_REGION_LENGTH__+0x70009b>
    14bc:	c0 93 9a 00 	sts	0x009A, r28	; 0x80009a <__TEXT_REGION_LENGTH__+0x70009a>
			break;
    14c0:	50 c0       	rjmp	.+160    	; 0x1562 <analogWrite+0x186>
			case TIMER3C:
				// connect pwm to pin on timer 3, channel C
				bitSet(TCCR3A, COM3C1);
    14c2:	e0 e9       	ldi	r30, 0x90	; 144
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	80 81       	ld	r24, Z
    14c8:	88 60       	ori	r24, 0x08	; 8
    14ca:	80 83       	st	Z, r24
				OCR3C = val; // set pwm duty
    14cc:	d0 93 9d 00 	sts	0x009D, r29	; 0x80009d <__TEXT_REGION_LENGTH__+0x70009d>
    14d0:	c0 93 9c 00 	sts	0x009C, r28	; 0x80009c <__TEXT_REGION_LENGTH__+0x70009c>
			break;
    14d4:	46 c0       	rjmp	.+140    	; 0x1562 <analogWrite+0x186>
			
			//Timer 4
			case TIMER4A:
				//connect pwm to pin on timer 4, channel A
				bitSet(TCCR4A, COM4A1);
    14d6:	e0 ea       	ldi	r30, 0xA0	; 160
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	80 81       	ld	r24, Z
    14dc:	80 68       	ori	r24, 0x80	; 128
    14de:	80 83       	st	Z, r24
				OCR4A = val;	// set pwm duty
    14e0:	d0 93 a9 00 	sts	0x00A9, r29	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
    14e4:	c0 93 a8 00 	sts	0x00A8, r28	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
			break;
    14e8:	3c c0       	rjmp	.+120    	; 0x1562 <analogWrite+0x186>
			case TIMER4B:
				// connect pwm to pin on timer 4, channel B
				bitSet(TCCR4A, COM4B1);
    14ea:	e0 ea       	ldi	r30, 0xA0	; 160
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	80 81       	ld	r24, Z
    14f0:	80 62       	ori	r24, 0x20	; 32
    14f2:	80 83       	st	Z, r24
				OCR4B = val; // set pwm duty
    14f4:	d0 93 ab 00 	sts	0x00AB, r29	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7000ab>
    14f8:	c0 93 aa 00 	sts	0x00AA, r28	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7000aa>
			break;
    14fc:	32 c0       	rjmp	.+100    	; 0x1562 <analogWrite+0x186>
			case TIMER4C:
				// connect pwm to pin on timer 4, channel C
				bitSet(TCCR4A, COM4C1);
    14fe:	e0 ea       	ldi	r30, 0xA0	; 160
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	80 81       	ld	r24, Z
    1504:	88 60       	ori	r24, 0x08	; 8
    1506:	80 83       	st	Z, r24
				OCR4C = val; // set pwm duty
    1508:	d0 93 ad 00 	sts	0x00AD, r29	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7000ad>
    150c:	c0 93 ac 00 	sts	0x00AC, r28	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7000ac>
			break;
    1510:	28 c0       	rjmp	.+80     	; 0x1562 <analogWrite+0x186>
			//timer 5
			case TIMER5A:
				// connect pwm to pin on timer 5, channel A
				bitSet(TCCR5A, COM5A1);
    1512:	e0 e2       	ldi	r30, 0x20	; 32
    1514:	f1 e0       	ldi	r31, 0x01	; 1
    1516:	80 81       	ld	r24, Z
    1518:	80 68       	ori	r24, 0x80	; 128
    151a:	80 83       	st	Z, r24
				OCR5A = val; // set pwm duty
    151c:	d0 93 29 01 	sts	0x0129, r29	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    1520:	c0 93 28 01 	sts	0x0128, r28	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
			break;
    1524:	1e c0       	rjmp	.+60     	; 0x1562 <analogWrite+0x186>
			case TIMER5B:
				// connect pwm to pin on timer 5, channel B
				bitSet(TCCR5A, COM5B1);
    1526:	e0 e2       	ldi	r30, 0x20	; 32
    1528:	f1 e0       	ldi	r31, 0x01	; 1
    152a:	80 81       	ld	r24, Z
    152c:	80 62       	ori	r24, 0x20	; 32
    152e:	80 83       	st	Z, r24
				OCR5B = val; // set pwm duty
    1530:	d0 93 2b 01 	sts	0x012B, r29	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
    1534:	c0 93 2a 01 	sts	0x012A, r28	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
			break;
    1538:	14 c0       	rjmp	.+40     	; 0x1562 <analogWrite+0x186>
			case TIMER5C:
				// connect pwm to pin on timer 5, channel C
				bitSet(TCCR5A, COM5C1);
    153a:	e0 e2       	ldi	r30, 0x20	; 32
    153c:	f1 e0       	ldi	r31, 0x01	; 1
    153e:	80 81       	ld	r24, Z
    1540:	88 60       	ori	r24, 0x08	; 8
    1542:	80 83       	st	Z, r24
				OCR5C = val; // set pwm duty
    1544:	d0 93 2d 01 	sts	0x012D, r29	; 0x80012d <__TEXT_REGION_LENGTH__+0x70012d>
    1548:	c0 93 2c 01 	sts	0x012C, r28	; 0x80012c <__TEXT_REGION_LENGTH__+0x70012c>
			break;
    154c:	0a c0       	rjmp	.+20     	; 0x1562 <analogWrite+0x186>
			case NOT_ON_TIMER:
			
			default:
				if (val < 128) {
    154e:	c0 38       	cpi	r28, 0x80	; 128
    1550:	d1 05       	cpc	r29, r1
					digitalWrite(pin, LOW);
    1552:	24 f4       	brge	.+8      	; 0x155c <analogWrite+0x180>
    1554:	60 e0       	ldi	r22, 0x00	; 0
    1556:	81 2f       	mov	r24, r17
    1558:	8c d8       	rcall	.-3816   	; 0x672 <digitalWrite>
				} else {
					digitalWrite(pin, HIGH);
    155a:	03 c0       	rjmp	.+6      	; 0x1562 <analogWrite+0x186>
    155c:	61 e0       	ldi	r22, 0x01	; 1
    155e:	81 2f       	mov	r24, r17
    1560:	88 d8       	rcall	.-3824   	; 0x672 <digitalWrite>
				}
		}
	}
    1562:	df 91       	pop	r29
    1564:	cf 91       	pop	r28
    1566:	1f 91       	pop	r17
    1568:	08 95       	ret

0000156a <_tx2_udr_empty_irq>:
	bitClear(UCSR2B, TXEN2);
	bitClear(UCSR2B, RXCIE2); //Rx complete interrupt enable
	bitClear(UCSR2B, UDRIE2); //data register empty int -disable
	
	//clear any received data
	_rx_buffer_head = _rx_buffer_tail;	
    156a:	e0 91 91 02 	lds	r30, 0x0291	; 0x800291 <_tx_buffer_tail>
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	ee 56       	subi	r30, 0x6E	; 110
    1572:	fd 4f       	sbci	r31, 0xFD	; 253
    1574:	20 81       	ld	r18, Z
    1576:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <_tx_buffer_tail>
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	01 96       	adiw	r24, 0x01	; 1
    157e:	8f 73       	andi	r24, 0x3F	; 63
    1580:	90 78       	andi	r25, 0x80	; 128
    1582:	99 23       	and	r25, r25
    1584:	24 f4       	brge	.+8      	; 0x158e <_tx2_udr_empty_irq+0x24>
    1586:	01 97       	sbiw	r24, 0x01	; 1
    1588:	80 6c       	ori	r24, 0xC0	; 192
    158a:	9f 6f       	ori	r25, 0xFF	; 255
    158c:	01 96       	adiw	r24, 0x01	; 1
    158e:	80 93 91 02 	sts	0x0291, r24	; 0x800291 <_tx_buffer_tail>
    1592:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    1596:	e0 ed       	ldi	r30, 0xD0	; 208
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	80 81       	ld	r24, Z
    159c:	83 70       	andi	r24, 0x03	; 3
    159e:	80 64       	ori	r24, 0x40	; 64
    15a0:	80 83       	st	Z, r24
    15a2:	90 91 54 03 	lds	r25, 0x0354	; 0x800354 <_tx_buffer_head>
    15a6:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <_tx_buffer_tail>
    15aa:	98 13       	cpse	r25, r24
    15ac:	05 c0       	rjmp	.+10     	; 0x15b8 <_tx2_udr_empty_irq+0x4e>
    15ae:	e1 ed       	ldi	r30, 0xD1	; 209
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	80 81       	ld	r24, Z
    15b4:	8f 7d       	andi	r24, 0xDF	; 223
    15b6:	80 83       	st	Z, r24
    15b8:	08 95       	ret

000015ba <_rx2_complete_irq>:
	}
}

void _rx2_complete_irq(void)
{
	if (bit_is_clear(UCSR2A, UPE2)){
    15ba:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    15be:	82 fd       	sbrc	r24, 2
    15c0:	13 c0       	rjmp	.+38     	; 0x15e8 <_rx2_complete_irq+0x2e>
		// No Parity error, read byte and store it in the buffer if there is room
		unsigned char c = UDR2;
    15c2:	20 91 d6 00 	lds	r18, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
		rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    15c6:	80 91 a2 03 	lds	r24, 0x03A2	; 0x8003a2 <_rx_buffer_head>
    15ca:	8f 5f       	subi	r24, 0xFF	; 255
    15cc:	8f 73       	andi	r24, 0x3F	; 63
		
		// if we should be storing the received character into the location just before the tail 
		// (meaning that the head would advance to the current location of the tail), we're about to overflow the buffer
		// and so we don't write the character or advance the head.
		if (i != _rx_buffer_tail) {
    15ce:	90 91 99 03 	lds	r25, 0x0399	; 0x800399 <_rx_buffer_tail>
    15d2:	89 17       	cp	r24, r25
    15d4:	59 f0       	breq	.+22     	; 0x15ec <_rx2_complete_irq+0x32>
			_rx_buffer[_rx_buffer_head] = c;
    15d6:	e0 91 a2 03 	lds	r30, 0x03A2	; 0x8003a2 <_rx_buffer_head>
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	ed 52       	subi	r30, 0x2D	; 45
    15de:	fd 4f       	sbci	r31, 0xFD	; 253
    15e0:	20 83       	st	Z, r18
			_rx_buffer_head = i;
    15e2:	80 93 a2 03 	sts	0x03A2, r24	; 0x8003a2 <_rx_buffer_head>
    15e6:	08 95       	ret
		}
	}else{
		// Parity error, read byte but discard it
		UDR2;
    15e8:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    15ec:	08 95       	ret

000015ee <__vector_51>:
}

/************************************************************************/
/*					 ISRs                                                */
/************************************************************************/
ISR(USART2_RX_vect){
    15ee:	1f 92       	push	r1
    15f0:	0f 92       	push	r0
    15f2:	0f b6       	in	r0, 0x3f	; 63
    15f4:	0f 92       	push	r0
    15f6:	11 24       	eor	r1, r1
    15f8:	0b b6       	in	r0, 0x3b	; 59
    15fa:	0f 92       	push	r0
    15fc:	2f 93       	push	r18
    15fe:	3f 93       	push	r19
    1600:	4f 93       	push	r20
    1602:	5f 93       	push	r21
    1604:	6f 93       	push	r22
    1606:	7f 93       	push	r23
    1608:	8f 93       	push	r24
    160a:	9f 93       	push	r25
    160c:	af 93       	push	r26
    160e:	bf 93       	push	r27
    1610:	ef 93       	push	r30
    1612:	ff 93       	push	r31
	_rx2_complete_irq();
    1614:	d2 df       	rcall	.-92     	; 0x15ba <_rx2_complete_irq>
}
    1616:	ff 91       	pop	r31
    1618:	ef 91       	pop	r30
    161a:	bf 91       	pop	r27
    161c:	af 91       	pop	r26
    161e:	9f 91       	pop	r25
    1620:	8f 91       	pop	r24
    1622:	7f 91       	pop	r23
    1624:	6f 91       	pop	r22
    1626:	5f 91       	pop	r21
    1628:	4f 91       	pop	r20
    162a:	3f 91       	pop	r19
    162c:	2f 91       	pop	r18
    162e:	0f 90       	pop	r0
    1630:	0b be       	out	0x3b, r0	; 59
    1632:	0f 90       	pop	r0
    1634:	0f be       	out	0x3f, r0	; 63
    1636:	0f 90       	pop	r0
    1638:	1f 90       	pop	r1
    163a:	18 95       	reti

0000163c <__vector_52>:

ISR(USART2_UDRE_vect){
    163c:	1f 92       	push	r1
    163e:	0f 92       	push	r0
    1640:	0f b6       	in	r0, 0x3f	; 63
    1642:	0f 92       	push	r0
    1644:	11 24       	eor	r1, r1
    1646:	0b b6       	in	r0, 0x3b	; 59
    1648:	0f 92       	push	r0
    164a:	2f 93       	push	r18
    164c:	3f 93       	push	r19
    164e:	4f 93       	push	r20
    1650:	5f 93       	push	r21
    1652:	6f 93       	push	r22
    1654:	7f 93       	push	r23
    1656:	8f 93       	push	r24
    1658:	9f 93       	push	r25
    165a:	af 93       	push	r26
    165c:	bf 93       	push	r27
    165e:	ef 93       	push	r30
    1660:	ff 93       	push	r31
	_tx2_udr_empty_irq();
    1662:	83 df       	rcall	.-250    	; 0x156a <_tx2_udr_empty_irq>
    1664:	ff 91       	pop	r31
    1666:	ef 91       	pop	r30
    1668:	bf 91       	pop	r27
    166a:	af 91       	pop	r26
    166c:	9f 91       	pop	r25
    166e:	8f 91       	pop	r24
    1670:	7f 91       	pop	r23
    1672:	6f 91       	pop	r22
    1674:	5f 91       	pop	r21
    1676:	4f 91       	pop	r20
    1678:	3f 91       	pop	r19
    167a:	2f 91       	pop	r18
    167c:	0f 90       	pop	r0
    167e:	0b be       	out	0x3b, r0	; 59
    1680:	0f 90       	pop	r0
    1682:	0f be       	out	0x3f, r0	; 63
    1684:	0f 90       	pop	r0
    1686:	1f 90       	pop	r1
    1688:	18 95       	reti

0000168a <millis_init>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    168a:	78 94       	sei
    168c:	84 b5       	in	r24, 0x24	; 36
    168e:	82 60       	ori	r24, 0x02	; 2
    1690:	84 bd       	out	0x24, r24	; 36
    1692:	84 b5       	in	r24, 0x24	; 36
    1694:	81 60       	ori	r24, 0x01	; 1
    1696:	84 bd       	out	0x24, r24	; 36
    1698:	85 b5       	in	r24, 0x25	; 37
    169a:	82 60       	ori	r24, 0x02	; 2
    169c:	85 bd       	out	0x25, r24	; 37
    169e:	85 b5       	in	r24, 0x25	; 37
    16a0:	81 60       	ori	r24, 0x01	; 1
    16a2:	85 bd       	out	0x25, r24	; 37
    16a4:	ee e6       	ldi	r30, 0x6E	; 110
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	80 81       	ld	r24, Z
    16aa:	81 60       	ori	r24, 0x01	; 1
    16ac:	80 83       	st	Z, r24
    16ae:	08 95       	ret

000016b0 <millis>:
    16b0:	2f b7       	in	r18, 0x3f	; 63
    16b2:	f8 94       	cli
    16b4:	60 91 6e 02 	lds	r22, 0x026E	; 0x80026e <timer0_millis>
    16b8:	70 91 6f 02 	lds	r23, 0x026F	; 0x80026f <timer0_millis+0x1>
    16bc:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <timer0_millis+0x2>
    16c0:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <timer0_millis+0x3>
    16c4:	2f bf       	out	0x3f, r18	; 63
    16c6:	08 95       	ret

000016c8 <micros>:
    16c8:	3f b7       	in	r19, 0x3f	; 63
    16ca:	f8 94       	cli
    16cc:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <timer0_overflow_count>
    16d0:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <timer0_overflow_count+0x1>
    16d4:	a0 91 74 02 	lds	r26, 0x0274	; 0x800274 <timer0_overflow_count+0x2>
    16d8:	b0 91 75 02 	lds	r27, 0x0275	; 0x800275 <timer0_overflow_count+0x3>
    16dc:	26 b5       	in	r18, 0x26	; 38
    16de:	a8 9b       	sbis	0x15, 0	; 21
    16e0:	05 c0       	rjmp	.+10     	; 0x16ec <micros+0x24>
    16e2:	2f 3f       	cpi	r18, 0xFF	; 255
    16e4:	19 f0       	breq	.+6      	; 0x16ec <micros+0x24>
    16e6:	01 96       	adiw	r24, 0x01	; 1
    16e8:	a1 1d       	adc	r26, r1
    16ea:	b1 1d       	adc	r27, r1
    16ec:	3f bf       	out	0x3f, r19	; 63
    16ee:	ba 2f       	mov	r27, r26
    16f0:	a9 2f       	mov	r26, r25
    16f2:	98 2f       	mov	r25, r24
    16f4:	88 27       	eor	r24, r24
    16f6:	82 0f       	add	r24, r18
    16f8:	91 1d       	adc	r25, r1
    16fa:	a1 1d       	adc	r26, r1
    16fc:	b1 1d       	adc	r27, r1
    16fe:	bc 01       	movw	r22, r24
    1700:	cd 01       	movw	r24, r26
    1702:	66 0f       	add	r22, r22
    1704:	77 1f       	adc	r23, r23
    1706:	88 1f       	adc	r24, r24
    1708:	99 1f       	adc	r25, r25
    170a:	66 0f       	add	r22, r22
    170c:	77 1f       	adc	r23, r23
    170e:	88 1f       	adc	r24, r24
    1710:	99 1f       	adc	r25, r25
    1712:	08 95       	ret

00001714 <delay_ms>:
    1714:	8f 92       	push	r8
    1716:	9f 92       	push	r9
    1718:	af 92       	push	r10
    171a:	bf 92       	push	r11
    171c:	cf 92       	push	r12
    171e:	df 92       	push	r13
    1720:	ef 92       	push	r14
    1722:	ff 92       	push	r15
    1724:	6b 01       	movw	r12, r22
    1726:	7c 01       	movw	r14, r24
    1728:	cf df       	rcall	.-98     	; 0x16c8 <micros>
    172a:	4b 01       	movw	r8, r22
    172c:	5c 01       	movw	r10, r24
    172e:	c1 14       	cp	r12, r1
    1730:	d1 04       	cpc	r13, r1
    1732:	e1 04       	cpc	r14, r1
    1734:	f1 04       	cpc	r15, r1
    1736:	89 f4       	brne	.+34     	; 0x175a <delay_ms+0x46>
    1738:	21 c0       	rjmp	.+66     	; 0x177c <delay_ms+0x68>
    173a:	21 e0       	ldi	r18, 0x01	; 1
    173c:	c2 1a       	sub	r12, r18
    173e:	d1 08       	sbc	r13, r1
    1740:	e1 08       	sbc	r14, r1
    1742:	f1 08       	sbc	r15, r1
    1744:	88 ee       	ldi	r24, 0xE8	; 232
    1746:	88 0e       	add	r8, r24
    1748:	83 e0       	ldi	r24, 0x03	; 3
    174a:	98 1e       	adc	r9, r24
    174c:	a1 1c       	adc	r10, r1
    174e:	b1 1c       	adc	r11, r1
    1750:	c1 14       	cp	r12, r1
    1752:	d1 04       	cpc	r13, r1
    1754:	e1 04       	cpc	r14, r1
    1756:	f1 04       	cpc	r15, r1
    1758:	89 f0       	breq	.+34     	; 0x177c <delay_ms+0x68>
    175a:	b6 df       	rcall	.-148    	; 0x16c8 <micros>
    175c:	dc 01       	movw	r26, r24
    175e:	cb 01       	movw	r24, r22
    1760:	88 19       	sub	r24, r8
    1762:	99 09       	sbc	r25, r9
    1764:	aa 09       	sbc	r26, r10
    1766:	bb 09       	sbc	r27, r11
    1768:	88 3e       	cpi	r24, 0xE8	; 232
    176a:	93 40       	sbci	r25, 0x03	; 3
    176c:	a1 05       	cpc	r26, r1
    176e:	b1 05       	cpc	r27, r1
    1770:	20 f7       	brcc	.-56     	; 0x173a <delay_ms+0x26>
    1772:	c1 14       	cp	r12, r1
    1774:	d1 04       	cpc	r13, r1
    1776:	e1 04       	cpc	r14, r1
    1778:	f1 04       	cpc	r15, r1
    177a:	79 f7       	brne	.-34     	; 0x175a <delay_ms+0x46>
    177c:	ff 90       	pop	r15
    177e:	ef 90       	pop	r14
    1780:	df 90       	pop	r13
    1782:	cf 90       	pop	r12
    1784:	bf 90       	pop	r11
    1786:	af 90       	pop	r10
    1788:	9f 90       	pop	r9
    178a:	8f 90       	pop	r8
    178c:	08 95       	ret

0000178e <__vector_23>:
	// return = 4 cycles	
}


ISR(TIMER0_OVF_vect)
{
    178e:	1f 92       	push	r1
    1790:	0f 92       	push	r0
    1792:	0f b6       	in	r0, 0x3f	; 63
    1794:	0f 92       	push	r0
    1796:	11 24       	eor	r1, r1
    1798:	2f 93       	push	r18
    179a:	3f 93       	push	r19
    179c:	8f 93       	push	r24
    179e:	9f 93       	push	r25
    17a0:	af 93       	push	r26
    17a2:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    17a4:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <timer0_millis>
    17a8:	90 91 6f 02 	lds	r25, 0x026F	; 0x80026f <timer0_millis+0x1>
    17ac:	a0 91 70 02 	lds	r26, 0x0270	; 0x800270 <timer0_millis+0x2>
    17b0:	b0 91 71 02 	lds	r27, 0x0271	; 0x800271 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    17b4:	30 91 6d 02 	lds	r19, 0x026D	; 0x80026d <timer0_fract>
	
	m += MILLIS_INC;
	f += FRACT_INC;
    17b8:	23 e0       	ldi	r18, 0x03	; 3
    17ba:	23 0f       	add	r18, r19
	
	if(f >= FRACT_MAX){
    17bc:	2d 37       	cpi	r18, 0x7D	; 125
    17be:	20 f4       	brcc	.+8      	; 0x17c8 <__vector_23+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;
	
	m += MILLIS_INC;
    17c0:	01 96       	adiw	r24, 0x01	; 1
    17c2:	a1 1d       	adc	r26, r1
    17c4:	b1 1d       	adc	r27, r1
    17c6:	05 c0       	rjmp	.+10     	; 0x17d2 <__vector_23+0x44>
	f += FRACT_INC;
	
	if(f >= FRACT_MAX){
		f -= FRACT_MAX;
    17c8:	26 e8       	ldi	r18, 0x86	; 134
    17ca:	23 0f       	add	r18, r19
		m += 1;
    17cc:	02 96       	adiw	r24, 0x02	; 2
    17ce:	a1 1d       	adc	r26, r1
    17d0:	b1 1d       	adc	r27, r1
	}
	
	timer0_fract = f;
    17d2:	20 93 6d 02 	sts	0x026D, r18	; 0x80026d <timer0_fract>
	timer0_millis = m;
    17d6:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <timer0_millis>
    17da:	90 93 6f 02 	sts	0x026F, r25	; 0x80026f <timer0_millis+0x1>
    17de:	a0 93 70 02 	sts	0x0270, r26	; 0x800270 <timer0_millis+0x2>
    17e2:	b0 93 71 02 	sts	0x0271, r27	; 0x800271 <timer0_millis+0x3>
	timer0_overflow_count++;
    17e6:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <timer0_overflow_count>
    17ea:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <timer0_overflow_count+0x1>
    17ee:	a0 91 74 02 	lds	r26, 0x0274	; 0x800274 <timer0_overflow_count+0x2>
    17f2:	b0 91 75 02 	lds	r27, 0x0275	; 0x800275 <timer0_overflow_count+0x3>
    17f6:	01 96       	adiw	r24, 0x01	; 1
    17f8:	a1 1d       	adc	r26, r1
    17fa:	b1 1d       	adc	r27, r1
    17fc:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <timer0_overflow_count>
    1800:	90 93 73 02 	sts	0x0273, r25	; 0x800273 <timer0_overflow_count+0x1>
    1804:	a0 93 74 02 	sts	0x0274, r26	; 0x800274 <timer0_overflow_count+0x2>
    1808:	b0 93 75 02 	sts	0x0275, r27	; 0x800275 <timer0_overflow_count+0x3>
    180c:	bf 91       	pop	r27
    180e:	af 91       	pop	r26
    1810:	9f 91       	pop	r25
    1812:	8f 91       	pop	r24
    1814:	3f 91       	pop	r19
    1816:	2f 91       	pop	r18
    1818:	0f 90       	pop	r0
    181a:	0f be       	out	0x3f, r0	; 63
    181c:	0f 90       	pop	r0
    181e:	1f 90       	pop	r1
    1820:	18 95       	reti

00001822 <tone>:
}


//Generate frequency (in hertz) and duration (in milliseconds)
void tone(uint8_t _pin, unsigned int frequency, unsigned long duration)
{
    1822:	8f 92       	push	r8
    1824:	9f 92       	push	r9
    1826:	af 92       	push	r10
    1828:	bf 92       	push	r11
    182a:	cf 92       	push	r12
    182c:	df 92       	push	r13
    182e:	ef 92       	push	r14
    1830:	ff 92       	push	r15
    1832:	0f 93       	push	r16
    1834:	1f 93       	push	r17
    1836:	cf 93       	push	r28
    1838:	8b 01       	movw	r16, r22
    183a:	49 01       	movw	r8, r18
    183c:	5a 01       	movw	r10, r20
	uint8_t prescalarbits = 0b001; // No Prescaling
	long toggle_count = 0;
	uint32_t ocr = 0;
	int8_t _timer;
	sei();
    183e:	78 94       	sei
	
	int8_t _timer = -1;
	
	// if we're already using the pin, the timer should be configured.
	for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
		if (tone_pins[i] == _pin) {
    1840:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <tone_pins>
    1844:	89 13       	cpse	r24, r25
    1846:	0a c3       	rjmp	.+1556   	; 0x1e5c <tone+0x63a>
			return pgm_read_byte(tone_pin_to_timer_PGM + i);
    1848:	eb e7       	ldi	r30, 0x7B	; 123
    184a:	f2 e0       	ldi	r31, 0x02	; 2
    184c:	c4 91       	lpm	r28, Z
    184e:	f6 c0       	rjmp	.+492    	; 0x1a3c <tone+0x21a>
	}
	  
	// search for an unused timer.
	for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
		if (tone_pins[i] == 255) {
			tone_pins[i] = _pin;
    1850:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <tone_pins>
			_timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
    1854:	eb e7       	ldi	r30, 0x7B	; 123
    1856:	f2 e0       	ldi	r31, 0x02	; 2
    1858:	c4 91       	lpm	r28, Z
			break;
		}
	}
	
	//Found timer
	if (_timer != -1)
    185a:	cf 3f       	cpi	r28, 0xFF	; 255
    185c:	09 f4       	brne	.+2      	; 0x1860 <tone+0x3e>
    185e:	44 c3       	rjmp	.+1672   	; 0x1ee8 <tone+0x6c6>
	{
		// Set timer specific stuff
		// All timers in CTC mode
		// 8 bit timers will require changing prescalar values,
		// whereas 16 bit timers are set to either clk/1 or clk/64 prescalar
		switch(_timer)
    1860:	c2 30       	cpi	r28, 0x02	; 2
    1862:	09 f4       	brne	.+2      	; 0x1866 <tone+0x44>
    1864:	57 c0       	rjmp	.+174    	; 0x1914 <tone+0xf2>
    1866:	28 f4       	brcc	.+10     	; 0x1872 <tone+0x50>
    1868:	cc 23       	and	r28, r28
    186a:	61 f0       	breq	.+24     	; 0x1884 <tone+0x62>
    186c:	c1 30       	cpi	r28, 0x01	; 1
    186e:	71 f1       	breq	.+92     	; 0x18cc <tone+0xaa>
    1870:	e5 c0       	rjmp	.+458    	; 0x1a3c <tone+0x21a>
    1872:	c4 30       	cpi	r28, 0x04	; 4
    1874:	09 f4       	brne	.+2      	; 0x1878 <tone+0x56>
    1876:	9a c0       	rjmp	.+308    	; 0x19ac <tone+0x18a>
    1878:	08 f4       	brcc	.+2      	; 0x187c <tone+0x5a>
    187a:	74 c0       	rjmp	.+232    	; 0x1964 <tone+0x142>
    187c:	c5 30       	cpi	r28, 0x05	; 5
    187e:	09 f4       	brne	.+2      	; 0x1882 <tone+0x60>
    1880:	b9 c0       	rjmp	.+370    	; 0x19f4 <tone+0x1d2>
    1882:	dc c0       	rjmp	.+440    	; 0x1a3c <tone+0x21a>
		{
			//TIMER 0 - 8 bit timer
			case 0:
				TCCR0A = 0;
    1884:	14 bc       	out	0x24, r1	; 36
				TCCR0B = 0;
    1886:	15 bc       	out	0x25, r1	; 37
				bitWrite(TCCR0A, WGM01, 1); // set CTC mode
    1888:	94 b5       	in	r25, 0x24	; 36
    188a:	92 60       	ori	r25, 0x02	; 2
    188c:	94 bd       	out	0x24, r25	; 36
				bitWrite(TCCR0B, CS00, 1);  // No prescaling
    188e:	95 b5       	in	r25, 0x25	; 37
    1890:	91 60       	ori	r25, 0x01	; 1
    1892:	95 bd       	out	0x25, r25	; 37
				timer0_pin_port = portOutputRegister(pinToPort(_pin));
    1894:	28 2f       	mov	r18, r24
    1896:	30 e0       	ldi	r19, 0x00	; 0
    1898:	f9 01       	movw	r30, r18
    189a:	ee 51       	subi	r30, 0x1E	; 30
    189c:	fe 4f       	sbci	r31, 0xFE	; 254
    189e:	e4 91       	lpm	r30, Z
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	ee 0f       	add	r30, r30
    18a4:	ff 1f       	adc	r31, r31
    18a6:	e9 5b       	subi	r30, 0xB9	; 185
    18a8:	fd 4f       	sbci	r31, 0xFD	; 253
    18aa:	45 91       	lpm	r20, Z+
    18ac:	54 91       	lpm	r21, Z
    18ae:	50 93 f0 03 	sts	0x03F0, r21	; 0x8003f0 <timer0_pin_port+0x1>
    18b2:	40 93 ef 03 	sts	0x03EF, r20	; 0x8003ef <timer0_pin_port>
				timer0_pin_mask = pinToBitMask(_pin);
    18b6:	f9 01       	movw	r30, r18
    18b8:	e3 58       	subi	r30, 0x83	; 131
    18ba:	fe 4f       	sbci	r31, 0xFE	; 254
    18bc:	24 91       	lpm	r18, Z
    18be:	20 93 d7 03 	sts	0x03D7, r18	; 0x8003d7 <timer0_pin_mask>
	_timer = toneBegin(_pin);
	
	if (_timer >= 0)
	{
		//1. set the pin as OUTPUT
		pinMode(_pin, OUTPUT);
    18c2:	61 e0       	ldi	r22, 0x01	; 1
    18c4:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <pinMode>
				timer5_pin_mask = pinToBitMask(_pin);
			break;
		}
	}
	
	return _timer;	
    18c8:	c0 e0       	ldi	r28, 0x00	; 0
    18ca:	90 c2       	rjmp	.+1312   	; 0x1dec <tone+0x5ca>
				timer0_pin_port = portOutputRegister(pinToPort(_pin));
				timer0_pin_mask = pinToBitMask(_pin);
			break;			
			//TIMER 1 - 16 bit timer
			case 1:
				TCCR1A = 0;
    18cc:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
				TCCR1B = 0;
    18d0:	e1 e8       	ldi	r30, 0x81	; 129
    18d2:	f0 e0       	ldi	r31, 0x00	; 0
    18d4:	10 82       	st	Z, r1
				bitWrite(TCCR1B, WGM12, 1); // Set CTC mode
    18d6:	90 81       	ld	r25, Z
    18d8:	98 60       	ori	r25, 0x08	; 8
    18da:	90 83       	st	Z, r25
				bitWrite(TCCR1B, CS10, 1) ; // No prescaling
    18dc:	90 81       	ld	r25, Z
    18de:	91 60       	ori	r25, 0x01	; 1
    18e0:	90 83       	st	Z, r25
				timer1_pin_port = portOutputRegister(pinToPort(_pin));
    18e2:	28 2f       	mov	r18, r24
    18e4:	30 e0       	ldi	r19, 0x00	; 0
    18e6:	f9 01       	movw	r30, r18
    18e8:	ee 51       	subi	r30, 0x1E	; 30
    18ea:	fe 4f       	sbci	r31, 0xFE	; 254
    18ec:	e4 91       	lpm	r30, Z
    18ee:	f0 e0       	ldi	r31, 0x00	; 0
    18f0:	ee 0f       	add	r30, r30
    18f2:	ff 1f       	adc	r31, r31
    18f4:	e9 5b       	subi	r30, 0xB9	; 185
    18f6:	fd 4f       	sbci	r31, 0xFD	; 253
    18f8:	45 91       	lpm	r20, Z+
    18fa:	54 91       	lpm	r21, Z
    18fc:	50 93 f7 03 	sts	0x03F7, r21	; 0x8003f7 <timer1_pin_port+0x1>
    1900:	40 93 f6 03 	sts	0x03F6, r20	; 0x8003f6 <timer1_pin_port>
				timer1_pin_mask = pinToBitMask(_pin);
    1904:	f9 01       	movw	r30, r18
    1906:	e3 58       	subi	r30, 0x83	; 131
    1908:	fe 4f       	sbci	r31, 0xFE	; 254
    190a:	24 91       	lpm	r18, Z
    190c:	20 93 f5 03 	sts	0x03F5, r18	; 0x8003f5 <timer1_pin_mask>
				timer5_pin_mask = pinToBitMask(_pin);
			break;
		}
	}
	
	return _timer;	
    1910:	c1 e0       	ldi	r28, 0x01	; 1
    1912:	e6 c2       	rjmp	.+1484   	; 0x1ee0 <tone+0x6be>
				timer1_pin_port = portOutputRegister(pinToPort(_pin));
				timer1_pin_mask = pinToBitMask(_pin);
			break;			
			//TIMER 2 - 8 bit timer
			case 2:
				TCCR2A = 0;
    1914:	a0 eb       	ldi	r26, 0xB0	; 176
    1916:	b0 e0       	ldi	r27, 0x00	; 0
    1918:	1c 92       	st	X, r1
				TCCR2B = 0;
    191a:	e1 eb       	ldi	r30, 0xB1	; 177
    191c:	f0 e0       	ldi	r31, 0x00	; 0
    191e:	10 82       	st	Z, r1
				bitWrite(TCCR2A, WGM21, 1); //Set CTC mode
    1920:	9c 91       	ld	r25, X
    1922:	92 60       	ori	r25, 0x02	; 2
    1924:	9c 93       	st	X, r25
				bitWrite(TCCR2B, CS20, 1); // No prescaling
    1926:	90 81       	ld	r25, Z
    1928:	91 60       	ori	r25, 0x01	; 1
    192a:	90 83       	st	Z, r25
				timer2_pin_port = portOutputRegister(pinToPort(_pin));
    192c:	28 2f       	mov	r18, r24
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	f9 01       	movw	r30, r18
    1932:	ee 51       	subi	r30, 0x1E	; 30
    1934:	fe 4f       	sbci	r31, 0xFE	; 254
    1936:	e4 91       	lpm	r30, Z
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	ee 0f       	add	r30, r30
    193c:	ff 1f       	adc	r31, r31
    193e:	e9 5b       	subi	r30, 0xB9	; 185
    1940:	fd 4f       	sbci	r31, 0xFD	; 253
    1942:	45 91       	lpm	r20, Z+
    1944:	54 91       	lpm	r21, Z
    1946:	50 93 de 03 	sts	0x03DE, r21	; 0x8003de <timer2_pin_port+0x1>
    194a:	40 93 dd 03 	sts	0x03DD, r20	; 0x8003dd <timer2_pin_port>
				timer2_pin_mask = pinToBitMask(_pin);
    194e:	f9 01       	movw	r30, r18
    1950:	e3 58       	subi	r30, 0x83	; 131
    1952:	fe 4f       	sbci	r31, 0xFE	; 254
    1954:	24 91       	lpm	r18, Z
    1956:	20 93 ea 03 	sts	0x03EA, r18	; 0x8003ea <timer2_pin_mask>
	_timer = toneBegin(_pin);
	
	if (_timer >= 0)
	{
		//1. set the pin as OUTPUT
		pinMode(_pin, OUTPUT);
    195a:	61 e0       	ldi	r22, 0x01	; 1
    195c:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <pinMode>
				timer5_pin_mask = pinToBitMask(_pin);
			break;
		}
	}
	
	return _timer;	
    1960:	c2 e0       	ldi	r28, 0x02	; 2
    1962:	0b c2       	rjmp	.+1046   	; 0x1d7a <tone+0x558>
				timer2_pin_port = portOutputRegister(pinToPort(_pin));
				timer2_pin_mask = pinToBitMask(_pin);
			break;			
			//TIMER 3 - 16 bit timer
			case 3:
				TCCR3A = 0;
    1964:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
				TCCR3B = 0;
    1968:	e1 e9       	ldi	r30, 0x91	; 145
    196a:	f0 e0       	ldi	r31, 0x00	; 0
    196c:	10 82       	st	Z, r1
				bitWrite(TCCR3B, WGM32, 1); //CTC Mode
    196e:	90 81       	ld	r25, Z
    1970:	98 60       	ori	r25, 0x08	; 8
    1972:	90 83       	st	Z, r25
				bitWrite(TCCR3B, CS30, 1);	//No prescaling
    1974:	90 81       	ld	r25, Z
    1976:	91 60       	ori	r25, 0x01	; 1
    1978:	90 83       	st	Z, r25
				timer3_pin_port = portOutputRegister(pinToPort(_pin));
    197a:	28 2f       	mov	r18, r24
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	f9 01       	movw	r30, r18
    1980:	ee 51       	subi	r30, 0x1E	; 30
    1982:	fe 4f       	sbci	r31, 0xFE	; 254
    1984:	e4 91       	lpm	r30, Z
    1986:	f0 e0       	ldi	r31, 0x00	; 0
    1988:	ee 0f       	add	r30, r30
    198a:	ff 1f       	adc	r31, r31
    198c:	e9 5b       	subi	r30, 0xB9	; 185
    198e:	fd 4f       	sbci	r31, 0xFD	; 253
    1990:	45 91       	lpm	r20, Z+
    1992:	54 91       	lpm	r21, Z
    1994:	50 93 e1 03 	sts	0x03E1, r21	; 0x8003e1 <timer3_pin_port+0x1>
    1998:	40 93 e0 03 	sts	0x03E0, r20	; 0x8003e0 <timer3_pin_port>
				timer3_pin_mask = pinToBitMask(_pin);
    199c:	f9 01       	movw	r30, r18
    199e:	e3 58       	subi	r30, 0x83	; 131
    19a0:	fe 4f       	sbci	r31, 0xFE	; 254
    19a2:	24 91       	lpm	r18, Z
    19a4:	20 93 d8 03 	sts	0x03D8, r18	; 0x8003d8 <timer3_pin_mask>
				timer5_pin_mask = pinToBitMask(_pin);
			break;
		}
	}
	
	return _timer;	
    19a8:	c3 e0       	ldi	r28, 0x03	; 3
    19aa:	9a c2       	rjmp	.+1332   	; 0x1ee0 <tone+0x6be>
				timer3_pin_port = portOutputRegister(pinToPort(_pin));
				timer3_pin_mask = pinToBitMask(_pin);
			break;		
			//TIMER 4 - 16 bit timer
			case 4:
				TCCR4A = 0;
    19ac:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
				TCCR4B = 0;
    19b0:	e1 ea       	ldi	r30, 0xA1	; 161
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	10 82       	st	Z, r1
				bitWrite(TCCR4B, WGM42, 1); //CTC Mode
    19b6:	90 81       	ld	r25, Z
    19b8:	98 60       	ori	r25, 0x08	; 8
    19ba:	90 83       	st	Z, r25
				bitWrite(TCCR4B, CS40, 1);  //No prescaling
    19bc:	90 81       	ld	r25, Z
    19be:	91 60       	ori	r25, 0x01	; 1
    19c0:	90 83       	st	Z, r25
				timer4_pin_port = portOutputRegister(pinToPort(_pin));
    19c2:	28 2f       	mov	r18, r24
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	f9 01       	movw	r30, r18
    19c8:	ee 51       	subi	r30, 0x1E	; 30
    19ca:	fe 4f       	sbci	r31, 0xFE	; 254
    19cc:	e4 91       	lpm	r30, Z
    19ce:	f0 e0       	ldi	r31, 0x00	; 0
    19d0:	ee 0f       	add	r30, r30
    19d2:	ff 1f       	adc	r31, r31
    19d4:	e9 5b       	subi	r30, 0xB9	; 185
    19d6:	fd 4f       	sbci	r31, 0xFD	; 253
    19d8:	45 91       	lpm	r20, Z+
    19da:	54 91       	lpm	r21, Z
    19dc:	50 93 ee 03 	sts	0x03EE, r21	; 0x8003ee <timer4_pin_port+0x1>
    19e0:	40 93 ed 03 	sts	0x03ED, r20	; 0x8003ed <timer4_pin_port>
				timer4_pin_mask = pinToBitMask(_pin);
    19e4:	f9 01       	movw	r30, r18
    19e6:	e3 58       	subi	r30, 0x83	; 131
    19e8:	fe 4f       	sbci	r31, 0xFE	; 254
    19ea:	24 91       	lpm	r18, Z
    19ec:	20 93 df 03 	sts	0x03DF, r18	; 0x8003df <timer4_pin_mask>
				timer5_pin_mask = pinToBitMask(_pin);
			break;
		}
	}
	
	return _timer;	
    19f0:	c4 e0       	ldi	r28, 0x04	; 4
    19f2:	76 c2       	rjmp	.+1260   	; 0x1ee0 <tone+0x6be>
				timer4_pin_port = portOutputRegister(pinToPort(_pin));
				timer4_pin_mask = pinToBitMask(_pin);
			break;	
			//TIMER 5 - 16 bit timer
			case 5:
				TCCR5A = 0;
    19f4:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
				TCCR5B = 0;
    19f8:	e1 e2       	ldi	r30, 0x21	; 33
    19fa:	f1 e0       	ldi	r31, 0x01	; 1
    19fc:	10 82       	st	Z, r1
				bitWrite(TCCR5B, WGM52, 1);
    19fe:	90 81       	ld	r25, Z
    1a00:	98 60       	ori	r25, 0x08	; 8
    1a02:	90 83       	st	Z, r25
				bitWrite(TCCR5B, CS50, 1);
    1a04:	90 81       	ld	r25, Z
    1a06:	91 60       	ori	r25, 0x01	; 1
    1a08:	90 83       	st	Z, r25
				timer5_pin_port = portOutputRegister(pinToPort(_pin));
    1a0a:	28 2f       	mov	r18, r24
    1a0c:	30 e0       	ldi	r19, 0x00	; 0
    1a0e:	f9 01       	movw	r30, r18
    1a10:	ee 51       	subi	r30, 0x1E	; 30
    1a12:	fe 4f       	sbci	r31, 0xFE	; 254
    1a14:	e4 91       	lpm	r30, Z
    1a16:	f0 e0       	ldi	r31, 0x00	; 0
    1a18:	ee 0f       	add	r30, r30
    1a1a:	ff 1f       	adc	r31, r31
    1a1c:	e9 5b       	subi	r30, 0xB9	; 185
    1a1e:	fd 4f       	sbci	r31, 0xFD	; 253
    1a20:	45 91       	lpm	r20, Z+
    1a22:	54 91       	lpm	r21, Z
    1a24:	50 93 ec 03 	sts	0x03EC, r21	; 0x8003ec <timer5_pin_port+0x1>
    1a28:	40 93 eb 03 	sts	0x03EB, r20	; 0x8003eb <timer5_pin_port>
				timer5_pin_mask = pinToBitMask(_pin);
    1a2c:	f9 01       	movw	r30, r18
    1a2e:	e3 58       	subi	r30, 0x83	; 131
    1a30:	fe 4f       	sbci	r31, 0xFE	; 254
    1a32:	24 91       	lpm	r18, Z
    1a34:	20 93 fc 03 	sts	0x03FC, r18	; 0x8003fc <timer5_pin_mask>
			break;
		}
	}
	
	return _timer;	
    1a38:	c5 e0       	ldi	r28, 0x05	; 5
    1a3a:	52 c2       	rjmp	.+1188   	; 0x1ee0 <tone+0x6be>
	int8_t _timer;
	sei();
	
	_timer = toneBegin(_pin);
	
	if (_timer >= 0)
    1a3c:	cc 23       	and	r28, r28
    1a3e:	0c f4       	brge	.+2      	; 0x1a42 <tone+0x220>
    1a40:	53 c2       	rjmp	.+1190   	; 0x1ee8 <tone+0x6c6>
	{
		//1. set the pin as OUTPUT
		pinMode(_pin, OUTPUT);
    1a42:	61 e0       	ldi	r22, 0x01	; 1
    1a44:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <pinMode>
		
		//2. if we are using an 8 bit timer, scan through prescalers to find the best fit
		if (_timer == 0 || _timer == 2)
    1a48:	cc 23       	and	r28, r28
    1a4a:	09 f4       	brne	.+2      	; 0x1a4e <tone+0x22c>
    1a4c:	cf c1       	rjmp	.+926    	; 0x1dec <tone+0x5ca>
    1a4e:	c2 30       	cpi	r28, 0x02	; 2
    1a50:	09 f0       	breq	.+2      	; 0x1a54 <tone+0x232>
    1a52:	77 c0       	rjmp	.+238    	; 0x1b42 <tone+0x320>
    1a54:	92 c1       	rjmp	.+804    	; 0x1d7a <tone+0x558>
				ocr = (F_CPU / (frequency * 2 * 8)) - 1;
				prescalarbits = 0b010; // clk/8 prescaler : For both timers
				
				if (_timer == 2 && ocr > 255)
				{
					ocr = (F_CPU / frequency / 2 / 32) - 1;
    1a56:	68 01       	movw	r12, r16
    1a58:	e1 2c       	mov	r14, r1
    1a5a:	f1 2c       	mov	r15, r1
    1a5c:	60 e9       	ldi	r22, 0x90	; 144
    1a5e:	70 ed       	ldi	r23, 0xD0	; 208
    1a60:	83 e0       	ldi	r24, 0x03	; 3
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	a7 01       	movw	r20, r14
    1a66:	96 01       	movw	r18, r12
    1a68:	29 d5       	rcall	.+2642   	; 0x24bc <__udivmodsi4>
    1a6a:	69 01       	movw	r12, r18
    1a6c:	7a 01       	movw	r14, r20
    1a6e:	81 e0       	ldi	r24, 0x01	; 1
    1a70:	c8 1a       	sub	r12, r24
    1a72:	d1 08       	sbc	r13, r1
    1a74:	e1 08       	sbc	r14, r1
    1a76:	f1 08       	sbc	r15, r1
					prescalarbits = 0b011; // clk/32
				}
					
				if(ocr > 255)
    1a78:	9f ef       	ldi	r25, 0xFF	; 255
    1a7a:	c9 16       	cp	r12, r25
    1a7c:	d1 04       	cpc	r13, r1
    1a7e:	e1 04       	cpc	r14, r1
    1a80:	f1 04       	cpc	r15, r1
    1a82:	11 f0       	breq	.+4      	; 0x1a88 <tone+0x266>
    1a84:	08 f0       	brcs	.+2      	; 0x1a88 <tone+0x266>
    1a86:	cc c1       	rjmp	.+920    	; 0x1e20 <tone+0x5fe>
				prescalarbits = 0b010; // clk/8 prescaler : For both timers
				
				if (_timer == 2 && ocr > 255)
				{
					ocr = (F_CPU / frequency / 2 / 32) - 1;
					prescalarbits = 0b011; // clk/32
    1a88:	83 e0       	ldi	r24, 0x03	; 3
    1a8a:	54 c0       	rjmp	.+168    	; 0x1b34 <tone+0x312>
				}
					
				if(ocr > 255)
				{
					ocr = (F_CPU / (frequency * 2 * 64)) - 1;
    1a8c:	98 01       	movw	r18, r16
    1a8e:	36 95       	lsr	r19
    1a90:	32 2f       	mov	r19, r18
    1a92:	22 27       	eor	r18, r18
    1a94:	37 95       	ror	r19
    1a96:	27 95       	ror	r18
    1a98:	40 e0       	ldi	r20, 0x00	; 0
    1a9a:	50 e0       	ldi	r21, 0x00	; 0
    1a9c:	60 e0       	ldi	r22, 0x00	; 0
    1a9e:	74 e2       	ldi	r23, 0x24	; 36
    1aa0:	84 ef       	ldi	r24, 0xF4	; 244
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	0b d5       	rcall	.+2582   	; 0x24bc <__udivmodsi4>
    1aa6:	69 01       	movw	r12, r18
    1aa8:	7a 01       	movw	r14, r20
    1aaa:	81 e0       	ldi	r24, 0x01	; 1
    1aac:	c8 1a       	sub	r12, r24
    1aae:	d1 08       	sbc	r13, r1
    1ab0:	e1 08       	sbc	r14, r1
    1ab2:	f1 08       	sbc	r15, r1
					prescalarbits = _timer == 0 ? 0b011 : 0b100; // clk/32 for timer 1: clk/64 for timer 2
    1ab4:	83 e0       	ldi	r24, 0x03	; 3
    1ab6:	11 c0       	rjmp	.+34     	; 0x1ada <tone+0x2b8>
					
					if (_timer == 2 && ocr > 255)
					{
						ocr = (F_CPU / (frequency * 2 * 128)) - 1;
    1ab8:	30 2f       	mov	r19, r16
    1aba:	22 27       	eor	r18, r18
    1abc:	40 e0       	ldi	r20, 0x00	; 0
    1abe:	50 e0       	ldi	r21, 0x00	; 0
    1ac0:	60 e0       	ldi	r22, 0x00	; 0
    1ac2:	74 e2       	ldi	r23, 0x24	; 36
    1ac4:	84 ef       	ldi	r24, 0xF4	; 244
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	f9 d4       	rcall	.+2546   	; 0x24bc <__udivmodsi4>
    1aca:	69 01       	movw	r12, r18
    1acc:	7a 01       	movw	r14, r20
    1ace:	91 e0       	ldi	r25, 0x01	; 1
    1ad0:	c9 1a       	sub	r12, r25
    1ad2:	d1 08       	sbc	r13, r1
    1ad4:	e1 08       	sbc	r14, r1
    1ad6:	f1 08       	sbc	r15, r1
						prescalarbits = 0b101; //clk/128
    1ad8:	85 e0       	ldi	r24, 0x05	; 5
					}

					if (ocr > 255)
    1ada:	9f ef       	ldi	r25, 0xFF	; 255
    1adc:	c9 16       	cp	r12, r25
    1ade:	d1 04       	cpc	r13, r1
    1ae0:	e1 04       	cpc	r14, r1
    1ae2:	f1 04       	cpc	r15, r1
    1ae4:	b9 f0       	breq	.+46     	; 0x1b14 <tone+0x2f2>
    1ae6:	b0 f0       	brcs	.+44     	; 0x1b14 <tone+0x2f2>
					{
						ocr = (F_CPU / (frequency * 2 * 256))- 1;
    1ae8:	98 01       	movw	r18, r16
    1aea:	32 2f       	mov	r19, r18
    1aec:	22 27       	eor	r18, r18
    1aee:	33 0f       	add	r19, r19
    1af0:	40 e0       	ldi	r20, 0x00	; 0
    1af2:	50 e0       	ldi	r21, 0x00	; 0
    1af4:	60 e0       	ldi	r22, 0x00	; 0
    1af6:	74 e2       	ldi	r23, 0x24	; 36
    1af8:	84 ef       	ldi	r24, 0xF4	; 244
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	df d4       	rcall	.+2494   	; 0x24bc <__udivmodsi4>
    1afe:	69 01       	movw	r12, r18
    1b00:	7a 01       	movw	r14, r20
    1b02:	81 e0       	ldi	r24, 0x01	; 1
    1b04:	c8 1a       	sub	r12, r24
    1b06:	d1 08       	sbc	r13, r1
    1b08:	e1 08       	sbc	r14, r1
    1b0a:	f1 08       	sbc	r15, r1
						prescalarbits = _timer == 0 ? 0b100 : 0b110;  // clk/64 for timer 1: clk/256 for timer 2
    1b0c:	cc 23       	and	r28, r28
    1b0e:	09 f4       	brne	.+2      	; 0x1b12 <tone+0x2f0>
    1b10:	bf c1       	rjmp	.+894    	; 0x1e90 <tone+0x66e>
    1b12:	dd c1       	rjmp	.+954    	; 0x1ece <tone+0x6ac>
			}
				
			
			//2(b) Set the prescaler for 8 bit timers
			      //TIMER 0
			if (_timer == 0)
    1b14:	c1 11       	cpse	r28, r1
    1b16:	0e c0       	rjmp	.+28     	; 0x1b34 <tone+0x312>
			{
				TCCR0B = (TCCR0B & 0b11111000) | prescalarbits;
    1b18:	95 b5       	in	r25, 0x25	; 37
    1b1a:	98 7f       	andi	r25, 0xF8	; 248
    1b1c:	89 2b       	or	r24, r25
    1b1e:	85 bd       	out	0x25, r24	; 37
				TCCR5B = (TCCR5B & 0b11111000) | prescalarbits;
			}
		}
		
		//4. Calculate the toggle count
		if (duration > 0)
    1b20:	81 14       	cp	r8, r1
    1b22:	91 04       	cpc	r9, r1
    1b24:	a1 04       	cpc	r10, r1
    1b26:	b1 04       	cpc	r11, r1
    1b28:	09 f0       	breq	.+2      	; 0x1b2c <tone+0x30a>
    1b2a:	82 c0       	rjmp	.+260    	; 0x1c30 <tone+0x40e>
		{
			toggle_count = (2 * frequency * duration)/ 1000;
		}else{
			toggle_count = -1;
    1b2c:	2f ef       	ldi	r18, 0xFF	; 255
    1b2e:	3f ef       	ldi	r19, 0xFF	; 255
    1b30:	a9 01       	movw	r20, r18
    1b32:	9d c0       	rjmp	.+314    	; 0x1c6e <tone+0x44c>
			{
				TCCR0B = (TCCR0B & 0b11111000) | prescalarbits;
			}
			else   //TIMER 2
			{
				TCCR2B = (TCCR2B & 0b11111000) | prescalarbits;
    1b34:	e1 eb       	ldi	r30, 0xB1	; 177
    1b36:	f0 e0       	ldi	r31, 0x00	; 0
    1b38:	90 81       	ld	r25, Z
    1b3a:	98 7f       	andi	r25, 0xF8	; 248
    1b3c:	89 2b       	or	r24, r25
    1b3e:	80 83       	st	Z, r24
    1b40:	72 c0       	rjmp	.+228    	; 0x1c26 <tone+0x404>
			}
			
		}else{
			//3. Prescaling for 16 bit timers
			// two choices for the 16 bit timers: clk/1 or clk/64
			ocr = (F_CPU / (frequency * 2)) - 1;
    1b42:	98 01       	movw	r18, r16
    1b44:	22 0f       	add	r18, r18
    1b46:	33 1f       	adc	r19, r19
    1b48:	40 e0       	ldi	r20, 0x00	; 0
    1b4a:	50 e0       	ldi	r21, 0x00	; 0
    1b4c:	60 e0       	ldi	r22, 0x00	; 0
    1b4e:	74 e2       	ldi	r23, 0x24	; 36
    1b50:	84 ef       	ldi	r24, 0xF4	; 244
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	b3 d4       	rcall	.+2406   	; 0x24bc <__udivmodsi4>
    1b56:	69 01       	movw	r12, r18
    1b58:	7a 01       	movw	r14, r20
    1b5a:	91 e0       	ldi	r25, 0x01	; 1
    1b5c:	c9 1a       	sub	r12, r25
    1b5e:	d1 08       	sbc	r13, r1
    1b60:	e1 08       	sbc	r14, r1
    1b62:	f1 08       	sbc	r15, r1
			
			prescalarbits = 0b001; //clk1
			if(ocr > 0xffff) //>65535
    1b64:	c1 14       	cp	r12, r1
    1b66:	d1 04       	cpc	r13, r1
    1b68:	81 e0       	ldi	r24, 0x01	; 1
    1b6a:	e8 06       	cpc	r14, r24
    1b6c:	f1 04       	cpc	r15, r1
    1b6e:	b0 f0       	brcs	.+44     	; 0x1b9c <tone+0x37a>
			{
				ocr = (F_CPU / (frequency * 2 * 64 ))- 1;
    1b70:	98 01       	movw	r18, r16
    1b72:	36 95       	lsr	r19
    1b74:	32 2f       	mov	r19, r18
    1b76:	22 27       	eor	r18, r18
    1b78:	37 95       	ror	r19
    1b7a:	27 95       	ror	r18
    1b7c:	40 e0       	ldi	r20, 0x00	; 0
    1b7e:	50 e0       	ldi	r21, 0x00	; 0
    1b80:	60 e0       	ldi	r22, 0x00	; 0
    1b82:	74 e2       	ldi	r23, 0x24	; 36
    1b84:	84 ef       	ldi	r24, 0xF4	; 244
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	99 d4       	rcall	.+2354   	; 0x24bc <__udivmodsi4>
    1b8a:	69 01       	movw	r12, r18
    1b8c:	7a 01       	movw	r14, r20
    1b8e:	91 e0       	ldi	r25, 0x01	; 1
    1b90:	c9 1a       	sub	r12, r25
    1b92:	d1 08       	sbc	r13, r1
    1b94:	e1 08       	sbc	r14, r1
    1b96:	f1 08       	sbc	r15, r1
				prescalarbits = 0b011; //clk/64
    1b98:	83 e0       	ldi	r24, 0x03	; 3
    1b9a:	01 c0       	rjmp	.+2      	; 0x1b9e <tone+0x37c>
		}else{
			//3. Prescaling for 16 bit timers
			// two choices for the 16 bit timers: clk/1 or clk/64
			ocr = (F_CPU / (frequency * 2)) - 1;
			
			prescalarbits = 0b001; //clk1
    1b9c:	81 e0       	ldi	r24, 0x01	; 1
				ocr = (F_CPU / (frequency * 2 * 64 ))- 1;
				prescalarbits = 0b011; //clk/64
			}
			
			//3(b) Set the prescaler for 16 bit timers
			if (_timer == 1)
    1b9e:	c1 30       	cpi	r28, 0x01	; 1
    1ba0:	79 f4       	brne	.+30     	; 0x1bc0 <tone+0x39e>
			{
				TCCR1B = (TCCR1B & 0b11111000) | prescalarbits;
    1ba2:	e1 e8       	ldi	r30, 0x81	; 129
    1ba4:	f0 e0       	ldi	r31, 0x00	; 0
    1ba6:	90 81       	ld	r25, Z
    1ba8:	98 7f       	andi	r25, 0xF8	; 248
    1baa:	89 2b       	or	r24, r25
    1bac:	80 83       	st	Z, r24
				TCCR5B = (TCCR5B & 0b11111000) | prescalarbits;
			}
		}
		
		//4. Calculate the toggle count
		if (duration > 0)
    1bae:	81 14       	cp	r8, r1
    1bb0:	91 04       	cpc	r9, r1
    1bb2:	a1 04       	cpc	r10, r1
    1bb4:	b1 04       	cpc	r11, r1
    1bb6:	e1 f5       	brne	.+120    	; 0x1c30 <tone+0x40e>
		{
			toggle_count = (2 * frequency * duration)/ 1000;
		}else{
			toggle_count = -1;
    1bb8:	2f ef       	ldi	r18, 0xFF	; 255
    1bba:	3f ef       	ldi	r19, 0xFF	; 255
    1bbc:	a9 01       	movw	r20, r18
    1bbe:	66 c0       	rjmp	.+204    	; 0x1c8c <tone+0x46a>
			//3(b) Set the prescaler for 16 bit timers
			if (_timer == 1)
			{
				TCCR1B = (TCCR1B & 0b11111000) | prescalarbits;
			}
			else if (_timer == 3)
    1bc0:	c3 30       	cpi	r28, 0x03	; 3
    1bc2:	79 f4       	brne	.+30     	; 0x1be2 <tone+0x3c0>
			{
				TCCR3B = (TCCR3B & 0b11111000) | prescalarbits;
    1bc4:	e1 e9       	ldi	r30, 0x91	; 145
    1bc6:	f0 e0       	ldi	r31, 0x00	; 0
    1bc8:	90 81       	ld	r25, Z
    1bca:	98 7f       	andi	r25, 0xF8	; 248
    1bcc:	89 2b       	or	r24, r25
    1bce:	80 83       	st	Z, r24
				TCCR5B = (TCCR5B & 0b11111000) | prescalarbits;
			}
		}
		
		//4. Calculate the toggle count
		if (duration > 0)
    1bd0:	81 14       	cp	r8, r1
    1bd2:	91 04       	cpc	r9, r1
    1bd4:	a1 04       	cpc	r10, r1
    1bd6:	b1 04       	cpc	r11, r1
    1bd8:	59 f5       	brne	.+86     	; 0x1c30 <tone+0x40e>
		{
			toggle_count = (2 * frequency * duration)/ 1000;
		}else{
			toggle_count = -1;
    1bda:	2f ef       	ldi	r18, 0xFF	; 255
    1bdc:	3f ef       	ldi	r19, 0xFF	; 255
    1bde:	a9 01       	movw	r20, r18
    1be0:	77 c0       	rjmp	.+238    	; 0x1cd0 <tone+0x4ae>
			}
			else if (_timer == 3)
			{
				TCCR3B = (TCCR3B & 0b11111000) | prescalarbits;
			}
			else if (_timer == 4)
    1be2:	c4 30       	cpi	r28, 0x04	; 4
    1be4:	79 f4       	brne	.+30     	; 0x1c04 <tone+0x3e2>
			{
				TCCR4B = (TCCR4B & 0b11111000) | prescalarbits;
    1be6:	e1 ea       	ldi	r30, 0xA1	; 161
    1be8:	f0 e0       	ldi	r31, 0x00	; 0
    1bea:	90 81       	ld	r25, Z
    1bec:	98 7f       	andi	r25, 0xF8	; 248
    1bee:	89 2b       	or	r24, r25
    1bf0:	80 83       	st	Z, r24
				TCCR5B = (TCCR5B & 0b11111000) | prescalarbits;
			}
		}
		
		//4. Calculate the toggle count
		if (duration > 0)
    1bf2:	81 14       	cp	r8, r1
    1bf4:	91 04       	cpc	r9, r1
    1bf6:	a1 04       	cpc	r10, r1
    1bf8:	b1 04       	cpc	r11, r1
    1bfa:	d1 f4       	brne	.+52     	; 0x1c30 <tone+0x40e>
		{
			toggle_count = (2 * frequency * duration)/ 1000;
		}else{
			toggle_count = -1;
    1bfc:	2f ef       	ldi	r18, 0xFF	; 255
    1bfe:	3f ef       	ldi	r19, 0xFF	; 255
    1c00:	a9 01       	movw	r20, r18
    1c02:	78 c0       	rjmp	.+240    	; 0x1cf4 <tone+0x4d2>
			}
			else if (_timer == 4)
			{
				TCCR4B = (TCCR4B & 0b11111000) | prescalarbits;
			}
			else if (_timer == 5)
    1c04:	c5 30       	cpi	r28, 0x05	; 5
    1c06:	79 f4       	brne	.+30     	; 0x1c26 <tone+0x404>
			{
				TCCR5B = (TCCR5B & 0b11111000) | prescalarbits;
    1c08:	e1 e2       	ldi	r30, 0x21	; 33
    1c0a:	f1 e0       	ldi	r31, 0x01	; 1
    1c0c:	90 81       	ld	r25, Z
    1c0e:	98 7f       	andi	r25, 0xF8	; 248
    1c10:	89 2b       	or	r24, r25
    1c12:	80 83       	st	Z, r24
			}
		}
		
		//4. Calculate the toggle count
		if (duration > 0)
    1c14:	81 14       	cp	r8, r1
    1c16:	91 04       	cpc	r9, r1
    1c18:	a1 04       	cpc	r10, r1
    1c1a:	b1 04       	cpc	r11, r1
    1c1c:	49 f4       	brne	.+18     	; 0x1c30 <tone+0x40e>
		{
			toggle_count = (2 * frequency * duration)/ 1000;
		}else{
			toggle_count = -1;
    1c1e:	2f ef       	ldi	r18, 0xFF	; 255
    1c20:	3f ef       	ldi	r19, 0xFF	; 255
    1c22:	a9 01       	movw	r20, r18
    1c24:	79 c0       	rjmp	.+242    	; 0x1d18 <tone+0x4f6>
				TCCR5B = (TCCR5B & 0b11111000) | prescalarbits;
			}
		}
		
		//4. Calculate the toggle count
		if (duration > 0)
    1c26:	81 14       	cp	r8, r1
    1c28:	91 04       	cpc	r9, r1
    1c2a:	a1 04       	cpc	r10, r1
    1c2c:	b1 04       	cpc	r11, r1
		{
			toggle_count = (2 * frequency * duration)/ 1000;
    1c2e:	61 f0       	breq	.+24     	; 0x1c48 <tone+0x426>
    1c30:	d8 01       	movw	r26, r16
    1c32:	aa 0f       	add	r26, r26
    1c34:	bb 1f       	adc	r27, r27
    1c36:	a5 01       	movw	r20, r10
    1c38:	94 01       	movw	r18, r8
    1c3a:	6a d4       	rcall	.+2260   	; 0x2510 <__muluhisi3>
    1c3c:	28 ee       	ldi	r18, 0xE8	; 232
    1c3e:	33 e0       	ldi	r19, 0x03	; 3
    1c40:	40 e0       	ldi	r20, 0x00	; 0
    1c42:	50 e0       	ldi	r21, 0x00	; 0
    1c44:	3b d4       	rcall	.+2166   	; 0x24bc <__udivmodsi4>
    1c46:	03 c0       	rjmp	.+6      	; 0x1c4e <tone+0x42c>
		}else{
			toggle_count = -1;
    1c48:	2f ef       	ldi	r18, 0xFF	; 255
    1c4a:	3f ef       	ldi	r19, 0xFF	; 255
    1c4c:	a9 01       	movw	r20, r18
		}
		
		//5.Set the OCR for the given timer
		//Set the toggle count and then turn on the interrupts
		switch(_timer)
    1c4e:	c2 30       	cpi	r28, 0x02	; 2
    1c50:	79 f1       	breq	.+94     	; 0x1cb0 <tone+0x48e>
    1c52:	2c f4       	brge	.+10     	; 0x1c5e <tone+0x43c>
    1c54:	cc 23       	and	r28, r28
    1c56:	59 f0       	breq	.+22     	; 0x1c6e <tone+0x44c>
    1c58:	c1 30       	cpi	r28, 0x01	; 1
    1c5a:	c1 f0       	breq	.+48     	; 0x1c8c <tone+0x46a>
    1c5c:	45 c1       	rjmp	.+650    	; 0x1ee8 <tone+0x6c6>
    1c5e:	c4 30       	cpi	r28, 0x04	; 4
    1c60:	09 f4       	brne	.+2      	; 0x1c64 <tone+0x442>
    1c62:	48 c0       	rjmp	.+144    	; 0x1cf4 <tone+0x4d2>
    1c64:	ac f1       	brlt	.+106    	; 0x1cd0 <tone+0x4ae>
    1c66:	c5 30       	cpi	r28, 0x05	; 5
    1c68:	09 f4       	brne	.+2      	; 0x1c6c <tone+0x44a>
    1c6a:	56 c0       	rjmp	.+172    	; 0x1d18 <tone+0x4f6>
    1c6c:	3d c1       	rjmp	.+634    	; 0x1ee8 <tone+0x6c6>
		{
			case 0:
				OCR0A = ocr;
    1c6e:	c7 bc       	out	0x27, r12	; 39
				timer0_toggle_count = toggle_count;
    1c70:	20 93 f8 03 	sts	0x03F8, r18	; 0x8003f8 <timer0_toggle_count>
    1c74:	30 93 f9 03 	sts	0x03F9, r19	; 0x8003f9 <timer0_toggle_count+0x1>
    1c78:	40 93 fa 03 	sts	0x03FA, r20	; 0x8003fa <timer0_toggle_count+0x2>
    1c7c:	50 93 fb 03 	sts	0x03FB, r21	; 0x8003fb <timer0_toggle_count+0x3>
				bitWrite(TIMSK0, OCIE0A, 1); //turn on interrupt
    1c80:	ee e6       	ldi	r30, 0x6E	; 110
    1c82:	f0 e0       	ldi	r31, 0x00	; 0
    1c84:	80 81       	ld	r24, Z
    1c86:	82 60       	ori	r24, 0x02	; 2
    1c88:	80 83       	st	Z, r24
			break;
    1c8a:	2e c1       	rjmp	.+604    	; 0x1ee8 <tone+0x6c6>
			
			case 1:
				OCR1A = ocr;
    1c8c:	d0 92 89 00 	sts	0x0089, r13	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
    1c90:	c0 92 88 00 	sts	0x0088, r12	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
				timer1_toggle_count = toggle_count;
    1c94:	20 93 f1 03 	sts	0x03F1, r18	; 0x8003f1 <timer1_toggle_count>
    1c98:	30 93 f2 03 	sts	0x03F2, r19	; 0x8003f2 <timer1_toggle_count+0x1>
    1c9c:	40 93 f3 03 	sts	0x03F3, r20	; 0x8003f3 <timer1_toggle_count+0x2>
    1ca0:	50 93 f4 03 	sts	0x03F4, r21	; 0x8003f4 <timer1_toggle_count+0x3>
				bitWrite(TIMSK1, OCIE1A, 1);
    1ca4:	ef e6       	ldi	r30, 0x6F	; 111
    1ca6:	f0 e0       	ldi	r31, 0x00	; 0
    1ca8:	80 81       	ld	r24, Z
    1caa:	82 60       	ori	r24, 0x02	; 2
    1cac:	80 83       	st	Z, r24
			break;
    1cae:	1c c1       	rjmp	.+568    	; 0x1ee8 <tone+0x6c6>
			
			case 2:
				OCR2A = ocr;
    1cb0:	c0 92 b3 00 	sts	0x00B3, r12	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
				timer2_toggle_count = toggle_count;
    1cb4:	20 93 fd 03 	sts	0x03FD, r18	; 0x8003fd <timer2_toggle_count>
    1cb8:	30 93 fe 03 	sts	0x03FE, r19	; 0x8003fe <timer2_toggle_count+0x1>
    1cbc:	40 93 ff 03 	sts	0x03FF, r20	; 0x8003ff <timer2_toggle_count+0x2>
    1cc0:	50 93 00 04 	sts	0x0400, r21	; 0x800400 <timer2_toggle_count+0x3>
				bitWrite(TIMSK2, OCIE2A, 1);
    1cc4:	e0 e7       	ldi	r30, 0x70	; 112
    1cc6:	f0 e0       	ldi	r31, 0x00	; 0
    1cc8:	80 81       	ld	r24, Z
    1cca:	82 60       	ori	r24, 0x02	; 2
    1ccc:	80 83       	st	Z, r24
			break;
    1cce:	0c c1       	rjmp	.+536    	; 0x1ee8 <tone+0x6c6>
			
			case 3:
				OCR3A = ocr;
    1cd0:	d0 92 99 00 	sts	0x0099, r13	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
    1cd4:	c0 92 98 00 	sts	0x0098, r12	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
				timer3_toggle_count = toggle_count;
    1cd8:	20 93 e6 03 	sts	0x03E6, r18	; 0x8003e6 <timer3_toggle_count>
    1cdc:	30 93 e7 03 	sts	0x03E7, r19	; 0x8003e7 <timer3_toggle_count+0x1>
    1ce0:	40 93 e8 03 	sts	0x03E8, r20	; 0x8003e8 <timer3_toggle_count+0x2>
    1ce4:	50 93 e9 03 	sts	0x03E9, r21	; 0x8003e9 <timer3_toggle_count+0x3>
				//bitWrite(TIMSK3, OCIE3A, 1);
				TIMSK3 |= 1<<OCIE3A;
    1ce8:	e1 e7       	ldi	r30, 0x71	; 113
    1cea:	f0 e0       	ldi	r31, 0x00	; 0
    1cec:	80 81       	ld	r24, Z
    1cee:	82 60       	ori	r24, 0x02	; 2
    1cf0:	80 83       	st	Z, r24
			break;
    1cf2:	fa c0       	rjmp	.+500    	; 0x1ee8 <tone+0x6c6>
			
			case 4:
				OCR4A = ocr;
    1cf4:	d0 92 a9 00 	sts	0x00A9, r13	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
    1cf8:	c0 92 a8 00 	sts	0x00A8, r12	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
				timer4_toggle_count = toggle_count;
    1cfc:	20 93 e2 03 	sts	0x03E2, r18	; 0x8003e2 <timer4_toggle_count>
    1d00:	30 93 e3 03 	sts	0x03E3, r19	; 0x8003e3 <timer4_toggle_count+0x1>
    1d04:	40 93 e4 03 	sts	0x03E4, r20	; 0x8003e4 <timer4_toggle_count+0x2>
    1d08:	50 93 e5 03 	sts	0x03E5, r21	; 0x8003e5 <timer4_toggle_count+0x3>
				bitWrite(TIMSK4, OCIE4A, 1);
    1d0c:	e2 e7       	ldi	r30, 0x72	; 114
    1d0e:	f0 e0       	ldi	r31, 0x00	; 0
    1d10:	80 81       	ld	r24, Z
    1d12:	82 60       	ori	r24, 0x02	; 2
    1d14:	80 83       	st	Z, r24
			break;
    1d16:	e8 c0       	rjmp	.+464    	; 0x1ee8 <tone+0x6c6>
			
			case 5:
				OCR5A = ocr;
    1d18:	d0 92 29 01 	sts	0x0129, r13	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    1d1c:	c0 92 28 01 	sts	0x0128, r12	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
				timer5_toggle_count = toggle_count;
    1d20:	20 93 d9 03 	sts	0x03D9, r18	; 0x8003d9 <timer5_toggle_count>
    1d24:	30 93 da 03 	sts	0x03DA, r19	; 0x8003da <timer5_toggle_count+0x1>
    1d28:	40 93 db 03 	sts	0x03DB, r20	; 0x8003db <timer5_toggle_count+0x2>
    1d2c:	50 93 dc 03 	sts	0x03DC, r21	; 0x8003dc <timer5_toggle_count+0x3>
				bitWrite(TIMSK5, OCIE5A, 1);
    1d30:	e3 e7       	ldi	r30, 0x73	; 115
    1d32:	f0 e0       	ldi	r31, 0x00	; 0
    1d34:	80 81       	ld	r24, Z
    1d36:	82 60       	ori	r24, 0x02	; 2
    1d38:	80 83       	st	Z, r24
			break;
		}		
	}
}
    1d3a:	d6 c0       	rjmp	.+428    	; 0x1ee8 <tone+0x6c6>
			ocr = (F_CPU / (frequency * 2)) - 1;
			prescalarbits = 0b001; // clk/1 prescaler (No prescaling) : For both timers
			
			if (ocr > 255) // above prescaler failed
			{
				ocr = (F_CPU / (frequency * 2 * 8)) - 1;
    1d3c:	98 01       	movw	r18, r16
    1d3e:	22 95       	swap	r18
    1d40:	32 95       	swap	r19
    1d42:	30 7f       	andi	r19, 0xF0	; 240
    1d44:	32 27       	eor	r19, r18
    1d46:	20 7f       	andi	r18, 0xF0	; 240
    1d48:	32 27       	eor	r19, r18
    1d4a:	40 e0       	ldi	r20, 0x00	; 0
    1d4c:	50 e0       	ldi	r21, 0x00	; 0
    1d4e:	60 e0       	ldi	r22, 0x00	; 0
    1d50:	74 e2       	ldi	r23, 0x24	; 36
    1d52:	84 ef       	ldi	r24, 0xF4	; 244
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	b2 d3       	rcall	.+1892   	; 0x24bc <__udivmodsi4>
    1d58:	69 01       	movw	r12, r18
    1d5a:	7a 01       	movw	r14, r20
    1d5c:	81 e0       	ldi	r24, 0x01	; 1
    1d5e:	c8 1a       	sub	r12, r24
    1d60:	d1 08       	sbc	r13, r1
    1d62:	e1 08       	sbc	r14, r1
    1d64:	f1 08       	sbc	r15, r1
				prescalarbits = 0b010; // clk/8 prescaler : For both timers
				
				if (_timer == 2 && ocr > 255)
    1d66:	9f ef       	ldi	r25, 0xFF	; 255
    1d68:	c9 16       	cp	r12, r25
    1d6a:	d1 04       	cpc	r13, r1
    1d6c:	e1 04       	cpc	r14, r1
    1d6e:	f1 04       	cpc	r15, r1
    1d70:	11 f0       	breq	.+4      	; 0x1d76 <tone+0x554>
    1d72:	08 f0       	brcs	.+2      	; 0x1d76 <tone+0x554>
    1d74:	70 ce       	rjmp	.-800    	; 0x1a56 <tone+0x234>
			prescalarbits = 0b001; // clk/1 prescaler (No prescaling) : For both timers
			
			if (ocr > 255) // above prescaler failed
			{
				ocr = (F_CPU / (frequency * 2 * 8)) - 1;
				prescalarbits = 0b010; // clk/8 prescaler : For both timers
    1d76:	82 e0       	ldi	r24, 0x02	; 2
    1d78:	dd ce       	rjmp	.-582    	; 0x1b34 <tone+0x312>
		pinMode(_pin, OUTPUT);
		
		//2. if we are using an 8 bit timer, scan through prescalers to find the best fit
		if (_timer == 0 || _timer == 2)
		{
			ocr = (F_CPU / (frequency * 2)) - 1;
    1d7a:	98 01       	movw	r18, r16
    1d7c:	22 0f       	add	r18, r18
    1d7e:	33 1f       	adc	r19, r19
    1d80:	40 e0       	ldi	r20, 0x00	; 0
    1d82:	50 e0       	ldi	r21, 0x00	; 0
    1d84:	60 e0       	ldi	r22, 0x00	; 0
    1d86:	74 e2       	ldi	r23, 0x24	; 36
    1d88:	84 ef       	ldi	r24, 0xF4	; 244
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	97 d3       	rcall	.+1838   	; 0x24bc <__udivmodsi4>
    1d8e:	69 01       	movw	r12, r18
    1d90:	7a 01       	movw	r14, r20
    1d92:	81 e0       	ldi	r24, 0x01	; 1
    1d94:	c8 1a       	sub	r12, r24
    1d96:	d1 08       	sbc	r13, r1
    1d98:	e1 08       	sbc	r14, r1
    1d9a:	f1 08       	sbc	r15, r1
			prescalarbits = 0b001; // clk/1 prescaler (No prescaling) : For both timers
			
			if (ocr > 255) // above prescaler failed
    1d9c:	9f ef       	ldi	r25, 0xFF	; 255
    1d9e:	c9 16       	cp	r12, r25
    1da0:	d1 04       	cpc	r13, r1
    1da2:	e1 04       	cpc	r14, r1
    1da4:	f1 04       	cpc	r15, r1
    1da6:	09 f0       	breq	.+2      	; 0x1daa <tone+0x588>
    1da8:	48 f6       	brcc	.-110    	; 0x1d3c <tone+0x51a>
		
		//2. if we are using an 8 bit timer, scan through prescalers to find the best fit
		if (_timer == 0 || _timer == 2)
		{
			ocr = (F_CPU / (frequency * 2)) - 1;
			prescalarbits = 0b001; // clk/1 prescaler (No prescaling) : For both timers
    1daa:	81 e0       	ldi	r24, 0x01	; 1
    1dac:	c3 ce       	rjmp	.-634    	; 0x1b34 <tone+0x312>
			
			if (ocr > 255) // above prescaler failed
			{
				ocr = (F_CPU / (frequency * 2 * 8)) - 1;
    1dae:	98 01       	movw	r18, r16
    1db0:	22 95       	swap	r18
    1db2:	32 95       	swap	r19
    1db4:	30 7f       	andi	r19, 0xF0	; 240
    1db6:	32 27       	eor	r19, r18
    1db8:	20 7f       	andi	r18, 0xF0	; 240
    1dba:	32 27       	eor	r19, r18
    1dbc:	40 e0       	ldi	r20, 0x00	; 0
    1dbe:	50 e0       	ldi	r21, 0x00	; 0
    1dc0:	60 e0       	ldi	r22, 0x00	; 0
    1dc2:	74 e2       	ldi	r23, 0x24	; 36
    1dc4:	84 ef       	ldi	r24, 0xF4	; 244
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	79 d3       	rcall	.+1778   	; 0x24bc <__udivmodsi4>
    1dca:	69 01       	movw	r12, r18
    1dcc:	7a 01       	movw	r14, r20
    1dce:	81 e0       	ldi	r24, 0x01	; 1
    1dd0:	c8 1a       	sub	r12, r24
    1dd2:	d1 08       	sbc	r13, r1
    1dd4:	e1 08       	sbc	r14, r1
    1dd6:	f1 08       	sbc	r15, r1
				{
					ocr = (F_CPU / frequency / 2 / 32) - 1;
					prescalarbits = 0b011; // clk/32
				}
					
				if(ocr > 255)
    1dd8:	9f ef       	ldi	r25, 0xFF	; 255
    1dda:	c9 16       	cp	r12, r25
    1ddc:	d1 04       	cpc	r13, r1
    1dde:	e1 04       	cpc	r14, r1
    1de0:	f1 04       	cpc	r15, r1
    1de2:	11 f0       	breq	.+4      	; 0x1de8 <tone+0x5c6>
    1de4:	08 f0       	brcs	.+2      	; 0x1de8 <tone+0x5c6>
    1de6:	52 ce       	rjmp	.-860    	; 0x1a8c <tone+0x26a>
			prescalarbits = 0b001; // clk/1 prescaler (No prescaling) : For both timers
			
			if (ocr > 255) // above prescaler failed
			{
				ocr = (F_CPU / (frequency * 2 * 8)) - 1;
				prescalarbits = 0b010; // clk/8 prescaler : For both timers
    1de8:	82 e0       	ldi	r24, 0x02	; 2
		pinMode(_pin, OUTPUT);
		
		//2. if we are using an 8 bit timer, scan through prescalers to find the best fit
		if (_timer == 0 || _timer == 2)
		{
			ocr = (F_CPU / (frequency * 2)) - 1;
    1dea:	96 ce       	rjmp	.-724    	; 0x1b18 <tone+0x2f6>
    1dec:	98 01       	movw	r18, r16
    1dee:	22 0f       	add	r18, r18
    1df0:	33 1f       	adc	r19, r19
    1df2:	40 e0       	ldi	r20, 0x00	; 0
    1df4:	50 e0       	ldi	r21, 0x00	; 0
    1df6:	60 e0       	ldi	r22, 0x00	; 0
    1df8:	74 e2       	ldi	r23, 0x24	; 36
    1dfa:	84 ef       	ldi	r24, 0xF4	; 244
    1dfc:	90 e0       	ldi	r25, 0x00	; 0
    1dfe:	5e d3       	rcall	.+1724   	; 0x24bc <__udivmodsi4>
    1e00:	69 01       	movw	r12, r18
    1e02:	7a 01       	movw	r14, r20
    1e04:	81 e0       	ldi	r24, 0x01	; 1
    1e06:	c8 1a       	sub	r12, r24
    1e08:	d1 08       	sbc	r13, r1
    1e0a:	e1 08       	sbc	r14, r1
    1e0c:	f1 08       	sbc	r15, r1
			prescalarbits = 0b001; // clk/1 prescaler (No prescaling) : For both timers
			
			if (ocr > 255) // above prescaler failed
    1e0e:	9f ef       	ldi	r25, 0xFF	; 255
    1e10:	c9 16       	cp	r12, r25
    1e12:	d1 04       	cpc	r13, r1
    1e14:	e1 04       	cpc	r14, r1
    1e16:	f1 04       	cpc	r15, r1
    1e18:	09 f0       	breq	.+2      	; 0x1e1c <tone+0x5fa>
    1e1a:	48 f6       	brcc	.-110    	; 0x1dae <tone+0x58c>
		
		//2. if we are using an 8 bit timer, scan through prescalers to find the best fit
		if (_timer == 0 || _timer == 2)
		{
			ocr = (F_CPU / (frequency * 2)) - 1;
			prescalarbits = 0b001; // clk/1 prescaler (No prescaling) : For both timers
    1e1c:	81 e0       	ldi	r24, 0x01	; 1
    1e1e:	7c ce       	rjmp	.-776    	; 0x1b18 <tone+0x2f6>
					prescalarbits = 0b011; // clk/32
				}
					
				if(ocr > 255)
				{
					ocr = (F_CPU / (frequency * 2 * 64)) - 1;
    1e20:	98 01       	movw	r18, r16
    1e22:	36 95       	lsr	r19
    1e24:	32 2f       	mov	r19, r18
    1e26:	22 27       	eor	r18, r18
    1e28:	37 95       	ror	r19
    1e2a:	27 95       	ror	r18
    1e2c:	40 e0       	ldi	r20, 0x00	; 0
    1e2e:	50 e0       	ldi	r21, 0x00	; 0
    1e30:	60 e0       	ldi	r22, 0x00	; 0
    1e32:	74 e2       	ldi	r23, 0x24	; 36
    1e34:	84 ef       	ldi	r24, 0xF4	; 244
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	41 d3       	rcall	.+1666   	; 0x24bc <__udivmodsi4>
    1e3a:	69 01       	movw	r12, r18
    1e3c:	7a 01       	movw	r14, r20
    1e3e:	81 e0       	ldi	r24, 0x01	; 1
    1e40:	c8 1a       	sub	r12, r24
    1e42:	d1 08       	sbc	r13, r1
    1e44:	e1 08       	sbc	r14, r1
    1e46:	f1 08       	sbc	r15, r1
					prescalarbits = _timer == 0 ? 0b011 : 0b100; // clk/32 for timer 1: clk/64 for timer 2
					
					if (_timer == 2 && ocr > 255)
    1e48:	9f ef       	ldi	r25, 0xFF	; 255
    1e4a:	c9 16       	cp	r12, r25
    1e4c:	d1 04       	cpc	r13, r1
    1e4e:	e1 04       	cpc	r14, r1
    1e50:	f1 04       	cpc	r15, r1
    1e52:	11 f0       	breq	.+4      	; 0x1e58 <tone+0x636>
    1e54:	08 f0       	brcs	.+2      	; 0x1e58 <tone+0x636>
    1e56:	30 ce       	rjmp	.-928    	; 0x1ab8 <tone+0x296>
    1e58:	84 e0       	ldi	r24, 0x04	; 4
    1e5a:	6c ce       	rjmp	.-808    	; 0x1b34 <tone+0x312>
		}
	}
	  
	// search for an unused timer.
	for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
		if (tone_pins[i] == 255) {
    1e5c:	9f 3f       	cpi	r25, 0xFF	; 255
    1e5e:	09 f0       	breq	.+2      	; 0x1e62 <tone+0x640>
    1e60:	43 c0       	rjmp	.+134    	; 0x1ee8 <tone+0x6c6>
						ocr = (F_CPU / (frequency * 2 * 256))- 1;
						prescalarbits = _timer == 0 ? 0b100 : 0b110;  // clk/64 for timer 1: clk/256 for timer 2
						if (ocr > 255)
						{
							// can't do any better than /1024
							ocr = (F_CPU / (frequency * 2 * 1024)) - 1;
    1e62:	f6 cc       	rjmp	.-1556   	; 0x1850 <tone+0x2e>
    1e64:	98 01       	movw	r18, r16
    1e66:	32 2f       	mov	r19, r18
    1e68:	22 27       	eor	r18, r18
    1e6a:	33 0f       	add	r19, r19
    1e6c:	33 0f       	add	r19, r19
    1e6e:	33 0f       	add	r19, r19
    1e70:	40 e0       	ldi	r20, 0x00	; 0
    1e72:	50 e0       	ldi	r21, 0x00	; 0
    1e74:	60 e0       	ldi	r22, 0x00	; 0
    1e76:	74 e2       	ldi	r23, 0x24	; 36
    1e78:	84 ef       	ldi	r24, 0xF4	; 244
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	1f d3       	rcall	.+1598   	; 0x24bc <__udivmodsi4>
    1e7e:	69 01       	movw	r12, r18
    1e80:	7a 01       	movw	r14, r20
    1e82:	81 e0       	ldi	r24, 0x01	; 1
    1e84:	c8 1a       	sub	r12, r24
    1e86:	d1 08       	sbc	r13, r1
    1e88:	e1 08       	sbc	r14, r1
    1e8a:	f1 08       	sbc	r15, r1
							prescalarbits = _timer == 0 ? 0b101 : 0b111; // clk/128 for timer 1: clk/1024 for timer 2
    1e8c:	85 e0       	ldi	r24, 0x05	; 5
    1e8e:	44 ce       	rjmp	.-888    	; 0x1b18 <tone+0x2f6>

					if (ocr > 255)
					{
						ocr = (F_CPU / (frequency * 2 * 256))- 1;
						prescalarbits = _timer == 0 ? 0b100 : 0b110;  // clk/64 for timer 1: clk/256 for timer 2
						if (ocr > 255)
    1e90:	9f ef       	ldi	r25, 0xFF	; 255
    1e92:	c9 16       	cp	r12, r25
    1e94:	d1 04       	cpc	r13, r1
    1e96:	e1 04       	cpc	r14, r1
    1e98:	f1 04       	cpc	r15, r1
    1e9a:	09 f0       	breq	.+2      	; 0x1e9e <tone+0x67c>
    1e9c:	18 f7       	brcc	.-58     	; 0x1e64 <tone+0x642>
					}

					if (ocr > 255)
					{
						ocr = (F_CPU / (frequency * 2 * 256))- 1;
						prescalarbits = _timer == 0 ? 0b100 : 0b110;  // clk/64 for timer 1: clk/256 for timer 2
    1e9e:	84 e0       	ldi	r24, 0x04	; 4
						if (ocr > 255)
						{
							// can't do any better than /1024
							ocr = (F_CPU / (frequency * 2 * 1024)) - 1;
    1ea0:	39 ce       	rjmp	.-910    	; 0x1b14 <tone+0x2f2>
    1ea2:	98 01       	movw	r18, r16
    1ea4:	32 2f       	mov	r19, r18
    1ea6:	22 27       	eor	r18, r18
    1ea8:	33 0f       	add	r19, r19
    1eaa:	33 0f       	add	r19, r19
    1eac:	33 0f       	add	r19, r19
    1eae:	40 e0       	ldi	r20, 0x00	; 0
    1eb0:	50 e0       	ldi	r21, 0x00	; 0
    1eb2:	60 e0       	ldi	r22, 0x00	; 0
    1eb4:	74 e2       	ldi	r23, 0x24	; 36
    1eb6:	84 ef       	ldi	r24, 0xF4	; 244
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	00 d3       	rcall	.+1536   	; 0x24bc <__udivmodsi4>
    1ebc:	69 01       	movw	r12, r18
    1ebe:	7a 01       	movw	r14, r20
    1ec0:	81 e0       	ldi	r24, 0x01	; 1
    1ec2:	c8 1a       	sub	r12, r24
    1ec4:	d1 08       	sbc	r13, r1
    1ec6:	e1 08       	sbc	r14, r1
    1ec8:	f1 08       	sbc	r15, r1
							prescalarbits = _timer == 0 ? 0b101 : 0b111; // clk/128 for timer 1: clk/1024 for timer 2
    1eca:	87 e0       	ldi	r24, 0x07	; 7
    1ecc:	33 ce       	rjmp	.-922    	; 0x1b34 <tone+0x312>

					if (ocr > 255)
					{
						ocr = (F_CPU / (frequency * 2 * 256))- 1;
						prescalarbits = _timer == 0 ? 0b100 : 0b110;  // clk/64 for timer 1: clk/256 for timer 2
						if (ocr > 255)
    1ece:	9f ef       	ldi	r25, 0xFF	; 255
    1ed0:	c9 16       	cp	r12, r25
    1ed2:	d1 04       	cpc	r13, r1
    1ed4:	e1 04       	cpc	r14, r1
    1ed6:	f1 04       	cpc	r15, r1
    1ed8:	09 f0       	breq	.+2      	; 0x1edc <tone+0x6ba>
    1eda:	18 f7       	brcc	.-58     	; 0x1ea2 <tone+0x680>
					}

					if (ocr > 255)
					{
						ocr = (F_CPU / (frequency * 2 * 256))- 1;
						prescalarbits = _timer == 0 ? 0b100 : 0b110;  // clk/64 for timer 1: clk/256 for timer 2
    1edc:	86 e0       	ldi	r24, 0x06	; 6
    1ede:	1a ce       	rjmp	.-972    	; 0x1b14 <tone+0x2f2>
	_timer = toneBegin(_pin);
	
	if (_timer >= 0)
	{
		//1. set the pin as OUTPUT
		pinMode(_pin, OUTPUT);
    1ee0:	61 e0       	ldi	r22, 0x01	; 1
    1ee2:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <pinMode>
    1ee6:	2d ce       	rjmp	.-934    	; 0x1b42 <tone+0x320>
				timer5_toggle_count = toggle_count;
				bitWrite(TIMSK5, OCIE5A, 1);
			break;
		}		
	}
}
    1ee8:	cf 91       	pop	r28
    1eea:	1f 91       	pop	r17
    1eec:	0f 91       	pop	r16
    1eee:	ff 90       	pop	r15
    1ef0:	ef 90       	pop	r14
    1ef2:	df 90       	pop	r13
    1ef4:	cf 90       	pop	r12
    1ef6:	bf 90       	pop	r11
    1ef8:	af 90       	pop	r10
    1efa:	9f 90       	pop	r9
    1efc:	8f 90       	pop	r8
    1efe:	08 95       	ret

00001f00 <disableTimer>:
This function only works properly for timer 2 (the only one we use currently).  
for the others, it should end the tone, but won't restore proper PWM functionality for the timer. TODO
*/
void disableTimer(uint8_t _timer)
{
	switch(_timer)
    1f00:	82 30       	cpi	r24, 0x02	; 2
    1f02:	a9 f0       	breq	.+42     	; 0x1f2e <disableTimer+0x2e>
    1f04:	28 f4       	brcc	.+10     	; 0x1f10 <disableTimer+0x10>
    1f06:	88 23       	and	r24, r24
    1f08:	49 f0       	breq	.+18     	; 0x1f1c <disableTimer+0x1c>
    1f0a:	81 30       	cpi	r24, 0x01	; 1
    1f0c:	51 f0       	breq	.+20     	; 0x1f22 <disableTimer+0x22>
    1f0e:	08 95       	ret
    1f10:	84 30       	cpi	r24, 0x04	; 4
    1f12:	21 f1       	breq	.+72     	; 0x1f5c <disableTimer+0x5c>
    1f14:	e8 f0       	brcs	.+58     	; 0x1f50 <disableTimer+0x50>
    1f16:	85 30       	cpi	r24, 0x05	; 5
    1f18:	39 f1       	breq	.+78     	; 0x1f68 <disableTimer+0x68>
    1f1a:	08 95       	ret
	{
		case 0:
		TIMSK0 = 0;
    1f1c:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
		break;
    1f20:	08 95       	ret
		case 1:
			bitWrite(TIMSK1, OCIE1A, 0);
    1f22:	ef e6       	ldi	r30, 0x6F	; 111
    1f24:	f0 e0       	ldi	r31, 0x00	; 0
    1f26:	80 81       	ld	r24, Z
    1f28:	8d 7f       	andi	r24, 0xFD	; 253
    1f2a:	80 83       	st	Z, r24
		break;
    1f2c:	08 95       	ret
		case 2:
			bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
    1f2e:	e0 e7       	ldi	r30, 0x70	; 112
    1f30:	f0 e0       	ldi	r31, 0x00	; 0
    1f32:	80 81       	ld	r24, Z
    1f34:	8d 7f       	andi	r24, 0xFD	; 253
    1f36:	80 83       	st	Z, r24
			TCCR2A = (1 << WGM20);		 // restore normal  PWM mode
    1f38:	81 e0       	ldi	r24, 0x01	; 1
    1f3a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
			TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22); //clk/64 prescaler
    1f3e:	e1 eb       	ldi	r30, 0xB1	; 177
    1f40:	f0 e0       	ldi	r31, 0x00	; 0
    1f42:	80 81       	ld	r24, Z
    1f44:	88 7f       	andi	r24, 0xF8	; 248
    1f46:	84 60       	ori	r24, 0x04	; 4
    1f48:	80 83       	st	Z, r24
			OCR2A = 0;
    1f4a:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
		break;
    1f4e:	08 95       	ret
		case 3:
			bitWrite(TIMSK3, OCIE3A, 0);
    1f50:	e1 e7       	ldi	r30, 0x71	; 113
    1f52:	f0 e0       	ldi	r31, 0x00	; 0
    1f54:	80 81       	ld	r24, Z
    1f56:	8d 7f       	andi	r24, 0xFD	; 253
    1f58:	80 83       	st	Z, r24
		break;
    1f5a:	08 95       	ret
		case 4:
			bitWrite(TIMSK4, OCIE4A, 0);
    1f5c:	e2 e7       	ldi	r30, 0x72	; 114
    1f5e:	f0 e0       	ldi	r31, 0x00	; 0
    1f60:	80 81       	ld	r24, Z
    1f62:	8d 7f       	andi	r24, 0xFD	; 253
    1f64:	80 83       	st	Z, r24
		break;
    1f66:	08 95       	ret
		case 5:
			bitWrite(TIMSK5, OCIE5A, 0);
    1f68:	e3 e7       	ldi	r30, 0x73	; 115
    1f6a:	f0 e0       	ldi	r31, 0x00	; 0
    1f6c:	80 81       	ld	r24, Z
    1f6e:	8d 7f       	andi	r24, 0xFD	; 253
    1f70:	80 83       	st	Z, r24
    1f72:	08 95       	ret

00001f74 <noTone>:
	}
}


void noTone(uint8_t _pin)
{
    1f74:	cf 93       	push	r28
    1f76:	c8 2f       	mov	r28, r24
	int8_t _timer = -1;
	  
	for (int i = 0; i < AVAILABLE_TONE_PINS; i++)
	{
		if (tone_pins[i] == _pin) {
    1f78:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <tone_pins>
    1f7c:	c8 13       	cpse	r28, r24
    1f7e:	07 c0       	rjmp	.+14     	; 0x1f8e <noTone+0x1a>
			_timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
    1f80:	eb e7       	ldi	r30, 0x7B	; 123
    1f82:	f2 e0       	ldi	r31, 0x02	; 2
    1f84:	84 91       	lpm	r24, Z
			tone_pins[i] = 255;
    1f86:	9f ef       	ldi	r25, 0xFF	; 255
    1f88:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <tone_pins>
			break;
    1f8c:	01 c0       	rjmp	.+2      	; 0x1f90 <noTone+0x1c>
}


void noTone(uint8_t _pin)
{
	int8_t _timer = -1;
    1f8e:	8f ef       	ldi	r24, 0xFF	; 255
			tone_pins[i] = 255;
			break;
		}
	}
	  
	disableTimer(_timer);
    1f90:	b7 df       	rcall	.-146    	; 0x1f00 <disableTimer>
	digitalWrite(_pin, 0);
    1f92:	60 e0       	ldi	r22, 0x00	; 0
    1f94:	8c 2f       	mov	r24, r28
    1f96:	0e 94 39 03 	call	0x672	; 0x672 <digitalWrite>
}
    1f9a:	cf 91       	pop	r28
    1f9c:	08 95       	ret

00001f9e <__vector_32>:
}
#endif

#ifdef USE_TIMER3
ISR(TIMER3_COMPA_vect)
{
    1f9e:	1f 92       	push	r1
    1fa0:	0f 92       	push	r0
    1fa2:	0f b6       	in	r0, 0x3f	; 63
    1fa4:	0f 92       	push	r0
    1fa6:	11 24       	eor	r1, r1
    1fa8:	0b b6       	in	r0, 0x3b	; 59
    1faa:	0f 92       	push	r0
    1fac:	2f 93       	push	r18
    1fae:	3f 93       	push	r19
    1fb0:	4f 93       	push	r20
    1fb2:	5f 93       	push	r21
    1fb4:	6f 93       	push	r22
    1fb6:	7f 93       	push	r23
    1fb8:	8f 93       	push	r24
    1fba:	9f 93       	push	r25
    1fbc:	af 93       	push	r26
    1fbe:	bf 93       	push	r27
    1fc0:	ef 93       	push	r30
    1fc2:	ff 93       	push	r31
	if (timer3_toggle_count != 0)
    1fc4:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <timer3_toggle_count>
    1fc8:	90 91 e7 03 	lds	r25, 0x03E7	; 0x8003e7 <timer3_toggle_count+0x1>
    1fcc:	a0 91 e8 03 	lds	r26, 0x03E8	; 0x8003e8 <timer3_toggle_count+0x2>
    1fd0:	b0 91 e9 03 	lds	r27, 0x03E9	; 0x8003e9 <timer3_toggle_count+0x3>
    1fd4:	89 2b       	or	r24, r25
    1fd6:	8a 2b       	or	r24, r26
    1fd8:	8b 2b       	or	r24, r27
    1fda:	51 f1       	breq	.+84     	; 0x2030 <__vector_32+0x92>
	{
		// toggle the pin
		*timer3_pin_port ^= timer3_pin_mask;
    1fdc:	90 91 d8 03 	lds	r25, 0x03D8	; 0x8003d8 <timer3_pin_mask>
    1fe0:	e0 91 e0 03 	lds	r30, 0x03E0	; 0x8003e0 <timer3_pin_port>
    1fe4:	f0 91 e1 03 	lds	r31, 0x03E1	; 0x8003e1 <timer3_pin_port+0x1>
    1fe8:	80 81       	ld	r24, Z
    1fea:	89 27       	eor	r24, r25
    1fec:	80 83       	st	Z, r24
		
		if (timer3_toggle_count > 0)
    1fee:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <timer3_toggle_count>
    1ff2:	90 91 e7 03 	lds	r25, 0x03E7	; 0x8003e7 <timer3_toggle_count+0x1>
    1ff6:	a0 91 e8 03 	lds	r26, 0x03E8	; 0x8003e8 <timer3_toggle_count+0x2>
    1ffa:	b0 91 e9 03 	lds	r27, 0x03E9	; 0x8003e9 <timer3_toggle_count+0x3>
    1ffe:	18 16       	cp	r1, r24
    2000:	19 06       	cpc	r1, r25
    2002:	1a 06       	cpc	r1, r26
    2004:	1b 06       	cpc	r1, r27
    2006:	04 f5       	brge	.+64     	; 0x2048 <__vector_32+0xaa>
			timer3_toggle_count--;
    2008:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <timer3_toggle_count>
    200c:	90 91 e7 03 	lds	r25, 0x03E7	; 0x8003e7 <timer3_toggle_count+0x1>
    2010:	a0 91 e8 03 	lds	r26, 0x03E8	; 0x8003e8 <timer3_toggle_count+0x2>
    2014:	b0 91 e9 03 	lds	r27, 0x03E9	; 0x8003e9 <timer3_toggle_count+0x3>
    2018:	01 97       	sbiw	r24, 0x01	; 1
    201a:	a1 09       	sbc	r26, r1
    201c:	b1 09       	sbc	r27, r1
    201e:	80 93 e6 03 	sts	0x03E6, r24	; 0x8003e6 <timer3_toggle_count>
    2022:	90 93 e7 03 	sts	0x03E7, r25	; 0x8003e7 <timer3_toggle_count+0x1>
    2026:	a0 93 e8 03 	sts	0x03E8, r26	; 0x8003e8 <timer3_toggle_count+0x2>
    202a:	b0 93 e9 03 	sts	0x03E9, r27	; 0x8003e9 <timer3_toggle_count+0x3>
    202e:	0c c0       	rjmp	.+24     	; 0x2048 <__vector_32+0xaa>
	}
	else
	{
		disableTimer(3);
    2030:	83 e0       	ldi	r24, 0x03	; 3
    2032:	66 df       	rcall	.-308    	; 0x1f00 <disableTimer>
		
		*timer3_pin_port &= ~(timer3_pin_mask);  // keep pin low after stop
    2034:	80 91 d8 03 	lds	r24, 0x03D8	; 0x8003d8 <timer3_pin_mask>
    2038:	e0 91 e0 03 	lds	r30, 0x03E0	; 0x8003e0 <timer3_pin_port>
    203c:	f0 91 e1 03 	lds	r31, 0x03E1	; 0x8003e1 <timer3_pin_port+0x1>
    2040:	90 81       	ld	r25, Z
    2042:	80 95       	com	r24
    2044:	89 23       	and	r24, r25
    2046:	80 83       	st	Z, r24
	}
}
    2048:	ff 91       	pop	r31
    204a:	ef 91       	pop	r30
    204c:	bf 91       	pop	r27
    204e:	af 91       	pop	r26
    2050:	9f 91       	pop	r25
    2052:	8f 91       	pop	r24
    2054:	7f 91       	pop	r23
    2056:	6f 91       	pop	r22
    2058:	5f 91       	pop	r21
    205a:	4f 91       	pop	r20
    205c:	3f 91       	pop	r19
    205e:	2f 91       	pop	r18
    2060:	0f 90       	pop	r0
    2062:	0b be       	out	0x3b, r0	; 59
    2064:	0f 90       	pop	r0
    2066:	0f be       	out	0x3f, r0	; 63
    2068:	0f 90       	pop	r0
    206a:	1f 90       	pop	r1
    206c:	18 95       	reti

0000206e <sdDetected>:
    }
}

void sdDetected(void)
{
	LCD_PrintString("SD Detected",0,1);
    206e:	41 e0       	ldi	r20, 0x01	; 1
    2070:	60 e0       	ldi	r22, 0x00	; 0
    2072:	82 e3       	ldi	r24, 0x32	; 50
    2074:	92 e0       	ldi	r25, 0x02	; 2
    2076:	0c 94 b0 02 	jmp	0x560	; 0x560 <LCD_PrintString>
    207a:	08 95       	ret

0000207c <Button1>:
}

void Button1(void)
{
	//char str[] = "Good";
	togglePin(Pin_PK0);
    207c:	89 e5       	ldi	r24, 0x59	; 89
    207e:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <togglePin>
// 	Serial2_write('o');
// 	Serial2_write('o');
// 	Serial2_write('o');
// 	Serial2_write('o');
// 	Serial2_write('d');
	Serial0_print("Good stuff");
    2082:	8e e3       	ldi	r24, 0x3E	; 62
    2084:	92 e0       	ldi	r25, 0x02	; 2
    2086:	0c 94 c9 04 	jmp	0x992	; 0x992 <Serial0_print>
    208a:	08 95       	ret

0000208c <Button2>:

}
void Button2(void)
{
	togglePin(Pin_PK1);
    208c:	88 e5       	ldi	r24, 0x58	; 88
    208e:	0c 94 5b 03 	jmp	0x6b6	; 0x6b6 <togglePin>
    2092:	08 95       	ret

00002094 <Button3>:
}
void Button3(void)
{
	togglePin(Pin_PK2);
    2094:	87 e5       	ldi	r24, 0x57	; 87
    2096:	0c 94 5b 03 	jmp	0x6b6	; 0x6b6 <togglePin>
    209a:	08 95       	ret

0000209c <LCD_PrintInt>:
	
}

void LCD_PrintInt(uint16_t n,uint8_t x,uint8_t y){
    209c:	0f 93       	push	r16
    209e:	1f 93       	push	r17
    20a0:	cf 93       	push	r28
    20a2:	df 93       	push	r29
    20a4:	cd b7       	in	r28, 0x3d	; 61
    20a6:	de b7       	in	r29, 0x3e	; 62
    20a8:	2a 97       	sbiw	r28, 0x0a	; 10
    20aa:	0f b6       	in	r0, 0x3f	; 63
    20ac:	f8 94       	cli
    20ae:	de bf       	out	0x3e, r29	; 62
    20b0:	0f be       	out	0x3f, r0	; 63
    20b2:	cd bf       	out	0x3d, r28	; 61
    20b4:	16 2f       	mov	r17, r22
    20b6:	04 2f       	mov	r16, r20
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    20b8:	4a e0       	ldi	r20, 0x0A	; 10
    20ba:	be 01       	movw	r22, r28
    20bc:	6f 5f       	subi	r22, 0xFF	; 255
    20be:	7f 4f       	sbci	r23, 0xFF	; 255
    20c0:	54 d2       	rcall	.+1192   	; 0x256a <__itoa_ncheck>
	char buffer[10];
	itoa(n,buffer,10);
	LCD_PrintString(buffer,x,y);
    20c2:	40 2f       	mov	r20, r16
    20c4:	61 2f       	mov	r22, r17
    20c6:	ce 01       	movw	r24, r28
    20c8:	01 96       	adiw	r24, 0x01	; 1
    20ca:	0e 94 b0 02 	call	0x560	; 0x560 <LCD_PrintString>
	
}
    20ce:	2a 96       	adiw	r28, 0x0a	; 10
    20d0:	0f b6       	in	r0, 0x3f	; 63
    20d2:	f8 94       	cli
    20d4:	de bf       	out	0x3e, r29	; 62
    20d6:	0f be       	out	0x3f, r0	; 63
    20d8:	cd bf       	out	0x3d, r28	; 61
    20da:	df 91       	pop	r29
    20dc:	cf 91       	pop	r28
    20de:	1f 91       	pop	r17
    20e0:	0f 91       	pop	r16
    20e2:	08 95       	ret

000020e4 <main>:
void LCD_PrintInt(uint16_t n,uint8_t x,uint8_t y);



int main(void)
{
    20e4:	cf 93       	push	r28
    20e6:	df 93       	push	r29
    20e8:	cd b7       	in	r28, 0x3d	; 61
    20ea:	de b7       	in	r29, 0x3e	; 62
    20ec:	2a 97       	sbiw	r28, 0x0a	; 10
    20ee:	0f b6       	in	r0, 0x3f	; 63
    20f0:	f8 94       	cli
    20f2:	de bf       	out	0x3e, r29	; 62
    20f4:	0f be       	out	0x3f, r0	; 63
    20f6:	cd bf       	out	0x3d, r28	; 61
	millis_init();
    20f8:	c8 da       	rcall	.-2672   	; 0x168a <millis_init>
	pwm_init();
    20fa:	30 d9       	rcall	.-3488   	; 0x135c <pwm_init>
    20fc:	0e 94 bb 02 	call	0x576	; 0x576 <adc_init>
	adc_init();
    2100:	46 e0       	ldi	r20, 0x06	; 6
	Serial0_begin(9600, SERIAL_8N1);
    2102:	60 e8       	ldi	r22, 0x80	; 128
    2104:	75 e2       	ldi	r23, 0x25	; 37
    2106:	80 e0       	ldi	r24, 0x00	; 0
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	0e 94 75 03 	call	0x6ea	; 0x6ea <Serial0_begin>
    210e:	0e 94 14 02 	call	0x428	; 0x428 <lcd_init>
	
	lcd_init();
    2112:	0e 94 e7 01 	call	0x3ce	; 0x3ce <lcd_clear>
	lcd_clear();
    2116:	40 e0       	ldi	r20, 0x00	; 0
	LCD_PrintString("MCU TRAINING KIT",0,0);
    2118:	60 e0       	ldi	r22, 0x00	; 0
    211a:	89 e4       	ldi	r24, 0x49	; 73
    211c:	92 e0       	ldi	r25, 0x02	; 2
    211e:	0e 94 b0 02 	call	0x560	; 0x560 <LCD_PrintString>
    2122:	61 e0       	ldi	r22, 0x01	; 1

	//User LEDs
	pinMode(Pin_PK0, OUTPUT);
    2124:	89 e5       	ldi	r24, 0x59	; 89
    2126:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <pinMode>
    212a:	61 e0       	ldi	r22, 0x01	; 1
	pinMode(Pin_PK1, OUTPUT);
    212c:	88 e5       	ldi	r24, 0x58	; 88
    212e:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <pinMode>
    2132:	61 e0       	ldi	r22, 0x01	; 1
	pinMode(Pin_PK2, OUTPUT);
    2134:	87 e5       	ldi	r24, 0x57	; 87
    2136:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <pinMode>
    213a:	60 e0       	ldi	r22, 0x00	; 0
	
	//Buttons - Pin change
	pinMode(Pin_PJ2, INPUT);
    213c:	81 e4       	ldi	r24, 0x41	; 65
    213e:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <pinMode>
    2142:	60 e0       	ldi	r22, 0x00	; 0
	pinMode(Pin_PJ3, INPUT);
    2144:	82 e4       	ldi	r24, 0x42	; 66
    2146:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <pinMode>
    214a:	60 e0       	ldi	r22, 0x00	; 0
	pinMode(Pin_PJ4, INPUT);
    214c:	83 e4       	ldi	r24, 0x43	; 67
    214e:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <pinMode>
    2152:	43 e0       	ldi	r20, 0x03	; 3
	attachPCINT(pinToPCINT(Pin_PJ2), Button1, RISING);
    2154:	6e e3       	ldi	r22, 0x3E	; 62
    2156:	70 e1       	ldi	r23, 0x10	; 16
    2158:	8b e0       	ldi	r24, 0x0B	; 11
    215a:	0e 94 69 07 	call	0xed2	; 0xed2 <attachPinChangeInterrupt>
    215e:	43 e0       	ldi	r20, 0x03	; 3
	attachPCINT(pinToPCINT(Pin_PJ3), Button2, RISING);
    2160:	66 e4       	ldi	r22, 0x46	; 70
    2162:	70 e1       	ldi	r23, 0x10	; 16
    2164:	8c e0       	ldi	r24, 0x0C	; 12
    2166:	0e 94 69 07 	call	0xed2	; 0xed2 <attachPinChangeInterrupt>
    216a:	43 e0       	ldi	r20, 0x03	; 3
	attachPCINT(pinToPCINT(Pin_PJ4), Button3, RISING);
    216c:	6a e4       	ldi	r22, 0x4A	; 74
    216e:	70 e1       	ldi	r23, 0x10	; 16
    2170:	8d e0       	ldi	r24, 0x0D	; 13
    2172:	0e 94 69 07 	call	0xed2	; 0xed2 <attachPinChangeInterrupt>
    2176:	43 e0       	ldi	r20, 0x03	; 3
	
	attachInterrupt(EXTERNAL_INT_5,sdDetected, RISING);
    2178:	50 e0       	ldi	r21, 0x00	; 0
    217a:	67 e3       	ldi	r22, 0x37	; 55
    217c:	70 e1       	ldi	r23, 0x10	; 16
    217e:	85 e0       	ldi	r24, 0x05	; 5
    2180:	0e 94 4c 05 	call	0xa98	; 0xa98 <attachInterrupt>
    2184:	6f e3       	ldi	r22, 0x3F	; 63
	
	analogWrite(Pin_PH3,255/4);
    2186:	70 e0       	ldi	r23, 0x00	; 0
    2188:	8f e0       	ldi	r24, 0x0F	; 15
    218a:	28 d9       	rcall	.-3504   	; 0x13dc <analogWrite>
    218c:	02 e1       	ldi	r16, 0x12	; 18
    218e:	12 e0       	ldi	r17, 0x02	; 2
    2190:	0f 2e       	mov	r0, r31
    2192:	f2 e2       	ldi	r31, 0x22	; 34
    2194:	af 2e       	mov	r10, r31
    2196:	f2 e0       	ldi	r31, 0x02	; 2
    2198:	bf 2e       	mov	r11, r31
    219a:	f0 2d       	mov	r31, r0
    219c:	0f 2e       	mov	r0, r31
    219e:	f2 e2       	ldi	r31, 0x22	; 34
    21a0:	cf 2e       	mov	r12, r31
    21a2:	f2 e0       	ldi	r31, 0x02	; 2
    21a4:	df 2e       	mov	r13, r31
    21a6:	f0 2d       	mov	r31, r0
    21a8:	0f 2e       	mov	r0, r31
	//Tone Example	
	for (int thisNote = 0; thisNote < 8; thisNote++) 
	{
		// to calculate the note duration, take one second divided by the note type.
		//e.g. quarter note = 1000 / 4, eighth note = 1000/8, etc.
		int noteDuration = 1000 / noteDurations[thisNote];
    21aa:	f8 ee       	ldi	r31, 0xE8	; 232
    21ac:	ef 2e       	mov	r14, r31
    21ae:	f3 e0       	ldi	r31, 0x03	; 3
    21b0:	ff 2e       	mov	r15, r31
    21b2:	f0 2d       	mov	r31, r0
    21b4:	f8 01       	movw	r30, r16
    21b6:	61 91       	ld	r22, Z+
    21b8:	71 91       	ld	r23, Z+
    21ba:	8f 01       	movw	r16, r30
    21bc:	c7 01       	movw	r24, r14
    21be:	6b d1       	rcall	.+726    	; 0x2496 <__divmodhi4>
    21c0:	cb 01       	movw	r24, r22
    21c2:	f5 01       	movw	r30, r10
		tone(Pin_PE3, melody[thisNote], noteDuration);
    21c4:	61 91       	ld	r22, Z+
    21c6:	71 91       	ld	r23, Z+
    21c8:	5f 01       	movw	r10, r30
    21ca:	2c 01       	movw	r4, r24
    21cc:	99 0f       	add	r25, r25
    21ce:	66 08       	sbc	r6, r6
    21d0:	77 08       	sbc	r7, r7
    21d2:	a3 01       	movw	r20, r6
    21d4:	92 01       	movw	r18, r4
    21d6:	85 e0       	ldi	r24, 0x05	; 5
    21d8:	24 db       	rcall	.-2488   	; 0x1822 <tone>
		// to distinguish the notes, set a minimum time between them.
		// the note's duration + 30% seems to work well:
		int pauseBetweenNotes = noteDuration * 1.30;
		delay_ms(pauseBetweenNotes);		
    21da:	c3 01       	movw	r24, r6
    21dc:	b2 01       	movw	r22, r4
    21de:	6c d0       	rcall	.+216    	; 0x22b8 <__floatsisf>
    21e0:	26 e6       	ldi	r18, 0x66	; 102
    21e2:	36 e6       	ldi	r19, 0x66	; 102
    21e4:	46 ea       	ldi	r20, 0xA6	; 166
    21e6:	5f e3       	ldi	r21, 0x3F	; 63
    21e8:	cb d0       	rcall	.+406    	; 0x2380 <__mulsf3>
    21ea:	33 d0       	rcall	.+102    	; 0x2252 <__fixsfsi>
    21ec:	07 2e       	mov	r0, r23
    21ee:	00 0c       	add	r0, r0
    21f0:	88 0b       	sbc	r24, r24
    21f2:	99 0b       	sbc	r25, r25
    21f4:	8f da       	rcall	.-2786   	; 0x1714 <delay_ms>
		// stop the tone playing:
		noTone(Pin_PE3);
    21f6:	85 e0       	ldi	r24, 0x05	; 5
    21f8:	bd de       	rcall	.-646    	; 0x1f74 <noTone>
	
	analogWrite(Pin_PH3,255/4);
	

	//Tone Example	
	for (int thisNote = 0; thisNote < 8; thisNote++) 
    21fa:	0c 15       	cp	r16, r12
    21fc:	1d 05       	cpc	r17, r13
    21fe:	d1 f6       	brne	.-76     	; 0x21b4 <main+0xd0>
	const int BUFFER_SIZE = 10;
	char buf[BUFFER_SIZE];
	
    while (1) 
    {
		int pot_val = analogRead(Pin_PF0);
    2200:	81 e6       	ldi	r24, 0x61	; 97
    2202:	0e 94 ca 02 	call	0x594	; 0x594 <analogRead>
		
		LCD_PrintInt(pot_val,4,1);
    2206:	41 e0       	ldi	r20, 0x01	; 1
    2208:	64 e0       	ldi	r22, 0x04	; 4
    220a:	48 df       	rcall	.-368    	; 0x209c <LCD_PrintInt>
		delay_ms(50);
    220c:	62 e3       	ldi	r22, 0x32	; 50
    220e:	70 e0       	ldi	r23, 0x00	; 0
    2210:	80 e0       	ldi	r24, 0x00	; 0
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	7f da       	rcall	.-2818   	; 0x1714 <delay_ms>
    2216:	41 e0       	ldi	r20, 0x01	; 1
		LCD_PrintString("ADC:    ",0,1);//clear line
    2218:	60 e0       	ldi	r22, 0x00	; 0
    221a:	8a e5       	ldi	r24, 0x5A	; 90
    221c:	92 e0       	ldi	r25, 0x02	; 2
    221e:	0e 94 b0 02 	call	0x560	; 0x560 <LCD_PrintString>
    2222:	61 e0       	ldi	r22, 0x01	; 1
		{
			_delay_ms(70);
			togglePin(Pin_PK0);
		}
		*/
		lcd_setCursor(0,1);
    2224:	80 e0       	ldi	r24, 0x00	; 0
    2226:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <lcd_setCursor>
		if (Serial0_available())
    222a:	0e 94 de 03 	call	0x7bc	; 0x7bc <Serial0_available>
    222e:	89 2b       	or	r24, r25
    2230:	39 f3       	breq	.-50     	; 0x2200 <__stack+0x1>
		{
// 			int r = Serial2_timedRead();
// 			LCD_PrintInt(r,0,1);
// 			Serial2_write(r);

			delay_ms(1000);//wait for all data
    2232:	68 ee       	ldi	r22, 0xE8	; 232
    2234:	73 e0       	ldi	r23, 0x03	; 3
    2236:	80 e0       	ldi	r24, 0x00	; 0
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	6c da       	rcall	.-2856   	; 0x1714 <delay_ms>
    223c:	6a e0       	ldi	r22, 0x0A	; 10
			Serial0_readAllBytes(buf, BUFFER_SIZE);
    223e:	70 e0       	ldi	r23, 0x00	; 0
    2240:	ce 01       	movw	r24, r28
    2242:	01 96       	adiw	r24, 0x01	; 1
    2244:	0e 94 30 04 	call	0x860	; 0x860 <Serial0_readAllBytes>
    2248:	ce 01       	movw	r24, r28
			Serial0_print(buf);		
    224a:	01 96       	adiw	r24, 0x01	; 1
    224c:	0e 94 c9 04 	call	0x992	; 0x992 <Serial0_print>
    2250:	d7 cf       	rjmp	.-82     	; 0x2200 <__stack+0x1>

00002252 <__fixsfsi>:
    2252:	04 d0       	rcall	.+8      	; 0x225c <__fixunssfsi>
    2254:	68 94       	set
    2256:	b1 11       	cpse	r27, r1
    2258:	8d c0       	rjmp	.+282    	; 0x2374 <__fp_szero>
    225a:	08 95       	ret

0000225c <__fixunssfsi>:
    225c:	70 d0       	rcall	.+224    	; 0x233e <__fp_splitA>
    225e:	88 f0       	brcs	.+34     	; 0x2282 <__fixunssfsi+0x26>
    2260:	9f 57       	subi	r25, 0x7F	; 127
    2262:	90 f0       	brcs	.+36     	; 0x2288 <__fixunssfsi+0x2c>
    2264:	b9 2f       	mov	r27, r25
    2266:	99 27       	eor	r25, r25
    2268:	b7 51       	subi	r27, 0x17	; 23
    226a:	a0 f0       	brcs	.+40     	; 0x2294 <__fixunssfsi+0x38>
    226c:	d1 f0       	breq	.+52     	; 0x22a2 <__fixunssfsi+0x46>
    226e:	66 0f       	add	r22, r22
    2270:	77 1f       	adc	r23, r23
    2272:	88 1f       	adc	r24, r24
    2274:	99 1f       	adc	r25, r25
    2276:	1a f0       	brmi	.+6      	; 0x227e <__fixunssfsi+0x22>
    2278:	ba 95       	dec	r27
    227a:	c9 f7       	brne	.-14     	; 0x226e <__fixunssfsi+0x12>
    227c:	12 c0       	rjmp	.+36     	; 0x22a2 <__fixunssfsi+0x46>
    227e:	b1 30       	cpi	r27, 0x01	; 1
    2280:	81 f0       	breq	.+32     	; 0x22a2 <__fixunssfsi+0x46>
    2282:	77 d0       	rcall	.+238    	; 0x2372 <__fp_zero>
    2284:	b1 e0       	ldi	r27, 0x01	; 1
    2286:	08 95       	ret
    2288:	74 c0       	rjmp	.+232    	; 0x2372 <__fp_zero>
    228a:	67 2f       	mov	r22, r23
    228c:	78 2f       	mov	r23, r24
    228e:	88 27       	eor	r24, r24
    2290:	b8 5f       	subi	r27, 0xF8	; 248
    2292:	39 f0       	breq	.+14     	; 0x22a2 <__fixunssfsi+0x46>
    2294:	b9 3f       	cpi	r27, 0xF9	; 249
    2296:	cc f3       	brlt	.-14     	; 0x228a <__fixunssfsi+0x2e>
    2298:	86 95       	lsr	r24
    229a:	77 95       	ror	r23
    229c:	67 95       	ror	r22
    229e:	b3 95       	inc	r27
    22a0:	d9 f7       	brne	.-10     	; 0x2298 <__fixunssfsi+0x3c>
    22a2:	3e f4       	brtc	.+14     	; 0x22b2 <__fixunssfsi+0x56>
    22a4:	90 95       	com	r25
    22a6:	80 95       	com	r24
    22a8:	70 95       	com	r23
    22aa:	61 95       	neg	r22
    22ac:	7f 4f       	sbci	r23, 0xFF	; 255
    22ae:	8f 4f       	sbci	r24, 0xFF	; 255
    22b0:	9f 4f       	sbci	r25, 0xFF	; 255
    22b2:	08 95       	ret

000022b4 <__floatunsisf>:
    22b4:	e8 94       	clt
    22b6:	09 c0       	rjmp	.+18     	; 0x22ca <__floatsisf+0x12>

000022b8 <__floatsisf>:
    22b8:	97 fb       	bst	r25, 7
    22ba:	3e f4       	brtc	.+14     	; 0x22ca <__floatsisf+0x12>
    22bc:	90 95       	com	r25
    22be:	80 95       	com	r24
    22c0:	70 95       	com	r23
    22c2:	61 95       	neg	r22
    22c4:	7f 4f       	sbci	r23, 0xFF	; 255
    22c6:	8f 4f       	sbci	r24, 0xFF	; 255
    22c8:	9f 4f       	sbci	r25, 0xFF	; 255
    22ca:	99 23       	and	r25, r25
    22cc:	a9 f0       	breq	.+42     	; 0x22f8 <__floatsisf+0x40>
    22ce:	f9 2f       	mov	r31, r25
    22d0:	96 e9       	ldi	r25, 0x96	; 150
    22d2:	bb 27       	eor	r27, r27
    22d4:	93 95       	inc	r25
    22d6:	f6 95       	lsr	r31
    22d8:	87 95       	ror	r24
    22da:	77 95       	ror	r23
    22dc:	67 95       	ror	r22
    22de:	b7 95       	ror	r27
    22e0:	f1 11       	cpse	r31, r1
    22e2:	f8 cf       	rjmp	.-16     	; 0x22d4 <__floatsisf+0x1c>
    22e4:	fa f4       	brpl	.+62     	; 0x2324 <__floatsisf+0x6c>
    22e6:	bb 0f       	add	r27, r27
    22e8:	11 f4       	brne	.+4      	; 0x22ee <__floatsisf+0x36>
    22ea:	60 ff       	sbrs	r22, 0
    22ec:	1b c0       	rjmp	.+54     	; 0x2324 <__floatsisf+0x6c>
    22ee:	6f 5f       	subi	r22, 0xFF	; 255
    22f0:	7f 4f       	sbci	r23, 0xFF	; 255
    22f2:	8f 4f       	sbci	r24, 0xFF	; 255
    22f4:	9f 4f       	sbci	r25, 0xFF	; 255
    22f6:	16 c0       	rjmp	.+44     	; 0x2324 <__floatsisf+0x6c>
    22f8:	88 23       	and	r24, r24
    22fa:	11 f0       	breq	.+4      	; 0x2300 <__floatsisf+0x48>
    22fc:	96 e9       	ldi	r25, 0x96	; 150
    22fe:	11 c0       	rjmp	.+34     	; 0x2322 <__floatsisf+0x6a>
    2300:	77 23       	and	r23, r23
    2302:	21 f0       	breq	.+8      	; 0x230c <__floatsisf+0x54>
    2304:	9e e8       	ldi	r25, 0x8E	; 142
    2306:	87 2f       	mov	r24, r23
    2308:	76 2f       	mov	r23, r22
    230a:	05 c0       	rjmp	.+10     	; 0x2316 <__floatsisf+0x5e>
    230c:	66 23       	and	r22, r22
    230e:	71 f0       	breq	.+28     	; 0x232c <__floatsisf+0x74>
    2310:	96 e8       	ldi	r25, 0x86	; 134
    2312:	86 2f       	mov	r24, r22
    2314:	70 e0       	ldi	r23, 0x00	; 0
    2316:	60 e0       	ldi	r22, 0x00	; 0
    2318:	2a f0       	brmi	.+10     	; 0x2324 <__floatsisf+0x6c>
    231a:	9a 95       	dec	r25
    231c:	66 0f       	add	r22, r22
    231e:	77 1f       	adc	r23, r23
    2320:	88 1f       	adc	r24, r24
    2322:	da f7       	brpl	.-10     	; 0x231a <__floatsisf+0x62>
    2324:	88 0f       	add	r24, r24
    2326:	96 95       	lsr	r25
    2328:	87 95       	ror	r24
    232a:	97 f9       	bld	r25, 7
    232c:	08 95       	ret

0000232e <__fp_split3>:
    232e:	57 fd       	sbrc	r21, 7
    2330:	90 58       	subi	r25, 0x80	; 128
    2332:	44 0f       	add	r20, r20
    2334:	55 1f       	adc	r21, r21
    2336:	59 f0       	breq	.+22     	; 0x234e <__fp_splitA+0x10>
    2338:	5f 3f       	cpi	r21, 0xFF	; 255
    233a:	71 f0       	breq	.+28     	; 0x2358 <__fp_splitA+0x1a>
    233c:	47 95       	ror	r20

0000233e <__fp_splitA>:
    233e:	88 0f       	add	r24, r24
    2340:	97 fb       	bst	r25, 7
    2342:	99 1f       	adc	r25, r25
    2344:	61 f0       	breq	.+24     	; 0x235e <__fp_splitA+0x20>
    2346:	9f 3f       	cpi	r25, 0xFF	; 255
    2348:	79 f0       	breq	.+30     	; 0x2368 <__fp_splitA+0x2a>
    234a:	87 95       	ror	r24
    234c:	08 95       	ret
    234e:	12 16       	cp	r1, r18
    2350:	13 06       	cpc	r1, r19
    2352:	14 06       	cpc	r1, r20
    2354:	55 1f       	adc	r21, r21
    2356:	f2 cf       	rjmp	.-28     	; 0x233c <__fp_split3+0xe>
    2358:	46 95       	lsr	r20
    235a:	f1 df       	rcall	.-30     	; 0x233e <__fp_splitA>
    235c:	08 c0       	rjmp	.+16     	; 0x236e <__fp_splitA+0x30>
    235e:	16 16       	cp	r1, r22
    2360:	17 06       	cpc	r1, r23
    2362:	18 06       	cpc	r1, r24
    2364:	99 1f       	adc	r25, r25
    2366:	f1 cf       	rjmp	.-30     	; 0x234a <__fp_splitA+0xc>
    2368:	86 95       	lsr	r24
    236a:	71 05       	cpc	r23, r1
    236c:	61 05       	cpc	r22, r1
    236e:	08 94       	sec
    2370:	08 95       	ret

00002372 <__fp_zero>:
    2372:	e8 94       	clt

00002374 <__fp_szero>:
    2374:	bb 27       	eor	r27, r27
    2376:	66 27       	eor	r22, r22
    2378:	77 27       	eor	r23, r23
    237a:	cb 01       	movw	r24, r22
    237c:	97 f9       	bld	r25, 7
    237e:	08 95       	ret

00002380 <__mulsf3>:
    2380:	0b d0       	rcall	.+22     	; 0x2398 <__mulsf3x>
    2382:	78 c0       	rjmp	.+240    	; 0x2474 <__fp_round>
    2384:	69 d0       	rcall	.+210    	; 0x2458 <__fp_pscA>
    2386:	28 f0       	brcs	.+10     	; 0x2392 <__mulsf3+0x12>
    2388:	6e d0       	rcall	.+220    	; 0x2466 <__fp_pscB>
    238a:	18 f0       	brcs	.+6      	; 0x2392 <__mulsf3+0x12>
    238c:	95 23       	and	r25, r21
    238e:	09 f0       	breq	.+2      	; 0x2392 <__mulsf3+0x12>
    2390:	5a c0       	rjmp	.+180    	; 0x2446 <__fp_inf>
    2392:	5f c0       	rjmp	.+190    	; 0x2452 <__fp_nan>
    2394:	11 24       	eor	r1, r1
    2396:	ee cf       	rjmp	.-36     	; 0x2374 <__fp_szero>

00002398 <__mulsf3x>:
    2398:	ca df       	rcall	.-108    	; 0x232e <__fp_split3>
    239a:	a0 f3       	brcs	.-24     	; 0x2384 <__mulsf3+0x4>

0000239c <__mulsf3_pse>:
    239c:	95 9f       	mul	r25, r21
    239e:	d1 f3       	breq	.-12     	; 0x2394 <__mulsf3+0x14>
    23a0:	95 0f       	add	r25, r21
    23a2:	50 e0       	ldi	r21, 0x00	; 0
    23a4:	55 1f       	adc	r21, r21
    23a6:	62 9f       	mul	r22, r18
    23a8:	f0 01       	movw	r30, r0
    23aa:	72 9f       	mul	r23, r18
    23ac:	bb 27       	eor	r27, r27
    23ae:	f0 0d       	add	r31, r0
    23b0:	b1 1d       	adc	r27, r1
    23b2:	63 9f       	mul	r22, r19
    23b4:	aa 27       	eor	r26, r26
    23b6:	f0 0d       	add	r31, r0
    23b8:	b1 1d       	adc	r27, r1
    23ba:	aa 1f       	adc	r26, r26
    23bc:	64 9f       	mul	r22, r20
    23be:	66 27       	eor	r22, r22
    23c0:	b0 0d       	add	r27, r0
    23c2:	a1 1d       	adc	r26, r1
    23c4:	66 1f       	adc	r22, r22
    23c6:	82 9f       	mul	r24, r18
    23c8:	22 27       	eor	r18, r18
    23ca:	b0 0d       	add	r27, r0
    23cc:	a1 1d       	adc	r26, r1
    23ce:	62 1f       	adc	r22, r18
    23d0:	73 9f       	mul	r23, r19
    23d2:	b0 0d       	add	r27, r0
    23d4:	a1 1d       	adc	r26, r1
    23d6:	62 1f       	adc	r22, r18
    23d8:	83 9f       	mul	r24, r19
    23da:	a0 0d       	add	r26, r0
    23dc:	61 1d       	adc	r22, r1
    23de:	22 1f       	adc	r18, r18
    23e0:	74 9f       	mul	r23, r20
    23e2:	33 27       	eor	r19, r19
    23e4:	a0 0d       	add	r26, r0
    23e6:	61 1d       	adc	r22, r1
    23e8:	23 1f       	adc	r18, r19
    23ea:	84 9f       	mul	r24, r20
    23ec:	60 0d       	add	r22, r0
    23ee:	21 1d       	adc	r18, r1
    23f0:	82 2f       	mov	r24, r18
    23f2:	76 2f       	mov	r23, r22
    23f4:	6a 2f       	mov	r22, r26
    23f6:	11 24       	eor	r1, r1
    23f8:	9f 57       	subi	r25, 0x7F	; 127
    23fa:	50 40       	sbci	r21, 0x00	; 0
    23fc:	8a f0       	brmi	.+34     	; 0x2420 <__mulsf3_pse+0x84>
    23fe:	e1 f0       	breq	.+56     	; 0x2438 <__mulsf3_pse+0x9c>
    2400:	88 23       	and	r24, r24
    2402:	4a f0       	brmi	.+18     	; 0x2416 <__mulsf3_pse+0x7a>
    2404:	ee 0f       	add	r30, r30
    2406:	ff 1f       	adc	r31, r31
    2408:	bb 1f       	adc	r27, r27
    240a:	66 1f       	adc	r22, r22
    240c:	77 1f       	adc	r23, r23
    240e:	88 1f       	adc	r24, r24
    2410:	91 50       	subi	r25, 0x01	; 1
    2412:	50 40       	sbci	r21, 0x00	; 0
    2414:	a9 f7       	brne	.-22     	; 0x2400 <__mulsf3_pse+0x64>
    2416:	9e 3f       	cpi	r25, 0xFE	; 254
    2418:	51 05       	cpc	r21, r1
    241a:	70 f0       	brcs	.+28     	; 0x2438 <__mulsf3_pse+0x9c>
    241c:	14 c0       	rjmp	.+40     	; 0x2446 <__fp_inf>
    241e:	aa cf       	rjmp	.-172    	; 0x2374 <__fp_szero>
    2420:	5f 3f       	cpi	r21, 0xFF	; 255
    2422:	ec f3       	brlt	.-6      	; 0x241e <__mulsf3_pse+0x82>
    2424:	98 3e       	cpi	r25, 0xE8	; 232
    2426:	dc f3       	brlt	.-10     	; 0x241e <__mulsf3_pse+0x82>
    2428:	86 95       	lsr	r24
    242a:	77 95       	ror	r23
    242c:	67 95       	ror	r22
    242e:	b7 95       	ror	r27
    2430:	f7 95       	ror	r31
    2432:	e7 95       	ror	r30
    2434:	9f 5f       	subi	r25, 0xFF	; 255
    2436:	c1 f7       	brne	.-16     	; 0x2428 <__mulsf3_pse+0x8c>
    2438:	fe 2b       	or	r31, r30
    243a:	88 0f       	add	r24, r24
    243c:	91 1d       	adc	r25, r1
    243e:	96 95       	lsr	r25
    2440:	87 95       	ror	r24
    2442:	97 f9       	bld	r25, 7
    2444:	08 95       	ret

00002446 <__fp_inf>:
    2446:	97 f9       	bld	r25, 7
    2448:	9f 67       	ori	r25, 0x7F	; 127
    244a:	80 e8       	ldi	r24, 0x80	; 128
    244c:	70 e0       	ldi	r23, 0x00	; 0
    244e:	60 e0       	ldi	r22, 0x00	; 0
    2450:	08 95       	ret

00002452 <__fp_nan>:
    2452:	9f ef       	ldi	r25, 0xFF	; 255
    2454:	80 ec       	ldi	r24, 0xC0	; 192
    2456:	08 95       	ret

00002458 <__fp_pscA>:
    2458:	00 24       	eor	r0, r0
    245a:	0a 94       	dec	r0
    245c:	16 16       	cp	r1, r22
    245e:	17 06       	cpc	r1, r23
    2460:	18 06       	cpc	r1, r24
    2462:	09 06       	cpc	r0, r25
    2464:	08 95       	ret

00002466 <__fp_pscB>:
    2466:	00 24       	eor	r0, r0
    2468:	0a 94       	dec	r0
    246a:	12 16       	cp	r1, r18
    246c:	13 06       	cpc	r1, r19
    246e:	14 06       	cpc	r1, r20
    2470:	05 06       	cpc	r0, r21
    2472:	08 95       	ret

00002474 <__fp_round>:
    2474:	09 2e       	mov	r0, r25
    2476:	03 94       	inc	r0
    2478:	00 0c       	add	r0, r0
    247a:	11 f4       	brne	.+4      	; 0x2480 <__fp_round+0xc>
    247c:	88 23       	and	r24, r24
    247e:	52 f0       	brmi	.+20     	; 0x2494 <__fp_round+0x20>
    2480:	bb 0f       	add	r27, r27
    2482:	40 f4       	brcc	.+16     	; 0x2494 <__fp_round+0x20>
    2484:	bf 2b       	or	r27, r31
    2486:	11 f4       	brne	.+4      	; 0x248c <__fp_round+0x18>
    2488:	60 ff       	sbrs	r22, 0
    248a:	04 c0       	rjmp	.+8      	; 0x2494 <__fp_round+0x20>
    248c:	6f 5f       	subi	r22, 0xFF	; 255
    248e:	7f 4f       	sbci	r23, 0xFF	; 255
    2490:	8f 4f       	sbci	r24, 0xFF	; 255
    2492:	9f 4f       	sbci	r25, 0xFF	; 255
    2494:	08 95       	ret

00002496 <__divmodhi4>:
    2496:	97 fb       	bst	r25, 7
    2498:	07 2e       	mov	r0, r23
    249a:	16 f4       	brtc	.+4      	; 0x24a0 <__divmodhi4+0xa>
    249c:	00 94       	com	r0
    249e:	06 d0       	rcall	.+12     	; 0x24ac <__divmodhi4_neg1>
    24a0:	77 fd       	sbrc	r23, 7
    24a2:	08 d0       	rcall	.+16     	; 0x24b4 <__divmodhi4_neg2>
    24a4:	3f d0       	rcall	.+126    	; 0x2524 <__udivmodhi4>
    24a6:	07 fc       	sbrc	r0, 7
    24a8:	05 d0       	rcall	.+10     	; 0x24b4 <__divmodhi4_neg2>
    24aa:	3e f4       	brtc	.+14     	; 0x24ba <__divmodhi4_exit>

000024ac <__divmodhi4_neg1>:
    24ac:	90 95       	com	r25
    24ae:	81 95       	neg	r24
    24b0:	9f 4f       	sbci	r25, 0xFF	; 255
    24b2:	08 95       	ret

000024b4 <__divmodhi4_neg2>:
    24b4:	70 95       	com	r23
    24b6:	61 95       	neg	r22
    24b8:	7f 4f       	sbci	r23, 0xFF	; 255

000024ba <__divmodhi4_exit>:
    24ba:	08 95       	ret

000024bc <__udivmodsi4>:
    24bc:	a1 e2       	ldi	r26, 0x21	; 33
    24be:	1a 2e       	mov	r1, r26
    24c0:	aa 1b       	sub	r26, r26
    24c2:	bb 1b       	sub	r27, r27
    24c4:	fd 01       	movw	r30, r26
    24c6:	0d c0       	rjmp	.+26     	; 0x24e2 <__udivmodsi4_ep>

000024c8 <__udivmodsi4_loop>:
    24c8:	aa 1f       	adc	r26, r26
    24ca:	bb 1f       	adc	r27, r27
    24cc:	ee 1f       	adc	r30, r30
    24ce:	ff 1f       	adc	r31, r31
    24d0:	a2 17       	cp	r26, r18
    24d2:	b3 07       	cpc	r27, r19
    24d4:	e4 07       	cpc	r30, r20
    24d6:	f5 07       	cpc	r31, r21
    24d8:	20 f0       	brcs	.+8      	; 0x24e2 <__udivmodsi4_ep>
    24da:	a2 1b       	sub	r26, r18
    24dc:	b3 0b       	sbc	r27, r19
    24de:	e4 0b       	sbc	r30, r20
    24e0:	f5 0b       	sbc	r31, r21

000024e2 <__udivmodsi4_ep>:
    24e2:	66 1f       	adc	r22, r22
    24e4:	77 1f       	adc	r23, r23
    24e6:	88 1f       	adc	r24, r24
    24e8:	99 1f       	adc	r25, r25
    24ea:	1a 94       	dec	r1
    24ec:	69 f7       	brne	.-38     	; 0x24c8 <__udivmodsi4_loop>
    24ee:	60 95       	com	r22
    24f0:	70 95       	com	r23
    24f2:	80 95       	com	r24
    24f4:	90 95       	com	r25
    24f6:	9b 01       	movw	r18, r22
    24f8:	ac 01       	movw	r20, r24
    24fa:	bd 01       	movw	r22, r26
    24fc:	cf 01       	movw	r24, r30
    24fe:	08 95       	ret

00002500 <__tablejump2__>:
    2500:	ee 0f       	add	r30, r30
    2502:	ff 1f       	adc	r31, r31
    2504:	88 1f       	adc	r24, r24
    2506:	8b bf       	out	0x3b, r24	; 59
    2508:	07 90       	elpm	r0, Z+
    250a:	f6 91       	elpm	r31, Z
    250c:	e0 2d       	mov	r30, r0
    250e:	19 94       	eijmp

00002510 <__muluhisi3>:
    2510:	1d d0       	rcall	.+58     	; 0x254c <__umulhisi3>
    2512:	a5 9f       	mul	r26, r21
    2514:	90 0d       	add	r25, r0
    2516:	b4 9f       	mul	r27, r20
    2518:	90 0d       	add	r25, r0
    251a:	a4 9f       	mul	r26, r20
    251c:	80 0d       	add	r24, r0
    251e:	91 1d       	adc	r25, r1
    2520:	11 24       	eor	r1, r1
    2522:	08 95       	ret

00002524 <__udivmodhi4>:
    2524:	aa 1b       	sub	r26, r26
    2526:	bb 1b       	sub	r27, r27
    2528:	51 e1       	ldi	r21, 0x11	; 17
    252a:	07 c0       	rjmp	.+14     	; 0x253a <__udivmodhi4_ep>

0000252c <__udivmodhi4_loop>:
    252c:	aa 1f       	adc	r26, r26
    252e:	bb 1f       	adc	r27, r27
    2530:	a6 17       	cp	r26, r22
    2532:	b7 07       	cpc	r27, r23
    2534:	10 f0       	brcs	.+4      	; 0x253a <__udivmodhi4_ep>
    2536:	a6 1b       	sub	r26, r22
    2538:	b7 0b       	sbc	r27, r23

0000253a <__udivmodhi4_ep>:
    253a:	88 1f       	adc	r24, r24
    253c:	99 1f       	adc	r25, r25
    253e:	5a 95       	dec	r21
    2540:	a9 f7       	brne	.-22     	; 0x252c <__udivmodhi4_loop>
    2542:	80 95       	com	r24
    2544:	90 95       	com	r25
    2546:	bc 01       	movw	r22, r24
    2548:	cd 01       	movw	r24, r26
    254a:	08 95       	ret

0000254c <__umulhisi3>:
    254c:	a2 9f       	mul	r26, r18
    254e:	b0 01       	movw	r22, r0
    2550:	b3 9f       	mul	r27, r19
    2552:	c0 01       	movw	r24, r0
    2554:	a3 9f       	mul	r26, r19
    2556:	70 0d       	add	r23, r0
    2558:	81 1d       	adc	r24, r1
    255a:	11 24       	eor	r1, r1
    255c:	91 1d       	adc	r25, r1
    255e:	b2 9f       	mul	r27, r18
    2560:	70 0d       	add	r23, r0
    2562:	81 1d       	adc	r24, r1
    2564:	11 24       	eor	r1, r1
    2566:	91 1d       	adc	r25, r1
    2568:	08 95       	ret

0000256a <__itoa_ncheck>:
    256a:	bb 27       	eor	r27, r27
    256c:	4a 30       	cpi	r20, 0x0A	; 10
    256e:	31 f4       	brne	.+12     	; 0x257c <__itoa_ncheck+0x12>
    2570:	99 23       	and	r25, r25
    2572:	22 f4       	brpl	.+8      	; 0x257c <__itoa_ncheck+0x12>
    2574:	bd e2       	ldi	r27, 0x2D	; 45
    2576:	90 95       	com	r25
    2578:	81 95       	neg	r24
    257a:	9f 4f       	sbci	r25, 0xFF	; 255
    257c:	01 c0       	rjmp	.+2      	; 0x2580 <__utoa_common>

0000257e <__utoa_ncheck>:
    257e:	bb 27       	eor	r27, r27

00002580 <__utoa_common>:
    2580:	fb 01       	movw	r30, r22
    2582:	55 27       	eor	r21, r21
    2584:	aa 27       	eor	r26, r26
    2586:	88 0f       	add	r24, r24
    2588:	99 1f       	adc	r25, r25
    258a:	aa 1f       	adc	r26, r26
    258c:	a4 17       	cp	r26, r20
    258e:	10 f0       	brcs	.+4      	; 0x2594 <__utoa_common+0x14>
    2590:	a4 1b       	sub	r26, r20
    2592:	83 95       	inc	r24
    2594:	50 51       	subi	r21, 0x10	; 16
    2596:	b9 f7       	brne	.-18     	; 0x2586 <__utoa_common+0x6>
    2598:	a0 5d       	subi	r26, 0xD0	; 208
    259a:	aa 33       	cpi	r26, 0x3A	; 58
    259c:	08 f0       	brcs	.+2      	; 0x25a0 <__utoa_common+0x20>
    259e:	a9 5d       	subi	r26, 0xD9	; 217
    25a0:	a1 93       	st	Z+, r26
    25a2:	00 97       	sbiw	r24, 0x00	; 0
    25a4:	79 f7       	brne	.-34     	; 0x2584 <__utoa_common+0x4>
    25a6:	b1 11       	cpse	r27, r1
    25a8:	b1 93       	st	Z+, r27
    25aa:	11 92       	st	Z+, r1
    25ac:	cb 01       	movw	r24, r22
    25ae:	00 c0       	rjmp	.+0      	; 0x25b0 <strrev>

000025b0 <strrev>:
    25b0:	dc 01       	movw	r26, r24
    25b2:	fc 01       	movw	r30, r24
    25b4:	67 2f       	mov	r22, r23
    25b6:	71 91       	ld	r23, Z+
    25b8:	77 23       	and	r23, r23
    25ba:	e1 f7       	brne	.-8      	; 0x25b4 <strrev+0x4>
    25bc:	32 97       	sbiw	r30, 0x02	; 2
    25be:	04 c0       	rjmp	.+8      	; 0x25c8 <strrev+0x18>
    25c0:	7c 91       	ld	r23, X
    25c2:	6d 93       	st	X+, r22
    25c4:	70 83       	st	Z, r23
    25c6:	62 91       	ld	r22, -Z
    25c8:	ae 17       	cp	r26, r30
    25ca:	bf 07       	cpc	r27, r31
    25cc:	c8 f3       	brcs	.-14     	; 0x25c0 <strrev+0x10>
    25ce:	08 95       	ret

000025d0 <_exit>:
    25d0:	f8 94       	cli

000025d2 <__stop_program>:
    25d2:	ff cf       	rjmp	.-2      	; 0x25d2 <__stop_program>
