
TK2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800200  00000c28  00000cbc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c28  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002a  00800202  00800202  00000cbe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cbe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000cf0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000d30  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e1b  00000000  00000000  00000dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010aa  00000000  00000000  00002bf3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b01  00000000  00000000  00003c9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  000047a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000082d  00000000  00000000  00004920  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001061  00000000  00000000  0000514d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  000061ae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	f1 c0       	rjmp	.+482    	; 0x1e4 <__ctors_end>
   2:	00 00       	nop
   4:	0e c1       	rjmp	.+540    	; 0x222 <__bad_interrupt>
   6:	00 00       	nop
   8:	0c c1       	rjmp	.+536    	; 0x222 <__bad_interrupt>
   a:	00 00       	nop
   c:	0a c1       	rjmp	.+532    	; 0x222 <__bad_interrupt>
   e:	00 00       	nop
  10:	08 c1       	rjmp	.+528    	; 0x222 <__bad_interrupt>
  12:	00 00       	nop
  14:	06 c1       	rjmp	.+524    	; 0x222 <__bad_interrupt>
  16:	00 00       	nop
  18:	04 c1       	rjmp	.+520    	; 0x222 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	02 c1       	rjmp	.+516    	; 0x222 <__bad_interrupt>
  1e:	00 00       	nop
  20:	00 c1       	rjmp	.+512    	; 0x222 <__bad_interrupt>
  22:	00 00       	nop
  24:	fe c0       	rjmp	.+508    	; 0x222 <__bad_interrupt>
  26:	00 00       	nop
  28:	fc c0       	rjmp	.+504    	; 0x222 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	fa c0       	rjmp	.+500    	; 0x222 <__bad_interrupt>
  2e:	00 00       	nop
  30:	f8 c0       	rjmp	.+496    	; 0x222 <__bad_interrupt>
  32:	00 00       	nop
  34:	f6 c0       	rjmp	.+492    	; 0x222 <__bad_interrupt>
  36:	00 00       	nop
  38:	f4 c0       	rjmp	.+488    	; 0x222 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	f2 c0       	rjmp	.+484    	; 0x222 <__bad_interrupt>
  3e:	00 00       	nop
  40:	f0 c0       	rjmp	.+480    	; 0x222 <__bad_interrupt>
  42:	00 00       	nop
  44:	ee c0       	rjmp	.+476    	; 0x222 <__bad_interrupt>
  46:	00 00       	nop
  48:	ec c0       	rjmp	.+472    	; 0x222 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	ea c0       	rjmp	.+468    	; 0x222 <__bad_interrupt>
  4e:	00 00       	nop
  50:	e8 c0       	rjmp	.+464    	; 0x222 <__bad_interrupt>
  52:	00 00       	nop
  54:	e6 c0       	rjmp	.+460    	; 0x222 <__bad_interrupt>
  56:	00 00       	nop
  58:	e4 c0       	rjmp	.+456    	; 0x222 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	e2 c0       	rjmp	.+452    	; 0x222 <__bad_interrupt>
  5e:	00 00       	nop
  60:	e0 c0       	rjmp	.+448    	; 0x222 <__bad_interrupt>
  62:	00 00       	nop
  64:	de c0       	rjmp	.+444    	; 0x222 <__bad_interrupt>
  66:	00 00       	nop
  68:	dc c0       	rjmp	.+440    	; 0x222 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	da c0       	rjmp	.+436    	; 0x222 <__bad_interrupt>
  6e:	00 00       	nop
  70:	d8 c0       	rjmp	.+432    	; 0x222 <__bad_interrupt>
  72:	00 00       	nop
  74:	d6 c0       	rjmp	.+428    	; 0x222 <__bad_interrupt>
  76:	00 00       	nop
  78:	d4 c0       	rjmp	.+424    	; 0x222 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	d2 c0       	rjmp	.+420    	; 0x222 <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c5       	rjmp	.+2586   	; 0xa9c <__vector_32>
  82:	00 00       	nop
  84:	ce c0       	rjmp	.+412    	; 0x222 <__bad_interrupt>
  86:	00 00       	nop
  88:	cc c0       	rjmp	.+408    	; 0x222 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	ca c0       	rjmp	.+404    	; 0x222 <__bad_interrupt>
  8e:	00 00       	nop
  90:	c8 c0       	rjmp	.+400    	; 0x222 <__bad_interrupt>
  92:	00 00       	nop
  94:	c6 c0       	rjmp	.+396    	; 0x222 <__bad_interrupt>
  96:	00 00       	nop
  98:	c4 c0       	rjmp	.+392    	; 0x222 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	c2 c0       	rjmp	.+388    	; 0x222 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	c0 c0       	rjmp	.+384    	; 0x222 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	be c0       	rjmp	.+380    	; 0x222 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	bc c0       	rjmp	.+376    	; 0x222 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	ba c0       	rjmp	.+372    	; 0x222 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	b8 c0       	rjmp	.+368    	; 0x222 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	b6 c0       	rjmp	.+364    	; 0x222 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	b4 c0       	rjmp	.+360    	; 0x222 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	b2 c0       	rjmp	.+356    	; 0x222 <__bad_interrupt>
  be:	00 00       	nop
  c0:	b0 c0       	rjmp	.+352    	; 0x222 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	ae c0       	rjmp	.+348    	; 0x222 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	ac c0       	rjmp	.+344    	; 0x222 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	aa c0       	rjmp	.+340    	; 0x222 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	a8 c0       	rjmp	.+336    	; 0x222 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	a6 c0       	rjmp	.+332    	; 0x222 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	a4 c0       	rjmp	.+328    	; 0x222 <__bad_interrupt>
  da:	00 00       	nop
  dc:	a2 c0       	rjmp	.+324    	; 0x222 <__bad_interrupt>
  de:	00 00       	nop
  e0:	a0 c0       	rjmp	.+320    	; 0x222 <__bad_interrupt>
	...

000000e4 <__trampolines_end>:
  e4:	00 20       	and	r0, r0
  e6:	01 02       	muls	r16, r17
  e8:	04 08       	sbc	r0, r4
  ea:	10 20       	and	r1, r0
  ec:	40 80       	ld	r4, Z
  ee:	00 00       	nop
  f0:	01 02       	muls	r16, r17
  f2:	04 08       	sbc	r0, r4
  f4:	10 20       	and	r1, r0
  f6:	40 01       	movw	r8, r0
  f8:	02 04       	cpc	r0, r2
  fa:	08 10       	cpse	r0, r8
  fc:	20 40       	sbci	r18, 0x00	; 0
  fe:	80 80       	ld	r8, Z
 100:	08 10       	cpse	r0, r8
 102:	00 00       	nop
 104:	00 00       	nop
 106:	00 01       	movw	r0, r0
 108:	02 04       	cpc	r0, r2
 10a:	08 10       	cpse	r0, r8
 10c:	20 40       	sbci	r18, 0x00	; 0
 10e:	80 01       	movw	r16, r0
 110:	02 04       	cpc	r0, r2
 112:	08 10       	cpse	r0, r8
 114:	20 40       	sbci	r18, 0x00	; 0
 116:	80 01       	movw	r16, r0
 118:	02 01       	movw	r0, r4
 11a:	02 04       	cpc	r0, r2
 11c:	08 10       	cpse	r0, r8
 11e:	20 40       	sbci	r18, 0x00	; 0
 120:	80 00       	.word	0x0080	; ????
 122:	00 01       	movw	r0, r0
 124:	02 04       	cpc	r0, r2
 126:	08 10       	cpse	r0, r8
 128:	20 40       	sbci	r18, 0x00	; 0
 12a:	04 80       	ldd	r0, Z+4	; 0x04
 12c:	40 20       	and	r4, r0
 12e:	10 08       	sbc	r1, r0
 130:	04 02       	muls	r16, r20
 132:	01 80       	ldd	r0, Z+1	; 0x01
 134:	00 00       	nop
 136:	80 40       	sbci	r24, 0x00	; 0
 138:	20 10       	cpse	r2, r0
 13a:	08 04       	cpc	r0, r8
 13c:	02 01       	movw	r0, r4
 13e:	80 40       	sbci	r24, 0x00	; 0
 140:	20 10       	cpse	r2, r0
 142:	08 04       	cpc	r0, r8
 144:	02 01       	movw	r0, r4
 146:	00 00       	nop
	...

00000149 <pin_to_port_PGM>:
 149:	00 07 05 05 05 05 05 05 05 05 00 00 08 08 08 08     ................
 159:	08 08 08 02 02 02 02 02 02 02 02 08 07 07 00 00     ................
 169:	00 00 00 0c 0c 0c 0c 0c 0c 0c 0c 04 04 04 04 04     ................
 179:	04 04 04 07 07 03 03 03 03 03 03 03 03 00 00 0a     ................
 189:	0a 0a 0a 0a 0a 0a 07 01 01 01 01 01 01 01 01 0a     ................
 199:	00 00 0b 0b 0b 0b 0b 0b 0b 0b 06 06 06 06 06 06     ................
 1a9:	06 06 00 00 00                                      .....

000001ae <port_to_output_PGM>:
 1ae:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
 1be:	02 01 00 00 05 01 08 01 0b 01                       ..........

000001c8 <port_to_ddr_PGM>:
 1c8:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
 1d8:	01 01 00 00 04 01 07 01 0a 01                       ..........

000001e2 <tone_pin_to_timer_PGM>:
 1e2:	03 00                                               ..

000001e4 <__ctors_end>:
 1e4:	11 24       	eor	r1, r1
 1e6:	1f be       	out	0x3f, r1	; 63
 1e8:	cf ef       	ldi	r28, 0xFF	; 255
 1ea:	d1 e2       	ldi	r29, 0x21	; 33
 1ec:	de bf       	out	0x3e, r29	; 62
 1ee:	cd bf       	out	0x3d, r28	; 61
 1f0:	00 e0       	ldi	r16, 0x00	; 0
 1f2:	0c bf       	out	0x3c, r16	; 60

000001f4 <__do_copy_data>:
 1f4:	12 e0       	ldi	r17, 0x02	; 2
 1f6:	a0 e0       	ldi	r26, 0x00	; 0
 1f8:	b2 e0       	ldi	r27, 0x02	; 2
 1fa:	e8 e2       	ldi	r30, 0x28	; 40
 1fc:	fc e0       	ldi	r31, 0x0C	; 12
 1fe:	00 e0       	ldi	r16, 0x00	; 0
 200:	0b bf       	out	0x3b, r16	; 59
 202:	02 c0       	rjmp	.+4      	; 0x208 <__do_copy_data+0x14>
 204:	07 90       	elpm	r0, Z+
 206:	0d 92       	st	X+, r0
 208:	a2 30       	cpi	r26, 0x02	; 2
 20a:	b1 07       	cpc	r27, r17
 20c:	d9 f7       	brne	.-10     	; 0x204 <__do_copy_data+0x10>

0000020e <__do_clear_bss>:
 20e:	22 e0       	ldi	r18, 0x02	; 2
 210:	a2 e0       	ldi	r26, 0x02	; 2
 212:	b2 e0       	ldi	r27, 0x02	; 2
 214:	01 c0       	rjmp	.+2      	; 0x218 <.do_clear_bss_start>

00000216 <.do_clear_bss_loop>:
 216:	1d 92       	st	X+, r1

00000218 <.do_clear_bss_start>:
 218:	ac 32       	cpi	r26, 0x2C	; 44
 21a:	b2 07       	cpc	r27, r18
 21c:	e1 f7       	brne	.-8      	; 0x216 <.do_clear_bss_loop>
 21e:	a6 d4       	rcall	.+2380   	; 0xb6c <main>
 220:	01 c5       	rjmp	.+2562   	; 0xc24 <_exit>

00000222 <__bad_interrupt>:
 222:	ee ce       	rjmp	.-548    	; 0x0 <__vectors>

00000224 <pinMode>:
 */ 
#include "gpio.h"


void pinMode(uint8_t pin, uint8_t mode)
{
 224:	cf 93       	push	r28
 226:	df 93       	push	r29
	uint8_t bit = pinToBitMask(pin);
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	fc 01       	movw	r30, r24
 22c:	ec 51       	subi	r30, 0x1C	; 28
 22e:	ff 4f       	sbci	r31, 0xFF	; 255
 230:	24 91       	lpm	r18, Z
	uint8_t port = pinToPort(pin);
 232:	fc 01       	movw	r30, r24
 234:	e7 5b       	subi	r30, 0xB7	; 183
 236:	fe 4f       	sbci	r31, 0xFE	; 254
 238:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;
	
	if (port == NOT_A_PIN) return;
 23a:	88 23       	and	r24, r24
 23c:	79 f1       	breq	.+94     	; 0x29c <pinMode+0x78>
	
	reg = portDDRRegister(port);
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	88 0f       	add	r24, r24
 242:	99 1f       	adc	r25, r25
 244:	fc 01       	movw	r30, r24
 246:	e8 53       	subi	r30, 0x38	; 56
 248:	fe 4f       	sbci	r31, 0xFE	; 254
 24a:	a5 91       	lpm	r26, Z+
 24c:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
 24e:	fc 01       	movw	r30, r24
 250:	e2 55       	subi	r30, 0x52	; 82
 252:	fe 4f       	sbci	r31, 0xFE	; 254
 254:	c5 91       	lpm	r28, Z+
 256:	d4 91       	lpm	r29, Z
	
	if (mode == INPUT)
 258:	61 11       	cpse	r22, r1
 25a:	0c c0       	rjmp	.+24     	; 0x274 <pinMode+0x50>
	{
		uint8_t oldSREG = SREG;
 25c:	9f b7       	in	r25, 0x3f	; 63
		cli();
 25e:	f8 94       	cli
		*reg &= ~bit;
 260:	8c 91       	ld	r24, X
 262:	e2 2f       	mov	r30, r18
 264:	e0 95       	com	r30
 266:	8e 23       	and	r24, r30
 268:	8c 93       	st	X, r24
		*out &= ~bit;
 26a:	28 81       	ld	r18, Y
 26c:	e2 23       	and	r30, r18
 26e:	e8 83       	st	Y, r30
		SREG = oldSREG;
 270:	9f bf       	out	0x3f, r25	; 63
 272:	14 c0       	rjmp	.+40     	; 0x29c <pinMode+0x78>
	}else if(mode == INPUT_PULLUP)
 274:	62 30       	cpi	r22, 0x02	; 2
 276:	61 f4       	brne	.+24     	; 0x290 <pinMode+0x6c>
	{
		uint8_t oldSREG = SREG;
 278:	9f b7       	in	r25, 0x3f	; 63
		cli();
 27a:	f8 94       	cli
		*reg &= ~bit;
 27c:	8c 91       	ld	r24, X
 27e:	32 2f       	mov	r19, r18
 280:	30 95       	com	r19
 282:	83 23       	and	r24, r19
 284:	8c 93       	st	X, r24
		*out |= bit;
 286:	e8 81       	ld	r30, Y
 288:	e2 2b       	or	r30, r18
 28a:	e8 83       	st	Y, r30
		SREG = oldSREG;
 28c:	9f bf       	out	0x3f, r25	; 63
 28e:	06 c0       	rjmp	.+12     	; 0x29c <pinMode+0x78>
	}else{
		//output
		uint8_t oldSREG = SREG;
 290:	8f b7       	in	r24, 0x3f	; 63
		cli();
 292:	f8 94       	cli
		*reg |= bit;
 294:	ec 91       	ld	r30, X
 296:	e2 2b       	or	r30, r18
 298:	ec 93       	st	X, r30
		SREG = oldSREG;
 29a:	8f bf       	out	0x3f, r24	; 63
	}
		
}
 29c:	df 91       	pop	r29
 29e:	cf 91       	pop	r28
 2a0:	08 95       	ret

000002a2 <digitalWrite>:

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t bit = pinToBitMask(pin);
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	fc 01       	movw	r30, r24
 2a6:	ec 51       	subi	r30, 0x1C	; 28
 2a8:	ff 4f       	sbci	r31, 0xFF	; 255
 2aa:	24 91       	lpm	r18, Z
	uint8_t port = pinToPort(pin);
 2ac:	fc 01       	movw	r30, r24
 2ae:	e7 5b       	subi	r30, 0xB7	; 183
 2b0:	fe 4f       	sbci	r31, 0xFE	; 254
 2b2:	84 91       	lpm	r24, Z
	volatile uint8_t *out;
	
	if (port == NOT_A_PIN) return;
 2b4:	88 23       	and	r24, r24
 2b6:	b1 f0       	breq	.+44     	; 0x2e4 <digitalWrite+0x42>
	
	out = portOutputRegister(port);
 2b8:	e8 2f       	mov	r30, r24
 2ba:	f0 e0       	ldi	r31, 0x00	; 0
 2bc:	ee 0f       	add	r30, r30
 2be:	ff 1f       	adc	r31, r31
 2c0:	e2 55       	subi	r30, 0x52	; 82
 2c2:	fe 4f       	sbci	r31, 0xFE	; 254
 2c4:	a5 91       	lpm	r26, Z+
 2c6:	b4 91       	lpm	r27, Z
	
	uint8_t oldSREG = SREG;
 2c8:	8f b7       	in	r24, 0x3f	; 63
	cli();
 2ca:	f8 94       	cli
	
	if (val == LOW) {
 2cc:	61 11       	cpse	r22, r1
 2ce:	06 c0       	rjmp	.+12     	; 0x2dc <digitalWrite+0x3a>
		*out &= ~bit;
 2d0:	9c 91       	ld	r25, X
 2d2:	e2 2f       	mov	r30, r18
 2d4:	e0 95       	com	r30
 2d6:	e9 23       	and	r30, r25
 2d8:	ec 93       	st	X, r30
 2da:	03 c0       	rjmp	.+6      	; 0x2e2 <digitalWrite+0x40>
	} else {
		*out |= bit;
 2dc:	ec 91       	ld	r30, X
 2de:	e2 2b       	or	r30, r18
 2e0:	ec 93       	st	X, r30
	}
	
	SREG = oldSREG;
 2e2:	8f bf       	out	0x3f, r24	; 63
 2e4:	08 95       	ret

000002e6 <tone>:
}


//Generate frequency (in hertz) and duration (in milliseconds)
void tone(uint8_t _pin, unsigned int frequency, unsigned long duration)
{
 2e6:	4f 92       	push	r4
 2e8:	5f 92       	push	r5
 2ea:	6f 92       	push	r6
 2ec:	7f 92       	push	r7
 2ee:	8f 92       	push	r8
 2f0:	9f 92       	push	r9
 2f2:	af 92       	push	r10
 2f4:	bf 92       	push	r11
 2f6:	cf 92       	push	r12
 2f8:	df 92       	push	r13
 2fa:	ef 92       	push	r14
 2fc:	ff 92       	push	r15
 2fe:	0f 93       	push	r16
 300:	1f 93       	push	r17
 302:	cf 93       	push	r28
 304:	df 93       	push	r29
 306:	cd b7       	in	r28, 0x3d	; 61
 308:	de b7       	in	r29, 0x3e	; 62
 30a:	29 97       	sbiw	r28, 0x09	; 9
 30c:	0f b6       	in	r0, 0x3f	; 63
 30e:	f8 94       	cli
 310:	de bf       	out	0x3e, r29	; 62
 312:	0f be       	out	0x3f, r0	; 63
 314:	cd bf       	out	0x3d, r28	; 61
 316:	8b 01       	movw	r16, r22
 318:	49 01       	movw	r8, r18
 31a:	5a 01       	movw	r10, r20
{
	int8_t _timer = -1;
	
	// if we're already using the pin, the timer should be configured.
	for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
		if (tone_pins[i] == _pin) {
 31c:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 320:	89 13       	cpse	r24, r25
 322:	16 c3       	rjmp	.+1580   	; 0x950 <__LOCK_REGION_LENGTH__+0x550>
			return pgm_read_byte(tone_pin_to_timer_PGM + i);
 324:	e2 ee       	ldi	r30, 0xE2	; 226
 326:	f1 e0       	ldi	r31, 0x01	; 1
 328:	24 91       	lpm	r18, Z
 32a:	29 87       	std	Y+9, r18	; 0x09
 32c:	fd c0       	rjmp	.+506    	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
	}
	  
	// search for an unused timer.
	for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
		if (tone_pins[i] == 255) {
			tone_pins[i] = _pin;
 32e:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
			_timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
 332:	e2 ee       	ldi	r30, 0xE2	; 226
 334:	f1 e0       	ldi	r31, 0x01	; 1
 336:	94 91       	lpm	r25, Z
 338:	99 83       	std	Y+1, r25	; 0x01
			break;
		}
	}
	
	//Found timer
	if (_timer != -1)
 33a:	9f 3f       	cpi	r25, 0xFF	; 255
 33c:	09 f4       	brne	.+2      	; 0x340 <tone+0x5a>
 33e:	49 c3       	rjmp	.+1682   	; 0x9d2 <__LOCK_REGION_LENGTH__+0x5d2>
	{
		// Set timer specific stuff
		// All timers in CTC mode
		// 8 bit timers will require changing prescalar values,
		// whereas 16 bit timers are set to either clk/1 or clk/64 prescalar
		switch(_timer)
 340:	92 30       	cpi	r25, 0x02	; 2
 342:	09 f4       	brne	.+2      	; 0x346 <tone+0x60>
 344:	58 c0       	rjmp	.+176    	; 0x3f6 <tone+0x110>
 346:	28 f4       	brcc	.+10     	; 0x352 <tone+0x6c>
 348:	99 23       	and	r25, r25
 34a:	69 f0       	breq	.+26     	; 0x366 <tone+0x80>
 34c:	91 30       	cpi	r25, 0x01	; 1
 34e:	71 f1       	breq	.+92     	; 0x3ac <tone+0xc6>
 350:	e9 c0       	rjmp	.+466    	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
 352:	a9 81       	ldd	r26, Y+1	; 0x01
 354:	a4 30       	cpi	r26, 0x04	; 4
 356:	09 f4       	brne	.+2      	; 0x35a <tone+0x74>
 358:	9b c0       	rjmp	.+310    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 35a:	08 f4       	brcc	.+2      	; 0x35e <tone+0x78>
 35c:	74 c0       	rjmp	.+232    	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 35e:	a5 30       	cpi	r26, 0x05	; 5
 360:	09 f4       	brne	.+2      	; 0x364 <tone+0x7e>
 362:	bb c0       	rjmp	.+374    	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
 364:	df c0       	rjmp	.+446    	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
		{
			//TIMER 0 - 8 bit timer
			case 0:
				TCCR0A = 0;
 366:	14 bc       	out	0x24, r1	; 36
				TCCR0B = 0;
 368:	15 bc       	out	0x25, r1	; 37
				bitWrite(TCCR0A, WGM01, 1); // set CTC mode
 36a:	94 b5       	in	r25, 0x24	; 36
 36c:	92 60       	ori	r25, 0x02	; 2
 36e:	94 bd       	out	0x24, r25	; 36
				bitWrite(TCCR0B, CS00, 1);  // No prescaling
 370:	95 b5       	in	r25, 0x25	; 37
 372:	91 60       	ori	r25, 0x01	; 1
 374:	95 bd       	out	0x25, r25	; 37
				timer0_pin_port = portOutputRegister(pinToPort(_pin));
 376:	28 2f       	mov	r18, r24
 378:	30 e0       	ldi	r19, 0x00	; 0
 37a:	f9 01       	movw	r30, r18
 37c:	e7 5b       	subi	r30, 0xB7	; 183
 37e:	fe 4f       	sbci	r31, 0xFE	; 254
 380:	e4 91       	lpm	r30, Z
 382:	f0 e0       	ldi	r31, 0x00	; 0
 384:	ee 0f       	add	r30, r30
 386:	ff 1f       	adc	r31, r31
 388:	e2 55       	subi	r30, 0x52	; 82
 38a:	fe 4f       	sbci	r31, 0xFE	; 254
 38c:	45 91       	lpm	r20, Z+
 38e:	54 91       	lpm	r21, Z
 390:	50 93 1b 02 	sts	0x021B, r21	; 0x80021b <timer0_pin_port+0x1>
 394:	40 93 1a 02 	sts	0x021A, r20	; 0x80021a <timer0_pin_port>
				timer0_pin_mask = pinToBitMask(_pin);
 398:	f9 01       	movw	r30, r18
 39a:	ec 51       	subi	r30, 0x1C	; 28
 39c:	ff 4f       	sbci	r31, 0xFF	; 255
 39e:	24 91       	lpm	r18, Z
 3a0:	20 93 02 02 	sts	0x0202, r18	; 0x800202 <__data_end>
	_timer = toneBegin(_pin);
	
	if (_timer >= 0)
	{
		//1. set the pin as OUTPUT
		pinMode(_pin, OUTPUT);
 3a4:	61 e0       	ldi	r22, 0x01	; 1
 3a6:	3e df       	rcall	.-388    	; 0x224 <pinMode>
				timer5_pin_mask = pinToBitMask(_pin);
			break;
		}
	}
	
	return _timer;	
 3a8:	19 86       	std	Y+9, r1	; 0x09
 3aa:	93 c2       	rjmp	.+1318   	; 0x8d2 <__LOCK_REGION_LENGTH__+0x4d2>
				timer0_pin_port = portOutputRegister(pinToPort(_pin));
				timer0_pin_mask = pinToBitMask(_pin);
			break;			
			//TIMER 1 - 16 bit timer
			case 1:
				TCCR1A = 0;
 3ac:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
				TCCR1B = 0;
 3b0:	e1 e8       	ldi	r30, 0x81	; 129
 3b2:	f0 e0       	ldi	r31, 0x00	; 0
 3b4:	10 82       	st	Z, r1
				bitWrite(TCCR1B, WGM12, 1); // Set CTC mode
 3b6:	90 81       	ld	r25, Z
 3b8:	98 60       	ori	r25, 0x08	; 8
 3ba:	90 83       	st	Z, r25
				bitWrite(TCCR1B, CS10, 1) ; // No prescaling
 3bc:	90 81       	ld	r25, Z
 3be:	91 60       	ori	r25, 0x01	; 1
 3c0:	90 83       	st	Z, r25
				timer1_pin_port = portOutputRegister(pinToPort(_pin));
 3c2:	28 2f       	mov	r18, r24
 3c4:	30 e0       	ldi	r19, 0x00	; 0
 3c6:	f9 01       	movw	r30, r18
 3c8:	e7 5b       	subi	r30, 0xB7	; 183
 3ca:	fe 4f       	sbci	r31, 0xFE	; 254
 3cc:	e4 91       	lpm	r30, Z
 3ce:	f0 e0       	ldi	r31, 0x00	; 0
 3d0:	ee 0f       	add	r30, r30
 3d2:	ff 1f       	adc	r31, r31
 3d4:	e2 55       	subi	r30, 0x52	; 82
 3d6:	fe 4f       	sbci	r31, 0xFE	; 254
 3d8:	45 91       	lpm	r20, Z+
 3da:	54 91       	lpm	r21, Z
 3dc:	50 93 22 02 	sts	0x0222, r21	; 0x800222 <timer1_pin_port+0x1>
 3e0:	40 93 21 02 	sts	0x0221, r20	; 0x800221 <timer1_pin_port>
				timer1_pin_mask = pinToBitMask(_pin);
 3e4:	f9 01       	movw	r30, r18
 3e6:	ec 51       	subi	r30, 0x1C	; 28
 3e8:	ff 4f       	sbci	r31, 0xFF	; 255
 3ea:	24 91       	lpm	r18, Z
 3ec:	20 93 20 02 	sts	0x0220, r18	; 0x800220 <timer1_pin_mask>
				timer5_pin_mask = pinToBitMask(_pin);
			break;
		}
	}
	
	return _timer;	
 3f0:	b1 e0       	ldi	r27, 0x01	; 1
 3f2:	b9 87       	std	Y+9, r27	; 0x09
 3f4:	eb c2       	rjmp	.+1494   	; 0x9cc <__LOCK_REGION_LENGTH__+0x5cc>
				timer1_pin_port = portOutputRegister(pinToPort(_pin));
				timer1_pin_mask = pinToBitMask(_pin);
			break;			
			//TIMER 2 - 8 bit timer
			case 2:
				TCCR2A = 0;
 3f6:	a0 eb       	ldi	r26, 0xB0	; 176
 3f8:	b0 e0       	ldi	r27, 0x00	; 0
 3fa:	1c 92       	st	X, r1
				TCCR2B = 0;
 3fc:	e1 eb       	ldi	r30, 0xB1	; 177
 3fe:	f0 e0       	ldi	r31, 0x00	; 0
 400:	10 82       	st	Z, r1
				bitWrite(TCCR2A, WGM21, 1); //Set CTC mode
 402:	9c 91       	ld	r25, X
 404:	92 60       	ori	r25, 0x02	; 2
 406:	9c 93       	st	X, r25
				bitWrite(TCCR2B, CS20, 1); // No prescaling
 408:	90 81       	ld	r25, Z
 40a:	91 60       	ori	r25, 0x01	; 1
 40c:	90 83       	st	Z, r25
				timer2_pin_port = portOutputRegister(pinToPort(_pin));
 40e:	28 2f       	mov	r18, r24
 410:	30 e0       	ldi	r19, 0x00	; 0
 412:	f9 01       	movw	r30, r18
 414:	e7 5b       	subi	r30, 0xB7	; 183
 416:	fe 4f       	sbci	r31, 0xFE	; 254
 418:	e4 91       	lpm	r30, Z
 41a:	f0 e0       	ldi	r31, 0x00	; 0
 41c:	ee 0f       	add	r30, r30
 41e:	ff 1f       	adc	r31, r31
 420:	e2 55       	subi	r30, 0x52	; 82
 422:	fe 4f       	sbci	r31, 0xFE	; 254
 424:	45 91       	lpm	r20, Z+
 426:	54 91       	lpm	r21, Z
 428:	50 93 09 02 	sts	0x0209, r21	; 0x800209 <timer2_pin_port+0x1>
 42c:	40 93 08 02 	sts	0x0208, r20	; 0x800208 <timer2_pin_port>
				timer2_pin_mask = pinToBitMask(_pin);
 430:	f9 01       	movw	r30, r18
 432:	ec 51       	subi	r30, 0x1C	; 28
 434:	ff 4f       	sbci	r31, 0xFF	; 255
 436:	24 91       	lpm	r18, Z
 438:	20 93 15 02 	sts	0x0215, r18	; 0x800215 <timer2_pin_mask>
	_timer = toneBegin(_pin);
	
	if (_timer >= 0)
	{
		//1. set the pin as OUTPUT
		pinMode(_pin, OUTPUT);
 43c:	61 e0       	ldi	r22, 0x01	; 1
 43e:	f2 de       	rcall	.-540    	; 0x224 <pinMode>
				timer5_pin_mask = pinToBitMask(_pin);
			break;
		}
	}
	
	return _timer;	
 440:	22 e0       	ldi	r18, 0x02	; 2
 442:	29 87       	std	Y+9, r18	; 0x09
 444:	06 c2       	rjmp	.+1036   	; 0x852 <__LOCK_REGION_LENGTH__+0x452>
				timer2_pin_port = portOutputRegister(pinToPort(_pin));
				timer2_pin_mask = pinToBitMask(_pin);
			break;			
			//TIMER 3 - 16 bit timer
			case 3:
				TCCR3A = 0;
 446:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
				TCCR3B = 0;
 44a:	e1 e9       	ldi	r30, 0x91	; 145
 44c:	f0 e0       	ldi	r31, 0x00	; 0
 44e:	10 82       	st	Z, r1
				bitWrite(TCCR3B, WGM32, 1); //CTC Mode
 450:	90 81       	ld	r25, Z
 452:	98 60       	ori	r25, 0x08	; 8
 454:	90 83       	st	Z, r25
				bitWrite(TCCR3B, CS30, 1);	//No prescaling
 456:	90 81       	ld	r25, Z
 458:	91 60       	ori	r25, 0x01	; 1
 45a:	90 83       	st	Z, r25
				timer3_pin_port = portOutputRegister(pinToPort(_pin));
 45c:	28 2f       	mov	r18, r24
 45e:	30 e0       	ldi	r19, 0x00	; 0
 460:	f9 01       	movw	r30, r18
 462:	e7 5b       	subi	r30, 0xB7	; 183
 464:	fe 4f       	sbci	r31, 0xFE	; 254
 466:	e4 91       	lpm	r30, Z
 468:	f0 e0       	ldi	r31, 0x00	; 0
 46a:	ee 0f       	add	r30, r30
 46c:	ff 1f       	adc	r31, r31
 46e:	e2 55       	subi	r30, 0x52	; 82
 470:	fe 4f       	sbci	r31, 0xFE	; 254
 472:	45 91       	lpm	r20, Z+
 474:	54 91       	lpm	r21, Z
 476:	50 93 0c 02 	sts	0x020C, r21	; 0x80020c <timer3_pin_port+0x1>
 47a:	40 93 0b 02 	sts	0x020B, r20	; 0x80020b <timer3_pin_port>
				timer3_pin_mask = pinToBitMask(_pin);
 47e:	f9 01       	movw	r30, r18
 480:	ec 51       	subi	r30, 0x1C	; 28
 482:	ff 4f       	sbci	r31, 0xFF	; 255
 484:	24 91       	lpm	r18, Z
 486:	20 93 03 02 	sts	0x0203, r18	; 0x800203 <timer3_pin_mask>
				timer5_pin_mask = pinToBitMask(_pin);
			break;
		}
	}
	
	return _timer;	
 48a:	93 e0       	ldi	r25, 0x03	; 3
 48c:	99 87       	std	Y+9, r25	; 0x09
 48e:	9e c2       	rjmp	.+1340   	; 0x9cc <__LOCK_REGION_LENGTH__+0x5cc>
				timer3_pin_port = portOutputRegister(pinToPort(_pin));
				timer3_pin_mask = pinToBitMask(_pin);
			break;		
			//TIMER 4 - 16 bit timer
			case 4:
				TCCR4A = 0;
 490:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
				TCCR4B = 0;
 494:	e1 ea       	ldi	r30, 0xA1	; 161
 496:	f0 e0       	ldi	r31, 0x00	; 0
 498:	10 82       	st	Z, r1
				bitWrite(TCCR4B, WGM42, 1); //CTC Mode
 49a:	90 81       	ld	r25, Z
 49c:	98 60       	ori	r25, 0x08	; 8
 49e:	90 83       	st	Z, r25
				bitWrite(TCCR4B, CS40, 1);  //No prescaling
 4a0:	90 81       	ld	r25, Z
 4a2:	91 60       	ori	r25, 0x01	; 1
 4a4:	90 83       	st	Z, r25
				timer4_pin_port = portOutputRegister(pinToPort(_pin));
 4a6:	28 2f       	mov	r18, r24
 4a8:	30 e0       	ldi	r19, 0x00	; 0
 4aa:	f9 01       	movw	r30, r18
 4ac:	e7 5b       	subi	r30, 0xB7	; 183
 4ae:	fe 4f       	sbci	r31, 0xFE	; 254
 4b0:	e4 91       	lpm	r30, Z
 4b2:	f0 e0       	ldi	r31, 0x00	; 0
 4b4:	ee 0f       	add	r30, r30
 4b6:	ff 1f       	adc	r31, r31
 4b8:	e2 55       	subi	r30, 0x52	; 82
 4ba:	fe 4f       	sbci	r31, 0xFE	; 254
 4bc:	45 91       	lpm	r20, Z+
 4be:	54 91       	lpm	r21, Z
 4c0:	50 93 19 02 	sts	0x0219, r21	; 0x800219 <timer4_pin_port+0x1>
 4c4:	40 93 18 02 	sts	0x0218, r20	; 0x800218 <timer4_pin_port>
				timer4_pin_mask = pinToBitMask(_pin);
 4c8:	f9 01       	movw	r30, r18
 4ca:	ec 51       	subi	r30, 0x1C	; 28
 4cc:	ff 4f       	sbci	r31, 0xFF	; 255
 4ce:	24 91       	lpm	r18, Z
 4d0:	20 93 0a 02 	sts	0x020A, r18	; 0x80020a <timer4_pin_mask>
				timer5_pin_mask = pinToBitMask(_pin);
			break;
		}
	}
	
	return _timer;	
 4d4:	a4 e0       	ldi	r26, 0x04	; 4
 4d6:	a9 87       	std	Y+9, r26	; 0x09
 4d8:	79 c2       	rjmp	.+1266   	; 0x9cc <__LOCK_REGION_LENGTH__+0x5cc>
				timer4_pin_port = portOutputRegister(pinToPort(_pin));
				timer4_pin_mask = pinToBitMask(_pin);
			break;	
			//TIMER 5 - 16 bit timer
			case 5:
				TCCR5A = 0;
 4da:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
				TCCR5B = 0;
 4de:	e1 e2       	ldi	r30, 0x21	; 33
 4e0:	f1 e0       	ldi	r31, 0x01	; 1
 4e2:	10 82       	st	Z, r1
				bitWrite(TCCR5B, WGM52, 1);
 4e4:	90 81       	ld	r25, Z
 4e6:	98 60       	ori	r25, 0x08	; 8
 4e8:	90 83       	st	Z, r25
				bitWrite(TCCR5B, CS50, 1);
 4ea:	90 81       	ld	r25, Z
 4ec:	91 60       	ori	r25, 0x01	; 1
 4ee:	90 83       	st	Z, r25
				timer5_pin_port = portOutputRegister(pinToPort(_pin));
 4f0:	28 2f       	mov	r18, r24
 4f2:	30 e0       	ldi	r19, 0x00	; 0
 4f4:	f9 01       	movw	r30, r18
 4f6:	e7 5b       	subi	r30, 0xB7	; 183
 4f8:	fe 4f       	sbci	r31, 0xFE	; 254
 4fa:	e4 91       	lpm	r30, Z
 4fc:	f0 e0       	ldi	r31, 0x00	; 0
 4fe:	ee 0f       	add	r30, r30
 500:	ff 1f       	adc	r31, r31
 502:	e2 55       	subi	r30, 0x52	; 82
 504:	fe 4f       	sbci	r31, 0xFE	; 254
 506:	45 91       	lpm	r20, Z+
 508:	54 91       	lpm	r21, Z
 50a:	50 93 17 02 	sts	0x0217, r21	; 0x800217 <timer5_pin_port+0x1>
 50e:	40 93 16 02 	sts	0x0216, r20	; 0x800216 <timer5_pin_port>
				timer5_pin_mask = pinToBitMask(_pin);
 512:	f9 01       	movw	r30, r18
 514:	ec 51       	subi	r30, 0x1C	; 28
 516:	ff 4f       	sbci	r31, 0xFF	; 255
 518:	24 91       	lpm	r18, Z
 51a:	20 93 27 02 	sts	0x0227, r18	; 0x800227 <timer5_pin_mask>
			break;
		}
	}
	
	return _timer;	
 51e:	b5 e0       	ldi	r27, 0x05	; 5
 520:	b9 87       	std	Y+9, r27	; 0x09
 522:	54 c2       	rjmp	.+1192   	; 0x9cc <__LOCK_REGION_LENGTH__+0x5cc>
	  
	// search for an unused timer.
	for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
		if (tone_pins[i] == 255) {
			tone_pins[i] = _pin;
			_timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
 524:	29 81       	ldd	r18, Y+1	; 0x01
 526:	29 87       	std	Y+9, r18	; 0x09
	uint32_t ocr = 0;
	int8_t _timer;
	
	_timer = toneBegin(_pin);
	
	if (_timer >= 0)
 528:	99 85       	ldd	r25, Y+9	; 0x09
 52a:	99 23       	and	r25, r25
 52c:	0c f4       	brge	.+2      	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
	{
		//1. set the pin as OUTPUT
		pinMode(_pin, OUTPUT);
 52e:	51 c2       	rjmp	.+1186   	; 0x9d2 <__LOCK_REGION_LENGTH__+0x5d2>
 530:	61 e0       	ldi	r22, 0x01	; 1
 532:	78 de       	rcall	.-784    	; 0x224 <pinMode>
		
		//2. if we are using an 8 bit timer, scan through prescalers to find the best fit
		if (_timer == 0 || _timer == 2)
 534:	a9 85       	ldd	r26, Y+9	; 0x09
 536:	aa 23       	and	r26, r26
 538:	09 f4       	brne	.+2      	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
 53a:	cb c1       	rjmp	.+918    	; 0x8d2 <__LOCK_REGION_LENGTH__+0x4d2>
 53c:	a2 30       	cpi	r26, 0x02	; 2
 53e:	09 f0       	breq	.+2      	; 0x542 <__LOCK_REGION_LENGTH__+0x142>
 540:	6d c0       	rjmp	.+218    	; 0x61c <__LOCK_REGION_LENGTH__+0x21c>
 542:	87 c1       	rjmp	.+782    	; 0x852 <__LOCK_REGION_LENGTH__+0x452>
				ocr = F_CPU / frequency / 2 / 8 - 1;
				prescalarbits = 0b010; // clk/8 prescaler : For both timers
				
				if (_timer == 2 && ocr > 255)
				{
					ocr = F_CPU / frequency / 2 / 32 - 1;
 544:	69 e0       	ldi	r22, 0x09	; 9
 546:	7d e3       	ldi	r23, 0x3D	; 61
 548:	80 e0       	ldi	r24, 0x00	; 0
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	29 81       	ldd	r18, Y+1	; 0x01
 54e:	3a 81       	ldd	r19, Y+2	; 0x02
 550:	4b 81       	ldd	r20, Y+3	; 0x03
 552:	5c 81       	ldd	r21, Y+4	; 0x04
 554:	2c d3       	rcall	.+1624   	; 0xbae <__udivmodsi4>
 556:	69 01       	movw	r12, r18
 558:	7a 01       	movw	r14, r20
 55a:	b1 e0       	ldi	r27, 0x01	; 1
 55c:	cb 1a       	sub	r12, r27
 55e:	d1 08       	sbc	r13, r1
 560:	e1 08       	sbc	r14, r1
 562:	f1 08       	sbc	r15, r1
					prescalarbits = 0b101; // clk/_
				}
				
			
				if(ocr > 255)
 564:	2f ef       	ldi	r18, 0xFF	; 255
 566:	c2 16       	cp	r12, r18
 568:	d1 04       	cpc	r13, r1
 56a:	e1 04       	cpc	r14, r1
 56c:	f1 04       	cpc	r15, r1
 56e:	11 f0       	breq	.+4      	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
 570:	08 f0       	brcs	.+2      	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
 572:	d5 c1       	rjmp	.+938    	; 0x91e <__LOCK_REGION_LENGTH__+0x51e>
				prescalarbits = 0b010; // clk/8 prescaler : For both timers
				
				if (_timer == 2 && ocr > 255)
				{
					ocr = F_CPU / frequency / 2 / 32 - 1;
					prescalarbits = 0b101; // clk/_
 574:	85 e0       	ldi	r24, 0x05	; 5
 576:	4b c0       	rjmp	.+150    	; 0x60e <__LOCK_REGION_LENGTH__+0x20e>
				}
				
			
				if(ocr > 255)
				{
					ocr = F_CPU / frequency / 2 / 64 - 1;
 578:	73 01       	movw	r14, r6
 57a:	62 01       	movw	r12, r4
 57c:	68 94       	set
 57e:	15 f8       	bld	r1, 5
 580:	f6 94       	lsr	r15
 582:	e7 94       	ror	r14
 584:	d7 94       	ror	r13
 586:	c7 94       	ror	r12
 588:	16 94       	lsr	r1
 58a:	d1 f7       	brne	.-12     	; 0x580 <__LOCK_REGION_LENGTH__+0x180>
 58c:	81 e0       	ldi	r24, 0x01	; 1
 58e:	c8 1a       	sub	r12, r24
 590:	d1 08       	sbc	r13, r1
 592:	e1 08       	sbc	r14, r1
 594:	f1 08       	sbc	r15, r1
					prescalarbits = _timer == 0 ? 0b011 : 0b100; // clk/32 for timer 1: clk/64 for timer 2
 596:	83 e0       	ldi	r24, 0x03	; 3
 598:	10 c0       	rjmp	.+32     	; 0x5ba <__LOCK_REGION_LENGTH__+0x1ba>
					
					if (_timer == 2 && ocr > 255)
					{
						ocr = F_CPU / frequency / 2 / 128 - 1;
 59a:	73 01       	movw	r14, r6
 59c:	62 01       	movw	r12, r4
 59e:	68 94       	set
 5a0:	16 f8       	bld	r1, 6
 5a2:	f6 94       	lsr	r15
 5a4:	e7 94       	ror	r14
 5a6:	d7 94       	ror	r13
 5a8:	c7 94       	ror	r12
 5aa:	16 94       	lsr	r1
 5ac:	d1 f7       	brne	.-12     	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
 5ae:	91 e0       	ldi	r25, 0x01	; 1
 5b0:	c9 1a       	sub	r12, r25
 5b2:	d1 08       	sbc	r13, r1
 5b4:	e1 08       	sbc	r14, r1
 5b6:	f1 08       	sbc	r15, r1
						prescalarbits = 0b101;
 5b8:	85 e0       	ldi	r24, 0x05	; 5
					}

					if (ocr > 255)
 5ba:	af ef       	ldi	r26, 0xFF	; 255
 5bc:	ca 16       	cp	r12, r26
 5be:	d1 04       	cpc	r13, r1
 5c0:	e1 04       	cpc	r14, r1
 5c2:	f1 04       	cpc	r15, r1
 5c4:	99 f0       	breq	.+38     	; 0x5ec <__LOCK_REGION_LENGTH__+0x1ec>
 5c6:	90 f0       	brcs	.+36     	; 0x5ec <__LOCK_REGION_LENGTH__+0x1ec>
					{
						ocr = F_CPU / frequency / 2 / 256 - 1;
 5c8:	8d 81       	ldd	r24, Y+5	; 0x05
 5ca:	9e 81       	ldd	r25, Y+6	; 0x06
 5cc:	af 81       	ldd	r26, Y+7	; 0x07
 5ce:	b8 85       	ldd	r27, Y+8	; 0x08
 5d0:	c9 2e       	mov	r12, r25
 5d2:	da 2e       	mov	r13, r26
 5d4:	eb 2e       	mov	r14, r27
 5d6:	ff 24       	eor	r15, r15
 5d8:	91 e0       	ldi	r25, 0x01	; 1
 5da:	c9 1a       	sub	r12, r25
 5dc:	d1 08       	sbc	r13, r1
 5de:	e1 08       	sbc	r14, r1
 5e0:	f1 08       	sbc	r15, r1
						prescalarbits = _timer == 0 ? 0b100 : 0b110;  // clk/64 for timer 1: clk/256 for timer 2
 5e2:	a9 85       	ldd	r26, Y+9	; 0x09
 5e4:	aa 23       	and	r26, r26
 5e6:	09 f4       	brne	.+2      	; 0x5ea <__LOCK_REGION_LENGTH__+0x1ea>
 5e8:	cb c1       	rjmp	.+918    	; 0x980 <__LOCK_REGION_LENGTH__+0x580>
 5ea:	e7 c1       	rjmp	.+974    	; 0x9ba <__LOCK_REGION_LENGTH__+0x5ba>
			}
				
			
			//2(b) Set the prescaler for 8 bit timers
			      //TIMER 0
			if (_timer == 0)
 5ec:	b9 85       	ldd	r27, Y+9	; 0x09
 5ee:	b1 11       	cpse	r27, r1
 5f0:	0e c0       	rjmp	.+28     	; 0x60e <__LOCK_REGION_LENGTH__+0x20e>
			{
				TCCR0B = (TCCR0B & 0b11111000) | prescalarbits;
 5f2:	95 b5       	in	r25, 0x25	; 37
 5f4:	98 7f       	andi	r25, 0xF8	; 248
 5f6:	89 2b       	or	r24, r25
 5f8:	85 bd       	out	0x25, r24	; 37
				TCCR5B = (TCCR5B & 0b11111000) | prescalarbits;
			}
		}
		
		//4. Calculate the toggle count
		if (duration > 0)
 5fa:	81 14       	cp	r8, r1
 5fc:	91 04       	cpc	r9, r1
 5fe:	a1 04       	cpc	r10, r1
 600:	b1 04       	cpc	r11, r1
 602:	09 f0       	breq	.+2      	; 0x606 <__LOCK_REGION_LENGTH__+0x206>
 604:	84 c0       	rjmp	.+264    	; 0x70e <__LOCK_REGION_LENGTH__+0x30e>
		{
			toggle_count = 2 * frequency * duration / 1000;
		}else{
			toggle_count = -1;
 606:	2f ef       	ldi	r18, 0xFF	; 255
 608:	3f ef       	ldi	r19, 0xFF	; 255
 60a:	a9 01       	movw	r20, r18
 60c:	a1 c0       	rjmp	.+322    	; 0x750 <__LOCK_REGION_LENGTH__+0x350>
			{
				TCCR0B = (TCCR0B & 0b11111000) | prescalarbits;
			}
			else   //TIMER 2
			{
				TCCR2B = (TCCR2B & 0b11111000) | prescalarbits;
 60e:	e1 eb       	ldi	r30, 0xB1	; 177
 610:	f0 e0       	ldi	r31, 0x00	; 0
 612:	90 81       	ld	r25, Z
 614:	98 7f       	andi	r25, 0xF8	; 248
 616:	89 2b       	or	r24, r25
 618:	80 83       	st	Z, r24
 61a:	74 c0       	rjmp	.+232    	; 0x704 <__LOCK_REGION_LENGTH__+0x304>
			}
			
		}else{
			//3. Prescaling for 16 bit timers
			// two choices for the 16 bit timers: clk/1 or clk/64
			ocr = F_CPU / frequency / 2 - 1;
 61c:	68 01       	movw	r12, r16
 61e:	e1 2c       	mov	r14, r1
 620:	f1 2c       	mov	r15, r1
 622:	60 e2       	ldi	r22, 0x20	; 32
 624:	71 ea       	ldi	r23, 0xA1	; 161
 626:	87 e0       	ldi	r24, 0x07	; 7
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	a7 01       	movw	r20, r14
 62c:	96 01       	movw	r18, r12
 62e:	bf d2       	rcall	.+1406   	; 0xbae <__udivmodsi4>
 630:	69 01       	movw	r12, r18
 632:	7a 01       	movw	r14, r20
 634:	81 e0       	ldi	r24, 0x01	; 1
 636:	c8 1a       	sub	r12, r24
 638:	d1 08       	sbc	r13, r1
 63a:	e1 08       	sbc	r14, r1
 63c:	f1 08       	sbc	r15, r1
			
			prescalarbits = 0b001; //clk1
			if(ocr > 0xffff) //>65535
 63e:	c1 14       	cp	r12, r1
 640:	d1 04       	cpc	r13, r1
 642:	91 e0       	ldi	r25, 0x01	; 1
 644:	e9 06       	cpc	r14, r25
 646:	f1 04       	cpc	r15, r1
 648:	98 f0       	brcs	.+38     	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
			{
				ocr = F_CPU / frequency / 2 / 64 - 1;
 64a:	da 01       	movw	r26, r20
 64c:	c9 01       	movw	r24, r18
 64e:	68 94       	set
 650:	15 f8       	bld	r1, 5
 652:	b6 95       	lsr	r27
 654:	a7 95       	ror	r26
 656:	97 95       	ror	r25
 658:	87 95       	ror	r24
 65a:	16 94       	lsr	r1
 65c:	d1 f7       	brne	.-12     	; 0x652 <__LOCK_REGION_LENGTH__+0x252>
 65e:	6c 01       	movw	r12, r24
 660:	7d 01       	movw	r14, r26
 662:	21 e0       	ldi	r18, 0x01	; 1
 664:	c2 1a       	sub	r12, r18
 666:	d1 08       	sbc	r13, r1
 668:	e1 08       	sbc	r14, r1
 66a:	f1 08       	sbc	r15, r1
				prescalarbits = 0b011; //clk/64
 66c:	83 e0       	ldi	r24, 0x03	; 3
 66e:	01 c0       	rjmp	.+2      	; 0x672 <__LOCK_REGION_LENGTH__+0x272>
		}else{
			//3. Prescaling for 16 bit timers
			// two choices for the 16 bit timers: clk/1 or clk/64
			ocr = F_CPU / frequency / 2 - 1;
			
			prescalarbits = 0b001; //clk1
 670:	81 e0       	ldi	r24, 0x01	; 1
				ocr = F_CPU / frequency / 2 / 64 - 1;
				prescalarbits = 0b011; //clk/64
			}
			
			//3(b) Set the prescaler for 16 bit timers
			if (_timer == 1)
 672:	99 85       	ldd	r25, Y+9	; 0x09
 674:	91 30       	cpi	r25, 0x01	; 1
 676:	81 f4       	brne	.+32     	; 0x698 <__LOCK_REGION_LENGTH__+0x298>
			{
				TCCR1B = (TCCR1B & 0b11111000) | prescalarbits;
 678:	e1 e8       	ldi	r30, 0x81	; 129
 67a:	f0 e0       	ldi	r31, 0x00	; 0
 67c:	90 81       	ld	r25, Z
 67e:	98 7f       	andi	r25, 0xF8	; 248
 680:	89 2b       	or	r24, r25
 682:	80 83       	st	Z, r24
				TCCR5B = (TCCR5B & 0b11111000) | prescalarbits;
			}
		}
		
		//4. Calculate the toggle count
		if (duration > 0)
 684:	81 14       	cp	r8, r1
 686:	91 04       	cpc	r9, r1
 688:	a1 04       	cpc	r10, r1
 68a:	b1 04       	cpc	r11, r1
 68c:	09 f0       	breq	.+2      	; 0x690 <__LOCK_REGION_LENGTH__+0x290>
 68e:	3f c0       	rjmp	.+126    	; 0x70e <__LOCK_REGION_LENGTH__+0x30e>
		{
			toggle_count = 2 * frequency * duration / 1000;
		}else{
			toggle_count = -1;
 690:	2f ef       	ldi	r18, 0xFF	; 255
 692:	3f ef       	ldi	r19, 0xFF	; 255
 694:	a9 01       	movw	r20, r18
 696:	6b c0       	rjmp	.+214    	; 0x76e <__LOCK_REGION_LENGTH__+0x36e>
			//3(b) Set the prescaler for 16 bit timers
			if (_timer == 1)
			{
				TCCR1B = (TCCR1B & 0b11111000) | prescalarbits;
			}
			else if (_timer == 3)
 698:	a9 85       	ldd	r26, Y+9	; 0x09
 69a:	a3 30       	cpi	r26, 0x03	; 3
 69c:	79 f4       	brne	.+30     	; 0x6bc <__LOCK_REGION_LENGTH__+0x2bc>
			{
				TCCR3B = (TCCR3B & 0b11111000) | prescalarbits;
 69e:	e1 e9       	ldi	r30, 0x91	; 145
 6a0:	f0 e0       	ldi	r31, 0x00	; 0
 6a2:	90 81       	ld	r25, Z
 6a4:	98 7f       	andi	r25, 0xF8	; 248
 6a6:	89 2b       	or	r24, r25
 6a8:	80 83       	st	Z, r24
				TCCR5B = (TCCR5B & 0b11111000) | prescalarbits;
			}
		}
		
		//4. Calculate the toggle count
		if (duration > 0)
 6aa:	81 14       	cp	r8, r1
 6ac:	91 04       	cpc	r9, r1
 6ae:	a1 04       	cpc	r10, r1
 6b0:	b1 04       	cpc	r11, r1
 6b2:	69 f5       	brne	.+90     	; 0x70e <__LOCK_REGION_LENGTH__+0x30e>
		{
			toggle_count = 2 * frequency * duration / 1000;
		}else{
			toggle_count = -1;
 6b4:	2f ef       	ldi	r18, 0xFF	; 255
 6b6:	3f ef       	ldi	r19, 0xFF	; 255
 6b8:	a9 01       	movw	r20, r18
 6ba:	7b c0       	rjmp	.+246    	; 0x7b2 <__LOCK_REGION_LENGTH__+0x3b2>
			}
			else if (_timer == 3)
			{
				TCCR3B = (TCCR3B & 0b11111000) | prescalarbits;
			}
			else if (_timer == 4)
 6bc:	b9 85       	ldd	r27, Y+9	; 0x09
 6be:	b4 30       	cpi	r27, 0x04	; 4
 6c0:	79 f4       	brne	.+30     	; 0x6e0 <__LOCK_REGION_LENGTH__+0x2e0>
			{
				TCCR4B = (TCCR4B & 0b11111000) | prescalarbits;
 6c2:	e1 ea       	ldi	r30, 0xA1	; 161
 6c4:	f0 e0       	ldi	r31, 0x00	; 0
 6c6:	90 81       	ld	r25, Z
 6c8:	98 7f       	andi	r25, 0xF8	; 248
 6ca:	89 2b       	or	r24, r25
 6cc:	80 83       	st	Z, r24
				TCCR5B = (TCCR5B & 0b11111000) | prescalarbits;
			}
		}
		
		//4. Calculate the toggle count
		if (duration > 0)
 6ce:	81 14       	cp	r8, r1
 6d0:	91 04       	cpc	r9, r1
 6d2:	a1 04       	cpc	r10, r1
 6d4:	b1 04       	cpc	r11, r1
 6d6:	d9 f4       	brne	.+54     	; 0x70e <__LOCK_REGION_LENGTH__+0x30e>
		{
			toggle_count = 2 * frequency * duration / 1000;
		}else{
			toggle_count = -1;
 6d8:	2f ef       	ldi	r18, 0xFF	; 255
 6da:	3f ef       	ldi	r19, 0xFF	; 255
 6dc:	a9 01       	movw	r20, r18
 6de:	7b c0       	rjmp	.+246    	; 0x7d6 <__LOCK_REGION_LENGTH__+0x3d6>
			}
			else if (_timer == 4)
			{
				TCCR4B = (TCCR4B & 0b11111000) | prescalarbits;
			}
			else if (_timer == 5)
 6e0:	29 85       	ldd	r18, Y+9	; 0x09
 6e2:	25 30       	cpi	r18, 0x05	; 5
 6e4:	79 f4       	brne	.+30     	; 0x704 <__LOCK_REGION_LENGTH__+0x304>
			{
				TCCR5B = (TCCR5B & 0b11111000) | prescalarbits;
 6e6:	e1 e2       	ldi	r30, 0x21	; 33
 6e8:	f1 e0       	ldi	r31, 0x01	; 1
 6ea:	90 81       	ld	r25, Z
 6ec:	98 7f       	andi	r25, 0xF8	; 248
 6ee:	89 2b       	or	r24, r25
 6f0:	80 83       	st	Z, r24
			}
		}
		
		//4. Calculate the toggle count
		if (duration > 0)
 6f2:	81 14       	cp	r8, r1
 6f4:	91 04       	cpc	r9, r1
 6f6:	a1 04       	cpc	r10, r1
 6f8:	b1 04       	cpc	r11, r1
 6fa:	49 f4       	brne	.+18     	; 0x70e <__LOCK_REGION_LENGTH__+0x30e>
		{
			toggle_count = 2 * frequency * duration / 1000;
		}else{
			toggle_count = -1;
 6fc:	2f ef       	ldi	r18, 0xFF	; 255
 6fe:	3f ef       	ldi	r19, 0xFF	; 255
 700:	a9 01       	movw	r20, r18
 702:	7b c0       	rjmp	.+246    	; 0x7fa <__LOCK_REGION_LENGTH__+0x3fa>
				TCCR5B = (TCCR5B & 0b11111000) | prescalarbits;
			}
		}
		
		//4. Calculate the toggle count
		if (duration > 0)
 704:	81 14       	cp	r8, r1
 706:	91 04       	cpc	r9, r1
 708:	a1 04       	cpc	r10, r1
 70a:	b1 04       	cpc	r11, r1
 70c:	61 f0       	breq	.+24     	; 0x726 <__LOCK_REGION_LENGTH__+0x326>
		{
			toggle_count = 2 * frequency * duration / 1000;
 70e:	d8 01       	movw	r26, r16
 710:	aa 0f       	add	r26, r26
 712:	bb 1f       	adc	r27, r27
 714:	a5 01       	movw	r20, r10
 716:	94 01       	movw	r18, r8
 718:	6c d2       	rcall	.+1240   	; 0xbf2 <__muluhisi3>
 71a:	28 ee       	ldi	r18, 0xE8	; 232
 71c:	33 e0       	ldi	r19, 0x03	; 3
 71e:	40 e0       	ldi	r20, 0x00	; 0
 720:	50 e0       	ldi	r21, 0x00	; 0
 722:	45 d2       	rcall	.+1162   	; 0xbae <__udivmodsi4>
 724:	03 c0       	rjmp	.+6      	; 0x72c <__LOCK_REGION_LENGTH__+0x32c>
		}else{
			toggle_count = -1;
 726:	2f ef       	ldi	r18, 0xFF	; 255
 728:	3f ef       	ldi	r19, 0xFF	; 255
 72a:	a9 01       	movw	r20, r18
		}
		
		//5.Set the OCR for the given timer
		//Set the toggle count and then turn on the interrupts
		switch(_timer)
 72c:	89 85       	ldd	r24, Y+9	; 0x09
 72e:	82 30       	cpi	r24, 0x02	; 2
 730:	81 f1       	breq	.+96     	; 0x792 <__LOCK_REGION_LENGTH__+0x392>
 732:	2c f4       	brge	.+10     	; 0x73e <__LOCK_REGION_LENGTH__+0x33e>
 734:	88 23       	and	r24, r24
 736:	61 f0       	breq	.+24     	; 0x750 <__LOCK_REGION_LENGTH__+0x350>
 738:	81 30       	cpi	r24, 0x01	; 1
 73a:	c9 f0       	breq	.+50     	; 0x76e <__LOCK_REGION_LENGTH__+0x36e>
 73c:	4a c1       	rjmp	.+660    	; 0x9d2 <__LOCK_REGION_LENGTH__+0x5d2>
 73e:	99 85       	ldd	r25, Y+9	; 0x09
 740:	94 30       	cpi	r25, 0x04	; 4
 742:	09 f4       	brne	.+2      	; 0x746 <__LOCK_REGION_LENGTH__+0x346>
 744:	48 c0       	rjmp	.+144    	; 0x7d6 <__LOCK_REGION_LENGTH__+0x3d6>
 746:	ac f1       	brlt	.+106    	; 0x7b2 <__LOCK_REGION_LENGTH__+0x3b2>
 748:	95 30       	cpi	r25, 0x05	; 5
 74a:	09 f4       	brne	.+2      	; 0x74e <__LOCK_REGION_LENGTH__+0x34e>
 74c:	56 c0       	rjmp	.+172    	; 0x7fa <__LOCK_REGION_LENGTH__+0x3fa>
 74e:	41 c1       	rjmp	.+642    	; 0x9d2 <__LOCK_REGION_LENGTH__+0x5d2>
		{
			case 0:
				OCR0A = ocr;
 750:	c7 bc       	out	0x27, r12	; 39
				timer0_toggle_count = toggle_count;
 752:	20 93 23 02 	sts	0x0223, r18	; 0x800223 <timer0_toggle_count>
 756:	30 93 24 02 	sts	0x0224, r19	; 0x800224 <timer0_toggle_count+0x1>
 75a:	40 93 25 02 	sts	0x0225, r20	; 0x800225 <timer0_toggle_count+0x2>
 75e:	50 93 26 02 	sts	0x0226, r21	; 0x800226 <timer0_toggle_count+0x3>
				bitWrite(TIMSK0, OCIE0A, 1); //turn on interrupt
 762:	ee e6       	ldi	r30, 0x6E	; 110
 764:	f0 e0       	ldi	r31, 0x00	; 0
 766:	80 81       	ld	r24, Z
 768:	82 60       	ori	r24, 0x02	; 2
 76a:	80 83       	st	Z, r24
			break;
 76c:	32 c1       	rjmp	.+612    	; 0x9d2 <__LOCK_REGION_LENGTH__+0x5d2>
			
			case 1:
				OCR1A = ocr;
 76e:	d0 92 89 00 	sts	0x0089, r13	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 772:	c0 92 88 00 	sts	0x0088, r12	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
				timer1_toggle_count = toggle_count;
 776:	20 93 1c 02 	sts	0x021C, r18	; 0x80021c <timer1_toggle_count>
 77a:	30 93 1d 02 	sts	0x021D, r19	; 0x80021d <timer1_toggle_count+0x1>
 77e:	40 93 1e 02 	sts	0x021E, r20	; 0x80021e <timer1_toggle_count+0x2>
 782:	50 93 1f 02 	sts	0x021F, r21	; 0x80021f <timer1_toggle_count+0x3>
				bitWrite(TIMSK1, OCIE1A, 1);
 786:	ef e6       	ldi	r30, 0x6F	; 111
 788:	f0 e0       	ldi	r31, 0x00	; 0
 78a:	80 81       	ld	r24, Z
 78c:	82 60       	ori	r24, 0x02	; 2
 78e:	80 83       	st	Z, r24
			break;
 790:	20 c1       	rjmp	.+576    	; 0x9d2 <__LOCK_REGION_LENGTH__+0x5d2>
			
			case 2:
				OCR2A = ocr;
 792:	c0 92 b3 00 	sts	0x00B3, r12	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
				timer2_toggle_count = toggle_count;
 796:	20 93 28 02 	sts	0x0228, r18	; 0x800228 <timer2_toggle_count>
 79a:	30 93 29 02 	sts	0x0229, r19	; 0x800229 <timer2_toggle_count+0x1>
 79e:	40 93 2a 02 	sts	0x022A, r20	; 0x80022a <timer2_toggle_count+0x2>
 7a2:	50 93 2b 02 	sts	0x022B, r21	; 0x80022b <timer2_toggle_count+0x3>
				bitWrite(TIMSK2, OCIE2A, 1);
 7a6:	e0 e7       	ldi	r30, 0x70	; 112
 7a8:	f0 e0       	ldi	r31, 0x00	; 0
 7aa:	80 81       	ld	r24, Z
 7ac:	82 60       	ori	r24, 0x02	; 2
 7ae:	80 83       	st	Z, r24
			break;
 7b0:	10 c1       	rjmp	.+544    	; 0x9d2 <__LOCK_REGION_LENGTH__+0x5d2>
			
			case 3:
				OCR3A = ocr;
 7b2:	d0 92 99 00 	sts	0x0099, r13	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
 7b6:	c0 92 98 00 	sts	0x0098, r12	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
				timer3_toggle_count = toggle_count;
 7ba:	20 93 11 02 	sts	0x0211, r18	; 0x800211 <timer3_toggle_count>
 7be:	30 93 12 02 	sts	0x0212, r19	; 0x800212 <timer3_toggle_count+0x1>
 7c2:	40 93 13 02 	sts	0x0213, r20	; 0x800213 <timer3_toggle_count+0x2>
 7c6:	50 93 14 02 	sts	0x0214, r21	; 0x800214 <timer3_toggle_count+0x3>
				bitWrite(TIMSK3, OCIE3A, 1);
 7ca:	e1 e7       	ldi	r30, 0x71	; 113
 7cc:	f0 e0       	ldi	r31, 0x00	; 0
 7ce:	80 81       	ld	r24, Z
 7d0:	82 60       	ori	r24, 0x02	; 2
 7d2:	80 83       	st	Z, r24
			break;
 7d4:	fe c0       	rjmp	.+508    	; 0x9d2 <__LOCK_REGION_LENGTH__+0x5d2>
			
			case 4:
				OCR4A = ocr;
 7d6:	d0 92 a9 00 	sts	0x00A9, r13	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
 7da:	c0 92 a8 00 	sts	0x00A8, r12	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
				timer4_toggle_count = toggle_count;
 7de:	20 93 0d 02 	sts	0x020D, r18	; 0x80020d <timer4_toggle_count>
 7e2:	30 93 0e 02 	sts	0x020E, r19	; 0x80020e <timer4_toggle_count+0x1>
 7e6:	40 93 0f 02 	sts	0x020F, r20	; 0x80020f <timer4_toggle_count+0x2>
 7ea:	50 93 10 02 	sts	0x0210, r21	; 0x800210 <timer4_toggle_count+0x3>
				bitWrite(TIMSK4, OCIE4A, 1);
 7ee:	e2 e7       	ldi	r30, 0x72	; 114
 7f0:	f0 e0       	ldi	r31, 0x00	; 0
 7f2:	80 81       	ld	r24, Z
 7f4:	82 60       	ori	r24, 0x02	; 2
 7f6:	80 83       	st	Z, r24
			break;
 7f8:	ec c0       	rjmp	.+472    	; 0x9d2 <__LOCK_REGION_LENGTH__+0x5d2>
			
			case 5:
				OCR5A = ocr;
 7fa:	d0 92 29 01 	sts	0x0129, r13	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
 7fe:	c0 92 28 01 	sts	0x0128, r12	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
				timer5_toggle_count = toggle_count;
 802:	20 93 04 02 	sts	0x0204, r18	; 0x800204 <timer5_toggle_count>
 806:	30 93 05 02 	sts	0x0205, r19	; 0x800205 <timer5_toggle_count+0x1>
 80a:	40 93 06 02 	sts	0x0206, r20	; 0x800206 <timer5_toggle_count+0x2>
 80e:	50 93 07 02 	sts	0x0207, r21	; 0x800207 <timer5_toggle_count+0x3>
				bitWrite(TIMSK5, OCIE5A, 1);
 812:	e3 e7       	ldi	r30, 0x73	; 115
 814:	f0 e0       	ldi	r31, 0x00	; 0
 816:	80 81       	ld	r24, Z
 818:	82 60       	ori	r24, 0x02	; 2
 81a:	80 83       	st	Z, r24
			break;
		}		
	}
}
 81c:	da c0       	rjmp	.+436    	; 0x9d2 <__LOCK_REGION_LENGTH__+0x5d2>
			ocr = F_CPU / frequency / 2 - 1;
			prescalarbits = 0b001; // clk/1 prescaler (No prescaling) : For both timers
			
			if (ocr > 255) // above prescaler failed
			{
				ocr = F_CPU / frequency / 2 / 8 - 1;
 81e:	64 e2       	ldi	r22, 0x24	; 36
 820:	74 ef       	ldi	r23, 0xF4	; 244
 822:	80 e0       	ldi	r24, 0x00	; 0
 824:	90 e0       	ldi	r25, 0x00	; 0
 826:	29 81       	ldd	r18, Y+1	; 0x01
 828:	3a 81       	ldd	r19, Y+2	; 0x02
 82a:	4b 81       	ldd	r20, Y+3	; 0x03
 82c:	5c 81       	ldd	r21, Y+4	; 0x04
 82e:	bf d1       	rcall	.+894    	; 0xbae <__udivmodsi4>
 830:	69 01       	movw	r12, r18
 832:	7a 01       	movw	r14, r20
 834:	a1 e0       	ldi	r26, 0x01	; 1
 836:	ca 1a       	sub	r12, r26
 838:	d1 08       	sbc	r13, r1
 83a:	e1 08       	sbc	r14, r1
 83c:	f1 08       	sbc	r15, r1
				prescalarbits = 0b010; // clk/8 prescaler : For both timers
				
				if (_timer == 2 && ocr > 255)
 83e:	bf ef       	ldi	r27, 0xFF	; 255
 840:	cb 16       	cp	r12, r27
 842:	d1 04       	cpc	r13, r1
 844:	e1 04       	cpc	r14, r1
 846:	f1 04       	cpc	r15, r1
 848:	11 f0       	breq	.+4      	; 0x84e <__LOCK_REGION_LENGTH__+0x44e>
 84a:	08 f0       	brcs	.+2      	; 0x84e <__LOCK_REGION_LENGTH__+0x44e>
 84c:	7b ce       	rjmp	.-778    	; 0x544 <__LOCK_REGION_LENGTH__+0x144>
			prescalarbits = 0b001; // clk/1 prescaler (No prescaling) : For both timers
			
			if (ocr > 255) // above prescaler failed
			{
				ocr = F_CPU / frequency / 2 / 8 - 1;
				prescalarbits = 0b010; // clk/8 prescaler : For both timers
 84e:	82 e0       	ldi	r24, 0x02	; 2
 850:	de ce       	rjmp	.-580    	; 0x60e <__LOCK_REGION_LENGTH__+0x20e>
		pinMode(_pin, OUTPUT);
		
		//2. if we are using an 8 bit timer, scan through prescalers to find the best fit
		if (_timer == 0 || _timer == 2)
		{
			ocr = F_CPU / frequency / 2 - 1;
 852:	c8 01       	movw	r24, r16
 854:	a0 e0       	ldi	r26, 0x00	; 0
 856:	b0 e0       	ldi	r27, 0x00	; 0
 858:	89 83       	std	Y+1, r24	; 0x01
 85a:	9a 83       	std	Y+2, r25	; 0x02
 85c:	ab 83       	std	Y+3, r26	; 0x03
 85e:	bc 83       	std	Y+4, r27	; 0x04
 860:	60 e2       	ldi	r22, 0x20	; 32
 862:	71 ea       	ldi	r23, 0xA1	; 161
 864:	87 e0       	ldi	r24, 0x07	; 7
 866:	90 e0       	ldi	r25, 0x00	; 0
 868:	29 81       	ldd	r18, Y+1	; 0x01
 86a:	3a 81       	ldd	r19, Y+2	; 0x02
 86c:	4b 81       	ldd	r20, Y+3	; 0x03
 86e:	5c 81       	ldd	r21, Y+4	; 0x04
 870:	9e d1       	rcall	.+828    	; 0xbae <__udivmodsi4>
 872:	29 01       	movw	r4, r18
 874:	3a 01       	movw	r6, r20
 876:	2d 83       	std	Y+5, r18	; 0x05
 878:	3e 83       	std	Y+6, r19	; 0x06
 87a:	4f 83       	std	Y+7, r20	; 0x07
 87c:	58 87       	std	Y+8, r21	; 0x08
 87e:	69 01       	movw	r12, r18
 880:	7a 01       	movw	r14, r20
 882:	91 e0       	ldi	r25, 0x01	; 1
 884:	c9 1a       	sub	r12, r25
 886:	d1 08       	sbc	r13, r1
 888:	e1 08       	sbc	r14, r1
 88a:	f1 08       	sbc	r15, r1
			prescalarbits = 0b001; // clk/1 prescaler (No prescaling) : For both timers
			
			if (ocr > 255) // above prescaler failed
 88c:	af ef       	ldi	r26, 0xFF	; 255
 88e:	ca 16       	cp	r12, r26
 890:	d1 04       	cpc	r13, r1
 892:	e1 04       	cpc	r14, r1
 894:	f1 04       	cpc	r15, r1
 896:	09 f0       	breq	.+2      	; 0x89a <__LOCK_REGION_LENGTH__+0x49a>
 898:	10 f6       	brcc	.-124    	; 0x81e <__LOCK_REGION_LENGTH__+0x41e>
		
		//2. if we are using an 8 bit timer, scan through prescalers to find the best fit
		if (_timer == 0 || _timer == 2)
		{
			ocr = F_CPU / frequency / 2 - 1;
			prescalarbits = 0b001; // clk/1 prescaler (No prescaling) : For both timers
 89a:	81 e0       	ldi	r24, 0x01	; 1
			
			if (ocr > 255) // above prescaler failed
			{
				ocr = F_CPU / frequency / 2 / 8 - 1;
 89c:	b8 ce       	rjmp	.-656    	; 0x60e <__LOCK_REGION_LENGTH__+0x20e>
 89e:	64 e2       	ldi	r22, 0x24	; 36
 8a0:	74 ef       	ldi	r23, 0xF4	; 244
 8a2:	80 e0       	ldi	r24, 0x00	; 0
 8a4:	90 e0       	ldi	r25, 0x00	; 0
 8a6:	29 81       	ldd	r18, Y+1	; 0x01
 8a8:	3a 81       	ldd	r19, Y+2	; 0x02
 8aa:	4b 81       	ldd	r20, Y+3	; 0x03
 8ac:	5c 81       	ldd	r21, Y+4	; 0x04
 8ae:	7f d1       	rcall	.+766    	; 0xbae <__udivmodsi4>
 8b0:	69 01       	movw	r12, r18
 8b2:	7a 01       	movw	r14, r20
 8b4:	b1 e0       	ldi	r27, 0x01	; 1
 8b6:	cb 1a       	sub	r12, r27
 8b8:	d1 08       	sbc	r13, r1
 8ba:	e1 08       	sbc	r14, r1
 8bc:	f1 08       	sbc	r15, r1
					ocr = F_CPU / frequency / 2 / 32 - 1;
					prescalarbits = 0b101; // clk/_
				}
				
			
				if(ocr > 255)
 8be:	2f ef       	ldi	r18, 0xFF	; 255
 8c0:	c2 16       	cp	r12, r18
 8c2:	d1 04       	cpc	r13, r1
 8c4:	e1 04       	cpc	r14, r1
 8c6:	f1 04       	cpc	r15, r1
 8c8:	11 f0       	breq	.+4      	; 0x8ce <__LOCK_REGION_LENGTH__+0x4ce>
 8ca:	08 f0       	brcs	.+2      	; 0x8ce <__LOCK_REGION_LENGTH__+0x4ce>
 8cc:	55 ce       	rjmp	.-854    	; 0x578 <__LOCK_REGION_LENGTH__+0x178>
			prescalarbits = 0b001; // clk/1 prescaler (No prescaling) : For both timers
			
			if (ocr > 255) // above prescaler failed
			{
				ocr = F_CPU / frequency / 2 / 8 - 1;
				prescalarbits = 0b010; // clk/8 prescaler : For both timers
 8ce:	82 e0       	ldi	r24, 0x02	; 2
 8d0:	90 ce       	rjmp	.-736    	; 0x5f2 <__LOCK_REGION_LENGTH__+0x1f2>
		pinMode(_pin, OUTPUT);
		
		//2. if we are using an 8 bit timer, scan through prescalers to find the best fit
		if (_timer == 0 || _timer == 2)
		{
			ocr = F_CPU / frequency / 2 - 1;
 8d2:	c8 01       	movw	r24, r16
 8d4:	a0 e0       	ldi	r26, 0x00	; 0
 8d6:	b0 e0       	ldi	r27, 0x00	; 0
 8d8:	89 83       	std	Y+1, r24	; 0x01
 8da:	9a 83       	std	Y+2, r25	; 0x02
 8dc:	ab 83       	std	Y+3, r26	; 0x03
 8de:	bc 83       	std	Y+4, r27	; 0x04
 8e0:	60 e2       	ldi	r22, 0x20	; 32
 8e2:	71 ea       	ldi	r23, 0xA1	; 161
 8e4:	87 e0       	ldi	r24, 0x07	; 7
 8e6:	90 e0       	ldi	r25, 0x00	; 0
 8e8:	29 81       	ldd	r18, Y+1	; 0x01
 8ea:	3a 81       	ldd	r19, Y+2	; 0x02
 8ec:	4b 81       	ldd	r20, Y+3	; 0x03
 8ee:	5c 81       	ldd	r21, Y+4	; 0x04
 8f0:	5e d1       	rcall	.+700    	; 0xbae <__udivmodsi4>
 8f2:	29 01       	movw	r4, r18
 8f4:	3a 01       	movw	r6, r20
 8f6:	2d 83       	std	Y+5, r18	; 0x05
 8f8:	3e 83       	std	Y+6, r19	; 0x06
 8fa:	4f 83       	std	Y+7, r20	; 0x07
 8fc:	58 87       	std	Y+8, r21	; 0x08
 8fe:	69 01       	movw	r12, r18
 900:	7a 01       	movw	r14, r20
 902:	91 e0       	ldi	r25, 0x01	; 1
 904:	c9 1a       	sub	r12, r25
 906:	d1 08       	sbc	r13, r1
 908:	e1 08       	sbc	r14, r1
 90a:	f1 08       	sbc	r15, r1
			prescalarbits = 0b001; // clk/1 prescaler (No prescaling) : For both timers
			
			if (ocr > 255) // above prescaler failed
 90c:	af ef       	ldi	r26, 0xFF	; 255
 90e:	ca 16       	cp	r12, r26
 910:	d1 04       	cpc	r13, r1
 912:	e1 04       	cpc	r14, r1
 914:	f1 04       	cpc	r15, r1
 916:	09 f0       	breq	.+2      	; 0x91a <__LOCK_REGION_LENGTH__+0x51a>
 918:	10 f6       	brcc	.-124    	; 0x89e <__LOCK_REGION_LENGTH__+0x49e>
		
		//2. if we are using an 8 bit timer, scan through prescalers to find the best fit
		if (_timer == 0 || _timer == 2)
		{
			ocr = F_CPU / frequency / 2 - 1;
			prescalarbits = 0b001; // clk/1 prescaler (No prescaling) : For both timers
 91a:	81 e0       	ldi	r24, 0x01	; 1
 91c:	6a ce       	rjmp	.-812    	; 0x5f2 <__LOCK_REGION_LENGTH__+0x1f2>
				}
				
			
				if(ocr > 255)
				{
					ocr = F_CPU / frequency / 2 / 64 - 1;
 91e:	73 01       	movw	r14, r6
 920:	62 01       	movw	r12, r4
 922:	68 94       	set
 924:	15 f8       	bld	r1, 5
 926:	f6 94       	lsr	r15
 928:	e7 94       	ror	r14
 92a:	d7 94       	ror	r13
 92c:	c7 94       	ror	r12
 92e:	16 94       	lsr	r1
 930:	d1 f7       	brne	.-12     	; 0x926 <__LOCK_REGION_LENGTH__+0x526>
 932:	b1 e0       	ldi	r27, 0x01	; 1
 934:	cb 1a       	sub	r12, r27
 936:	d1 08       	sbc	r13, r1
 938:	e1 08       	sbc	r14, r1
 93a:	f1 08       	sbc	r15, r1
					prescalarbits = _timer == 0 ? 0b011 : 0b100; // clk/32 for timer 1: clk/64 for timer 2
					
					if (_timer == 2 && ocr > 255)
 93c:	2f ef       	ldi	r18, 0xFF	; 255
 93e:	c2 16       	cp	r12, r18
 940:	d1 04       	cpc	r13, r1
 942:	e1 04       	cpc	r14, r1
 944:	f1 04       	cpc	r15, r1
 946:	11 f0       	breq	.+4      	; 0x94c <__LOCK_REGION_LENGTH__+0x54c>
 948:	08 f0       	brcs	.+2      	; 0x94c <__LOCK_REGION_LENGTH__+0x54c>
 94a:	27 ce       	rjmp	.-946    	; 0x59a <__LOCK_REGION_LENGTH__+0x19a>
 94c:	84 e0       	ldi	r24, 0x04	; 4
 94e:	5f ce       	rjmp	.-834    	; 0x60e <__LOCK_REGION_LENGTH__+0x20e>
		}
	}
	  
	// search for an unused timer.
	for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
		if (tone_pins[i] == 255) {
 950:	9f 3f       	cpi	r25, 0xFF	; 255
 952:	09 f0       	breq	.+2      	; 0x956 <__LOCK_REGION_LENGTH__+0x556>
 954:	3e c0       	rjmp	.+124    	; 0x9d2 <__LOCK_REGION_LENGTH__+0x5d2>
 956:	eb cc       	rjmp	.-1578   	; 0x32e <tone+0x48>
						ocr = F_CPU / frequency / 2 / 256 - 1;
						prescalarbits = _timer == 0 ? 0b100 : 0b110;  // clk/64 for timer 1: clk/256 for timer 2
						if (ocr > 255)
						{
							// can't do any better than /1024
							ocr = F_CPU / frequency / 2 / 1024 - 1;
 958:	cd 80       	ldd	r12, Y+5	; 0x05
 95a:	de 80       	ldd	r13, Y+6	; 0x06
 95c:	ef 80       	ldd	r14, Y+7	; 0x07
 95e:	f8 84       	ldd	r15, Y+8	; 0x08
 960:	0b 2e       	mov	r0, r27
 962:	ba e0       	ldi	r27, 0x0A	; 10
 964:	f6 94       	lsr	r15
 966:	e7 94       	ror	r14
 968:	d7 94       	ror	r13
 96a:	c7 94       	ror	r12
 96c:	ba 95       	dec	r27
 96e:	d1 f7       	brne	.-12     	; 0x964 <__LOCK_REGION_LENGTH__+0x564>
 970:	b0 2d       	mov	r27, r0
 972:	81 e0       	ldi	r24, 0x01	; 1
 974:	c8 1a       	sub	r12, r24
 976:	d1 08       	sbc	r13, r1
 978:	e1 08       	sbc	r14, r1
 97a:	f1 08       	sbc	r15, r1
							prescalarbits = _timer == 0 ? 0b101 : 0b111; // clk/128 for timer 1: clk/1024 for timer 2
 97c:	85 e0       	ldi	r24, 0x05	; 5
 97e:	39 ce       	rjmp	.-910    	; 0x5f2 <__LOCK_REGION_LENGTH__+0x1f2>

					if (ocr > 255)
					{
						ocr = F_CPU / frequency / 2 / 256 - 1;
						prescalarbits = _timer == 0 ? 0b100 : 0b110;  // clk/64 for timer 1: clk/256 for timer 2
						if (ocr > 255)
 980:	9f ef       	ldi	r25, 0xFF	; 255
 982:	c9 16       	cp	r12, r25
 984:	d1 04       	cpc	r13, r1
 986:	e1 04       	cpc	r14, r1
 988:	f1 04       	cpc	r15, r1
 98a:	09 f0       	breq	.+2      	; 0x98e <__LOCK_REGION_LENGTH__+0x58e>
 98c:	28 f7       	brcc	.-54     	; 0x958 <__LOCK_REGION_LENGTH__+0x558>
					}

					if (ocr > 255)
					{
						ocr = F_CPU / frequency / 2 / 256 - 1;
						prescalarbits = _timer == 0 ? 0b100 : 0b110;  // clk/64 for timer 1: clk/256 for timer 2
 98e:	84 e0       	ldi	r24, 0x04	; 4
 990:	2d ce       	rjmp	.-934    	; 0x5ec <__LOCK_REGION_LENGTH__+0x1ec>
						if (ocr > 255)
						{
							// can't do any better than /1024
							ocr = F_CPU / frequency / 2 / 1024 - 1;
 992:	cd 80       	ldd	r12, Y+5	; 0x05
 994:	de 80       	ldd	r13, Y+6	; 0x06
 996:	ef 80       	ldd	r14, Y+7	; 0x07
 998:	f8 84       	ldd	r15, Y+8	; 0x08
 99a:	0b 2e       	mov	r0, r27
 99c:	ba e0       	ldi	r27, 0x0A	; 10
 99e:	f6 94       	lsr	r15
 9a0:	e7 94       	ror	r14
 9a2:	d7 94       	ror	r13
 9a4:	c7 94       	ror	r12
 9a6:	ba 95       	dec	r27
 9a8:	d1 f7       	brne	.-12     	; 0x99e <__LOCK_REGION_LENGTH__+0x59e>
 9aa:	b0 2d       	mov	r27, r0
 9ac:	a1 e0       	ldi	r26, 0x01	; 1
 9ae:	ca 1a       	sub	r12, r26
 9b0:	d1 08       	sbc	r13, r1
 9b2:	e1 08       	sbc	r14, r1
 9b4:	f1 08       	sbc	r15, r1
							prescalarbits = _timer == 0 ? 0b101 : 0b111; // clk/128 for timer 1: clk/1024 for timer 2
 9b6:	87 e0       	ldi	r24, 0x07	; 7

					if (ocr > 255)
					{
						ocr = F_CPU / frequency / 2 / 256 - 1;
						prescalarbits = _timer == 0 ? 0b100 : 0b110;  // clk/64 for timer 1: clk/256 for timer 2
						if (ocr > 255)
 9b8:	2a ce       	rjmp	.-940    	; 0x60e <__LOCK_REGION_LENGTH__+0x20e>
 9ba:	bf ef       	ldi	r27, 0xFF	; 255
 9bc:	cb 16       	cp	r12, r27
 9be:	d1 04       	cpc	r13, r1
 9c0:	e1 04       	cpc	r14, r1
 9c2:	f1 04       	cpc	r15, r1
 9c4:	09 f0       	breq	.+2      	; 0x9c8 <__LOCK_REGION_LENGTH__+0x5c8>
					}

					if (ocr > 255)
					{
						ocr = F_CPU / frequency / 2 / 256 - 1;
						prescalarbits = _timer == 0 ? 0b100 : 0b110;  // clk/64 for timer 1: clk/256 for timer 2
 9c6:	28 f7       	brcc	.-54     	; 0x992 <__LOCK_REGION_LENGTH__+0x592>
 9c8:	86 e0       	ldi	r24, 0x06	; 6
	_timer = toneBegin(_pin);
	
	if (_timer >= 0)
	{
		//1. set the pin as OUTPUT
		pinMode(_pin, OUTPUT);
 9ca:	10 ce       	rjmp	.-992    	; 0x5ec <__LOCK_REGION_LENGTH__+0x1ec>
 9cc:	61 e0       	ldi	r22, 0x01	; 1
 9ce:	2a dc       	rcall	.-1964   	; 0x224 <pinMode>
 9d0:	25 ce       	rjmp	.-950    	; 0x61c <__LOCK_REGION_LENGTH__+0x21c>
				timer5_toggle_count = toggle_count;
				bitWrite(TIMSK5, OCIE5A, 1);
			break;
		}		
	}
}
 9d2:	29 96       	adiw	r28, 0x09	; 9
 9d4:	0f b6       	in	r0, 0x3f	; 63
 9d6:	f8 94       	cli
 9d8:	de bf       	out	0x3e, r29	; 62
 9da:	0f be       	out	0x3f, r0	; 63
 9dc:	cd bf       	out	0x3d, r28	; 61
 9de:	df 91       	pop	r29
 9e0:	cf 91       	pop	r28
 9e2:	1f 91       	pop	r17
 9e4:	0f 91       	pop	r16
 9e6:	ff 90       	pop	r15
 9e8:	ef 90       	pop	r14
 9ea:	df 90       	pop	r13
 9ec:	cf 90       	pop	r12
 9ee:	bf 90       	pop	r11
 9f0:	af 90       	pop	r10
 9f2:	9f 90       	pop	r9
 9f4:	8f 90       	pop	r8
 9f6:	7f 90       	pop	r7
 9f8:	6f 90       	pop	r6
 9fa:	5f 90       	pop	r5
 9fc:	4f 90       	pop	r4
 9fe:	08 95       	ret

00000a00 <disableTimer>:
This function only works properly for timer 2 (the only one we use currently).  
for the others, it should end the tone, but won't restore proper PWM functionality for the timer. TODO
*/
void disableTimer(uint8_t _timer)
{
	switch(_timer)
 a00:	82 30       	cpi	r24, 0x02	; 2
 a02:	a9 f0       	breq	.+42     	; 0xa2e <disableTimer+0x2e>
 a04:	28 f4       	brcc	.+10     	; 0xa10 <disableTimer+0x10>
 a06:	88 23       	and	r24, r24
 a08:	49 f0       	breq	.+18     	; 0xa1c <disableTimer+0x1c>
 a0a:	81 30       	cpi	r24, 0x01	; 1
 a0c:	51 f0       	breq	.+20     	; 0xa22 <disableTimer+0x22>
 a0e:	08 95       	ret
 a10:	84 30       	cpi	r24, 0x04	; 4
 a12:	21 f1       	breq	.+72     	; 0xa5c <disableTimer+0x5c>
 a14:	e8 f0       	brcs	.+58     	; 0xa50 <disableTimer+0x50>
 a16:	85 30       	cpi	r24, 0x05	; 5
 a18:	39 f1       	breq	.+78     	; 0xa68 <disableTimer+0x68>
 a1a:	08 95       	ret
	{
		case 0:
		TIMSK0 = 0;
 a1c:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
		break;
 a20:	08 95       	ret
		case 1:
			bitWrite(TIMSK1, OCIE1A, 0);
 a22:	ef e6       	ldi	r30, 0x6F	; 111
 a24:	f0 e0       	ldi	r31, 0x00	; 0
 a26:	80 81       	ld	r24, Z
 a28:	8d 7f       	andi	r24, 0xFD	; 253
 a2a:	80 83       	st	Z, r24
		break;
 a2c:	08 95       	ret
		case 2:
			bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
 a2e:	e0 e7       	ldi	r30, 0x70	; 112
 a30:	f0 e0       	ldi	r31, 0x00	; 0
 a32:	80 81       	ld	r24, Z
 a34:	8d 7f       	andi	r24, 0xFD	; 253
 a36:	80 83       	st	Z, r24
			TCCR2A = (1 << WGM20);		 // restore normal  PWM mode
 a38:	81 e0       	ldi	r24, 0x01	; 1
 a3a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
			TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22); //clk/64 prescaler
 a3e:	e1 eb       	ldi	r30, 0xB1	; 177
 a40:	f0 e0       	ldi	r31, 0x00	; 0
 a42:	80 81       	ld	r24, Z
 a44:	88 7f       	andi	r24, 0xF8	; 248
 a46:	84 60       	ori	r24, 0x04	; 4
 a48:	80 83       	st	Z, r24
			OCR2A = 0;
 a4a:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
		break;
 a4e:	08 95       	ret
		case 3:
			bitWrite(TIMSK3, OCIE3A, 0);
 a50:	e1 e7       	ldi	r30, 0x71	; 113
 a52:	f0 e0       	ldi	r31, 0x00	; 0
 a54:	80 81       	ld	r24, Z
 a56:	8d 7f       	andi	r24, 0xFD	; 253
 a58:	80 83       	st	Z, r24
		break;
 a5a:	08 95       	ret
		case 4:
			bitWrite(TIMSK4, OCIE4A, 0);
 a5c:	e2 e7       	ldi	r30, 0x72	; 114
 a5e:	f0 e0       	ldi	r31, 0x00	; 0
 a60:	80 81       	ld	r24, Z
 a62:	8d 7f       	andi	r24, 0xFD	; 253
 a64:	80 83       	st	Z, r24
		break;
 a66:	08 95       	ret
		case 5:
			bitWrite(TIMSK5, OCIE5A, 0);
 a68:	e3 e7       	ldi	r30, 0x73	; 115
 a6a:	f0 e0       	ldi	r31, 0x00	; 0
 a6c:	80 81       	ld	r24, Z
 a6e:	8d 7f       	andi	r24, 0xFD	; 253
 a70:	80 83       	st	Z, r24
 a72:	08 95       	ret

00000a74 <noTone>:
	}
}


void noTone(uint8_t _pin)
{
 a74:	cf 93       	push	r28
 a76:	c8 2f       	mov	r28, r24
	int8_t _timer = -1;
	  
	for (int i = 0; i < AVAILABLE_TONE_PINS; i++)
	{
		if (tone_pins[i] == _pin) {
 a78:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 a7c:	c8 13       	cpse	r28, r24
 a7e:	07 c0       	rjmp	.+14     	; 0xa8e <noTone+0x1a>
			_timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
 a80:	e2 ee       	ldi	r30, 0xE2	; 226
 a82:	f1 e0       	ldi	r31, 0x01	; 1
 a84:	84 91       	lpm	r24, Z
			tone_pins[i] = 255;
 a86:	9f ef       	ldi	r25, 0xFF	; 255
 a88:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <__DATA_REGION_ORIGIN__>
			break;
 a8c:	01 c0       	rjmp	.+2      	; 0xa90 <noTone+0x1c>
}


void noTone(uint8_t _pin)
{
	int8_t _timer = -1;
 a8e:	8f ef       	ldi	r24, 0xFF	; 255
			tone_pins[i] = 255;
			break;
		}
	}
	  
	disableTimer(_timer);
 a90:	b7 df       	rcall	.-146    	; 0xa00 <disableTimer>
	digitalWrite(_pin, 0);
 a92:	60 e0       	ldi	r22, 0x00	; 0
 a94:	8c 2f       	mov	r24, r28
 a96:	05 dc       	rcall	.-2038   	; 0x2a2 <digitalWrite>
}
 a98:	cf 91       	pop	r28
 a9a:	08 95       	ret

00000a9c <__vector_32>:
}
#endif

#ifdef USE_TIMER3
ISR(TIMER3_COMPA_vect)
{
 a9c:	1f 92       	push	r1
 a9e:	0f 92       	push	r0
 aa0:	0f b6       	in	r0, 0x3f	; 63
 aa2:	0f 92       	push	r0
 aa4:	11 24       	eor	r1, r1
 aa6:	0b b6       	in	r0, 0x3b	; 59
 aa8:	0f 92       	push	r0
 aaa:	2f 93       	push	r18
 aac:	3f 93       	push	r19
 aae:	4f 93       	push	r20
 ab0:	5f 93       	push	r21
 ab2:	6f 93       	push	r22
 ab4:	7f 93       	push	r23
 ab6:	8f 93       	push	r24
 ab8:	9f 93       	push	r25
 aba:	af 93       	push	r26
 abc:	bf 93       	push	r27
 abe:	ef 93       	push	r30
 ac0:	ff 93       	push	r31
	if (timer3_toggle_count != 0)
 ac2:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <timer3_toggle_count>
 ac6:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <timer3_toggle_count+0x1>
 aca:	a0 91 13 02 	lds	r26, 0x0213	; 0x800213 <timer3_toggle_count+0x2>
 ace:	b0 91 14 02 	lds	r27, 0x0214	; 0x800214 <timer3_toggle_count+0x3>
 ad2:	89 2b       	or	r24, r25
 ad4:	8a 2b       	or	r24, r26
 ad6:	8b 2b       	or	r24, r27
 ad8:	51 f1       	breq	.+84     	; 0xb2e <__vector_32+0x92>
	{
		// toggle the pin
		*timer3_pin_port ^= timer3_pin_mask;
 ada:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <timer3_pin_mask>
 ade:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <timer3_pin_port>
 ae2:	f0 91 0c 02 	lds	r31, 0x020C	; 0x80020c <timer3_pin_port+0x1>
 ae6:	80 81       	ld	r24, Z
 ae8:	89 27       	eor	r24, r25
 aea:	80 83       	st	Z, r24

		if (timer3_toggle_count > 0)
 aec:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <timer3_toggle_count>
 af0:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <timer3_toggle_count+0x1>
 af4:	a0 91 13 02 	lds	r26, 0x0213	; 0x800213 <timer3_toggle_count+0x2>
 af8:	b0 91 14 02 	lds	r27, 0x0214	; 0x800214 <timer3_toggle_count+0x3>
 afc:	18 16       	cp	r1, r24
 afe:	19 06       	cpc	r1, r25
 b00:	1a 06       	cpc	r1, r26
 b02:	1b 06       	cpc	r1, r27
 b04:	04 f5       	brge	.+64     	; 0xb46 <__vector_32+0xaa>
			timer3_toggle_count--;
 b06:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <timer3_toggle_count>
 b0a:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <timer3_toggle_count+0x1>
 b0e:	a0 91 13 02 	lds	r26, 0x0213	; 0x800213 <timer3_toggle_count+0x2>
 b12:	b0 91 14 02 	lds	r27, 0x0214	; 0x800214 <timer3_toggle_count+0x3>
 b16:	01 97       	sbiw	r24, 0x01	; 1
 b18:	a1 09       	sbc	r26, r1
 b1a:	b1 09       	sbc	r27, r1
 b1c:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <timer3_toggle_count>
 b20:	90 93 12 02 	sts	0x0212, r25	; 0x800212 <timer3_toggle_count+0x1>
 b24:	a0 93 13 02 	sts	0x0213, r26	; 0x800213 <timer3_toggle_count+0x2>
 b28:	b0 93 14 02 	sts	0x0214, r27	; 0x800214 <timer3_toggle_count+0x3>
 b2c:	0c c0       	rjmp	.+24     	; 0xb46 <__vector_32+0xaa>
	}
	else
	{
		disableTimer(3);
 b2e:	83 e0       	ldi	r24, 0x03	; 3
 b30:	67 df       	rcall	.-306    	; 0xa00 <disableTimer>
		*timer3_pin_port &= ~(timer3_pin_mask);  // keep pin low after stop
 b32:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <timer3_pin_mask>
 b36:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <timer3_pin_port>
 b3a:	f0 91 0c 02 	lds	r31, 0x020C	; 0x80020c <timer3_pin_port+0x1>
 b3e:	90 81       	ld	r25, Z
 b40:	80 95       	com	r24
 b42:	89 23       	and	r24, r25
 b44:	80 83       	st	Z, r24
	}
}
 b46:	ff 91       	pop	r31
 b48:	ef 91       	pop	r30
 b4a:	bf 91       	pop	r27
 b4c:	af 91       	pop	r26
 b4e:	9f 91       	pop	r25
 b50:	8f 91       	pop	r24
 b52:	7f 91       	pop	r23
 b54:	6f 91       	pop	r22
 b56:	5f 91       	pop	r21
 b58:	4f 91       	pop	r20
 b5a:	3f 91       	pop	r19
 b5c:	2f 91       	pop	r18
 b5e:	0f 90       	pop	r0
 b60:	0b be       	out	0x3b, r0	; 59
 b62:	0f 90       	pop	r0
 b64:	0f be       	out	0x3f, r0	; 63
 b66:	0f 90       	pop	r0
 b68:	1f 90       	pop	r1
 b6a:	18 95       	reti

00000b6c <main>:
};

int main(void)
{
    /* Replace with your application code */
	pinMode(Pin_PK0, OUTPUT);
 b6c:	61 e0       	ldi	r22, 0x01	; 1
 b6e:	89 e5       	ldi	r24, 0x59	; 89
 b70:	59 db       	rcall	.-2382   	; 0x224 <pinMode>
	pinMode(Pin_PK3, OUTPUT);
 b72:	61 e0       	ldi	r22, 0x01	; 1
 b74:	86 e5       	ldi	r24, 0x56	; 86
 b76:	56 db       	rcall	.-2388   	; 0x224 <pinMode>
	pinMode(Pin_PJ2, INPUT);
 b78:	60 e0       	ldi	r22, 0x00	; 0
 b7a:	81 e4       	ldi	r24, 0x41	; 65
 b7c:	53 db       	rcall	.-2394   	; 0x224 <pinMode>
 b7e:	c8 e0       	ldi	r28, 0x08	; 8
 b80:	d0 e0       	ldi	r29, 0x00	; 0
// 		noTone(Pin_PE3);
// 
// 	}
	  for(int i=0; i<8; i++)
	  {
		  tone(Pin_PE3,432, 300);
 b82:	2c e2       	ldi	r18, 0x2C	; 44
 b84:	31 e0       	ldi	r19, 0x01	; 1
 b86:	40 e0       	ldi	r20, 0x00	; 0
 b88:	50 e0       	ldi	r21, 0x00	; 0
 b8a:	60 eb       	ldi	r22, 0xB0	; 176
 b8c:	71 e0       	ldi	r23, 0x01	; 1
 b8e:	85 e0       	ldi	r24, 0x05	; 5
 b90:	aa db       	rcall	.-2220   	; 0x2e6 <tone>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 b92:	2f e6       	ldi	r18, 0x6F	; 111
 b94:	81 e1       	ldi	r24, 0x11	; 17
 b96:	91 e0       	ldi	r25, 0x01	; 1
 b98:	21 50       	subi	r18, 0x01	; 1
 b9a:	80 40       	sbci	r24, 0x00	; 0
 b9c:	90 40       	sbci	r25, 0x00	; 0
 b9e:	e1 f7       	brne	.-8      	; 0xb98 <main+0x2c>
 ba0:	00 c0       	rjmp	.+0      	; 0xba2 <main+0x36>
		  _delay_ms(350);
		  noTone(Pin_PE3);
 ba2:	00 00       	nop
 ba4:	85 e0       	ldi	r24, 0x05	; 5
 ba6:	66 df       	rcall	.-308    	; 0xa74 <noTone>
 ba8:	21 97       	sbiw	r28, 0x01	; 1
// 		
// 		// stop the tone playing:
// 		noTone(Pin_PE3);
// 
// 	}
	  for(int i=0; i<8; i++)
 baa:	59 f7       	brne	.-42     	; 0xb82 <main+0x16>
 bac:	ff cf       	rjmp	.-2      	; 0xbac <main+0x40>

00000bae <__udivmodsi4>:
 bae:	a1 e2       	ldi	r26, 0x21	; 33
 bb0:	1a 2e       	mov	r1, r26
 bb2:	aa 1b       	sub	r26, r26
 bb4:	bb 1b       	sub	r27, r27
 bb6:	fd 01       	movw	r30, r26
 bb8:	0d c0       	rjmp	.+26     	; 0xbd4 <__udivmodsi4_ep>

00000bba <__udivmodsi4_loop>:
 bba:	aa 1f       	adc	r26, r26
 bbc:	bb 1f       	adc	r27, r27
 bbe:	ee 1f       	adc	r30, r30
 bc0:	ff 1f       	adc	r31, r31
 bc2:	a2 17       	cp	r26, r18
 bc4:	b3 07       	cpc	r27, r19
 bc6:	e4 07       	cpc	r30, r20
 bc8:	f5 07       	cpc	r31, r21
 bca:	20 f0       	brcs	.+8      	; 0xbd4 <__udivmodsi4_ep>
 bcc:	a2 1b       	sub	r26, r18
 bce:	b3 0b       	sbc	r27, r19
 bd0:	e4 0b       	sbc	r30, r20
 bd2:	f5 0b       	sbc	r31, r21

00000bd4 <__udivmodsi4_ep>:
 bd4:	66 1f       	adc	r22, r22
 bd6:	77 1f       	adc	r23, r23
 bd8:	88 1f       	adc	r24, r24
 bda:	99 1f       	adc	r25, r25
 bdc:	1a 94       	dec	r1
 bde:	69 f7       	brne	.-38     	; 0xbba <__udivmodsi4_loop>
 be0:	60 95       	com	r22
 be2:	70 95       	com	r23
 be4:	80 95       	com	r24
 be6:	90 95       	com	r25
 be8:	9b 01       	movw	r18, r22
 bea:	ac 01       	movw	r20, r24
 bec:	bd 01       	movw	r22, r26
 bee:	cf 01       	movw	r24, r30
 bf0:	08 95       	ret

00000bf2 <__muluhisi3>:
 bf2:	09 d0       	rcall	.+18     	; 0xc06 <__umulhisi3>
 bf4:	a5 9f       	mul	r26, r21
 bf6:	90 0d       	add	r25, r0
 bf8:	b4 9f       	mul	r27, r20
 bfa:	90 0d       	add	r25, r0
 bfc:	a4 9f       	mul	r26, r20
 bfe:	80 0d       	add	r24, r0
 c00:	91 1d       	adc	r25, r1
 c02:	11 24       	eor	r1, r1
 c04:	08 95       	ret

00000c06 <__umulhisi3>:
 c06:	a2 9f       	mul	r26, r18
 c08:	b0 01       	movw	r22, r0
 c0a:	b3 9f       	mul	r27, r19
 c0c:	c0 01       	movw	r24, r0
 c0e:	a3 9f       	mul	r26, r19
 c10:	70 0d       	add	r23, r0
 c12:	81 1d       	adc	r24, r1
 c14:	11 24       	eor	r1, r1
 c16:	91 1d       	adc	r25, r1
 c18:	b2 9f       	mul	r27, r18
 c1a:	70 0d       	add	r23, r0
 c1c:	81 1d       	adc	r24, r1
 c1e:	11 24       	eor	r1, r1
 c20:	91 1d       	adc	r25, r1
 c22:	08 95       	ret

00000c24 <_exit>:
 c24:	f8 94       	cli

00000c26 <__stop_program>:
 c26:	ff cf       	rjmp	.-2      	; 0xc26 <__stop_program>
