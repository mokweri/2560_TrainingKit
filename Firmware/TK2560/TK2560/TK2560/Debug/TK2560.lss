
TK2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800200  000015e8  0000167c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000015e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000044  00800232  00800232  000016ae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000016ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000016e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000200  00000000  00000000  00001720  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002ddd  00000000  00000000  00001920  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001544  00000000  00000000  000046fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015f6  00000000  00000000  00005c41  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000464  00000000  00000000  00007238  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b15  00000000  00000000  0000769c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a3b  00000000  00000000  000081b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c8  00000000  00000000  00009bec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	35 c1       	rjmp	.+618    	; 0x26c <__ctors_end>
       2:	00 00       	nop
       4:	53 c1       	rjmp	.+678    	; 0x2ac <__bad_interrupt>
       6:	00 00       	nop
       8:	51 c1       	rjmp	.+674    	; 0x2ac <__bad_interrupt>
       a:	00 00       	nop
       c:	4f c1       	rjmp	.+670    	; 0x2ac <__bad_interrupt>
       e:	00 00       	nop
      10:	4d c1       	rjmp	.+666    	; 0x2ac <__bad_interrupt>
      12:	00 00       	nop
      14:	4b c1       	rjmp	.+662    	; 0x2ac <__bad_interrupt>
      16:	00 00       	nop
      18:	49 c1       	rjmp	.+658    	; 0x2ac <__bad_interrupt>
      1a:	00 00       	nop
      1c:	47 c1       	rjmp	.+654    	; 0x2ac <__bad_interrupt>
      1e:	00 00       	nop
      20:	45 c1       	rjmp	.+650    	; 0x2ac <__bad_interrupt>
      22:	00 00       	nop
      24:	43 c1       	rjmp	.+646    	; 0x2ac <__bad_interrupt>
      26:	00 00       	nop
      28:	41 c1       	rjmp	.+642    	; 0x2ac <__bad_interrupt>
      2a:	00 00       	nop
      2c:	3f c1       	rjmp	.+638    	; 0x2ac <__bad_interrupt>
      2e:	00 00       	nop
      30:	3d c1       	rjmp	.+634    	; 0x2ac <__bad_interrupt>
      32:	00 00       	nop
      34:	3b c1       	rjmp	.+630    	; 0x2ac <__bad_interrupt>
      36:	00 00       	nop
      38:	39 c1       	rjmp	.+626    	; 0x2ac <__bad_interrupt>
      3a:	00 00       	nop
      3c:	37 c1       	rjmp	.+622    	; 0x2ac <__bad_interrupt>
      3e:	00 00       	nop
      40:	35 c1       	rjmp	.+618    	; 0x2ac <__bad_interrupt>
      42:	00 00       	nop
      44:	33 c1       	rjmp	.+614    	; 0x2ac <__bad_interrupt>
      46:	00 00       	nop
      48:	31 c1       	rjmp	.+610    	; 0x2ac <__bad_interrupt>
      4a:	00 00       	nop
      4c:	2f c1       	rjmp	.+606    	; 0x2ac <__bad_interrupt>
      4e:	00 00       	nop
      50:	2d c1       	rjmp	.+602    	; 0x2ac <__bad_interrupt>
      52:	00 00       	nop
      54:	2b c1       	rjmp	.+598    	; 0x2ac <__bad_interrupt>
      56:	00 00       	nop
      58:	29 c1       	rjmp	.+594    	; 0x2ac <__bad_interrupt>
      5a:	00 00       	nop
      5c:	7a c4       	rjmp	.+2292   	; 0x952 <__vector_23>
      5e:	00 00       	nop
      60:	25 c1       	rjmp	.+586    	; 0x2ac <__bad_interrupt>
      62:	00 00       	nop
      64:	23 c1       	rjmp	.+582    	; 0x2ac <__bad_interrupt>
      66:	00 00       	nop
      68:	21 c1       	rjmp	.+578    	; 0x2ac <__bad_interrupt>
      6a:	00 00       	nop
      6c:	1f c1       	rjmp	.+574    	; 0x2ac <__bad_interrupt>
      6e:	00 00       	nop
      70:	1d c1       	rjmp	.+570    	; 0x2ac <__bad_interrupt>
      72:	00 00       	nop
      74:	1b c1       	rjmp	.+566    	; 0x2ac <__bad_interrupt>
      76:	00 00       	nop
      78:	19 c1       	rjmp	.+562    	; 0x2ac <__bad_interrupt>
      7a:	00 00       	nop
      7c:	17 c1       	rjmp	.+558    	; 0x2ac <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 ac 08 	jmp	0x1158	; 0x1158 <__vector_32>
      84:	13 c1       	rjmp	.+550    	; 0x2ac <__bad_interrupt>
      86:	00 00       	nop
      88:	11 c1       	rjmp	.+546    	; 0x2ac <__bad_interrupt>
      8a:	00 00       	nop
      8c:	0f c1       	rjmp	.+542    	; 0x2ac <__bad_interrupt>
      8e:	00 00       	nop
      90:	0d c1       	rjmp	.+538    	; 0x2ac <__bad_interrupt>
      92:	00 00       	nop
      94:	0b c1       	rjmp	.+534    	; 0x2ac <__bad_interrupt>
      96:	00 00       	nop
      98:	09 c1       	rjmp	.+530    	; 0x2ac <__bad_interrupt>
      9a:	00 00       	nop
      9c:	07 c1       	rjmp	.+526    	; 0x2ac <__bad_interrupt>
      9e:	00 00       	nop
      a0:	05 c1       	rjmp	.+522    	; 0x2ac <__bad_interrupt>
      a2:	00 00       	nop
      a4:	03 c1       	rjmp	.+518    	; 0x2ac <__bad_interrupt>
      a6:	00 00       	nop
      a8:	01 c1       	rjmp	.+514    	; 0x2ac <__bad_interrupt>
      aa:	00 00       	nop
      ac:	ff c0       	rjmp	.+510    	; 0x2ac <__bad_interrupt>
      ae:	00 00       	nop
      b0:	fd c0       	rjmp	.+506    	; 0x2ac <__bad_interrupt>
      b2:	00 00       	nop
      b4:	fb c0       	rjmp	.+502    	; 0x2ac <__bad_interrupt>
      b6:	00 00       	nop
      b8:	f9 c0       	rjmp	.+498    	; 0x2ac <__bad_interrupt>
      ba:	00 00       	nop
      bc:	f7 c0       	rjmp	.+494    	; 0x2ac <__bad_interrupt>
      be:	00 00       	nop
      c0:	f5 c0       	rjmp	.+490    	; 0x2ac <__bad_interrupt>
      c2:	00 00       	nop
      c4:	f3 c0       	rjmp	.+486    	; 0x2ac <__bad_interrupt>
      c6:	00 00       	nop
      c8:	f1 c0       	rjmp	.+482    	; 0x2ac <__bad_interrupt>
      ca:	00 00       	nop
      cc:	ef c0       	rjmp	.+478    	; 0x2ac <__bad_interrupt>
      ce:	00 00       	nop
      d0:	ed c0       	rjmp	.+474    	; 0x2ac <__bad_interrupt>
      d2:	00 00       	nop
      d4:	eb c0       	rjmp	.+470    	; 0x2ac <__bad_interrupt>
      d6:	00 00       	nop
      d8:	e9 c0       	rjmp	.+466    	; 0x2ac <__bad_interrupt>
      da:	00 00       	nop
      dc:	e7 c0       	rjmp	.+462    	; 0x2ac <__bad_interrupt>
      de:	00 00       	nop
      e0:	e5 c0       	rjmp	.+458    	; 0x2ac <__bad_interrupt>
      e2:	00 00       	nop
      e4:	93 03       	fmuls	r17, r19
      e6:	98 03       	fmulsu	r17, r16
      e8:	9d 03       	fmulsu	r17, r21
      ea:	a7 03       	fmuls	r18, r23
      ec:	b1 03       	fmuls	r19, r17
      ee:	25 04       	cpc	r2, r5
      f0:	bb 03       	fmulsu	r19, r19
      f2:	c3 03       	fmuls	r20, r19
      f4:	cb 03       	fmulsu	r20, r19
      f6:	d5 03       	fmuls	r21, r21
      f8:	df 03       	fmulsu	r21, r23
      fa:	e9 03       	fmulsu	r22, r17
      fc:	f3 03       	fmuls	r23, r19
      fe:	fd 03       	fmulsu	r23, r21
     100:	25 04       	cpc	r2, r5
     102:	07 04       	cpc	r0, r7
     104:	11 04       	cpc	r1, r1
     106:	1b 04       	cpc	r1, r11

00000108 <__trampolines_end>:
     108:	00 02       	muls	r16, r16
     10a:	00 00       	nop
     10c:	00 09       	sbc	r16, r0
     10e:	0a 0b       	sbc	r16, r26
     110:	00 00       	nop
     112:	00 00       	nop
     114:	00 00       	nop
     116:	00 0c       	add	r0, r0
     118:	0d 0e       	add	r0, r29
     11a:	08 00       	.word	0x0008	; ????
     11c:	00 00       	nop
     11e:	00 07       	cpc	r16, r16
     120:	03 04       	cpc	r0, r3
     122:	01 00       	.word	0x0001	; ????
	...
     12c:	00 00       	nop
     12e:	10 11       	cpse	r17, r0
     130:	12 00       	.word	0x0012	; ????
	...

0000016d <pin_to_bit_mask_PGM>:
     16d:	00 20 01 02 04 08 10 20 40 80 00 00 01 02 04 08     . ..... @.......
     17d:	10 20 40 01 02 04 08 10 20 40 80 80 08 10 00 00     . @..... @......
     18d:	00 00 00 01 02 04 08 10 20 40 80 01 02 04 08 10     ........ @......
     19d:	20 40 80 01 02 01 02 04 08 10 20 40 80 00 00 01      @........ @....
     1ad:	02 04 08 10 20 40 04 80 40 20 10 08 04 02 01 80     .... @..@ ......
     1bd:	00 00 80 40 20 10 08 04 02 01 80 40 20 10 08 04     ...@ ......@ ...
     1cd:	02 01 00 00 00                                      .....

000001d2 <pin_to_port_PGM>:
     1d2:	00 07 05 05 05 05 05 05 05 05 00 00 08 08 08 08     ................
     1e2:	08 08 08 02 02 02 02 02 02 02 02 08 07 07 00 00     ................
     1f2:	00 00 00 0c 0c 0c 0c 0c 0c 0c 0c 04 04 04 04 04     ................
     202:	04 04 04 07 07 03 03 03 03 03 03 03 03 00 00 0a     ................
     212:	0a 0a 0a 0a 0a 0a 07 01 01 01 01 01 01 01 01 0a     ................
     222:	00 00 0b 0b 0b 0b 0b 0b 0b 0b 06 06 06 06 06 06     ................
     232:	06 06 00 00 00                                      .....

00000237 <port_to_output_PGM>:
     237:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     247:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000251 <port_to_ddr_PGM>:
     251:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     261:	01 01 00 00 04 01 07 01 0a 01                       ..........

0000026b <tone_pin_to_timer_PGM>:
     26b:	03                                                  .

0000026c <__ctors_end>:
     26c:	11 24       	eor	r1, r1
     26e:	1f be       	out	0x3f, r1	; 63
     270:	cf ef       	ldi	r28, 0xFF	; 255
     272:	d1 e2       	ldi	r29, 0x21	; 33
     274:	de bf       	out	0x3e, r29	; 62
     276:	cd bf       	out	0x3d, r28	; 61
     278:	00 e0       	ldi	r16, 0x00	; 0
     27a:	0c bf       	out	0x3c, r16	; 60

0000027c <__do_copy_data>:
     27c:	12 e0       	ldi	r17, 0x02	; 2
     27e:	a0 e0       	ldi	r26, 0x00	; 0
     280:	b2 e0       	ldi	r27, 0x02	; 2
     282:	e8 ee       	ldi	r30, 0xE8	; 232
     284:	f5 e1       	ldi	r31, 0x15	; 21
     286:	00 e0       	ldi	r16, 0x00	; 0
     288:	0b bf       	out	0x3b, r16	; 59
     28a:	02 c0       	rjmp	.+4      	; 0x290 <__do_copy_data+0x14>
     28c:	07 90       	elpm	r0, Z+
     28e:	0d 92       	st	X+, r0
     290:	a2 33       	cpi	r26, 0x32	; 50
     292:	b1 07       	cpc	r27, r17
     294:	d9 f7       	brne	.-10     	; 0x28c <__do_copy_data+0x10>

00000296 <__do_clear_bss>:
     296:	22 e0       	ldi	r18, 0x02	; 2
     298:	a2 e3       	ldi	r26, 0x32	; 50
     29a:	b2 e0       	ldi	r27, 0x02	; 2
     29c:	01 c0       	rjmp	.+2      	; 0x2a0 <.do_clear_bss_start>

0000029e <.do_clear_bss_loop>:
     29e:	1d 92       	st	X+, r1

000002a0 <.do_clear_bss_start>:
     2a0:	a6 37       	cpi	r26, 0x76	; 118
     2a2:	b2 07       	cpc	r27, r18
     2a4:	e1 f7       	brne	.-8      	; 0x29e <.do_clear_bss_loop>
     2a6:	c0 d7       	rcall	.+3968   	; 0x1228 <main>
     2a8:	0c 94 f2 0a 	jmp	0x15e4	; 0x15e4 <_exit>

000002ac <__bad_interrupt>:
     2ac:	a9 ce       	rjmp	.-686    	; 0x0 <__vectors>

000002ae <pulseEnable>:
	location &= 0x7; // we only have 8 locations 0-7
	command(LCD_SETCGRAMADDR | (location << 3));
	for (int i=0; i<8; i++) {
		write(charmap[i]);
	}
}
     2ae:	15 98       	cbi	0x02, 5	; 2
     2b0:	85 e0       	ldi	r24, 0x05	; 5
     2b2:	8a 95       	dec	r24
     2b4:	f1 f7       	brne	.-4      	; 0x2b2 <pulseEnable+0x4>
     2b6:	00 00       	nop
     2b8:	15 9a       	sbi	0x02, 5	; 2
     2ba:	95 e0       	ldi	r25, 0x05	; 5
     2bc:	9a 95       	dec	r25
     2be:	f1 f7       	brne	.-4      	; 0x2bc <pulseEnable+0xe>
     2c0:	00 00       	nop
     2c2:	15 98       	cbi	0x02, 5	; 2
     2c4:	8f e8       	ldi	r24, 0x8F	; 143
     2c6:	91 e0       	ldi	r25, 0x01	; 1
     2c8:	01 97       	sbiw	r24, 0x01	; 1
     2ca:	f1 f7       	brne	.-4      	; 0x2c8 <pulseEnable+0x1a>
     2cc:	00 c0       	rjmp	.+0      	; 0x2ce <pulseEnable+0x20>
     2ce:	00 00       	nop
     2d0:	08 95       	ret

000002d2 <write4bits>:
     2d2:	cf 93       	push	r28
     2d4:	df 93       	push	r29
     2d6:	e1 e4       	ldi	r30, 0x41	; 65
     2d8:	f2 e0       	ldi	r31, 0x02	; 2
     2da:	20 e0       	ldi	r18, 0x00	; 0
     2dc:	30 e0       	ldi	r19, 0x00	; 0
     2de:	a8 2f       	mov	r26, r24
     2e0:	b0 e0       	ldi	r27, 0x00	; 0
     2e2:	c1 e0       	ldi	r28, 0x01	; 1
     2e4:	d0 e0       	ldi	r29, 0x00	; 0
     2e6:	ad 01       	movw	r20, r26
     2e8:	02 2e       	mov	r0, r18
     2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <write4bits+0x1e>
     2ec:	55 95       	asr	r21
     2ee:	47 95       	ror	r20
     2f0:	0a 94       	dec	r0
     2f2:	e2 f7       	brpl	.-8      	; 0x2ec <write4bits+0x1a>
     2f4:	40 ff       	sbrs	r20, 0
     2f6:	0b c0       	rjmp	.+22     	; 0x30e <write4bits+0x3c>
     2f8:	82 b1       	in	r24, 0x02	; 2
     2fa:	ae 01       	movw	r20, r28
     2fc:	00 80       	ld	r0, Z
     2fe:	02 c0       	rjmp	.+4      	; 0x304 <write4bits+0x32>
     300:	44 0f       	add	r20, r20
     302:	55 1f       	adc	r21, r21
     304:	0a 94       	dec	r0
     306:	e2 f7       	brpl	.-8      	; 0x300 <write4bits+0x2e>
     308:	48 2b       	or	r20, r24
     30a:	42 b9       	out	0x02, r20	; 2
     30c:	0c c0       	rjmp	.+24     	; 0x326 <write4bits+0x54>
     30e:	42 b1       	in	r20, 0x02	; 2
     310:	be 01       	movw	r22, r28
     312:	00 80       	ld	r0, Z
     314:	02 c0       	rjmp	.+4      	; 0x31a <write4bits+0x48>
     316:	66 0f       	add	r22, r22
     318:	77 1f       	adc	r23, r23
     31a:	0a 94       	dec	r0
     31c:	e2 f7       	brpl	.-8      	; 0x316 <write4bits+0x44>
     31e:	96 2f       	mov	r25, r22
     320:	90 95       	com	r25
     322:	94 23       	and	r25, r20
     324:	92 b9       	out	0x02, r25	; 2
     326:	2f 5f       	subi	r18, 0xFF	; 255
     328:	3f 4f       	sbci	r19, 0xFF	; 255
     32a:	31 96       	adiw	r30, 0x01	; 1
     32c:	24 30       	cpi	r18, 0x04	; 4
     32e:	31 05       	cpc	r19, r1
     330:	d1 f6       	brne	.-76     	; 0x2e6 <write4bits+0x14>
     332:	bd df       	rcall	.-134    	; 0x2ae <pulseEnable>
     334:	df 91       	pop	r29
     336:	cf 91       	pop	r28
     338:	08 95       	ret

0000033a <write8bits>:
     33a:	86 95       	lsr	r24
     33c:	81 70       	andi	r24, 0x01	; 1
     33e:	e1 e4       	ldi	r30, 0x41	; 65
     340:	f2 e0       	ldi	r31, 0x02	; 2
     342:	69 e4       	ldi	r22, 0x49	; 73
     344:	72 e0       	ldi	r23, 0x02	; 2
     346:	a1 e0       	ldi	r26, 0x01	; 1
     348:	b0 e0       	ldi	r27, 0x00	; 0
     34a:	88 23       	and	r24, r24
     34c:	59 f0       	breq	.+22     	; 0x364 <write8bits+0x2a>
     34e:	92 b1       	in	r25, 0x02	; 2
     350:	9d 01       	movw	r18, r26
     352:	00 80       	ld	r0, Z
     354:	02 c0       	rjmp	.+4      	; 0x35a <write8bits+0x20>
     356:	22 0f       	add	r18, r18
     358:	33 1f       	adc	r19, r19
     35a:	0a 94       	dec	r0
     35c:	e2 f7       	brpl	.-8      	; 0x356 <write8bits+0x1c>
     35e:	29 2b       	or	r18, r25
     360:	22 b9       	out	0x02, r18	; 2
     362:	0c c0       	rjmp	.+24     	; 0x37c <write8bits+0x42>
     364:	22 b1       	in	r18, 0x02	; 2
     366:	ad 01       	movw	r20, r26
     368:	00 80       	ld	r0, Z
     36a:	02 c0       	rjmp	.+4      	; 0x370 <write8bits+0x36>
     36c:	44 0f       	add	r20, r20
     36e:	55 1f       	adc	r21, r21
     370:	0a 94       	dec	r0
     372:	e2 f7       	brpl	.-8      	; 0x36c <write8bits+0x32>
     374:	94 2f       	mov	r25, r20
     376:	90 95       	com	r25
     378:	92 23       	and	r25, r18
     37a:	92 b9       	out	0x02, r25	; 2
     37c:	31 96       	adiw	r30, 0x01	; 1
     37e:	e6 17       	cp	r30, r22
     380:	f7 07       	cpc	r31, r23
     382:	19 f7       	brne	.-58     	; 0x34a <write8bits+0x10>
     384:	94 cf       	rjmp	.-216    	; 0x2ae <pulseEnable>
     386:	08 95       	ret

00000388 <send>:
     388:	cf 93       	push	r28
     38a:	c8 2f       	mov	r28, r24
     38c:	66 23       	and	r22, r22
     38e:	11 f0       	breq	.+4      	; 0x394 <send+0xc>
     390:	17 9a       	sbi	0x02, 7	; 2
     392:	01 c0       	rjmp	.+2      	; 0x396 <send+0xe>
     394:	17 98       	cbi	0x02, 7	; 2
     396:	16 98       	cbi	0x02, 6	; 2
     398:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <_displayfunction>
     39c:	84 ff       	sbrs	r24, 4
     39e:	03 c0       	rjmp	.+6      	; 0x3a6 <send+0x1e>
     3a0:	8c 2f       	mov	r24, r28
     3a2:	cb df       	rcall	.-106    	; 0x33a <write8bits>
     3a4:	06 c0       	rjmp	.+12     	; 0x3b2 <send+0x2a>
     3a6:	8c 2f       	mov	r24, r28
     3a8:	82 95       	swap	r24
     3aa:	8f 70       	andi	r24, 0x0F	; 15
     3ac:	92 df       	rcall	.-220    	; 0x2d2 <write4bits>
     3ae:	8c 2f       	mov	r24, r28
     3b0:	90 df       	rcall	.-224    	; 0x2d2 <write4bits>
     3b2:	cf 91       	pop	r28
     3b4:	08 95       	ret

000003b6 <command>:
     3b6:	60 e0       	ldi	r22, 0x00	; 0
     3b8:	e7 cf       	rjmp	.-50     	; 0x388 <send>
     3ba:	08 95       	ret

000003bc <lcd_clear>:
     3bc:	81 e0       	ldi	r24, 0x01	; 1
     3be:	fb df       	rcall	.-10     	; 0x3b6 <command>
     3c0:	8f e3       	ldi	r24, 0x3F	; 63
     3c2:	9f e1       	ldi	r25, 0x1F	; 31
     3c4:	01 97       	sbiw	r24, 0x01	; 1
     3c6:	f1 f7       	brne	.-4      	; 0x3c4 <lcd_clear+0x8>
     3c8:	00 c0       	rjmp	.+0      	; 0x3ca <lcd_clear+0xe>
     3ca:	00 00       	nop
     3cc:	08 95       	ret

000003ce <lcd_setCursor>:
     3ce:	eb e3       	ldi	r30, 0x3B	; 59
     3d0:	f2 e0       	ldi	r31, 0x02	; 2
     3d2:	10 82       	st	Z, r1
     3d4:	90 e4       	ldi	r25, 0x40	; 64
     3d6:	91 83       	std	Z+1, r25	; 0x01
     3d8:	94 e1       	ldi	r25, 0x14	; 20
     3da:	92 83       	std	Z+2, r25	; 0x02
     3dc:	94 e5       	ldi	r25, 0x54	; 84
     3de:	93 83       	std	Z+3, r25	; 0x03
     3e0:	64 30       	cpi	r22, 0x04	; 4
     3e2:	08 f0       	brcs	.+2      	; 0x3e6 <lcd_setCursor+0x18>
     3e4:	63 e0       	ldi	r22, 0x03	; 3
     3e6:	90 91 40 02 	lds	r25, 0x0240	; 0x800240 <_numlines>
     3ea:	69 17       	cp	r22, r25
     3ec:	10 f0       	brcs	.+4      	; 0x3f2 <lcd_setCursor+0x24>
     3ee:	6f ef       	ldi	r22, 0xFF	; 255
     3f0:	69 0f       	add	r22, r25
     3f2:	e6 2f       	mov	r30, r22
     3f4:	f0 e0       	ldi	r31, 0x00	; 0
     3f6:	e5 5c       	subi	r30, 0xC5	; 197
     3f8:	fd 4f       	sbci	r31, 0xFD	; 253
     3fa:	90 81       	ld	r25, Z
     3fc:	89 0f       	add	r24, r25
     3fe:	80 68       	ori	r24, 0x80	; 128
     400:	da cf       	rjmp	.-76     	; 0x3b6 <command>
     402:	08 95       	ret

00000404 <lcd_display_on>:
     404:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <_displaycontrol>
     408:	98 2f       	mov	r25, r24
     40a:	94 60       	ori	r25, 0x04	; 4
     40c:	90 93 3f 02 	sts	0x023F, r25	; 0x80023f <_displaycontrol>
     410:	8c 60       	ori	r24, 0x0C	; 12
     412:	d1 cf       	rjmp	.-94     	; 0x3b6 <command>
     414:	08 95       	ret

00000416 <lcd_init>:
     416:	cf 93       	push	r28
     418:	e1 e4       	ldi	r30, 0x41	; 65
     41a:	f2 e0       	ldi	r31, 0x02	; 2
     41c:	83 e0       	ldi	r24, 0x03	; 3
     41e:	80 83       	st	Z, r24
     420:	82 e0       	ldi	r24, 0x02	; 2
     422:	81 83       	std	Z+1, r24	; 0x01
     424:	91 e0       	ldi	r25, 0x01	; 1
     426:	92 83       	std	Z+2, r25	; 0x02
     428:	13 82       	std	Z+3, r1	; 0x03
     42a:	14 82       	std	Z+4, r1	; 0x04
     42c:	15 82       	std	Z+5, r1	; 0x05
     42e:	16 82       	std	Z+6, r1	; 0x06
     430:	17 82       	std	Z+7, r1	; 0x07
     432:	98 e0       	ldi	r25, 0x08	; 8
     434:	90 93 4a 02 	sts	0x024A, r25	; 0x80024a <_displayfunction>
     438:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <_numlines>
     43c:	0f 9a       	sbi	0x01, 7	; 1
     43e:	0e 9a       	sbi	0x01, 6	; 1
     440:	0d 9a       	sbi	0x01, 5	; 1
     442:	0c 9a       	sbi	0x01, 4	; 1
     444:	14 9a       	sbi	0x02, 4	; 2
     446:	20 e0       	ldi	r18, 0x00	; 0
     448:	30 e0       	ldi	r19, 0x00	; 0
     44a:	c8 e0       	ldi	r28, 0x08	; 8
     44c:	b0 e0       	ldi	r27, 0x00	; 0
     44e:	a4 e0       	ldi	r26, 0x04	; 4
     450:	50 e0       	ldi	r21, 0x00	; 0
     452:	61 e0       	ldi	r22, 0x01	; 1
     454:	70 e0       	ldi	r23, 0x00	; 0
     456:	0c c0       	rjmp	.+24     	; 0x470 <lcd_init+0x5a>
     458:	41 b1       	in	r20, 0x01	; 1
     45a:	cb 01       	movw	r24, r22
     45c:	01 90       	ld	r0, Z+
     45e:	02 c0       	rjmp	.+4      	; 0x464 <lcd_init+0x4e>
     460:	88 0f       	add	r24, r24
     462:	99 1f       	adc	r25, r25
     464:	0a 94       	dec	r0
     466:	e2 f7       	brpl	.-8      	; 0x460 <lcd_init+0x4a>
     468:	84 2b       	or	r24, r20
     46a:	81 b9       	out	0x01, r24	; 1
     46c:	2f 5f       	subi	r18, 0xFF	; 255
     46e:	3f 4f       	sbci	r19, 0xFF	; 255
     470:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <_displayfunction>
     474:	84 fd       	sbrc	r24, 4
     476:	03 c0       	rjmp	.+6      	; 0x47e <lcd_init+0x68>
     478:	8a 2f       	mov	r24, r26
     47a:	95 2f       	mov	r25, r21
     47c:	02 c0       	rjmp	.+4      	; 0x482 <lcd_init+0x6c>
     47e:	8c 2f       	mov	r24, r28
     480:	9b 2f       	mov	r25, r27
     482:	28 17       	cp	r18, r24
     484:	39 07       	cpc	r19, r25
     486:	44 f3       	brlt	.-48     	; 0x458 <lcd_init+0x42>
     488:	2f ef       	ldi	r18, 0xFF	; 255
     48a:	80 e7       	ldi	r24, 0x70	; 112
     48c:	92 e0       	ldi	r25, 0x02	; 2
     48e:	21 50       	subi	r18, 0x01	; 1
     490:	80 40       	sbci	r24, 0x00	; 0
     492:	90 40       	sbci	r25, 0x00	; 0
     494:	e1 f7       	brne	.-8      	; 0x48e <lcd_init+0x78>
     496:	00 c0       	rjmp	.+0      	; 0x498 <lcd_init+0x82>
     498:	00 00       	nop
     49a:	17 98       	cbi	0x02, 7	; 2
     49c:	15 98       	cbi	0x02, 5	; 2
     49e:	16 98       	cbi	0x02, 6	; 2
     4a0:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <_displayfunction>
     4a4:	84 fd       	sbrc	r24, 4
     4a6:	1b c0       	rjmp	.+54     	; 0x4de <lcd_init+0xc8>
     4a8:	83 e0       	ldi	r24, 0x03	; 3
     4aa:	13 df       	rcall	.-474    	; 0x2d2 <write4bits>
     4ac:	8f e4       	ldi	r24, 0x4F	; 79
     4ae:	96 e4       	ldi	r25, 0x46	; 70
     4b0:	01 97       	sbiw	r24, 0x01	; 1
     4b2:	f1 f7       	brne	.-4      	; 0x4b0 <lcd_init+0x9a>
     4b4:	00 c0       	rjmp	.+0      	; 0x4b6 <lcd_init+0xa0>
     4b6:	00 00       	nop
     4b8:	83 e0       	ldi	r24, 0x03	; 3
     4ba:	0b df       	rcall	.-490    	; 0x2d2 <write4bits>
     4bc:	8f e4       	ldi	r24, 0x4F	; 79
     4be:	96 e4       	ldi	r25, 0x46	; 70
     4c0:	01 97       	sbiw	r24, 0x01	; 1
     4c2:	f1 f7       	brne	.-4      	; 0x4c0 <lcd_init+0xaa>
     4c4:	00 c0       	rjmp	.+0      	; 0x4c6 <lcd_init+0xb0>
     4c6:	00 00       	nop
     4c8:	83 e0       	ldi	r24, 0x03	; 3
     4ca:	03 df       	rcall	.-506    	; 0x2d2 <write4bits>
     4cc:	87 e5       	ldi	r24, 0x57	; 87
     4ce:	92 e0       	ldi	r25, 0x02	; 2
     4d0:	01 97       	sbiw	r24, 0x01	; 1
     4d2:	f1 f7       	brne	.-4      	; 0x4d0 <lcd_init+0xba>
     4d4:	00 c0       	rjmp	.+0      	; 0x4d6 <lcd_init+0xc0>
     4d6:	00 00       	nop
     4d8:	82 e0       	ldi	r24, 0x02	; 2
     4da:	fb de       	rcall	.-522    	; 0x2d2 <write4bits>
     4dc:	16 c0       	rjmp	.+44     	; 0x50a <lcd_init+0xf4>
     4de:	80 62       	ori	r24, 0x20	; 32
     4e0:	6a df       	rcall	.-300    	; 0x3b6 <command>
     4e2:	8f e4       	ldi	r24, 0x4F	; 79
     4e4:	96 e4       	ldi	r25, 0x46	; 70
     4e6:	01 97       	sbiw	r24, 0x01	; 1
     4e8:	f1 f7       	brne	.-4      	; 0x4e6 <lcd_init+0xd0>
     4ea:	00 c0       	rjmp	.+0      	; 0x4ec <lcd_init+0xd6>
     4ec:	00 00       	nop
     4ee:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <_displayfunction>
     4f2:	80 62       	ori	r24, 0x20	; 32
     4f4:	60 df       	rcall	.-320    	; 0x3b6 <command>
     4f6:	87 e5       	ldi	r24, 0x57	; 87
     4f8:	92 e0       	ldi	r25, 0x02	; 2
     4fa:	01 97       	sbiw	r24, 0x01	; 1
     4fc:	f1 f7       	brne	.-4      	; 0x4fa <lcd_init+0xe4>
     4fe:	00 c0       	rjmp	.+0      	; 0x500 <lcd_init+0xea>
     500:	00 00       	nop
     502:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <_displayfunction>
     506:	80 62       	ori	r24, 0x20	; 32
     508:	56 df       	rcall	.-340    	; 0x3b6 <command>
     50a:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <_displayfunction>
     50e:	80 62       	ori	r24, 0x20	; 32
     510:	52 df       	rcall	.-348    	; 0x3b6 <command>
     512:	84 e0       	ldi	r24, 0x04	; 4
     514:	80 93 3f 02 	sts	0x023F, r24	; 0x80023f <_displaycontrol>
     518:	75 df       	rcall	.-278    	; 0x404 <lcd_display_on>
     51a:	50 df       	rcall	.-352    	; 0x3bc <lcd_clear>
     51c:	82 e0       	ldi	r24, 0x02	; 2
     51e:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <_displaymode>
     522:	86 e0       	ldi	r24, 0x06	; 6
     524:	48 df       	rcall	.-368    	; 0x3b6 <command>
     526:	cf 91       	pop	r28
     528:	08 95       	ret

0000052a <write>:
     52a:	61 e0       	ldi	r22, 0x01	; 1
     52c:	2d df       	rcall	.-422    	; 0x388 <send>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	08 95       	ret

00000532 <lcd_puts>:
	}
	pulseEnable();
}

//------Print------------
void lcd_puts(char *string) {
     532:	cf 93       	push	r28
     534:	df 93       	push	r29
     536:	ec 01       	movw	r28, r24
	for (char *it = string; *it; it++) {
     538:	88 81       	ld	r24, Y
     53a:	88 23       	and	r24, r24
     53c:	29 f0       	breq	.+10     	; 0x548 <lcd_puts+0x16>
     53e:	21 96       	adiw	r28, 0x01	; 1
		write(*it);
     540:	f4 df       	rcall	.-24     	; 0x52a <write>
	pulseEnable();
}

//------Print------------
void lcd_puts(char *string) {
	for (char *it = string; *it; it++) {
     542:	89 91       	ld	r24, Y+
     544:	81 11       	cpse	r24, r1
     546:	fc cf       	rjmp	.-8      	; 0x540 <lcd_puts+0xe>
		write(*it);
	}
}
     548:	df 91       	pop	r29
     54a:	cf 91       	pop	r28
     54c:	08 95       	ret

0000054e <LCD_PrintString>:

void LCD_PrintString(char *string, uint8_t x, uint8_t y)
{
     54e:	cf 93       	push	r28
     550:	df 93       	push	r29
     552:	ec 01       	movw	r28, r24
     554:	86 2f       	mov	r24, r22
	lcd_setCursor(x,y);
     556:	64 2f       	mov	r22, r20
     558:	3a df       	rcall	.-396    	; 0x3ce <lcd_setCursor>
	lcd_puts(string);
     55a:	ce 01       	movw	r24, r28
     55c:	ea df       	rcall	.-44     	; 0x532 <lcd_puts>
}
     55e:	df 91       	pop	r29
     560:	cf 91       	pop	r28
     562:	08 95       	ret

00000564 <pinMode>:
 */ 
#include "tk2560.h"


void pinMode(uint8_t pin, uint8_t mode)
{
     564:	cf 93       	push	r28
     566:	df 93       	push	r29
	uint8_t bit = pinToBitMask(pin);
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	fc 01       	movw	r30, r24
     56c:	e3 59       	subi	r30, 0x93	; 147
     56e:	fe 4f       	sbci	r31, 0xFE	; 254
     570:	24 91       	lpm	r18, Z
	uint8_t port = pinToPort(pin);
     572:	fc 01       	movw	r30, r24
     574:	ee 52       	subi	r30, 0x2E	; 46
     576:	fe 4f       	sbci	r31, 0xFE	; 254
     578:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;
	
	if (port == NOT_A_PIN) return;
     57a:	88 23       	and	r24, r24
     57c:	79 f1       	breq	.+94     	; 0x5dc <pinMode+0x78>
	
	reg = portDDRRegister(port);
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	88 0f       	add	r24, r24
     582:	99 1f       	adc	r25, r25
     584:	fc 01       	movw	r30, r24
     586:	ef 5a       	subi	r30, 0xAF	; 175
     588:	fd 4f       	sbci	r31, 0xFD	; 253
     58a:	a5 91       	lpm	r26, Z+
     58c:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
     58e:	fc 01       	movw	r30, r24
     590:	e9 5c       	subi	r30, 0xC9	; 201
     592:	fd 4f       	sbci	r31, 0xFD	; 253
     594:	c5 91       	lpm	r28, Z+
     596:	d4 91       	lpm	r29, Z
	
	if (mode == INPUT)
     598:	61 11       	cpse	r22, r1
     59a:	0c c0       	rjmp	.+24     	; 0x5b4 <pinMode+0x50>
	{
		uint8_t oldSREG = SREG;
     59c:	9f b7       	in	r25, 0x3f	; 63
		cli();
     59e:	f8 94       	cli
		*reg &= ~bit;
     5a0:	8c 91       	ld	r24, X
     5a2:	e2 2f       	mov	r30, r18
     5a4:	e0 95       	com	r30
     5a6:	8e 23       	and	r24, r30
     5a8:	8c 93       	st	X, r24
		*out &= ~bit;
     5aa:	28 81       	ld	r18, Y
     5ac:	e2 23       	and	r30, r18
     5ae:	e8 83       	st	Y, r30
		SREG = oldSREG;
     5b0:	9f bf       	out	0x3f, r25	; 63
     5b2:	14 c0       	rjmp	.+40     	; 0x5dc <pinMode+0x78>
	}else if(mode == INPUT_PULLUP)
     5b4:	62 30       	cpi	r22, 0x02	; 2
     5b6:	61 f4       	brne	.+24     	; 0x5d0 <pinMode+0x6c>
	{
		uint8_t oldSREG = SREG;
     5b8:	9f b7       	in	r25, 0x3f	; 63
		cli();
     5ba:	f8 94       	cli
		*reg &= ~bit;
     5bc:	8c 91       	ld	r24, X
     5be:	32 2f       	mov	r19, r18
     5c0:	30 95       	com	r19
     5c2:	83 23       	and	r24, r19
     5c4:	8c 93       	st	X, r24
		*out |= bit;
     5c6:	e8 81       	ld	r30, Y
     5c8:	e2 2b       	or	r30, r18
     5ca:	e8 83       	st	Y, r30
		SREG = oldSREG;
     5cc:	9f bf       	out	0x3f, r25	; 63
     5ce:	06 c0       	rjmp	.+12     	; 0x5dc <pinMode+0x78>
	}else{
		//output
		uint8_t oldSREG = SREG;
     5d0:	8f b7       	in	r24, 0x3f	; 63
		cli();
     5d2:	f8 94       	cli
		*reg |= bit;
     5d4:	ec 91       	ld	r30, X
     5d6:	e2 2b       	or	r30, r18
     5d8:	ec 93       	st	X, r30
		SREG = oldSREG;
     5da:	8f bf       	out	0x3f, r24	; 63
	}
		
}
     5dc:	df 91       	pop	r29
     5de:	cf 91       	pop	r28
     5e0:	08 95       	ret

000005e2 <digitalWrite>:

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t bit = pinToBitMask(pin);
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	fc 01       	movw	r30, r24
     5e6:	e3 59       	subi	r30, 0x93	; 147
     5e8:	fe 4f       	sbci	r31, 0xFE	; 254
     5ea:	24 91       	lpm	r18, Z
	uint8_t port = pinToPort(pin);
     5ec:	fc 01       	movw	r30, r24
     5ee:	ee 52       	subi	r30, 0x2E	; 46
     5f0:	fe 4f       	sbci	r31, 0xFE	; 254
     5f2:	84 91       	lpm	r24, Z
	volatile uint8_t *out;
	
	if (port == NOT_A_PIN) return;
     5f4:	88 23       	and	r24, r24
     5f6:	b1 f0       	breq	.+44     	; 0x624 <digitalWrite+0x42>
	
	out = portOutputRegister(port);
     5f8:	e8 2f       	mov	r30, r24
     5fa:	f0 e0       	ldi	r31, 0x00	; 0
     5fc:	ee 0f       	add	r30, r30
     5fe:	ff 1f       	adc	r31, r31
     600:	e9 5c       	subi	r30, 0xC9	; 201
     602:	fd 4f       	sbci	r31, 0xFD	; 253
     604:	a5 91       	lpm	r26, Z+
     606:	b4 91       	lpm	r27, Z
	
	uint8_t oldSREG = SREG;
     608:	8f b7       	in	r24, 0x3f	; 63
	cli();
     60a:	f8 94       	cli
	
	if (val == LOW) {
     60c:	61 11       	cpse	r22, r1
     60e:	06 c0       	rjmp	.+12     	; 0x61c <digitalWrite+0x3a>
		*out &= ~bit;
     610:	9c 91       	ld	r25, X
     612:	e2 2f       	mov	r30, r18
     614:	e0 95       	com	r30
     616:	e9 23       	and	r30, r25
     618:	ec 93       	st	X, r30
     61a:	03 c0       	rjmp	.+6      	; 0x622 <digitalWrite+0x40>
	} else {
		*out |= bit;
     61c:	ec 91       	ld	r30, X
     61e:	e2 2b       	or	r30, r18
     620:	ec 93       	st	X, r30
	}
	
	SREG = oldSREG;
     622:	8f bf       	out	0x3f, r24	; 63
     624:	08 95       	ret

00000626 <togglePin>:
	
}

void togglePin(uint8_t pin)
{
	uint8_t bit = pinToBitMask(pin);
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	fc 01       	movw	r30, r24
     62a:	e3 59       	subi	r30, 0x93	; 147
     62c:	fe 4f       	sbci	r31, 0xFE	; 254
     62e:	24 91       	lpm	r18, Z
	uint8_t port = pinToPort(pin);
     630:	fc 01       	movw	r30, r24
     632:	ee 52       	subi	r30, 0x2E	; 46
     634:	fe 4f       	sbci	r31, 0xFE	; 254
     636:	84 91       	lpm	r24, Z
	volatile uint8_t *out;
	
	if (port == NOT_A_PIN) return;
     638:	88 23       	and	r24, r24
     63a:	71 f0       	breq	.+28     	; 0x658 <togglePin+0x32>
	
	out = portOutputRegister(port);
     63c:	e8 2f       	mov	r30, r24
     63e:	f0 e0       	ldi	r31, 0x00	; 0
     640:	ee 0f       	add	r30, r30
     642:	ff 1f       	adc	r31, r31
     644:	e9 5c       	subi	r30, 0xC9	; 201
     646:	fd 4f       	sbci	r31, 0xFD	; 253
     648:	a5 91       	lpm	r26, Z+
     64a:	b4 91       	lpm	r27, Z
	
	uint8_t oldSREG = SREG;
     64c:	8f b7       	in	r24, 0x3f	; 63
	cli();
     64e:	f8 94       	cli
	
	//toggle
	*out ^= bit;
     650:	ec 91       	ld	r30, X
     652:	e2 27       	eor	r30, r18
     654:	ec 93       	st	X, r30
	
	SREG = oldSREG;
     656:	8f bf       	out	0x3f, r24	; 63
     658:	08 95       	ret

0000065a <pwm_init>:
*/

void pwm_init(void)
{
	// Configure Timer1
	TCCR1B = 0;
     65a:	e1 e8       	ldi	r30, 0x81	; 129
     65c:	f0 e0       	ldi	r31, 0x00	; 0
     65e:	10 82       	st	Z, r1
	bitSet(TCCR1B, CS11); 
     660:	80 81       	ld	r24, Z
     662:	82 60       	ori	r24, 0x02	; 2
     664:	80 83       	st	Z, r24
	bitSet(TCCR1B, CS10);	// set clk/64 prescaler
     666:	80 81       	ld	r24, Z
     668:	81 60       	ori	r24, 0x01	; 1
     66a:	80 83       	st	Z, r24
	bitSet(TCCR1A, WGM10);	// PWM, Phase Correct, 8-bit
     66c:	e0 e8       	ldi	r30, 0x80	; 128
     66e:	f0 e0       	ldi	r31, 0x00	; 0
     670:	80 81       	ld	r24, Z
     672:	81 60       	ori	r24, 0x01	; 1
     674:	80 83       	st	Z, r24
	
	// Configure Timer2
	bitSet(TCCR2B, CS22);	// clk/64 prescaler
     676:	e1 eb       	ldi	r30, 0xB1	; 177
     678:	f0 e0       	ldi	r31, 0x00	; 0
     67a:	80 81       	ld	r24, Z
     67c:	84 60       	ori	r24, 0x04	; 4
     67e:	80 83       	st	Z, r24
	bitSet(TCCR2A, WGM20);	// PWM, Phase Correct
     680:	e0 eb       	ldi	r30, 0xB0	; 176
     682:	f0 e0       	ldi	r31, 0x00	; 0
     684:	80 81       	ld	r24, Z
     686:	81 60       	ori	r24, 0x01	; 1
     688:	80 83       	st	Z, r24
	
	// Configure Timer3
	bitSet(TCCR3B, CS31);	
     68a:	e1 e9       	ldi	r30, 0x91	; 145
     68c:	f0 e0       	ldi	r31, 0x00	; 0
     68e:	80 81       	ld	r24, Z
     690:	82 60       	ori	r24, 0x02	; 2
     692:	80 83       	st	Z, r24
	bitSet(TCCR3B, CS30);	// clk/64 prescaler
     694:	80 81       	ld	r24, Z
     696:	81 60       	ori	r24, 0x01	; 1
     698:	80 83       	st	Z, r24
	bitSet(TCCR3A, WGM30);	// PWM, Phase Correct
     69a:	e0 e9       	ldi	r30, 0x90	; 144
     69c:	f0 e0       	ldi	r31, 0x00	; 0
     69e:	80 81       	ld	r24, Z
     6a0:	81 60       	ori	r24, 0x01	; 1
     6a2:	80 83       	st	Z, r24
	
	// Configure Timer4
	bitSet(TCCR4B, CS41);	
     6a4:	e1 ea       	ldi	r30, 0xA1	; 161
     6a6:	f0 e0       	ldi	r31, 0x00	; 0
     6a8:	80 81       	ld	r24, Z
     6aa:	82 60       	ori	r24, 0x02	; 2
     6ac:	80 83       	st	Z, r24
	bitSet(TCCR4B, CS40);	// clk/64 prescaler
     6ae:	80 81       	ld	r24, Z
     6b0:	81 60       	ori	r24, 0x01	; 1
     6b2:	80 83       	st	Z, r24
	bitSet(TCCR4A, WGM40);	// PWM, Phase Correct
     6b4:	e0 ea       	ldi	r30, 0xA0	; 160
     6b6:	f0 e0       	ldi	r31, 0x00	; 0
     6b8:	80 81       	ld	r24, Z
     6ba:	81 60       	ori	r24, 0x01	; 1
     6bc:	80 83       	st	Z, r24
	
	// Configure Timer5
	bitSet(TCCR5B, CS51);
     6be:	e1 e2       	ldi	r30, 0x21	; 33
     6c0:	f1 e0       	ldi	r31, 0x01	; 1
     6c2:	80 81       	ld	r24, Z
     6c4:	82 60       	ori	r24, 0x02	; 2
     6c6:	80 83       	st	Z, r24
	bitSet(TCCR5B, CS50);	// clk/64 prescaler
     6c8:	80 81       	ld	r24, Z
     6ca:	81 60       	ori	r24, 0x01	; 1
     6cc:	80 83       	st	Z, r24
	bitSet(TCCR5A, WGM50);	// PWM, Phase Correct
     6ce:	e0 e2       	ldi	r30, 0x20	; 32
     6d0:	f1 e0       	ldi	r31, 0x01	; 1
     6d2:	80 81       	ld	r24, Z
     6d4:	81 60       	ori	r24, 0x01	; 1
     6d6:	80 83       	st	Z, r24
     6d8:	08 95       	ret

000006da <analogWrite>:
	 
}

// PWM output
void analogWrite(uint8_t pin, int val)
{
     6da:	1f 93       	push	r17
     6dc:	cf 93       	push	r28
     6de:	df 93       	push	r29
     6e0:	18 2f       	mov	r17, r24
     6e2:	eb 01       	movw	r28, r22
	
	pinMode(pin, OUTPUT);
     6e4:	61 e0       	ldi	r22, 0x01	; 1
     6e6:	3e df       	rcall	.-388    	; 0x564 <pinMode>
	if (val == 0)
     6e8:	20 97       	sbiw	r28, 0x00	; 0
     6ea:	21 f4       	brne	.+8      	; 0x6f4 <analogWrite+0x1a>
	{
		digitalWrite(pin, LOW);
     6ec:	60 e0       	ldi	r22, 0x00	; 0
     6ee:	81 2f       	mov	r24, r17
     6f0:	78 df       	rcall	.-272    	; 0x5e2 <digitalWrite>
     6f2:	b5 c0       	rjmp	.+362    	; 0x85e <analogWrite+0x184>
	}
	else if (val == 255)
     6f4:	cf 3f       	cpi	r28, 0xFF	; 255
     6f6:	d1 05       	cpc	r29, r1
     6f8:	21 f4       	brne	.+8      	; 0x702 <analogWrite+0x28>
	{
		digitalWrite(pin, HIGH);
     6fa:	61 e0       	ldi	r22, 0x01	; 1
     6fc:	81 2f       	mov	r24, r17
     6fe:	71 df       	rcall	.-286    	; 0x5e2 <digitalWrite>
     700:	ae c0       	rjmp	.+348    	; 0x85e <analogWrite+0x184>
	}
	else{
		switch(pinToTimer(pin))
     702:	e1 2f       	mov	r30, r17
     704:	f0 e0       	ldi	r31, 0x00	; 0
     706:	e8 5f       	subi	r30, 0xF8	; 248
     708:	fe 4f       	sbci	r31, 0xFE	; 254
     70a:	e4 91       	lpm	r30, Z
     70c:	8e 2f       	mov	r24, r30
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	fc 01       	movw	r30, r24
     712:	31 97       	sbiw	r30, 0x01	; 1
     714:	e2 31       	cpi	r30, 0x12	; 18
     716:	f1 05       	cpc	r31, r1
     718:	08 f0       	brcs	.+2      	; 0x71c <analogWrite+0x42>
     71a:	97 c0       	rjmp	.+302    	; 0x84a <analogWrite+0x170>
     71c:	88 27       	eor	r24, r24
     71e:	ee 58       	subi	r30, 0x8E	; 142
     720:	ff 4f       	sbci	r31, 0xFF	; 255
     722:	8f 4f       	sbci	r24, 0xFF	; 255
     724:	2a c7       	rjmp	.+3668   	; 0x157a <__tablejump2__>
		{
			//Timer 0
			case TIMER0A:
				//connect pwm to pin on timer 0, channel A
				bitSet(TCCR0A, COM0A1); //clear OC0A on compare match
     726:	84 b5       	in	r24, 0x24	; 36
     728:	80 68       	ori	r24, 0x80	; 128
     72a:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; //set pwm duty
     72c:	c7 bd       	out	0x27, r28	; 39
			break;
     72e:	97 c0       	rjmp	.+302    	; 0x85e <analogWrite+0x184>
			
			case TIMER0B:
				//connect pwm to pin on timer 0, channel B
				bitSet(TCCR0B, COM0B1); //clear OC0A on compare match
     730:	85 b5       	in	r24, 0x25	; 37
     732:	80 62       	ori	r24, 0x20	; 32
     734:	85 bd       	out	0x25, r24	; 37
				OCR0B = val; //set pwm duty
     736:	c8 bd       	out	0x28, r28	; 40
			break;
     738:	92 c0       	rjmp	.+292    	; 0x85e <analogWrite+0x184>
			
			//Timer 1
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				bitSet(TCCR1A, COM1A1);
     73a:	e0 e8       	ldi	r30, 0x80	; 128
     73c:	f0 e0       	ldi	r31, 0x00	; 0
     73e:	80 81       	ld	r24, Z
     740:	80 68       	ori	r24, 0x80	; 128
     742:	80 83       	st	Z, r24
				OCR1A = val; // set pwm duty
     744:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
     748:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
			break;
     74c:	88 c0       	rjmp	.+272    	; 0x85e <analogWrite+0x184>
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				bitSet(TCCR1A, COM1B1);
     74e:	e0 e8       	ldi	r30, 0x80	; 128
     750:	f0 e0       	ldi	r31, 0x00	; 0
     752:	80 81       	ld	r24, Z
     754:	80 62       	ori	r24, 0x20	; 32
     756:	80 83       	st	Z, r24
				OCR1B = val; // set pwm duty
     758:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
     75c:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
			break;
     760:	7e c0       	rjmp	.+252    	; 0x85e <analogWrite+0x184>
			case TIMER1C:
				// connect pwm to pin on timer 1, channel C
				bitSet(TCCR1A, COM1C1);
     762:	e0 e8       	ldi	r30, 0x80	; 128
     764:	f0 e0       	ldi	r31, 0x00	; 0
     766:	80 81       	ld	r24, Z
     768:	88 60       	ori	r24, 0x08	; 8
     76a:	80 83       	st	Z, r24
				OCR1C = val; // set pwm duty
     76c:	d0 93 8d 00 	sts	0x008D, r29	; 0x80008d <__TEXT_REGION_LENGTH__+0x70008d>
     770:	c0 93 8c 00 	sts	0x008C, r28	; 0x80008c <__TEXT_REGION_LENGTH__+0x70008c>
			break;
     774:	74 c0       	rjmp	.+232    	; 0x85e <analogWrite+0x184>
			
			//Timer 2
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				bitSet(TCCR2A, COM2A1);
     776:	e0 eb       	ldi	r30, 0xB0	; 176
     778:	f0 e0       	ldi	r31, 0x00	; 0
     77a:	80 81       	ld	r24, Z
     77c:	80 68       	ori	r24, 0x80	; 128
     77e:	80 83       	st	Z, r24
				OCR2A = val; // set pwm duty
     780:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
			break;
     784:	6c c0       	rjmp	.+216    	; 0x85e <analogWrite+0x184>
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				bitSet(TCCR2A, COM2B1);
     786:	e0 eb       	ldi	r30, 0xB0	; 176
     788:	f0 e0       	ldi	r31, 0x00	; 0
     78a:	80 81       	ld	r24, Z
     78c:	80 62       	ori	r24, 0x20	; 32
     78e:	80 83       	st	Z, r24
				OCR2B = val; // set pwm duty
     790:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7000b4>
			break;
     794:	64 c0       	rjmp	.+200    	; 0x85e <analogWrite+0x184>
			
			//Timer 3
			case TIMER3A:
				// connect pwm to pin on timer 3, channel A
				bitSet(TCCR3A, COM3A1);
     796:	e0 e9       	ldi	r30, 0x90	; 144
     798:	f0 e0       	ldi	r31, 0x00	; 0
     79a:	80 81       	ld	r24, Z
     79c:	80 68       	ori	r24, 0x80	; 128
     79e:	80 83       	st	Z, r24
				OCR3A = val; // set pwm duty
     7a0:	d0 93 99 00 	sts	0x0099, r29	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
     7a4:	c0 93 98 00 	sts	0x0098, r28	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
			break;
     7a8:	5a c0       	rjmp	.+180    	; 0x85e <analogWrite+0x184>
			case TIMER3B:
				// connect pwm to pin on timer 3, channel B
				bitSet(TCCR3A, COM3B1);
     7aa:	e0 e9       	ldi	r30, 0x90	; 144
     7ac:	f0 e0       	ldi	r31, 0x00	; 0
     7ae:	80 81       	ld	r24, Z
     7b0:	80 62       	ori	r24, 0x20	; 32
     7b2:	80 83       	st	Z, r24
				OCR3B = val; // set pwm duty
     7b4:	d0 93 9b 00 	sts	0x009B, r29	; 0x80009b <__TEXT_REGION_LENGTH__+0x70009b>
     7b8:	c0 93 9a 00 	sts	0x009A, r28	; 0x80009a <__TEXT_REGION_LENGTH__+0x70009a>
			break;
     7bc:	50 c0       	rjmp	.+160    	; 0x85e <analogWrite+0x184>
			case TIMER3C:
				// connect pwm to pin on timer 3, channel C
				bitSet(TCCR3A, COM3C1);
     7be:	e0 e9       	ldi	r30, 0x90	; 144
     7c0:	f0 e0       	ldi	r31, 0x00	; 0
     7c2:	80 81       	ld	r24, Z
     7c4:	88 60       	ori	r24, 0x08	; 8
     7c6:	80 83       	st	Z, r24
				OCR3C = val; // set pwm duty
     7c8:	d0 93 9d 00 	sts	0x009D, r29	; 0x80009d <__TEXT_REGION_LENGTH__+0x70009d>
     7cc:	c0 93 9c 00 	sts	0x009C, r28	; 0x80009c <__TEXT_REGION_LENGTH__+0x70009c>
			break;
     7d0:	46 c0       	rjmp	.+140    	; 0x85e <analogWrite+0x184>
			
			//Timer 4
			case TIMER4A:
				//connect pwm to pin on timer 4, channel A
				bitSet(TCCR4A, COM4A1);
     7d2:	e0 ea       	ldi	r30, 0xA0	; 160
     7d4:	f0 e0       	ldi	r31, 0x00	; 0
     7d6:	80 81       	ld	r24, Z
     7d8:	80 68       	ori	r24, 0x80	; 128
     7da:	80 83       	st	Z, r24
				OCR4A = val;	// set pwm duty
     7dc:	d0 93 a9 00 	sts	0x00A9, r29	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
     7e0:	c0 93 a8 00 	sts	0x00A8, r28	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
			break;
     7e4:	3c c0       	rjmp	.+120    	; 0x85e <analogWrite+0x184>
			case TIMER4B:
				// connect pwm to pin on timer 4, channel B
				bitSet(TCCR4A, COM4B1);
     7e6:	e0 ea       	ldi	r30, 0xA0	; 160
     7e8:	f0 e0       	ldi	r31, 0x00	; 0
     7ea:	80 81       	ld	r24, Z
     7ec:	80 62       	ori	r24, 0x20	; 32
     7ee:	80 83       	st	Z, r24
				OCR4B = val; // set pwm duty
     7f0:	d0 93 ab 00 	sts	0x00AB, r29	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7000ab>
     7f4:	c0 93 aa 00 	sts	0x00AA, r28	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7000aa>
			break;
     7f8:	32 c0       	rjmp	.+100    	; 0x85e <analogWrite+0x184>
			case TIMER4C:
				// connect pwm to pin on timer 4, channel C
				bitSet(TCCR4A, COM4C1);
     7fa:	e0 ea       	ldi	r30, 0xA0	; 160
     7fc:	f0 e0       	ldi	r31, 0x00	; 0
     7fe:	80 81       	ld	r24, Z
     800:	88 60       	ori	r24, 0x08	; 8
     802:	80 83       	st	Z, r24
				OCR4C = val; // set pwm duty
     804:	d0 93 ad 00 	sts	0x00AD, r29	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7000ad>
     808:	c0 93 ac 00 	sts	0x00AC, r28	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7000ac>
			break;
     80c:	28 c0       	rjmp	.+80     	; 0x85e <analogWrite+0x184>
			//timer 5
			case TIMER5A:
				// connect pwm to pin on timer 5, channel A
				bitSet(TCCR5A, COM5A1);
     80e:	e0 e2       	ldi	r30, 0x20	; 32
     810:	f1 e0       	ldi	r31, 0x01	; 1
     812:	80 81       	ld	r24, Z
     814:	80 68       	ori	r24, 0x80	; 128
     816:	80 83       	st	Z, r24
				OCR5A = val; // set pwm duty
     818:	d0 93 29 01 	sts	0x0129, r29	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
     81c:	c0 93 28 01 	sts	0x0128, r28	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
			break;
     820:	1e c0       	rjmp	.+60     	; 0x85e <analogWrite+0x184>
			case TIMER5B:
				// connect pwm to pin on timer 5, channel B
				bitSet(TCCR5A, COM5B1);
     822:	e0 e2       	ldi	r30, 0x20	; 32
     824:	f1 e0       	ldi	r31, 0x01	; 1
     826:	80 81       	ld	r24, Z
     828:	80 62       	ori	r24, 0x20	; 32
     82a:	80 83       	st	Z, r24
				OCR5B = val; // set pwm duty
     82c:	d0 93 2b 01 	sts	0x012B, r29	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
     830:	c0 93 2a 01 	sts	0x012A, r28	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
			break;
     834:	14 c0       	rjmp	.+40     	; 0x85e <analogWrite+0x184>
			case TIMER5C:
				// connect pwm to pin on timer 5, channel C
				bitSet(TCCR5A, COM5C1);
     836:	e0 e2       	ldi	r30, 0x20	; 32
     838:	f1 e0       	ldi	r31, 0x01	; 1
     83a:	80 81       	ld	r24, Z
     83c:	88 60       	ori	r24, 0x08	; 8
     83e:	80 83       	st	Z, r24
				OCR5C = val; // set pwm duty
     840:	d0 93 2d 01 	sts	0x012D, r29	; 0x80012d <__TEXT_REGION_LENGTH__+0x70012d>
     844:	c0 93 2c 01 	sts	0x012C, r28	; 0x80012c <__TEXT_REGION_LENGTH__+0x70012c>
			break;
     848:	0a c0       	rjmp	.+20     	; 0x85e <analogWrite+0x184>
			case NOT_ON_TIMER:
			
			default:
				if (val < 128) {
     84a:	c0 38       	cpi	r28, 0x80	; 128
     84c:	d1 05       	cpc	r29, r1
					digitalWrite(pin, LOW);
     84e:	24 f4       	brge	.+8      	; 0x858 <analogWrite+0x17e>
     850:	60 e0       	ldi	r22, 0x00	; 0
     852:	81 2f       	mov	r24, r17
     854:	c6 de       	rcall	.-628    	; 0x5e2 <digitalWrite>
				} else {
					digitalWrite(pin, HIGH);
     856:	03 c0       	rjmp	.+6      	; 0x85e <analogWrite+0x184>
     858:	61 e0       	ldi	r22, 0x01	; 1
     85a:	81 2f       	mov	r24, r17
     85c:	c2 de       	rcall	.-636    	; 0x5e2 <digitalWrite>
				}
		}
	}
     85e:	df 91       	pop	r29
     860:	cf 91       	pop	r28
     862:	1f 91       	pop	r17
     864:	08 95       	ret

00000866 <millis_init>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
     866:	78 94       	sei
     868:	84 b5       	in	r24, 0x24	; 36
     86a:	82 60       	ori	r24, 0x02	; 2
     86c:	84 bd       	out	0x24, r24	; 36
     86e:	84 b5       	in	r24, 0x24	; 36
     870:	81 60       	ori	r24, 0x01	; 1
     872:	84 bd       	out	0x24, r24	; 36
     874:	85 b5       	in	r24, 0x25	; 37
     876:	82 60       	ori	r24, 0x02	; 2
     878:	85 bd       	out	0x25, r24	; 37
     87a:	85 b5       	in	r24, 0x25	; 37
     87c:	81 60       	ori	r24, 0x01	; 1
     87e:	85 bd       	out	0x25, r24	; 37
     880:	ee e6       	ldi	r30, 0x6E	; 110
     882:	f0 e0       	ldi	r31, 0x00	; 0
     884:	80 81       	ld	r24, Z
     886:	81 60       	ori	r24, 0x01	; 1
     888:	80 83       	st	Z, r24
     88a:	08 95       	ret

0000088c <micros>:
     88c:	3f b7       	in	r19, 0x3f	; 63
     88e:	f8 94       	cli
     890:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <timer0_overflow_count>
     894:	90 91 38 02 	lds	r25, 0x0238	; 0x800238 <timer0_overflow_count+0x1>
     898:	a0 91 39 02 	lds	r26, 0x0239	; 0x800239 <timer0_overflow_count+0x2>
     89c:	b0 91 3a 02 	lds	r27, 0x023A	; 0x80023a <timer0_overflow_count+0x3>
     8a0:	26 b5       	in	r18, 0x26	; 38
     8a2:	a8 9b       	sbis	0x15, 0	; 21
     8a4:	05 c0       	rjmp	.+10     	; 0x8b0 <micros+0x24>
     8a6:	2f 3f       	cpi	r18, 0xFF	; 255
     8a8:	19 f0       	breq	.+6      	; 0x8b0 <micros+0x24>
     8aa:	01 96       	adiw	r24, 0x01	; 1
     8ac:	a1 1d       	adc	r26, r1
     8ae:	b1 1d       	adc	r27, r1
     8b0:	3f bf       	out	0x3f, r19	; 63
     8b2:	ba 2f       	mov	r27, r26
     8b4:	a9 2f       	mov	r26, r25
     8b6:	98 2f       	mov	r25, r24
     8b8:	88 27       	eor	r24, r24
     8ba:	82 0f       	add	r24, r18
     8bc:	91 1d       	adc	r25, r1
     8be:	a1 1d       	adc	r26, r1
     8c0:	b1 1d       	adc	r27, r1
     8c2:	bc 01       	movw	r22, r24
     8c4:	cd 01       	movw	r24, r26
     8c6:	66 0f       	add	r22, r22
     8c8:	77 1f       	adc	r23, r23
     8ca:	88 1f       	adc	r24, r24
     8cc:	99 1f       	adc	r25, r25
     8ce:	66 0f       	add	r22, r22
     8d0:	77 1f       	adc	r23, r23
     8d2:	88 1f       	adc	r24, r24
     8d4:	99 1f       	adc	r25, r25
     8d6:	08 95       	ret

000008d8 <delay_ms>:
     8d8:	8f 92       	push	r8
     8da:	9f 92       	push	r9
     8dc:	af 92       	push	r10
     8de:	bf 92       	push	r11
     8e0:	cf 92       	push	r12
     8e2:	df 92       	push	r13
     8e4:	ef 92       	push	r14
     8e6:	ff 92       	push	r15
     8e8:	6b 01       	movw	r12, r22
     8ea:	7c 01       	movw	r14, r24
     8ec:	cf df       	rcall	.-98     	; 0x88c <micros>
     8ee:	4b 01       	movw	r8, r22
     8f0:	5c 01       	movw	r10, r24
     8f2:	c1 14       	cp	r12, r1
     8f4:	d1 04       	cpc	r13, r1
     8f6:	e1 04       	cpc	r14, r1
     8f8:	f1 04       	cpc	r15, r1
     8fa:	89 f4       	brne	.+34     	; 0x91e <delay_ms+0x46>
     8fc:	21 c0       	rjmp	.+66     	; 0x940 <delay_ms+0x68>
     8fe:	21 e0       	ldi	r18, 0x01	; 1
     900:	c2 1a       	sub	r12, r18
     902:	d1 08       	sbc	r13, r1
     904:	e1 08       	sbc	r14, r1
     906:	f1 08       	sbc	r15, r1
     908:	88 ee       	ldi	r24, 0xE8	; 232
     90a:	88 0e       	add	r8, r24
     90c:	83 e0       	ldi	r24, 0x03	; 3
     90e:	98 1e       	adc	r9, r24
     910:	a1 1c       	adc	r10, r1
     912:	b1 1c       	adc	r11, r1
     914:	c1 14       	cp	r12, r1
     916:	d1 04       	cpc	r13, r1
     918:	e1 04       	cpc	r14, r1
     91a:	f1 04       	cpc	r15, r1
     91c:	89 f0       	breq	.+34     	; 0x940 <delay_ms+0x68>
     91e:	b6 df       	rcall	.-148    	; 0x88c <micros>
     920:	dc 01       	movw	r26, r24
     922:	cb 01       	movw	r24, r22
     924:	88 19       	sub	r24, r8
     926:	99 09       	sbc	r25, r9
     928:	aa 09       	sbc	r26, r10
     92a:	bb 09       	sbc	r27, r11
     92c:	88 3e       	cpi	r24, 0xE8	; 232
     92e:	93 40       	sbci	r25, 0x03	; 3
     930:	a1 05       	cpc	r26, r1
     932:	b1 05       	cpc	r27, r1
     934:	20 f7       	brcc	.-56     	; 0x8fe <delay_ms+0x26>
     936:	c1 14       	cp	r12, r1
     938:	d1 04       	cpc	r13, r1
     93a:	e1 04       	cpc	r14, r1
     93c:	f1 04       	cpc	r15, r1
     93e:	79 f7       	brne	.-34     	; 0x91e <delay_ms+0x46>
     940:	ff 90       	pop	r15
     942:	ef 90       	pop	r14
     944:	df 90       	pop	r13
     946:	cf 90       	pop	r12
     948:	bf 90       	pop	r11
     94a:	af 90       	pop	r10
     94c:	9f 90       	pop	r9
     94e:	8f 90       	pop	r8
     950:	08 95       	ret

00000952 <__vector_23>:
	// return = 4 cycles	
}


ISR(TIMER0_OVF_vect)
{
     952:	1f 92       	push	r1
     954:	0f 92       	push	r0
     956:	0f b6       	in	r0, 0x3f	; 63
     958:	0f 92       	push	r0
     95a:	11 24       	eor	r1, r1
     95c:	2f 93       	push	r18
     95e:	3f 93       	push	r19
     960:	8f 93       	push	r24
     962:	9f 93       	push	r25
     964:	af 93       	push	r26
     966:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
     968:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <timer0_millis>
     96c:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <timer0_millis+0x1>
     970:	a0 91 35 02 	lds	r26, 0x0235	; 0x800235 <timer0_millis+0x2>
     974:	b0 91 36 02 	lds	r27, 0x0236	; 0x800236 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
     978:	30 91 32 02 	lds	r19, 0x0232	; 0x800232 <__data_end>
	
	m += MILLIS_INC;
	f += FRACT_INC;
     97c:	23 e0       	ldi	r18, 0x03	; 3
     97e:	23 0f       	add	r18, r19
	
	if(f >= FRACT_MAX){
     980:	2d 37       	cpi	r18, 0x7D	; 125
     982:	20 f4       	brcc	.+8      	; 0x98c <__vector_23+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;
	
	m += MILLIS_INC;
     984:	01 96       	adiw	r24, 0x01	; 1
     986:	a1 1d       	adc	r26, r1
     988:	b1 1d       	adc	r27, r1
     98a:	05 c0       	rjmp	.+10     	; 0x996 <__vector_23+0x44>
	f += FRACT_INC;
	
	if(f >= FRACT_MAX){
		f -= FRACT_MAX;
     98c:	26 e8       	ldi	r18, 0x86	; 134
     98e:	23 0f       	add	r18, r19
		m += 1;
     990:	02 96       	adiw	r24, 0x02	; 2
     992:	a1 1d       	adc	r26, r1
     994:	b1 1d       	adc	r27, r1
	}
	
	timer0_fract = f;
     996:	20 93 32 02 	sts	0x0232, r18	; 0x800232 <__data_end>
	timer0_millis = m;
     99a:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <timer0_millis>
     99e:	90 93 34 02 	sts	0x0234, r25	; 0x800234 <timer0_millis+0x1>
     9a2:	a0 93 35 02 	sts	0x0235, r26	; 0x800235 <timer0_millis+0x2>
     9a6:	b0 93 36 02 	sts	0x0236, r27	; 0x800236 <timer0_millis+0x3>
	timer0_overflow_count++;
     9aa:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <timer0_overflow_count>
     9ae:	90 91 38 02 	lds	r25, 0x0238	; 0x800238 <timer0_overflow_count+0x1>
     9b2:	a0 91 39 02 	lds	r26, 0x0239	; 0x800239 <timer0_overflow_count+0x2>
     9b6:	b0 91 3a 02 	lds	r27, 0x023A	; 0x80023a <timer0_overflow_count+0x3>
     9ba:	01 96       	adiw	r24, 0x01	; 1
     9bc:	a1 1d       	adc	r26, r1
     9be:	b1 1d       	adc	r27, r1
     9c0:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <timer0_overflow_count>
     9c4:	90 93 38 02 	sts	0x0238, r25	; 0x800238 <timer0_overflow_count+0x1>
     9c8:	a0 93 39 02 	sts	0x0239, r26	; 0x800239 <timer0_overflow_count+0x2>
     9cc:	b0 93 3a 02 	sts	0x023A, r27	; 0x80023a <timer0_overflow_count+0x3>
     9d0:	bf 91       	pop	r27
     9d2:	af 91       	pop	r26
     9d4:	9f 91       	pop	r25
     9d6:	8f 91       	pop	r24
     9d8:	3f 91       	pop	r19
     9da:	2f 91       	pop	r18
     9dc:	0f 90       	pop	r0
     9de:	0f be       	out	0x3f, r0	; 63
     9e0:	0f 90       	pop	r0
     9e2:	1f 90       	pop	r1
     9e4:	18 95       	reti

000009e6 <tone>:
}


//Generate frequency (in hertz) and duration (in milliseconds)
void tone(uint8_t _pin, unsigned int frequency, unsigned long duration)
{
     9e6:	8f 92       	push	r8
     9e8:	9f 92       	push	r9
     9ea:	af 92       	push	r10
     9ec:	bf 92       	push	r11
     9ee:	cf 92       	push	r12
     9f0:	df 92       	push	r13
     9f2:	ef 92       	push	r14
     9f4:	ff 92       	push	r15
     9f6:	0f 93       	push	r16
     9f8:	1f 93       	push	r17
     9fa:	cf 93       	push	r28
     9fc:	8b 01       	movw	r16, r22
     9fe:	49 01       	movw	r8, r18
     a00:	5a 01       	movw	r10, r20
	uint8_t prescalarbits = 0b001; // No Prescaling
	long toggle_count = 0;
	uint32_t ocr = 0;
	int8_t _timer;
	sei();
     a02:	78 94       	sei
	
	int8_t _timer = -1;
	
	// if we're already using the pin, the timer should be configured.
	for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
		if (tone_pins[i] == _pin) {
     a04:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     a08:	89 13       	cpse	r24, r25
     a0a:	07 c3       	rjmp	.+1550   	; 0x101a <tone+0x634>
			return pgm_read_byte(tone_pin_to_timer_PGM + i);
     a0c:	eb e6       	ldi	r30, 0x6B	; 107
     a0e:	f2 e0       	ldi	r31, 0x02	; 2
     a10:	c4 91       	lpm	r28, Z
     a12:	f4 c0       	rjmp	.+488    	; 0xbfc <tone+0x216>
	}
	  
	// search for an unused timer.
	for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
		if (tone_pins[i] == 255) {
			tone_pins[i] = _pin;
     a14:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
			_timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
     a18:	eb e6       	ldi	r30, 0x6B	; 107
     a1a:	f2 e0       	ldi	r31, 0x02	; 2
     a1c:	c4 91       	lpm	r28, Z
			break;
		}
	}
	
	//Found timer
	if (_timer != -1)
     a1e:	cf 3f       	cpi	r28, 0xFF	; 255
     a20:	09 f4       	brne	.+2      	; 0xa24 <tone+0x3e>
     a22:	40 c3       	rjmp	.+1664   	; 0x10a4 <tone+0x6be>
	{
		// Set timer specific stuff
		// All timers in CTC mode
		// 8 bit timers will require changing prescalar values,
		// whereas 16 bit timers are set to either clk/1 or clk/64 prescalar
		switch(_timer)
     a24:	c2 30       	cpi	r28, 0x02	; 2
     a26:	09 f4       	brne	.+2      	; 0xa2a <tone+0x44>
     a28:	56 c0       	rjmp	.+172    	; 0xad6 <tone+0xf0>
     a2a:	28 f4       	brcc	.+10     	; 0xa36 <tone+0x50>
     a2c:	cc 23       	and	r28, r28
     a2e:	61 f0       	breq	.+24     	; 0xa48 <tone+0x62>
     a30:	c1 30       	cpi	r28, 0x01	; 1
     a32:	69 f1       	breq	.+90     	; 0xa8e <tone+0xa8>
     a34:	e3 c0       	rjmp	.+454    	; 0xbfc <tone+0x216>
     a36:	c4 30       	cpi	r28, 0x04	; 4
     a38:	09 f4       	brne	.+2      	; 0xa3c <tone+0x56>
     a3a:	98 c0       	rjmp	.+304    	; 0xb6c <tone+0x186>
     a3c:	08 f4       	brcc	.+2      	; 0xa40 <tone+0x5a>
     a3e:	72 c0       	rjmp	.+228    	; 0xb24 <tone+0x13e>
     a40:	c5 30       	cpi	r28, 0x05	; 5
     a42:	09 f4       	brne	.+2      	; 0xa46 <tone+0x60>
     a44:	b7 c0       	rjmp	.+366    	; 0xbb4 <tone+0x1ce>
     a46:	da c0       	rjmp	.+436    	; 0xbfc <tone+0x216>
		{
			//TIMER 0 - 8 bit timer
			case 0:
				TCCR0A = 0;
     a48:	14 bc       	out	0x24, r1	; 36
				TCCR0B = 0;
     a4a:	15 bc       	out	0x25, r1	; 37
				bitWrite(TCCR0A, WGM01, 1); // set CTC mode
     a4c:	94 b5       	in	r25, 0x24	; 36
     a4e:	92 60       	ori	r25, 0x02	; 2
     a50:	94 bd       	out	0x24, r25	; 36
				bitWrite(TCCR0B, CS00, 1);  // No prescaling
     a52:	95 b5       	in	r25, 0x25	; 37
     a54:	91 60       	ori	r25, 0x01	; 1
     a56:	95 bd       	out	0x25, r25	; 37
				timer0_pin_port = portOutputRegister(pinToPort(_pin));
     a58:	28 2f       	mov	r18, r24
     a5a:	30 e0       	ldi	r19, 0x00	; 0
     a5c:	f9 01       	movw	r30, r18
     a5e:	ee 52       	subi	r30, 0x2E	; 46
     a60:	fe 4f       	sbci	r31, 0xFE	; 254
     a62:	e4 91       	lpm	r30, Z
     a64:	f0 e0       	ldi	r31, 0x00	; 0
     a66:	ee 0f       	add	r30, r30
     a68:	ff 1f       	adc	r31, r31
     a6a:	e9 5c       	subi	r30, 0xC9	; 201
     a6c:	fd 4f       	sbci	r31, 0xFD	; 253
     a6e:	45 91       	lpm	r20, Z+
     a70:	54 91       	lpm	r21, Z
     a72:	50 93 65 02 	sts	0x0265, r21	; 0x800265 <timer0_pin_port+0x1>
     a76:	40 93 64 02 	sts	0x0264, r20	; 0x800264 <timer0_pin_port>
				timer0_pin_mask = pinToBitMask(_pin);
     a7a:	f9 01       	movw	r30, r18
     a7c:	e3 59       	subi	r30, 0x93	; 147
     a7e:	fe 4f       	sbci	r31, 0xFE	; 254
     a80:	24 91       	lpm	r18, Z
     a82:	20 93 4c 02 	sts	0x024C, r18	; 0x80024c <timer0_pin_mask>
	_timer = toneBegin(_pin);
	
	if (_timer >= 0)
	{
		//1. set the pin as OUTPUT
		pinMode(_pin, OUTPUT);
     a86:	61 e0       	ldi	r22, 0x01	; 1
     a88:	6d dd       	rcall	.-1318   	; 0x564 <pinMode>
				timer5_pin_mask = pinToBitMask(_pin);
			break;
		}
	}
	
	return _timer;	
     a8a:	c0 e0       	ldi	r28, 0x00	; 0
     a8c:	8e c2       	rjmp	.+1308   	; 0xfaa <tone+0x5c4>
				timer0_pin_port = portOutputRegister(pinToPort(_pin));
				timer0_pin_mask = pinToBitMask(_pin);
			break;			
			//TIMER 1 - 16 bit timer
			case 1:
				TCCR1A = 0;
     a8e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
				TCCR1B = 0;
     a92:	e1 e8       	ldi	r30, 0x81	; 129
     a94:	f0 e0       	ldi	r31, 0x00	; 0
     a96:	10 82       	st	Z, r1
				bitWrite(TCCR1B, WGM12, 1); // Set CTC mode
     a98:	90 81       	ld	r25, Z
     a9a:	98 60       	ori	r25, 0x08	; 8
     a9c:	90 83       	st	Z, r25
				bitWrite(TCCR1B, CS10, 1) ; // No prescaling
     a9e:	90 81       	ld	r25, Z
     aa0:	91 60       	ori	r25, 0x01	; 1
     aa2:	90 83       	st	Z, r25
				timer1_pin_port = portOutputRegister(pinToPort(_pin));
     aa4:	28 2f       	mov	r18, r24
     aa6:	30 e0       	ldi	r19, 0x00	; 0
     aa8:	f9 01       	movw	r30, r18
     aaa:	ee 52       	subi	r30, 0x2E	; 46
     aac:	fe 4f       	sbci	r31, 0xFE	; 254
     aae:	e4 91       	lpm	r30, Z
     ab0:	f0 e0       	ldi	r31, 0x00	; 0
     ab2:	ee 0f       	add	r30, r30
     ab4:	ff 1f       	adc	r31, r31
     ab6:	e9 5c       	subi	r30, 0xC9	; 201
     ab8:	fd 4f       	sbci	r31, 0xFD	; 253
     aba:	45 91       	lpm	r20, Z+
     abc:	54 91       	lpm	r21, Z
     abe:	50 93 6c 02 	sts	0x026C, r21	; 0x80026c <timer1_pin_port+0x1>
     ac2:	40 93 6b 02 	sts	0x026B, r20	; 0x80026b <timer1_pin_port>
				timer1_pin_mask = pinToBitMask(_pin);
     ac6:	f9 01       	movw	r30, r18
     ac8:	e3 59       	subi	r30, 0x93	; 147
     aca:	fe 4f       	sbci	r31, 0xFE	; 254
     acc:	24 91       	lpm	r18, Z
     ace:	20 93 6a 02 	sts	0x026A, r18	; 0x80026a <timer1_pin_mask>
				timer5_pin_mask = pinToBitMask(_pin);
			break;
		}
	}
	
	return _timer;	
     ad2:	c1 e0       	ldi	r28, 0x01	; 1
     ad4:	e4 c2       	rjmp	.+1480   	; 0x109e <tone+0x6b8>
				timer1_pin_port = portOutputRegister(pinToPort(_pin));
				timer1_pin_mask = pinToBitMask(_pin);
			break;			
			//TIMER 2 - 8 bit timer
			case 2:
				TCCR2A = 0;
     ad6:	a0 eb       	ldi	r26, 0xB0	; 176
     ad8:	b0 e0       	ldi	r27, 0x00	; 0
     ada:	1c 92       	st	X, r1
				TCCR2B = 0;
     adc:	e1 eb       	ldi	r30, 0xB1	; 177
     ade:	f0 e0       	ldi	r31, 0x00	; 0
     ae0:	10 82       	st	Z, r1
				bitWrite(TCCR2A, WGM21, 1); //Set CTC mode
     ae2:	9c 91       	ld	r25, X
     ae4:	92 60       	ori	r25, 0x02	; 2
     ae6:	9c 93       	st	X, r25
				bitWrite(TCCR2B, CS20, 1); // No prescaling
     ae8:	90 81       	ld	r25, Z
     aea:	91 60       	ori	r25, 0x01	; 1
     aec:	90 83       	st	Z, r25
				timer2_pin_port = portOutputRegister(pinToPort(_pin));
     aee:	28 2f       	mov	r18, r24
     af0:	30 e0       	ldi	r19, 0x00	; 0
     af2:	f9 01       	movw	r30, r18
     af4:	ee 52       	subi	r30, 0x2E	; 46
     af6:	fe 4f       	sbci	r31, 0xFE	; 254
     af8:	e4 91       	lpm	r30, Z
     afa:	f0 e0       	ldi	r31, 0x00	; 0
     afc:	ee 0f       	add	r30, r30
     afe:	ff 1f       	adc	r31, r31
     b00:	e9 5c       	subi	r30, 0xC9	; 201
     b02:	fd 4f       	sbci	r31, 0xFD	; 253
     b04:	45 91       	lpm	r20, Z+
     b06:	54 91       	lpm	r21, Z
     b08:	50 93 53 02 	sts	0x0253, r21	; 0x800253 <timer2_pin_port+0x1>
     b0c:	40 93 52 02 	sts	0x0252, r20	; 0x800252 <timer2_pin_port>
				timer2_pin_mask = pinToBitMask(_pin);
     b10:	f9 01       	movw	r30, r18
     b12:	e3 59       	subi	r30, 0x93	; 147
     b14:	fe 4f       	sbci	r31, 0xFE	; 254
     b16:	24 91       	lpm	r18, Z
     b18:	20 93 5f 02 	sts	0x025F, r18	; 0x80025f <timer2_pin_mask>
	_timer = toneBegin(_pin);
	
	if (_timer >= 0)
	{
		//1. set the pin as OUTPUT
		pinMode(_pin, OUTPUT);
     b1c:	61 e0       	ldi	r22, 0x01	; 1
     b1e:	22 dd       	rcall	.-1468   	; 0x564 <pinMode>
				timer5_pin_mask = pinToBitMask(_pin);
			break;
		}
	}
	
	return _timer;	
     b20:	c2 e0       	ldi	r28, 0x02	; 2
     b22:	0a c2       	rjmp	.+1044   	; 0xf38 <tone+0x552>
				timer2_pin_port = portOutputRegister(pinToPort(_pin));
				timer2_pin_mask = pinToBitMask(_pin);
			break;			
			//TIMER 3 - 16 bit timer
			case 3:
				TCCR3A = 0;
     b24:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
				TCCR3B = 0;
     b28:	e1 e9       	ldi	r30, 0x91	; 145
     b2a:	f0 e0       	ldi	r31, 0x00	; 0
     b2c:	10 82       	st	Z, r1
				bitWrite(TCCR3B, WGM32, 1); //CTC Mode
     b2e:	90 81       	ld	r25, Z
     b30:	98 60       	ori	r25, 0x08	; 8
     b32:	90 83       	st	Z, r25
				bitWrite(TCCR3B, CS30, 1);	//No prescaling
     b34:	90 81       	ld	r25, Z
     b36:	91 60       	ori	r25, 0x01	; 1
     b38:	90 83       	st	Z, r25
				timer3_pin_port = portOutputRegister(pinToPort(_pin));
     b3a:	28 2f       	mov	r18, r24
     b3c:	30 e0       	ldi	r19, 0x00	; 0
     b3e:	f9 01       	movw	r30, r18
     b40:	ee 52       	subi	r30, 0x2E	; 46
     b42:	fe 4f       	sbci	r31, 0xFE	; 254
     b44:	e4 91       	lpm	r30, Z
     b46:	f0 e0       	ldi	r31, 0x00	; 0
     b48:	ee 0f       	add	r30, r30
     b4a:	ff 1f       	adc	r31, r31
     b4c:	e9 5c       	subi	r30, 0xC9	; 201
     b4e:	fd 4f       	sbci	r31, 0xFD	; 253
     b50:	45 91       	lpm	r20, Z+
     b52:	54 91       	lpm	r21, Z
     b54:	50 93 56 02 	sts	0x0256, r21	; 0x800256 <timer3_pin_port+0x1>
     b58:	40 93 55 02 	sts	0x0255, r20	; 0x800255 <timer3_pin_port>
				timer3_pin_mask = pinToBitMask(_pin);
     b5c:	f9 01       	movw	r30, r18
     b5e:	e3 59       	subi	r30, 0x93	; 147
     b60:	fe 4f       	sbci	r31, 0xFE	; 254
     b62:	24 91       	lpm	r18, Z
     b64:	20 93 4d 02 	sts	0x024D, r18	; 0x80024d <timer3_pin_mask>
				timer5_pin_mask = pinToBitMask(_pin);
			break;
		}
	}
	
	return _timer;	
     b68:	c3 e0       	ldi	r28, 0x03	; 3
     b6a:	99 c2       	rjmp	.+1330   	; 0x109e <tone+0x6b8>
				timer3_pin_port = portOutputRegister(pinToPort(_pin));
				timer3_pin_mask = pinToBitMask(_pin);
			break;		
			//TIMER 4 - 16 bit timer
			case 4:
				TCCR4A = 0;
     b6c:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
				TCCR4B = 0;
     b70:	e1 ea       	ldi	r30, 0xA1	; 161
     b72:	f0 e0       	ldi	r31, 0x00	; 0
     b74:	10 82       	st	Z, r1
				bitWrite(TCCR4B, WGM42, 1); //CTC Mode
     b76:	90 81       	ld	r25, Z
     b78:	98 60       	ori	r25, 0x08	; 8
     b7a:	90 83       	st	Z, r25
				bitWrite(TCCR4B, CS40, 1);  //No prescaling
     b7c:	90 81       	ld	r25, Z
     b7e:	91 60       	ori	r25, 0x01	; 1
     b80:	90 83       	st	Z, r25
				timer4_pin_port = portOutputRegister(pinToPort(_pin));
     b82:	28 2f       	mov	r18, r24
     b84:	30 e0       	ldi	r19, 0x00	; 0
     b86:	f9 01       	movw	r30, r18
     b88:	ee 52       	subi	r30, 0x2E	; 46
     b8a:	fe 4f       	sbci	r31, 0xFE	; 254
     b8c:	e4 91       	lpm	r30, Z
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	ee 0f       	add	r30, r30
     b92:	ff 1f       	adc	r31, r31
     b94:	e9 5c       	subi	r30, 0xC9	; 201
     b96:	fd 4f       	sbci	r31, 0xFD	; 253
     b98:	45 91       	lpm	r20, Z+
     b9a:	54 91       	lpm	r21, Z
     b9c:	50 93 63 02 	sts	0x0263, r21	; 0x800263 <timer4_pin_port+0x1>
     ba0:	40 93 62 02 	sts	0x0262, r20	; 0x800262 <timer4_pin_port>
				timer4_pin_mask = pinToBitMask(_pin);
     ba4:	f9 01       	movw	r30, r18
     ba6:	e3 59       	subi	r30, 0x93	; 147
     ba8:	fe 4f       	sbci	r31, 0xFE	; 254
     baa:	24 91       	lpm	r18, Z
     bac:	20 93 54 02 	sts	0x0254, r18	; 0x800254 <timer4_pin_mask>
				timer5_pin_mask = pinToBitMask(_pin);
			break;
		}
	}
	
	return _timer;	
     bb0:	c4 e0       	ldi	r28, 0x04	; 4
     bb2:	75 c2       	rjmp	.+1258   	; 0x109e <tone+0x6b8>
				timer4_pin_port = portOutputRegister(pinToPort(_pin));
				timer4_pin_mask = pinToBitMask(_pin);
			break;	
			//TIMER 5 - 16 bit timer
			case 5:
				TCCR5A = 0;
     bb4:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
				TCCR5B = 0;
     bb8:	e1 e2       	ldi	r30, 0x21	; 33
     bba:	f1 e0       	ldi	r31, 0x01	; 1
     bbc:	10 82       	st	Z, r1
				bitWrite(TCCR5B, WGM52, 1);
     bbe:	90 81       	ld	r25, Z
     bc0:	98 60       	ori	r25, 0x08	; 8
     bc2:	90 83       	st	Z, r25
				bitWrite(TCCR5B, CS50, 1);
     bc4:	90 81       	ld	r25, Z
     bc6:	91 60       	ori	r25, 0x01	; 1
     bc8:	90 83       	st	Z, r25
				timer5_pin_port = portOutputRegister(pinToPort(_pin));
     bca:	28 2f       	mov	r18, r24
     bcc:	30 e0       	ldi	r19, 0x00	; 0
     bce:	f9 01       	movw	r30, r18
     bd0:	ee 52       	subi	r30, 0x2E	; 46
     bd2:	fe 4f       	sbci	r31, 0xFE	; 254
     bd4:	e4 91       	lpm	r30, Z
     bd6:	f0 e0       	ldi	r31, 0x00	; 0
     bd8:	ee 0f       	add	r30, r30
     bda:	ff 1f       	adc	r31, r31
     bdc:	e9 5c       	subi	r30, 0xC9	; 201
     bde:	fd 4f       	sbci	r31, 0xFD	; 253
     be0:	45 91       	lpm	r20, Z+
     be2:	54 91       	lpm	r21, Z
     be4:	50 93 61 02 	sts	0x0261, r21	; 0x800261 <timer5_pin_port+0x1>
     be8:	40 93 60 02 	sts	0x0260, r20	; 0x800260 <timer5_pin_port>
				timer5_pin_mask = pinToBitMask(_pin);
     bec:	f9 01       	movw	r30, r18
     bee:	e3 59       	subi	r30, 0x93	; 147
     bf0:	fe 4f       	sbci	r31, 0xFE	; 254
     bf2:	24 91       	lpm	r18, Z
     bf4:	20 93 71 02 	sts	0x0271, r18	; 0x800271 <timer5_pin_mask>
			break;
		}
	}
	
	return _timer;	
     bf8:	c5 e0       	ldi	r28, 0x05	; 5
     bfa:	51 c2       	rjmp	.+1186   	; 0x109e <tone+0x6b8>
	int8_t _timer;
	sei();
	
	_timer = toneBegin(_pin);
	
	if (_timer >= 0)
     bfc:	cc 23       	and	r28, r28
     bfe:	0c f4       	brge	.+2      	; 0xc02 <tone+0x21c>
	{
		//1. set the pin as OUTPUT
		pinMode(_pin, OUTPUT);
     c00:	51 c2       	rjmp	.+1186   	; 0x10a4 <tone+0x6be>
     c02:	61 e0       	ldi	r22, 0x01	; 1
     c04:	af dc       	rcall	.-1698   	; 0x564 <pinMode>
		
		//2. if we are using an 8 bit timer, scan through prescalers to find the best fit
		if (_timer == 0 || _timer == 2)
     c06:	cc 23       	and	r28, r28
     c08:	09 f4       	brne	.+2      	; 0xc0c <tone+0x226>
     c0a:	cf c1       	rjmp	.+926    	; 0xfaa <tone+0x5c4>
     c0c:	c2 30       	cpi	r28, 0x02	; 2
     c0e:	09 f0       	breq	.+2      	; 0xc12 <tone+0x22c>
     c10:	77 c0       	rjmp	.+238    	; 0xd00 <tone+0x31a>
     c12:	92 c1       	rjmp	.+804    	; 0xf38 <tone+0x552>
				ocr = (F_CPU / (frequency * 2 * 8)) - 1;
				prescalarbits = 0b010; // clk/8 prescaler : For both timers
				
				if (_timer == 2 && ocr > 255)
				{
					ocr = (F_CPU / frequency / 2 / 32) - 1;
     c14:	68 01       	movw	r12, r16
     c16:	e1 2c       	mov	r14, r1
     c18:	f1 2c       	mov	r15, r1
     c1a:	60 e9       	ldi	r22, 0x90	; 144
     c1c:	70 ed       	ldi	r23, 0xD0	; 208
     c1e:	83 e0       	ldi	r24, 0x03	; 3
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	a7 01       	movw	r20, r14
     c24:	96 01       	movw	r18, r12
     c26:	87 d4       	rcall	.+2318   	; 0x1536 <__udivmodsi4>
     c28:	69 01       	movw	r12, r18
     c2a:	7a 01       	movw	r14, r20
     c2c:	81 e0       	ldi	r24, 0x01	; 1
     c2e:	c8 1a       	sub	r12, r24
     c30:	d1 08       	sbc	r13, r1
     c32:	e1 08       	sbc	r14, r1
     c34:	f1 08       	sbc	r15, r1
					prescalarbits = 0b011; // clk/32
				}
					
				if(ocr > 255)
     c36:	9f ef       	ldi	r25, 0xFF	; 255
     c38:	c9 16       	cp	r12, r25
     c3a:	d1 04       	cpc	r13, r1
     c3c:	e1 04       	cpc	r14, r1
     c3e:	f1 04       	cpc	r15, r1
     c40:	11 f0       	breq	.+4      	; 0xc46 <tone+0x260>
     c42:	08 f0       	brcs	.+2      	; 0xc46 <tone+0x260>
     c44:	cc c1       	rjmp	.+920    	; 0xfde <tone+0x5f8>
				prescalarbits = 0b010; // clk/8 prescaler : For both timers
				
				if (_timer == 2 && ocr > 255)
				{
					ocr = (F_CPU / frequency / 2 / 32) - 1;
					prescalarbits = 0b011; // clk/32
     c46:	83 e0       	ldi	r24, 0x03	; 3
     c48:	54 c0       	rjmp	.+168    	; 0xcf2 <tone+0x30c>
				}
					
				if(ocr > 255)
				{
					ocr = (F_CPU / (frequency * 2 * 64)) - 1;
     c4a:	98 01       	movw	r18, r16
     c4c:	36 95       	lsr	r19
     c4e:	32 2f       	mov	r19, r18
     c50:	22 27       	eor	r18, r18
     c52:	37 95       	ror	r19
     c54:	27 95       	ror	r18
     c56:	40 e0       	ldi	r20, 0x00	; 0
     c58:	50 e0       	ldi	r21, 0x00	; 0
     c5a:	60 e0       	ldi	r22, 0x00	; 0
     c5c:	74 e2       	ldi	r23, 0x24	; 36
     c5e:	84 ef       	ldi	r24, 0xF4	; 244
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	69 d4       	rcall	.+2258   	; 0x1536 <__udivmodsi4>
     c64:	69 01       	movw	r12, r18
     c66:	7a 01       	movw	r14, r20
     c68:	81 e0       	ldi	r24, 0x01	; 1
     c6a:	c8 1a       	sub	r12, r24
     c6c:	d1 08       	sbc	r13, r1
     c6e:	e1 08       	sbc	r14, r1
     c70:	f1 08       	sbc	r15, r1
					prescalarbits = _timer == 0 ? 0b011 : 0b100; // clk/32 for timer 1: clk/64 for timer 2
     c72:	83 e0       	ldi	r24, 0x03	; 3
     c74:	11 c0       	rjmp	.+34     	; 0xc98 <tone+0x2b2>
					
					if (_timer == 2 && ocr > 255)
					{
						ocr = (F_CPU / (frequency * 2 * 128)) - 1;
     c76:	30 2f       	mov	r19, r16
     c78:	22 27       	eor	r18, r18
     c7a:	40 e0       	ldi	r20, 0x00	; 0
     c7c:	50 e0       	ldi	r21, 0x00	; 0
     c7e:	60 e0       	ldi	r22, 0x00	; 0
     c80:	74 e2       	ldi	r23, 0x24	; 36
     c82:	84 ef       	ldi	r24, 0xF4	; 244
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	57 d4       	rcall	.+2222   	; 0x1536 <__udivmodsi4>
     c88:	69 01       	movw	r12, r18
     c8a:	7a 01       	movw	r14, r20
     c8c:	91 e0       	ldi	r25, 0x01	; 1
     c8e:	c9 1a       	sub	r12, r25
     c90:	d1 08       	sbc	r13, r1
     c92:	e1 08       	sbc	r14, r1
     c94:	f1 08       	sbc	r15, r1
						prescalarbits = 0b101; //clk/128
     c96:	85 e0       	ldi	r24, 0x05	; 5
					}

					if (ocr > 255)
     c98:	9f ef       	ldi	r25, 0xFF	; 255
     c9a:	c9 16       	cp	r12, r25
     c9c:	d1 04       	cpc	r13, r1
     c9e:	e1 04       	cpc	r14, r1
     ca0:	f1 04       	cpc	r15, r1
     ca2:	b9 f0       	breq	.+46     	; 0xcd2 <tone+0x2ec>
     ca4:	b0 f0       	brcs	.+44     	; 0xcd2 <tone+0x2ec>
					{
						ocr = (F_CPU / (frequency * 2 * 256))- 1;
     ca6:	98 01       	movw	r18, r16
     ca8:	32 2f       	mov	r19, r18
     caa:	22 27       	eor	r18, r18
     cac:	33 0f       	add	r19, r19
     cae:	40 e0       	ldi	r20, 0x00	; 0
     cb0:	50 e0       	ldi	r21, 0x00	; 0
     cb2:	60 e0       	ldi	r22, 0x00	; 0
     cb4:	74 e2       	ldi	r23, 0x24	; 36
     cb6:	84 ef       	ldi	r24, 0xF4	; 244
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	3d d4       	rcall	.+2170   	; 0x1536 <__udivmodsi4>
     cbc:	69 01       	movw	r12, r18
     cbe:	7a 01       	movw	r14, r20
     cc0:	81 e0       	ldi	r24, 0x01	; 1
     cc2:	c8 1a       	sub	r12, r24
     cc4:	d1 08       	sbc	r13, r1
     cc6:	e1 08       	sbc	r14, r1
     cc8:	f1 08       	sbc	r15, r1
						prescalarbits = _timer == 0 ? 0b100 : 0b110;  // clk/64 for timer 1: clk/256 for timer 2
     cca:	cc 23       	and	r28, r28
     ccc:	09 f4       	brne	.+2      	; 0xcd0 <tone+0x2ea>
     cce:	bf c1       	rjmp	.+894    	; 0x104e <tone+0x668>
     cd0:	dd c1       	rjmp	.+954    	; 0x108c <tone+0x6a6>
			}
				
			
			//2(b) Set the prescaler for 8 bit timers
			      //TIMER 0
			if (_timer == 0)
     cd2:	c1 11       	cpse	r28, r1
     cd4:	0e c0       	rjmp	.+28     	; 0xcf2 <tone+0x30c>
			{
				TCCR0B = (TCCR0B & 0b11111000) | prescalarbits;
     cd6:	95 b5       	in	r25, 0x25	; 37
     cd8:	98 7f       	andi	r25, 0xF8	; 248
     cda:	89 2b       	or	r24, r25
     cdc:	85 bd       	out	0x25, r24	; 37
				TCCR5B = (TCCR5B & 0b11111000) | prescalarbits;
			}
		}
		
		//4. Calculate the toggle count
		if (duration > 0)
     cde:	81 14       	cp	r8, r1
     ce0:	91 04       	cpc	r9, r1
     ce2:	a1 04       	cpc	r10, r1
     ce4:	b1 04       	cpc	r11, r1
     ce6:	09 f0       	breq	.+2      	; 0xcea <tone+0x304>
     ce8:	82 c0       	rjmp	.+260    	; 0xdee <tone+0x408>
		{
			toggle_count = (2 * frequency * duration)/ 1000;
		}else{
			toggle_count = -1;
     cea:	2f ef       	ldi	r18, 0xFF	; 255
     cec:	3f ef       	ldi	r19, 0xFF	; 255
     cee:	a9 01       	movw	r20, r18
     cf0:	9d c0       	rjmp	.+314    	; 0xe2c <tone+0x446>
			{
				TCCR0B = (TCCR0B & 0b11111000) | prescalarbits;
			}
			else   //TIMER 2
			{
				TCCR2B = (TCCR2B & 0b11111000) | prescalarbits;
     cf2:	e1 eb       	ldi	r30, 0xB1	; 177
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	90 81       	ld	r25, Z
     cf8:	98 7f       	andi	r25, 0xF8	; 248
     cfa:	89 2b       	or	r24, r25
     cfc:	80 83       	st	Z, r24
     cfe:	72 c0       	rjmp	.+228    	; 0xde4 <tone+0x3fe>
			}
			
		}else{
			//3. Prescaling for 16 bit timers
			// two choices for the 16 bit timers: clk/1 or clk/64
			ocr = (F_CPU / (frequency * 2)) - 1;
     d00:	98 01       	movw	r18, r16
     d02:	22 0f       	add	r18, r18
     d04:	33 1f       	adc	r19, r19
     d06:	40 e0       	ldi	r20, 0x00	; 0
     d08:	50 e0       	ldi	r21, 0x00	; 0
     d0a:	60 e0       	ldi	r22, 0x00	; 0
     d0c:	74 e2       	ldi	r23, 0x24	; 36
     d0e:	84 ef       	ldi	r24, 0xF4	; 244
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	11 d4       	rcall	.+2082   	; 0x1536 <__udivmodsi4>
     d14:	69 01       	movw	r12, r18
     d16:	7a 01       	movw	r14, r20
     d18:	91 e0       	ldi	r25, 0x01	; 1
     d1a:	c9 1a       	sub	r12, r25
     d1c:	d1 08       	sbc	r13, r1
     d1e:	e1 08       	sbc	r14, r1
     d20:	f1 08       	sbc	r15, r1
			
			prescalarbits = 0b001; //clk1
			if(ocr > 0xffff) //>65535
     d22:	c1 14       	cp	r12, r1
     d24:	d1 04       	cpc	r13, r1
     d26:	81 e0       	ldi	r24, 0x01	; 1
     d28:	e8 06       	cpc	r14, r24
     d2a:	f1 04       	cpc	r15, r1
     d2c:	b0 f0       	brcs	.+44     	; 0xd5a <tone+0x374>
			{
				ocr = (F_CPU / (frequency * 2 * 64 ))- 1;
     d2e:	98 01       	movw	r18, r16
     d30:	36 95       	lsr	r19
     d32:	32 2f       	mov	r19, r18
     d34:	22 27       	eor	r18, r18
     d36:	37 95       	ror	r19
     d38:	27 95       	ror	r18
     d3a:	40 e0       	ldi	r20, 0x00	; 0
     d3c:	50 e0       	ldi	r21, 0x00	; 0
     d3e:	60 e0       	ldi	r22, 0x00	; 0
     d40:	74 e2       	ldi	r23, 0x24	; 36
     d42:	84 ef       	ldi	r24, 0xF4	; 244
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	f7 d3       	rcall	.+2030   	; 0x1536 <__udivmodsi4>
     d48:	69 01       	movw	r12, r18
     d4a:	7a 01       	movw	r14, r20
     d4c:	91 e0       	ldi	r25, 0x01	; 1
     d4e:	c9 1a       	sub	r12, r25
     d50:	d1 08       	sbc	r13, r1
     d52:	e1 08       	sbc	r14, r1
     d54:	f1 08       	sbc	r15, r1
				prescalarbits = 0b011; //clk/64
     d56:	83 e0       	ldi	r24, 0x03	; 3
     d58:	01 c0       	rjmp	.+2      	; 0xd5c <tone+0x376>
		}else{
			//3. Prescaling for 16 bit timers
			// two choices for the 16 bit timers: clk/1 or clk/64
			ocr = (F_CPU / (frequency * 2)) - 1;
			
			prescalarbits = 0b001; //clk1
     d5a:	81 e0       	ldi	r24, 0x01	; 1
				ocr = (F_CPU / (frequency * 2 * 64 ))- 1;
				prescalarbits = 0b011; //clk/64
			}
			
			//3(b) Set the prescaler for 16 bit timers
			if (_timer == 1)
     d5c:	c1 30       	cpi	r28, 0x01	; 1
     d5e:	79 f4       	brne	.+30     	; 0xd7e <tone+0x398>
			{
				TCCR1B = (TCCR1B & 0b11111000) | prescalarbits;
     d60:	e1 e8       	ldi	r30, 0x81	; 129
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	90 81       	ld	r25, Z
     d66:	98 7f       	andi	r25, 0xF8	; 248
     d68:	89 2b       	or	r24, r25
     d6a:	80 83       	st	Z, r24
				TCCR5B = (TCCR5B & 0b11111000) | prescalarbits;
			}
		}
		
		//4. Calculate the toggle count
		if (duration > 0)
     d6c:	81 14       	cp	r8, r1
     d6e:	91 04       	cpc	r9, r1
     d70:	a1 04       	cpc	r10, r1
     d72:	b1 04       	cpc	r11, r1
     d74:	e1 f5       	brne	.+120    	; 0xdee <tone+0x408>
		{
			toggle_count = (2 * frequency * duration)/ 1000;
		}else{
			toggle_count = -1;
     d76:	2f ef       	ldi	r18, 0xFF	; 255
     d78:	3f ef       	ldi	r19, 0xFF	; 255
     d7a:	a9 01       	movw	r20, r18
     d7c:	66 c0       	rjmp	.+204    	; 0xe4a <tone+0x464>
			//3(b) Set the prescaler for 16 bit timers
			if (_timer == 1)
			{
				TCCR1B = (TCCR1B & 0b11111000) | prescalarbits;
			}
			else if (_timer == 3)
     d7e:	c3 30       	cpi	r28, 0x03	; 3
     d80:	79 f4       	brne	.+30     	; 0xda0 <tone+0x3ba>
			{
				TCCR3B = (TCCR3B & 0b11111000) | prescalarbits;
     d82:	e1 e9       	ldi	r30, 0x91	; 145
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	90 81       	ld	r25, Z
     d88:	98 7f       	andi	r25, 0xF8	; 248
     d8a:	89 2b       	or	r24, r25
     d8c:	80 83       	st	Z, r24
				TCCR5B = (TCCR5B & 0b11111000) | prescalarbits;
			}
		}
		
		//4. Calculate the toggle count
		if (duration > 0)
     d8e:	81 14       	cp	r8, r1
     d90:	91 04       	cpc	r9, r1
     d92:	a1 04       	cpc	r10, r1
     d94:	b1 04       	cpc	r11, r1
     d96:	59 f5       	brne	.+86     	; 0xdee <tone+0x408>
		{
			toggle_count = (2 * frequency * duration)/ 1000;
		}else{
			toggle_count = -1;
     d98:	2f ef       	ldi	r18, 0xFF	; 255
     d9a:	3f ef       	ldi	r19, 0xFF	; 255
     d9c:	a9 01       	movw	r20, r18
     d9e:	77 c0       	rjmp	.+238    	; 0xe8e <tone+0x4a8>
			}
			else if (_timer == 3)
			{
				TCCR3B = (TCCR3B & 0b11111000) | prescalarbits;
			}
			else if (_timer == 4)
     da0:	c4 30       	cpi	r28, 0x04	; 4
     da2:	79 f4       	brne	.+30     	; 0xdc2 <tone+0x3dc>
			{
				TCCR4B = (TCCR4B & 0b11111000) | prescalarbits;
     da4:	e1 ea       	ldi	r30, 0xA1	; 161
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	90 81       	ld	r25, Z
     daa:	98 7f       	andi	r25, 0xF8	; 248
     dac:	89 2b       	or	r24, r25
     dae:	80 83       	st	Z, r24
				TCCR5B = (TCCR5B & 0b11111000) | prescalarbits;
			}
		}
		
		//4. Calculate the toggle count
		if (duration > 0)
     db0:	81 14       	cp	r8, r1
     db2:	91 04       	cpc	r9, r1
     db4:	a1 04       	cpc	r10, r1
     db6:	b1 04       	cpc	r11, r1
     db8:	d1 f4       	brne	.+52     	; 0xdee <tone+0x408>
		{
			toggle_count = (2 * frequency * duration)/ 1000;
		}else{
			toggle_count = -1;
     dba:	2f ef       	ldi	r18, 0xFF	; 255
     dbc:	3f ef       	ldi	r19, 0xFF	; 255
     dbe:	a9 01       	movw	r20, r18
     dc0:	78 c0       	rjmp	.+240    	; 0xeb2 <tone+0x4cc>
			}
			else if (_timer == 4)
			{
				TCCR4B = (TCCR4B & 0b11111000) | prescalarbits;
			}
			else if (_timer == 5)
     dc2:	c5 30       	cpi	r28, 0x05	; 5
     dc4:	79 f4       	brne	.+30     	; 0xde4 <tone+0x3fe>
			{
				TCCR5B = (TCCR5B & 0b11111000) | prescalarbits;
     dc6:	e1 e2       	ldi	r30, 0x21	; 33
     dc8:	f1 e0       	ldi	r31, 0x01	; 1
     dca:	90 81       	ld	r25, Z
     dcc:	98 7f       	andi	r25, 0xF8	; 248
     dce:	89 2b       	or	r24, r25
     dd0:	80 83       	st	Z, r24
			}
		}
		
		//4. Calculate the toggle count
		if (duration > 0)
     dd2:	81 14       	cp	r8, r1
     dd4:	91 04       	cpc	r9, r1
     dd6:	a1 04       	cpc	r10, r1
     dd8:	b1 04       	cpc	r11, r1
     dda:	49 f4       	brne	.+18     	; 0xdee <tone+0x408>
		{
			toggle_count = (2 * frequency * duration)/ 1000;
		}else{
			toggle_count = -1;
     ddc:	2f ef       	ldi	r18, 0xFF	; 255
     dde:	3f ef       	ldi	r19, 0xFF	; 255
     de0:	a9 01       	movw	r20, r18
     de2:	79 c0       	rjmp	.+242    	; 0xed6 <tone+0x4f0>
				TCCR5B = (TCCR5B & 0b11111000) | prescalarbits;
			}
		}
		
		//4. Calculate the toggle count
		if (duration > 0)
     de4:	81 14       	cp	r8, r1
     de6:	91 04       	cpc	r9, r1
     de8:	a1 04       	cpc	r10, r1
     dea:	b1 04       	cpc	r11, r1
		{
			toggle_count = (2 * frequency * duration)/ 1000;
     dec:	61 f0       	breq	.+24     	; 0xe06 <tone+0x420>
     dee:	d8 01       	movw	r26, r16
     df0:	aa 0f       	add	r26, r26
     df2:	bb 1f       	adc	r27, r27
     df4:	a5 01       	movw	r20, r10
     df6:	94 01       	movw	r18, r8
     df8:	c8 d3       	rcall	.+1936   	; 0x158a <__muluhisi3>
     dfa:	28 ee       	ldi	r18, 0xE8	; 232
     dfc:	33 e0       	ldi	r19, 0x03	; 3
     dfe:	40 e0       	ldi	r20, 0x00	; 0
     e00:	50 e0       	ldi	r21, 0x00	; 0
     e02:	99 d3       	rcall	.+1842   	; 0x1536 <__udivmodsi4>
     e04:	03 c0       	rjmp	.+6      	; 0xe0c <tone+0x426>
		}else{
			toggle_count = -1;
     e06:	2f ef       	ldi	r18, 0xFF	; 255
     e08:	3f ef       	ldi	r19, 0xFF	; 255
     e0a:	a9 01       	movw	r20, r18
		}
		
		//5.Set the OCR for the given timer
		//Set the toggle count and then turn on the interrupts
		switch(_timer)
     e0c:	c2 30       	cpi	r28, 0x02	; 2
     e0e:	79 f1       	breq	.+94     	; 0xe6e <tone+0x488>
     e10:	2c f4       	brge	.+10     	; 0xe1c <tone+0x436>
     e12:	cc 23       	and	r28, r28
     e14:	59 f0       	breq	.+22     	; 0xe2c <tone+0x446>
     e16:	c1 30       	cpi	r28, 0x01	; 1
     e18:	c1 f0       	breq	.+48     	; 0xe4a <tone+0x464>
     e1a:	44 c1       	rjmp	.+648    	; 0x10a4 <tone+0x6be>
     e1c:	c4 30       	cpi	r28, 0x04	; 4
     e1e:	09 f4       	brne	.+2      	; 0xe22 <tone+0x43c>
     e20:	48 c0       	rjmp	.+144    	; 0xeb2 <tone+0x4cc>
     e22:	ac f1       	brlt	.+106    	; 0xe8e <tone+0x4a8>
     e24:	c5 30       	cpi	r28, 0x05	; 5
     e26:	09 f4       	brne	.+2      	; 0xe2a <tone+0x444>
     e28:	56 c0       	rjmp	.+172    	; 0xed6 <tone+0x4f0>
     e2a:	3c c1       	rjmp	.+632    	; 0x10a4 <tone+0x6be>
		{
			case 0:
				OCR0A = ocr;
     e2c:	c7 bc       	out	0x27, r12	; 39
				timer0_toggle_count = toggle_count;
     e2e:	20 93 6d 02 	sts	0x026D, r18	; 0x80026d <timer0_toggle_count>
     e32:	30 93 6e 02 	sts	0x026E, r19	; 0x80026e <timer0_toggle_count+0x1>
     e36:	40 93 6f 02 	sts	0x026F, r20	; 0x80026f <timer0_toggle_count+0x2>
     e3a:	50 93 70 02 	sts	0x0270, r21	; 0x800270 <timer0_toggle_count+0x3>
				bitWrite(TIMSK0, OCIE0A, 1); //turn on interrupt
     e3e:	ee e6       	ldi	r30, 0x6E	; 110
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	82 60       	ori	r24, 0x02	; 2
     e46:	80 83       	st	Z, r24
			break;
     e48:	2d c1       	rjmp	.+602    	; 0x10a4 <tone+0x6be>
			
			case 1:
				OCR1A = ocr;
     e4a:	d0 92 89 00 	sts	0x0089, r13	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
     e4e:	c0 92 88 00 	sts	0x0088, r12	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
				timer1_toggle_count = toggle_count;
     e52:	20 93 66 02 	sts	0x0266, r18	; 0x800266 <timer1_toggle_count>
     e56:	30 93 67 02 	sts	0x0267, r19	; 0x800267 <timer1_toggle_count+0x1>
     e5a:	40 93 68 02 	sts	0x0268, r20	; 0x800268 <timer1_toggle_count+0x2>
     e5e:	50 93 69 02 	sts	0x0269, r21	; 0x800269 <timer1_toggle_count+0x3>
				bitWrite(TIMSK1, OCIE1A, 1);
     e62:	ef e6       	ldi	r30, 0x6F	; 111
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 81       	ld	r24, Z
     e68:	82 60       	ori	r24, 0x02	; 2
     e6a:	80 83       	st	Z, r24
			break;
     e6c:	1b c1       	rjmp	.+566    	; 0x10a4 <tone+0x6be>
			
			case 2:
				OCR2A = ocr;
     e6e:	c0 92 b3 00 	sts	0x00B3, r12	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
				timer2_toggle_count = toggle_count;
     e72:	20 93 72 02 	sts	0x0272, r18	; 0x800272 <timer2_toggle_count>
     e76:	30 93 73 02 	sts	0x0273, r19	; 0x800273 <timer2_toggle_count+0x1>
     e7a:	40 93 74 02 	sts	0x0274, r20	; 0x800274 <timer2_toggle_count+0x2>
     e7e:	50 93 75 02 	sts	0x0275, r21	; 0x800275 <timer2_toggle_count+0x3>
				bitWrite(TIMSK2, OCIE2A, 1);
     e82:	e0 e7       	ldi	r30, 0x70	; 112
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	82 60       	ori	r24, 0x02	; 2
     e8a:	80 83       	st	Z, r24
			break;
     e8c:	0b c1       	rjmp	.+534    	; 0x10a4 <tone+0x6be>
			
			case 3:
				OCR3A = ocr;
     e8e:	d0 92 99 00 	sts	0x0099, r13	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
     e92:	c0 92 98 00 	sts	0x0098, r12	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
				timer3_toggle_count = toggle_count;
     e96:	20 93 5b 02 	sts	0x025B, r18	; 0x80025b <timer3_toggle_count>
     e9a:	30 93 5c 02 	sts	0x025C, r19	; 0x80025c <timer3_toggle_count+0x1>
     e9e:	40 93 5d 02 	sts	0x025D, r20	; 0x80025d <timer3_toggle_count+0x2>
     ea2:	50 93 5e 02 	sts	0x025E, r21	; 0x80025e <timer3_toggle_count+0x3>
				//bitWrite(TIMSK3, OCIE3A, 1);
				TIMSK3 |= 1<<OCIE3A;
     ea6:	e1 e7       	ldi	r30, 0x71	; 113
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	80 81       	ld	r24, Z
     eac:	82 60       	ori	r24, 0x02	; 2
     eae:	80 83       	st	Z, r24
			break;
     eb0:	f9 c0       	rjmp	.+498    	; 0x10a4 <tone+0x6be>
			
			case 4:
				OCR4A = ocr;
     eb2:	d0 92 a9 00 	sts	0x00A9, r13	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
     eb6:	c0 92 a8 00 	sts	0x00A8, r12	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
				timer4_toggle_count = toggle_count;
     eba:	20 93 57 02 	sts	0x0257, r18	; 0x800257 <timer4_toggle_count>
     ebe:	30 93 58 02 	sts	0x0258, r19	; 0x800258 <timer4_toggle_count+0x1>
     ec2:	40 93 59 02 	sts	0x0259, r20	; 0x800259 <timer4_toggle_count+0x2>
     ec6:	50 93 5a 02 	sts	0x025A, r21	; 0x80025a <timer4_toggle_count+0x3>
				bitWrite(TIMSK4, OCIE4A, 1);
     eca:	e2 e7       	ldi	r30, 0x72	; 114
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	80 81       	ld	r24, Z
     ed0:	82 60       	ori	r24, 0x02	; 2
     ed2:	80 83       	st	Z, r24
			break;
     ed4:	e7 c0       	rjmp	.+462    	; 0x10a4 <tone+0x6be>
			
			case 5:
				OCR5A = ocr;
     ed6:	d0 92 29 01 	sts	0x0129, r13	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
     eda:	c0 92 28 01 	sts	0x0128, r12	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
				timer5_toggle_count = toggle_count;
     ede:	20 93 4e 02 	sts	0x024E, r18	; 0x80024e <timer5_toggle_count>
     ee2:	30 93 4f 02 	sts	0x024F, r19	; 0x80024f <timer5_toggle_count+0x1>
     ee6:	40 93 50 02 	sts	0x0250, r20	; 0x800250 <timer5_toggle_count+0x2>
     eea:	50 93 51 02 	sts	0x0251, r21	; 0x800251 <timer5_toggle_count+0x3>
				bitWrite(TIMSK5, OCIE5A, 1);
     eee:	e3 e7       	ldi	r30, 0x73	; 115
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	82 60       	ori	r24, 0x02	; 2
     ef6:	80 83       	st	Z, r24
			break;
		}		
	}
}
     ef8:	d5 c0       	rjmp	.+426    	; 0x10a4 <tone+0x6be>
			ocr = (F_CPU / (frequency * 2)) - 1;
			prescalarbits = 0b001; // clk/1 prescaler (No prescaling) : For both timers
			
			if (ocr > 255) // above prescaler failed
			{
				ocr = (F_CPU / (frequency * 2 * 8)) - 1;
     efa:	98 01       	movw	r18, r16
     efc:	22 95       	swap	r18
     efe:	32 95       	swap	r19
     f00:	30 7f       	andi	r19, 0xF0	; 240
     f02:	32 27       	eor	r19, r18
     f04:	20 7f       	andi	r18, 0xF0	; 240
     f06:	32 27       	eor	r19, r18
     f08:	40 e0       	ldi	r20, 0x00	; 0
     f0a:	50 e0       	ldi	r21, 0x00	; 0
     f0c:	60 e0       	ldi	r22, 0x00	; 0
     f0e:	74 e2       	ldi	r23, 0x24	; 36
     f10:	84 ef       	ldi	r24, 0xF4	; 244
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	10 d3       	rcall	.+1568   	; 0x1536 <__udivmodsi4>
     f16:	69 01       	movw	r12, r18
     f18:	7a 01       	movw	r14, r20
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	c8 1a       	sub	r12, r24
     f1e:	d1 08       	sbc	r13, r1
     f20:	e1 08       	sbc	r14, r1
     f22:	f1 08       	sbc	r15, r1
				prescalarbits = 0b010; // clk/8 prescaler : For both timers
				
				if (_timer == 2 && ocr > 255)
     f24:	9f ef       	ldi	r25, 0xFF	; 255
     f26:	c9 16       	cp	r12, r25
     f28:	d1 04       	cpc	r13, r1
     f2a:	e1 04       	cpc	r14, r1
     f2c:	f1 04       	cpc	r15, r1
     f2e:	11 f0       	breq	.+4      	; 0xf34 <tone+0x54e>
     f30:	08 f0       	brcs	.+2      	; 0xf34 <tone+0x54e>
			prescalarbits = 0b001; // clk/1 prescaler (No prescaling) : For both timers
			
			if (ocr > 255) // above prescaler failed
			{
				ocr = (F_CPU / (frequency * 2 * 8)) - 1;
				prescalarbits = 0b010; // clk/8 prescaler : For both timers
     f32:	70 ce       	rjmp	.-800    	; 0xc14 <tone+0x22e>
     f34:	82 e0       	ldi	r24, 0x02	; 2
		pinMode(_pin, OUTPUT);
		
		//2. if we are using an 8 bit timer, scan through prescalers to find the best fit
		if (_timer == 0 || _timer == 2)
		{
			ocr = (F_CPU / (frequency * 2)) - 1;
     f36:	dd ce       	rjmp	.-582    	; 0xcf2 <tone+0x30c>
     f38:	98 01       	movw	r18, r16
     f3a:	22 0f       	add	r18, r18
     f3c:	33 1f       	adc	r19, r19
     f3e:	40 e0       	ldi	r20, 0x00	; 0
     f40:	50 e0       	ldi	r21, 0x00	; 0
     f42:	60 e0       	ldi	r22, 0x00	; 0
     f44:	74 e2       	ldi	r23, 0x24	; 36
     f46:	84 ef       	ldi	r24, 0xF4	; 244
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	f5 d2       	rcall	.+1514   	; 0x1536 <__udivmodsi4>
     f4c:	69 01       	movw	r12, r18
     f4e:	7a 01       	movw	r14, r20
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	c8 1a       	sub	r12, r24
     f54:	d1 08       	sbc	r13, r1
     f56:	e1 08       	sbc	r14, r1
     f58:	f1 08       	sbc	r15, r1
			prescalarbits = 0b001; // clk/1 prescaler (No prescaling) : For both timers
			
			if (ocr > 255) // above prescaler failed
     f5a:	9f ef       	ldi	r25, 0xFF	; 255
     f5c:	c9 16       	cp	r12, r25
     f5e:	d1 04       	cpc	r13, r1
     f60:	e1 04       	cpc	r14, r1
     f62:	f1 04       	cpc	r15, r1
     f64:	09 f0       	breq	.+2      	; 0xf68 <tone+0x582>
     f66:	48 f6       	brcc	.-110    	; 0xefa <tone+0x514>
		
		//2. if we are using an 8 bit timer, scan through prescalers to find the best fit
		if (_timer == 0 || _timer == 2)
		{
			ocr = (F_CPU / (frequency * 2)) - 1;
			prescalarbits = 0b001; // clk/1 prescaler (No prescaling) : For both timers
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	c3 ce       	rjmp	.-634    	; 0xcf2 <tone+0x30c>
			
			if (ocr > 255) // above prescaler failed
			{
				ocr = (F_CPU / (frequency * 2 * 8)) - 1;
     f6c:	98 01       	movw	r18, r16
     f6e:	22 95       	swap	r18
     f70:	32 95       	swap	r19
     f72:	30 7f       	andi	r19, 0xF0	; 240
     f74:	32 27       	eor	r19, r18
     f76:	20 7f       	andi	r18, 0xF0	; 240
     f78:	32 27       	eor	r19, r18
     f7a:	40 e0       	ldi	r20, 0x00	; 0
     f7c:	50 e0       	ldi	r21, 0x00	; 0
     f7e:	60 e0       	ldi	r22, 0x00	; 0
     f80:	74 e2       	ldi	r23, 0x24	; 36
     f82:	84 ef       	ldi	r24, 0xF4	; 244
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	d7 d2       	rcall	.+1454   	; 0x1536 <__udivmodsi4>
     f88:	69 01       	movw	r12, r18
     f8a:	7a 01       	movw	r14, r20
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	c8 1a       	sub	r12, r24
     f90:	d1 08       	sbc	r13, r1
     f92:	e1 08       	sbc	r14, r1
     f94:	f1 08       	sbc	r15, r1
				{
					ocr = (F_CPU / frequency / 2 / 32) - 1;
					prescalarbits = 0b011; // clk/32
				}
					
				if(ocr > 255)
     f96:	9f ef       	ldi	r25, 0xFF	; 255
     f98:	c9 16       	cp	r12, r25
     f9a:	d1 04       	cpc	r13, r1
     f9c:	e1 04       	cpc	r14, r1
     f9e:	f1 04       	cpc	r15, r1
     fa0:	11 f0       	breq	.+4      	; 0xfa6 <tone+0x5c0>
     fa2:	08 f0       	brcs	.+2      	; 0xfa6 <tone+0x5c0>
			prescalarbits = 0b001; // clk/1 prescaler (No prescaling) : For both timers
			
			if (ocr > 255) // above prescaler failed
			{
				ocr = (F_CPU / (frequency * 2 * 8)) - 1;
				prescalarbits = 0b010; // clk/8 prescaler : For both timers
     fa4:	52 ce       	rjmp	.-860    	; 0xc4a <tone+0x264>
     fa6:	82 e0       	ldi	r24, 0x02	; 2
		pinMode(_pin, OUTPUT);
		
		//2. if we are using an 8 bit timer, scan through prescalers to find the best fit
		if (_timer == 0 || _timer == 2)
		{
			ocr = (F_CPU / (frequency * 2)) - 1;
     fa8:	96 ce       	rjmp	.-724    	; 0xcd6 <tone+0x2f0>
     faa:	98 01       	movw	r18, r16
     fac:	22 0f       	add	r18, r18
     fae:	33 1f       	adc	r19, r19
     fb0:	40 e0       	ldi	r20, 0x00	; 0
     fb2:	50 e0       	ldi	r21, 0x00	; 0
     fb4:	60 e0       	ldi	r22, 0x00	; 0
     fb6:	74 e2       	ldi	r23, 0x24	; 36
     fb8:	84 ef       	ldi	r24, 0xF4	; 244
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	bc d2       	rcall	.+1400   	; 0x1536 <__udivmodsi4>
     fbe:	69 01       	movw	r12, r18
     fc0:	7a 01       	movw	r14, r20
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	c8 1a       	sub	r12, r24
     fc6:	d1 08       	sbc	r13, r1
     fc8:	e1 08       	sbc	r14, r1
     fca:	f1 08       	sbc	r15, r1
			prescalarbits = 0b001; // clk/1 prescaler (No prescaling) : For both timers
			
			if (ocr > 255) // above prescaler failed
     fcc:	9f ef       	ldi	r25, 0xFF	; 255
     fce:	c9 16       	cp	r12, r25
     fd0:	d1 04       	cpc	r13, r1
     fd2:	e1 04       	cpc	r14, r1
     fd4:	f1 04       	cpc	r15, r1
     fd6:	09 f0       	breq	.+2      	; 0xfda <tone+0x5f4>
		
		//2. if we are using an 8 bit timer, scan through prescalers to find the best fit
		if (_timer == 0 || _timer == 2)
		{
			ocr = (F_CPU / (frequency * 2)) - 1;
			prescalarbits = 0b001; // clk/1 prescaler (No prescaling) : For both timers
     fd8:	48 f6       	brcc	.-110    	; 0xf6c <tone+0x586>
     fda:	81 e0       	ldi	r24, 0x01	; 1
					prescalarbits = 0b011; // clk/32
				}
					
				if(ocr > 255)
				{
					ocr = (F_CPU / (frequency * 2 * 64)) - 1;
     fdc:	7c ce       	rjmp	.-776    	; 0xcd6 <tone+0x2f0>
     fde:	98 01       	movw	r18, r16
     fe0:	36 95       	lsr	r19
     fe2:	32 2f       	mov	r19, r18
     fe4:	22 27       	eor	r18, r18
     fe6:	37 95       	ror	r19
     fe8:	27 95       	ror	r18
     fea:	40 e0       	ldi	r20, 0x00	; 0
     fec:	50 e0       	ldi	r21, 0x00	; 0
     fee:	60 e0       	ldi	r22, 0x00	; 0
     ff0:	74 e2       	ldi	r23, 0x24	; 36
     ff2:	84 ef       	ldi	r24, 0xF4	; 244
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	9f d2       	rcall	.+1342   	; 0x1536 <__udivmodsi4>
     ff8:	69 01       	movw	r12, r18
     ffa:	7a 01       	movw	r14, r20
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	c8 1a       	sub	r12, r24
    1000:	d1 08       	sbc	r13, r1
    1002:	e1 08       	sbc	r14, r1
    1004:	f1 08       	sbc	r15, r1
					prescalarbits = _timer == 0 ? 0b011 : 0b100; // clk/32 for timer 1: clk/64 for timer 2
					
					if (_timer == 2 && ocr > 255)
    1006:	9f ef       	ldi	r25, 0xFF	; 255
    1008:	c9 16       	cp	r12, r25
    100a:	d1 04       	cpc	r13, r1
    100c:	e1 04       	cpc	r14, r1
    100e:	f1 04       	cpc	r15, r1
    1010:	11 f0       	breq	.+4      	; 0x1016 <tone+0x630>
    1012:	08 f0       	brcs	.+2      	; 0x1016 <tone+0x630>
    1014:	30 ce       	rjmp	.-928    	; 0xc76 <tone+0x290>
    1016:	84 e0       	ldi	r24, 0x04	; 4
    1018:	6c ce       	rjmp	.-808    	; 0xcf2 <tone+0x30c>
		}
	}
	  
	// search for an unused timer.
	for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
		if (tone_pins[i] == 255) {
    101a:	9f 3f       	cpi	r25, 0xFF	; 255
    101c:	09 f0       	breq	.+2      	; 0x1020 <tone+0x63a>
    101e:	42 c0       	rjmp	.+132    	; 0x10a4 <tone+0x6be>
						ocr = (F_CPU / (frequency * 2 * 256))- 1;
						prescalarbits = _timer == 0 ? 0b100 : 0b110;  // clk/64 for timer 1: clk/256 for timer 2
						if (ocr > 255)
						{
							// can't do any better than /1024
							ocr = (F_CPU / (frequency * 2 * 1024)) - 1;
    1020:	f9 cc       	rjmp	.-1550   	; 0xa14 <tone+0x2e>
    1022:	98 01       	movw	r18, r16
    1024:	32 2f       	mov	r19, r18
    1026:	22 27       	eor	r18, r18
    1028:	33 0f       	add	r19, r19
    102a:	33 0f       	add	r19, r19
    102c:	33 0f       	add	r19, r19
    102e:	40 e0       	ldi	r20, 0x00	; 0
    1030:	50 e0       	ldi	r21, 0x00	; 0
    1032:	60 e0       	ldi	r22, 0x00	; 0
    1034:	74 e2       	ldi	r23, 0x24	; 36
    1036:	84 ef       	ldi	r24, 0xF4	; 244
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	7d d2       	rcall	.+1274   	; 0x1536 <__udivmodsi4>
    103c:	69 01       	movw	r12, r18
    103e:	7a 01       	movw	r14, r20
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	c8 1a       	sub	r12, r24
    1044:	d1 08       	sbc	r13, r1
    1046:	e1 08       	sbc	r14, r1
    1048:	f1 08       	sbc	r15, r1
							prescalarbits = _timer == 0 ? 0b101 : 0b111; // clk/128 for timer 1: clk/1024 for timer 2
    104a:	85 e0       	ldi	r24, 0x05	; 5
    104c:	44 ce       	rjmp	.-888    	; 0xcd6 <tone+0x2f0>

					if (ocr > 255)
					{
						ocr = (F_CPU / (frequency * 2 * 256))- 1;
						prescalarbits = _timer == 0 ? 0b100 : 0b110;  // clk/64 for timer 1: clk/256 for timer 2
						if (ocr > 255)
    104e:	9f ef       	ldi	r25, 0xFF	; 255
    1050:	c9 16       	cp	r12, r25
    1052:	d1 04       	cpc	r13, r1
    1054:	e1 04       	cpc	r14, r1
    1056:	f1 04       	cpc	r15, r1
    1058:	09 f0       	breq	.+2      	; 0x105c <tone+0x676>
					}

					if (ocr > 255)
					{
						ocr = (F_CPU / (frequency * 2 * 256))- 1;
						prescalarbits = _timer == 0 ? 0b100 : 0b110;  // clk/64 for timer 1: clk/256 for timer 2
    105a:	18 f7       	brcc	.-58     	; 0x1022 <tone+0x63c>
    105c:	84 e0       	ldi	r24, 0x04	; 4
						if (ocr > 255)
						{
							// can't do any better than /1024
							ocr = (F_CPU / (frequency * 2 * 1024)) - 1;
    105e:	39 ce       	rjmp	.-910    	; 0xcd2 <tone+0x2ec>
    1060:	98 01       	movw	r18, r16
    1062:	32 2f       	mov	r19, r18
    1064:	22 27       	eor	r18, r18
    1066:	33 0f       	add	r19, r19
    1068:	33 0f       	add	r19, r19
    106a:	33 0f       	add	r19, r19
    106c:	40 e0       	ldi	r20, 0x00	; 0
    106e:	50 e0       	ldi	r21, 0x00	; 0
    1070:	60 e0       	ldi	r22, 0x00	; 0
    1072:	74 e2       	ldi	r23, 0x24	; 36
    1074:	84 ef       	ldi	r24, 0xF4	; 244
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	5e d2       	rcall	.+1212   	; 0x1536 <__udivmodsi4>
    107a:	69 01       	movw	r12, r18
    107c:	7a 01       	movw	r14, r20
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	c8 1a       	sub	r12, r24
    1082:	d1 08       	sbc	r13, r1
    1084:	e1 08       	sbc	r14, r1
							prescalarbits = _timer == 0 ? 0b101 : 0b111; // clk/128 for timer 1: clk/1024 for timer 2
    1086:	f1 08       	sbc	r15, r1
    1088:	87 e0       	ldi	r24, 0x07	; 7

					if (ocr > 255)
					{
						ocr = (F_CPU / (frequency * 2 * 256))- 1;
						prescalarbits = _timer == 0 ? 0b100 : 0b110;  // clk/64 for timer 1: clk/256 for timer 2
						if (ocr > 255)
    108a:	33 ce       	rjmp	.-922    	; 0xcf2 <tone+0x30c>
    108c:	9f ef       	ldi	r25, 0xFF	; 255
    108e:	c9 16       	cp	r12, r25
    1090:	d1 04       	cpc	r13, r1
    1092:	e1 04       	cpc	r14, r1
    1094:	f1 04       	cpc	r15, r1
    1096:	09 f0       	breq	.+2      	; 0x109a <tone+0x6b4>
					}

					if (ocr > 255)
					{
						ocr = (F_CPU / (frequency * 2 * 256))- 1;
						prescalarbits = _timer == 0 ? 0b100 : 0b110;  // clk/64 for timer 1: clk/256 for timer 2
    1098:	18 f7       	brcc	.-58     	; 0x1060 <tone+0x67a>
    109a:	86 e0       	ldi	r24, 0x06	; 6
	_timer = toneBegin(_pin);
	
	if (_timer >= 0)
	{
		//1. set the pin as OUTPUT
		pinMode(_pin, OUTPUT);
    109c:	1a ce       	rjmp	.-972    	; 0xcd2 <tone+0x2ec>
    109e:	61 e0       	ldi	r22, 0x01	; 1
    10a0:	61 da       	rcall	.-2878   	; 0x564 <pinMode>
    10a2:	2e ce       	rjmp	.-932    	; 0xd00 <tone+0x31a>
				timer5_toggle_count = toggle_count;
				bitWrite(TIMSK5, OCIE5A, 1);
			break;
		}		
	}
}
    10a4:	cf 91       	pop	r28
    10a6:	1f 91       	pop	r17
    10a8:	0f 91       	pop	r16
    10aa:	ff 90       	pop	r15
    10ac:	ef 90       	pop	r14
    10ae:	df 90       	pop	r13
    10b0:	cf 90       	pop	r12
    10b2:	bf 90       	pop	r11
    10b4:	af 90       	pop	r10
    10b6:	9f 90       	pop	r9
    10b8:	8f 90       	pop	r8
    10ba:	08 95       	ret

000010bc <disableTimer>:
This function only works properly for timer 2 (the only one we use currently).  
for the others, it should end the tone, but won't restore proper PWM functionality for the timer. TODO
*/
void disableTimer(uint8_t _timer)
{
	switch(_timer)
    10bc:	82 30       	cpi	r24, 0x02	; 2
    10be:	a9 f0       	breq	.+42     	; 0x10ea <disableTimer+0x2e>
    10c0:	28 f4       	brcc	.+10     	; 0x10cc <disableTimer+0x10>
    10c2:	88 23       	and	r24, r24
    10c4:	49 f0       	breq	.+18     	; 0x10d8 <disableTimer+0x1c>
    10c6:	81 30       	cpi	r24, 0x01	; 1
    10c8:	51 f0       	breq	.+20     	; 0x10de <disableTimer+0x22>
    10ca:	08 95       	ret
    10cc:	84 30       	cpi	r24, 0x04	; 4
    10ce:	21 f1       	breq	.+72     	; 0x1118 <disableTimer+0x5c>
    10d0:	e8 f0       	brcs	.+58     	; 0x110c <disableTimer+0x50>
    10d2:	85 30       	cpi	r24, 0x05	; 5
    10d4:	39 f1       	breq	.+78     	; 0x1124 <disableTimer+0x68>
    10d6:	08 95       	ret
	{
		case 0:
		TIMSK0 = 0;
    10d8:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
		break;
    10dc:	08 95       	ret
		case 1:
			bitWrite(TIMSK1, OCIE1A, 0);
    10de:	ef e6       	ldi	r30, 0x6F	; 111
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	80 81       	ld	r24, Z
    10e4:	8d 7f       	andi	r24, 0xFD	; 253
    10e6:	80 83       	st	Z, r24
		break;
    10e8:	08 95       	ret
		case 2:
			bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
    10ea:	e0 e7       	ldi	r30, 0x70	; 112
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	80 81       	ld	r24, Z
    10f0:	8d 7f       	andi	r24, 0xFD	; 253
    10f2:	80 83       	st	Z, r24
			TCCR2A = (1 << WGM20);		 // restore normal  PWM mode
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
			TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22); //clk/64 prescaler
    10fa:	e1 eb       	ldi	r30, 0xB1	; 177
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	80 81       	ld	r24, Z
    1100:	88 7f       	andi	r24, 0xF8	; 248
    1102:	84 60       	ori	r24, 0x04	; 4
    1104:	80 83       	st	Z, r24
			OCR2A = 0;
    1106:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
		break;
    110a:	08 95       	ret
		case 3:
			bitWrite(TIMSK3, OCIE3A, 0);
    110c:	e1 e7       	ldi	r30, 0x71	; 113
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	80 81       	ld	r24, Z
    1112:	8d 7f       	andi	r24, 0xFD	; 253
    1114:	80 83       	st	Z, r24
		break;
    1116:	08 95       	ret
		case 4:
			bitWrite(TIMSK4, OCIE4A, 0);
    1118:	e2 e7       	ldi	r30, 0x72	; 114
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	8d 7f       	andi	r24, 0xFD	; 253
    1120:	80 83       	st	Z, r24
		break;
    1122:	08 95       	ret
		case 5:
			bitWrite(TIMSK5, OCIE5A, 0);
    1124:	e3 e7       	ldi	r30, 0x73	; 115
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	80 81       	ld	r24, Z
    112a:	8d 7f       	andi	r24, 0xFD	; 253
    112c:	80 83       	st	Z, r24
    112e:	08 95       	ret

00001130 <noTone>:
	}
}


void noTone(uint8_t _pin)
{
    1130:	cf 93       	push	r28
    1132:	c8 2f       	mov	r28, r24
	int8_t _timer = -1;
	  
	for (int i = 0; i < AVAILABLE_TONE_PINS; i++)
	{
		if (tone_pins[i] == _pin) {
    1134:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    1138:	c8 13       	cpse	r28, r24
    113a:	07 c0       	rjmp	.+14     	; 0x114a <noTone+0x1a>
			_timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
    113c:	eb e6       	ldi	r30, 0x6B	; 107
    113e:	f2 e0       	ldi	r31, 0x02	; 2
    1140:	84 91       	lpm	r24, Z
			tone_pins[i] = 255;
    1142:	9f ef       	ldi	r25, 0xFF	; 255
    1144:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <__DATA_REGION_ORIGIN__>
			break;
    1148:	01 c0       	rjmp	.+2      	; 0x114c <noTone+0x1c>
}


void noTone(uint8_t _pin)
{
	int8_t _timer = -1;
    114a:	8f ef       	ldi	r24, 0xFF	; 255
			tone_pins[i] = 255;
			break;
		}
	}
	  
	disableTimer(_timer);
    114c:	b7 df       	rcall	.-146    	; 0x10bc <disableTimer>
	digitalWrite(_pin, 0);
    114e:	60 e0       	ldi	r22, 0x00	; 0
    1150:	8c 2f       	mov	r24, r28
    1152:	47 da       	rcall	.-2930   	; 0x5e2 <digitalWrite>
}
    1154:	cf 91       	pop	r28
    1156:	08 95       	ret

00001158 <__vector_32>:
}
#endif

#ifdef USE_TIMER3
ISR(TIMER3_COMPA_vect)
{
    1158:	1f 92       	push	r1
    115a:	0f 92       	push	r0
    115c:	0f b6       	in	r0, 0x3f	; 63
    115e:	0f 92       	push	r0
    1160:	11 24       	eor	r1, r1
    1162:	0b b6       	in	r0, 0x3b	; 59
    1164:	0f 92       	push	r0
    1166:	2f 93       	push	r18
    1168:	3f 93       	push	r19
    116a:	4f 93       	push	r20
    116c:	5f 93       	push	r21
    116e:	6f 93       	push	r22
    1170:	7f 93       	push	r23
    1172:	8f 93       	push	r24
    1174:	9f 93       	push	r25
    1176:	af 93       	push	r26
    1178:	bf 93       	push	r27
    117a:	ef 93       	push	r30
    117c:	ff 93       	push	r31
	if (timer3_toggle_count != 0)
    117e:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <timer3_toggle_count>
    1182:	90 91 5c 02 	lds	r25, 0x025C	; 0x80025c <timer3_toggle_count+0x1>
    1186:	a0 91 5d 02 	lds	r26, 0x025D	; 0x80025d <timer3_toggle_count+0x2>
    118a:	b0 91 5e 02 	lds	r27, 0x025E	; 0x80025e <timer3_toggle_count+0x3>
    118e:	89 2b       	or	r24, r25
    1190:	8a 2b       	or	r24, r26
    1192:	8b 2b       	or	r24, r27
    1194:	51 f1       	breq	.+84     	; 0x11ea <__vector_32+0x92>
	{
		// toggle the pin
		*timer3_pin_port ^= timer3_pin_mask;
    1196:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <timer3_pin_mask>
    119a:	e0 91 55 02 	lds	r30, 0x0255	; 0x800255 <timer3_pin_port>
    119e:	f0 91 56 02 	lds	r31, 0x0256	; 0x800256 <timer3_pin_port+0x1>
    11a2:	80 81       	ld	r24, Z
    11a4:	89 27       	eor	r24, r25
    11a6:	80 83       	st	Z, r24
		
		if (timer3_toggle_count > 0)
    11a8:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <timer3_toggle_count>
    11ac:	90 91 5c 02 	lds	r25, 0x025C	; 0x80025c <timer3_toggle_count+0x1>
    11b0:	a0 91 5d 02 	lds	r26, 0x025D	; 0x80025d <timer3_toggle_count+0x2>
    11b4:	b0 91 5e 02 	lds	r27, 0x025E	; 0x80025e <timer3_toggle_count+0x3>
    11b8:	18 16       	cp	r1, r24
    11ba:	19 06       	cpc	r1, r25
    11bc:	1a 06       	cpc	r1, r26
    11be:	1b 06       	cpc	r1, r27
    11c0:	04 f5       	brge	.+64     	; 0x1202 <__vector_32+0xaa>
			timer3_toggle_count--;
    11c2:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <timer3_toggle_count>
    11c6:	90 91 5c 02 	lds	r25, 0x025C	; 0x80025c <timer3_toggle_count+0x1>
    11ca:	a0 91 5d 02 	lds	r26, 0x025D	; 0x80025d <timer3_toggle_count+0x2>
    11ce:	b0 91 5e 02 	lds	r27, 0x025E	; 0x80025e <timer3_toggle_count+0x3>
    11d2:	01 97       	sbiw	r24, 0x01	; 1
    11d4:	a1 09       	sbc	r26, r1
    11d6:	b1 09       	sbc	r27, r1
    11d8:	80 93 5b 02 	sts	0x025B, r24	; 0x80025b <timer3_toggle_count>
    11dc:	90 93 5c 02 	sts	0x025C, r25	; 0x80025c <timer3_toggle_count+0x1>
    11e0:	a0 93 5d 02 	sts	0x025D, r26	; 0x80025d <timer3_toggle_count+0x2>
    11e4:	b0 93 5e 02 	sts	0x025E, r27	; 0x80025e <timer3_toggle_count+0x3>
    11e8:	0c c0       	rjmp	.+24     	; 0x1202 <__vector_32+0xaa>
	}
	else
	{
		disableTimer(3);
    11ea:	83 e0       	ldi	r24, 0x03	; 3
    11ec:	67 df       	rcall	.-306    	; 0x10bc <disableTimer>
		
		*timer3_pin_port &= ~(timer3_pin_mask);  // keep pin low after stop
    11ee:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <timer3_pin_mask>
    11f2:	e0 91 55 02 	lds	r30, 0x0255	; 0x800255 <timer3_pin_port>
    11f6:	f0 91 56 02 	lds	r31, 0x0256	; 0x800256 <timer3_pin_port+0x1>
    11fa:	90 81       	ld	r25, Z
    11fc:	80 95       	com	r24
    11fe:	89 23       	and	r24, r25
    1200:	80 83       	st	Z, r24
	}
}
    1202:	ff 91       	pop	r31
    1204:	ef 91       	pop	r30
    1206:	bf 91       	pop	r27
    1208:	af 91       	pop	r26
    120a:	9f 91       	pop	r25
    120c:	8f 91       	pop	r24
    120e:	7f 91       	pop	r23
    1210:	6f 91       	pop	r22
    1212:	5f 91       	pop	r21
    1214:	4f 91       	pop	r20
    1216:	3f 91       	pop	r19
    1218:	2f 91       	pop	r18
    121a:	0f 90       	pop	r0
    121c:	0b be       	out	0x3b, r0	; 59
    121e:	0f 90       	pop	r0
    1220:	0f be       	out	0x3f, r0	; 63
    1222:	0f 90       	pop	r0
    1224:	1f 90       	pop	r1
    1226:	18 95       	reti

00001228 <main>:
	4, 8, 8, 4, 4, 4, 4, 4
};

int main(void)
{
	millis_init();
    1228:	1e db       	rcall	.-2500   	; 0x866 <millis_init>
	pwm_init();
    122a:	17 da       	rcall	.-3026   	; 0x65a <pwm_init>
	
	lcd_init();
    122c:	f4 d8       	rcall	.-3608   	; 0x416 <lcd_init>
    122e:	c6 d8       	rcall	.-3700   	; 0x3bc <lcd_clear>
	lcd_clear();
    1230:	40 e0       	ldi	r20, 0x00	; 0
    1232:	60 e0       	ldi	r22, 0x00	; 0
	LCD_PrintString("MCU TRAINING KIT",0,0);
    1234:	81 e2       	ldi	r24, 0x21	; 33
    1236:	92 e0       	ldi	r25, 0x02	; 2
    1238:	8a d9       	rcall	.-3308   	; 0x54e <LCD_PrintString>
    123a:	61 e0       	ldi	r22, 0x01	; 1
	
	pinMode(Pin_PK4, OUTPUT);
    123c:	85 e5       	ldi	r24, 0x55	; 85
    123e:	92 d9       	rcall	.-3292   	; 0x564 <pinMode>
    1240:	61 e0       	ldi	r22, 0x01	; 1
	pinMode(Pin_PK3, OUTPUT);
    1242:	86 e5       	ldi	r24, 0x56	; 86
    1244:	8f d9       	rcall	.-3298   	; 0x564 <pinMode>
    1246:	60 e0       	ldi	r22, 0x00	; 0
	pinMode(Pin_PJ2, INPUT);
    1248:	81 e4       	ldi	r24, 0x41	; 65
    124a:	8c d9       	rcall	.-3304   	; 0x564 <pinMode>
    124c:	6d e7       	ldi	r22, 0x7D	; 125
    124e:	70 e0       	ldi	r23, 0x00	; 0
	
	analogWrite(Pin_PH3,125);
    1250:	8f e0       	ldi	r24, 0x0F	; 15
    1252:	43 da       	rcall	.-2938   	; 0x6da <analogWrite>
    1254:	c1 e0       	ldi	r28, 0x01	; 1
    1256:	d2 e0       	ldi	r29, 0x02	; 2
    1258:	01 e1       	ldi	r16, 0x11	; 17
    125a:	12 e0       	ldi	r17, 0x02	; 2
    125c:	0f 2e       	mov	r0, r31
    125e:	f1 e1       	ldi	r31, 0x11	; 17
    1260:	cf 2e       	mov	r12, r31
    1262:	f2 e0       	ldi	r31, 0x02	; 2
    1264:	df 2e       	mov	r13, r31
    1266:	f0 2d       	mov	r31, r0
    1268:	0f 2e       	mov	r0, r31
    126a:	f8 ee       	ldi	r31, 0xE8	; 232
    126c:	ef 2e       	mov	r14, r31
	//Tone Example	
	for (int thisNote = 0; thisNote < 8; thisNote++) 
	{
		// to calculate the note duration, take one second divided by the note type.
		//e.g. quarter note = 1000 / 4, eighth note = 1000/8, etc.
		int noteDuration = 1000 / noteDurations[thisNote];
    126e:	f3 e0       	ldi	r31, 0x03	; 3
    1270:	ff 2e       	mov	r15, r31
    1272:	f0 2d       	mov	r31, r0
    1274:	69 91       	ld	r22, Y+
    1276:	79 91       	ld	r23, Y+
    1278:	c7 01       	movw	r24, r14
    127a:	4a d1       	rcall	.+660    	; 0x1510 <__divmodhi4>
    127c:	cb 01       	movw	r24, r22
    127e:	f8 01       	movw	r30, r16
    1280:	61 91       	ld	r22, Z+
    1282:	71 91       	ld	r23, Z+
		tone(Pin_PE3, melody[thisNote], noteDuration);
    1284:	8f 01       	movw	r16, r30
    1286:	4c 01       	movw	r8, r24
    1288:	99 0f       	add	r25, r25
    128a:	aa 08       	sbc	r10, r10
    128c:	bb 08       	sbc	r11, r11
    128e:	a5 01       	movw	r20, r10
    1290:	94 01       	movw	r18, r8
    1292:	85 e0       	ldi	r24, 0x05	; 5
    1294:	a8 db       	rcall	.-2224   	; 0x9e6 <tone>
    1296:	c5 01       	movw	r24, r10
		// to distinguish the notes, set a minimum time between them.
		// the note's duration + 30% seems to work well:
		int pauseBetweenNotes = noteDuration * 1.30;
		delay_ms(pauseBetweenNotes);		
    1298:	b4 01       	movw	r22, r8
    129a:	4b d0       	rcall	.+150    	; 0x1332 <__floatsisf>
    129c:	26 e6       	ldi	r18, 0x66	; 102
    129e:	36 e6       	ldi	r19, 0x66	; 102
    12a0:	46 ea       	ldi	r20, 0xA6	; 166
    12a2:	5f e3       	ldi	r21, 0x3F	; 63
    12a4:	aa d0       	rcall	.+340    	; 0x13fa <__mulsf3>
    12a6:	12 d0       	rcall	.+36     	; 0x12cc <__fixsfsi>
    12a8:	07 2e       	mov	r0, r23
    12aa:	00 0c       	add	r0, r0
    12ac:	88 0b       	sbc	r24, r24
    12ae:	99 0b       	sbc	r25, r25
    12b0:	13 db       	rcall	.-2522   	; 0x8d8 <delay_ms>
    12b2:	85 e0       	ldi	r24, 0x05	; 5
		// stop the tone playing:
		noTone(Pin_PE3);
    12b4:	3d df       	rcall	.-390    	; 0x1130 <noTone>
    12b6:	cc 15       	cp	r28, r12
    12b8:	dd 05       	cpc	r29, r13
	
	analogWrite(Pin_PH3,125);
	

	//Tone Example	
	for (int thisNote = 0; thisNote < 8; thisNote++) 
    12ba:	e1 f6       	brne	.-72     	; 0x1274 <main+0x4c>
    12bc:	68 ee       	ldi	r22, 0xE8	; 232
    12be:	73 e0       	ldi	r23, 0x03	; 3
			_delay_ms(70);
			togglePin(Pin_PK0);
		}
		*/
		
		delay_ms(1000);
    12c0:	80 e0       	ldi	r24, 0x00	; 0
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	09 db       	rcall	.-2542   	; 0x8d8 <delay_ms>
    12c6:	86 e5       	ldi	r24, 0x56	; 86
    12c8:	ae d9       	rcall	.-3236   	; 0x626 <togglePin>
    12ca:	f8 cf       	rjmp	.-16     	; 0x12bc <main+0x94>

000012cc <__fixsfsi>:
		togglePin(Pin_PK3);
    12cc:	04 d0       	rcall	.+8      	; 0x12d6 <__fixunssfsi>
    12ce:	68 94       	set
    12d0:	b1 11       	cpse	r27, r1
    12d2:	8d c0       	rjmp	.+282    	; 0x13ee <__fp_szero>
    12d4:	08 95       	ret

000012d6 <__fixunssfsi>:
    12d6:	70 d0       	rcall	.+224    	; 0x13b8 <__fp_splitA>
    12d8:	88 f0       	brcs	.+34     	; 0x12fc <__fixunssfsi+0x26>
    12da:	9f 57       	subi	r25, 0x7F	; 127
    12dc:	90 f0       	brcs	.+36     	; 0x1302 <__fixunssfsi+0x2c>
    12de:	b9 2f       	mov	r27, r25
    12e0:	99 27       	eor	r25, r25
    12e2:	b7 51       	subi	r27, 0x17	; 23
    12e4:	a0 f0       	brcs	.+40     	; 0x130e <__fixunssfsi+0x38>
    12e6:	d1 f0       	breq	.+52     	; 0x131c <__fixunssfsi+0x46>
    12e8:	66 0f       	add	r22, r22
    12ea:	77 1f       	adc	r23, r23
    12ec:	88 1f       	adc	r24, r24
    12ee:	99 1f       	adc	r25, r25
    12f0:	1a f0       	brmi	.+6      	; 0x12f8 <__fixunssfsi+0x22>
    12f2:	ba 95       	dec	r27
    12f4:	c9 f7       	brne	.-14     	; 0x12e8 <__fixunssfsi+0x12>
    12f6:	12 c0       	rjmp	.+36     	; 0x131c <__fixunssfsi+0x46>
    12f8:	b1 30       	cpi	r27, 0x01	; 1
    12fa:	81 f0       	breq	.+32     	; 0x131c <__fixunssfsi+0x46>
    12fc:	77 d0       	rcall	.+238    	; 0x13ec <__fp_zero>
    12fe:	b1 e0       	ldi	r27, 0x01	; 1
    1300:	08 95       	ret
    1302:	74 c0       	rjmp	.+232    	; 0x13ec <__fp_zero>
    1304:	67 2f       	mov	r22, r23
    1306:	78 2f       	mov	r23, r24
    1308:	88 27       	eor	r24, r24
    130a:	b8 5f       	subi	r27, 0xF8	; 248
    130c:	39 f0       	breq	.+14     	; 0x131c <__fixunssfsi+0x46>
    130e:	b9 3f       	cpi	r27, 0xF9	; 249
    1310:	cc f3       	brlt	.-14     	; 0x1304 <__fixunssfsi+0x2e>
    1312:	86 95       	lsr	r24
    1314:	77 95       	ror	r23
    1316:	67 95       	ror	r22
    1318:	b3 95       	inc	r27
    131a:	d9 f7       	brne	.-10     	; 0x1312 <__fixunssfsi+0x3c>
    131c:	3e f4       	brtc	.+14     	; 0x132c <__fixunssfsi+0x56>
    131e:	90 95       	com	r25
    1320:	80 95       	com	r24
    1322:	70 95       	com	r23
    1324:	61 95       	neg	r22
    1326:	7f 4f       	sbci	r23, 0xFF	; 255
    1328:	8f 4f       	sbci	r24, 0xFF	; 255
    132a:	9f 4f       	sbci	r25, 0xFF	; 255
    132c:	08 95       	ret

0000132e <__floatunsisf>:
    132e:	e8 94       	clt
    1330:	09 c0       	rjmp	.+18     	; 0x1344 <__floatsisf+0x12>

00001332 <__floatsisf>:
    1332:	97 fb       	bst	r25, 7
    1334:	3e f4       	brtc	.+14     	; 0x1344 <__floatsisf+0x12>
    1336:	90 95       	com	r25
    1338:	80 95       	com	r24
    133a:	70 95       	com	r23
    133c:	61 95       	neg	r22
    133e:	7f 4f       	sbci	r23, 0xFF	; 255
    1340:	8f 4f       	sbci	r24, 0xFF	; 255
    1342:	9f 4f       	sbci	r25, 0xFF	; 255
    1344:	99 23       	and	r25, r25
    1346:	a9 f0       	breq	.+42     	; 0x1372 <__floatsisf+0x40>
    1348:	f9 2f       	mov	r31, r25
    134a:	96 e9       	ldi	r25, 0x96	; 150
    134c:	bb 27       	eor	r27, r27
    134e:	93 95       	inc	r25
    1350:	f6 95       	lsr	r31
    1352:	87 95       	ror	r24
    1354:	77 95       	ror	r23
    1356:	67 95       	ror	r22
    1358:	b7 95       	ror	r27
    135a:	f1 11       	cpse	r31, r1
    135c:	f8 cf       	rjmp	.-16     	; 0x134e <__floatsisf+0x1c>
    135e:	fa f4       	brpl	.+62     	; 0x139e <__floatsisf+0x6c>
    1360:	bb 0f       	add	r27, r27
    1362:	11 f4       	brne	.+4      	; 0x1368 <__floatsisf+0x36>
    1364:	60 ff       	sbrs	r22, 0
    1366:	1b c0       	rjmp	.+54     	; 0x139e <__floatsisf+0x6c>
    1368:	6f 5f       	subi	r22, 0xFF	; 255
    136a:	7f 4f       	sbci	r23, 0xFF	; 255
    136c:	8f 4f       	sbci	r24, 0xFF	; 255
    136e:	9f 4f       	sbci	r25, 0xFF	; 255
    1370:	16 c0       	rjmp	.+44     	; 0x139e <__floatsisf+0x6c>
    1372:	88 23       	and	r24, r24
    1374:	11 f0       	breq	.+4      	; 0x137a <__floatsisf+0x48>
    1376:	96 e9       	ldi	r25, 0x96	; 150
    1378:	11 c0       	rjmp	.+34     	; 0x139c <__floatsisf+0x6a>
    137a:	77 23       	and	r23, r23
    137c:	21 f0       	breq	.+8      	; 0x1386 <__floatsisf+0x54>
    137e:	9e e8       	ldi	r25, 0x8E	; 142
    1380:	87 2f       	mov	r24, r23
    1382:	76 2f       	mov	r23, r22
    1384:	05 c0       	rjmp	.+10     	; 0x1390 <__floatsisf+0x5e>
    1386:	66 23       	and	r22, r22
    1388:	71 f0       	breq	.+28     	; 0x13a6 <__floatsisf+0x74>
    138a:	96 e8       	ldi	r25, 0x86	; 134
    138c:	86 2f       	mov	r24, r22
    138e:	70 e0       	ldi	r23, 0x00	; 0
    1390:	60 e0       	ldi	r22, 0x00	; 0
    1392:	2a f0       	brmi	.+10     	; 0x139e <__floatsisf+0x6c>
    1394:	9a 95       	dec	r25
    1396:	66 0f       	add	r22, r22
    1398:	77 1f       	adc	r23, r23
    139a:	88 1f       	adc	r24, r24
    139c:	da f7       	brpl	.-10     	; 0x1394 <__floatsisf+0x62>
    139e:	88 0f       	add	r24, r24
    13a0:	96 95       	lsr	r25
    13a2:	87 95       	ror	r24
    13a4:	97 f9       	bld	r25, 7
    13a6:	08 95       	ret

000013a8 <__fp_split3>:
    13a8:	57 fd       	sbrc	r21, 7
    13aa:	90 58       	subi	r25, 0x80	; 128
    13ac:	44 0f       	add	r20, r20
    13ae:	55 1f       	adc	r21, r21
    13b0:	59 f0       	breq	.+22     	; 0x13c8 <__fp_splitA+0x10>
    13b2:	5f 3f       	cpi	r21, 0xFF	; 255
    13b4:	71 f0       	breq	.+28     	; 0x13d2 <__fp_splitA+0x1a>
    13b6:	47 95       	ror	r20

000013b8 <__fp_splitA>:
    13b8:	88 0f       	add	r24, r24
    13ba:	97 fb       	bst	r25, 7
    13bc:	99 1f       	adc	r25, r25
    13be:	61 f0       	breq	.+24     	; 0x13d8 <__fp_splitA+0x20>
    13c0:	9f 3f       	cpi	r25, 0xFF	; 255
    13c2:	79 f0       	breq	.+30     	; 0x13e2 <__fp_splitA+0x2a>
    13c4:	87 95       	ror	r24
    13c6:	08 95       	ret
    13c8:	12 16       	cp	r1, r18
    13ca:	13 06       	cpc	r1, r19
    13cc:	14 06       	cpc	r1, r20
    13ce:	55 1f       	adc	r21, r21
    13d0:	f2 cf       	rjmp	.-28     	; 0x13b6 <__fp_split3+0xe>
    13d2:	46 95       	lsr	r20
    13d4:	f1 df       	rcall	.-30     	; 0x13b8 <__fp_splitA>
    13d6:	08 c0       	rjmp	.+16     	; 0x13e8 <__fp_splitA+0x30>
    13d8:	16 16       	cp	r1, r22
    13da:	17 06       	cpc	r1, r23
    13dc:	18 06       	cpc	r1, r24
    13de:	99 1f       	adc	r25, r25
    13e0:	f1 cf       	rjmp	.-30     	; 0x13c4 <__fp_splitA+0xc>
    13e2:	86 95       	lsr	r24
    13e4:	71 05       	cpc	r23, r1
    13e6:	61 05       	cpc	r22, r1
    13e8:	08 94       	sec
    13ea:	08 95       	ret

000013ec <__fp_zero>:
    13ec:	e8 94       	clt

000013ee <__fp_szero>:
    13ee:	bb 27       	eor	r27, r27
    13f0:	66 27       	eor	r22, r22
    13f2:	77 27       	eor	r23, r23
    13f4:	cb 01       	movw	r24, r22
    13f6:	97 f9       	bld	r25, 7
    13f8:	08 95       	ret

000013fa <__mulsf3>:
    13fa:	0b d0       	rcall	.+22     	; 0x1412 <__mulsf3x>
    13fc:	78 c0       	rjmp	.+240    	; 0x14ee <__fp_round>
    13fe:	69 d0       	rcall	.+210    	; 0x14d2 <__fp_pscA>
    1400:	28 f0       	brcs	.+10     	; 0x140c <__mulsf3+0x12>
    1402:	6e d0       	rcall	.+220    	; 0x14e0 <__fp_pscB>
    1404:	18 f0       	brcs	.+6      	; 0x140c <__mulsf3+0x12>
    1406:	95 23       	and	r25, r21
    1408:	09 f0       	breq	.+2      	; 0x140c <__mulsf3+0x12>
    140a:	5a c0       	rjmp	.+180    	; 0x14c0 <__fp_inf>
    140c:	5f c0       	rjmp	.+190    	; 0x14cc <__fp_nan>
    140e:	11 24       	eor	r1, r1
    1410:	ee cf       	rjmp	.-36     	; 0x13ee <__fp_szero>

00001412 <__mulsf3x>:
    1412:	ca df       	rcall	.-108    	; 0x13a8 <__fp_split3>
    1414:	a0 f3       	brcs	.-24     	; 0x13fe <__mulsf3+0x4>

00001416 <__mulsf3_pse>:
    1416:	95 9f       	mul	r25, r21
    1418:	d1 f3       	breq	.-12     	; 0x140e <__mulsf3+0x14>
    141a:	95 0f       	add	r25, r21
    141c:	50 e0       	ldi	r21, 0x00	; 0
    141e:	55 1f       	adc	r21, r21
    1420:	62 9f       	mul	r22, r18
    1422:	f0 01       	movw	r30, r0
    1424:	72 9f       	mul	r23, r18
    1426:	bb 27       	eor	r27, r27
    1428:	f0 0d       	add	r31, r0
    142a:	b1 1d       	adc	r27, r1
    142c:	63 9f       	mul	r22, r19
    142e:	aa 27       	eor	r26, r26
    1430:	f0 0d       	add	r31, r0
    1432:	b1 1d       	adc	r27, r1
    1434:	aa 1f       	adc	r26, r26
    1436:	64 9f       	mul	r22, r20
    1438:	66 27       	eor	r22, r22
    143a:	b0 0d       	add	r27, r0
    143c:	a1 1d       	adc	r26, r1
    143e:	66 1f       	adc	r22, r22
    1440:	82 9f       	mul	r24, r18
    1442:	22 27       	eor	r18, r18
    1444:	b0 0d       	add	r27, r0
    1446:	a1 1d       	adc	r26, r1
    1448:	62 1f       	adc	r22, r18
    144a:	73 9f       	mul	r23, r19
    144c:	b0 0d       	add	r27, r0
    144e:	a1 1d       	adc	r26, r1
    1450:	62 1f       	adc	r22, r18
    1452:	83 9f       	mul	r24, r19
    1454:	a0 0d       	add	r26, r0
    1456:	61 1d       	adc	r22, r1
    1458:	22 1f       	adc	r18, r18
    145a:	74 9f       	mul	r23, r20
    145c:	33 27       	eor	r19, r19
    145e:	a0 0d       	add	r26, r0
    1460:	61 1d       	adc	r22, r1
    1462:	23 1f       	adc	r18, r19
    1464:	84 9f       	mul	r24, r20
    1466:	60 0d       	add	r22, r0
    1468:	21 1d       	adc	r18, r1
    146a:	82 2f       	mov	r24, r18
    146c:	76 2f       	mov	r23, r22
    146e:	6a 2f       	mov	r22, r26
    1470:	11 24       	eor	r1, r1
    1472:	9f 57       	subi	r25, 0x7F	; 127
    1474:	50 40       	sbci	r21, 0x00	; 0
    1476:	8a f0       	brmi	.+34     	; 0x149a <__mulsf3_pse+0x84>
    1478:	e1 f0       	breq	.+56     	; 0x14b2 <__mulsf3_pse+0x9c>
    147a:	88 23       	and	r24, r24
    147c:	4a f0       	brmi	.+18     	; 0x1490 <__mulsf3_pse+0x7a>
    147e:	ee 0f       	add	r30, r30
    1480:	ff 1f       	adc	r31, r31
    1482:	bb 1f       	adc	r27, r27
    1484:	66 1f       	adc	r22, r22
    1486:	77 1f       	adc	r23, r23
    1488:	88 1f       	adc	r24, r24
    148a:	91 50       	subi	r25, 0x01	; 1
    148c:	50 40       	sbci	r21, 0x00	; 0
    148e:	a9 f7       	brne	.-22     	; 0x147a <__mulsf3_pse+0x64>
    1490:	9e 3f       	cpi	r25, 0xFE	; 254
    1492:	51 05       	cpc	r21, r1
    1494:	70 f0       	brcs	.+28     	; 0x14b2 <__mulsf3_pse+0x9c>
    1496:	14 c0       	rjmp	.+40     	; 0x14c0 <__fp_inf>
    1498:	aa cf       	rjmp	.-172    	; 0x13ee <__fp_szero>
    149a:	5f 3f       	cpi	r21, 0xFF	; 255
    149c:	ec f3       	brlt	.-6      	; 0x1498 <__mulsf3_pse+0x82>
    149e:	98 3e       	cpi	r25, 0xE8	; 232
    14a0:	dc f3       	brlt	.-10     	; 0x1498 <__mulsf3_pse+0x82>
    14a2:	86 95       	lsr	r24
    14a4:	77 95       	ror	r23
    14a6:	67 95       	ror	r22
    14a8:	b7 95       	ror	r27
    14aa:	f7 95       	ror	r31
    14ac:	e7 95       	ror	r30
    14ae:	9f 5f       	subi	r25, 0xFF	; 255
    14b0:	c1 f7       	brne	.-16     	; 0x14a2 <__mulsf3_pse+0x8c>
    14b2:	fe 2b       	or	r31, r30
    14b4:	88 0f       	add	r24, r24
    14b6:	91 1d       	adc	r25, r1
    14b8:	96 95       	lsr	r25
    14ba:	87 95       	ror	r24
    14bc:	97 f9       	bld	r25, 7
    14be:	08 95       	ret

000014c0 <__fp_inf>:
    14c0:	97 f9       	bld	r25, 7
    14c2:	9f 67       	ori	r25, 0x7F	; 127
    14c4:	80 e8       	ldi	r24, 0x80	; 128
    14c6:	70 e0       	ldi	r23, 0x00	; 0
    14c8:	60 e0       	ldi	r22, 0x00	; 0
    14ca:	08 95       	ret

000014cc <__fp_nan>:
    14cc:	9f ef       	ldi	r25, 0xFF	; 255
    14ce:	80 ec       	ldi	r24, 0xC0	; 192
    14d0:	08 95       	ret

000014d2 <__fp_pscA>:
    14d2:	00 24       	eor	r0, r0
    14d4:	0a 94       	dec	r0
    14d6:	16 16       	cp	r1, r22
    14d8:	17 06       	cpc	r1, r23
    14da:	18 06       	cpc	r1, r24
    14dc:	09 06       	cpc	r0, r25
    14de:	08 95       	ret

000014e0 <__fp_pscB>:
    14e0:	00 24       	eor	r0, r0
    14e2:	0a 94       	dec	r0
    14e4:	12 16       	cp	r1, r18
    14e6:	13 06       	cpc	r1, r19
    14e8:	14 06       	cpc	r1, r20
    14ea:	05 06       	cpc	r0, r21
    14ec:	08 95       	ret

000014ee <__fp_round>:
    14ee:	09 2e       	mov	r0, r25
    14f0:	03 94       	inc	r0
    14f2:	00 0c       	add	r0, r0
    14f4:	11 f4       	brne	.+4      	; 0x14fa <__fp_round+0xc>
    14f6:	88 23       	and	r24, r24
    14f8:	52 f0       	brmi	.+20     	; 0x150e <__fp_round+0x20>
    14fa:	bb 0f       	add	r27, r27
    14fc:	40 f4       	brcc	.+16     	; 0x150e <__fp_round+0x20>
    14fe:	bf 2b       	or	r27, r31
    1500:	11 f4       	brne	.+4      	; 0x1506 <__fp_round+0x18>
    1502:	60 ff       	sbrs	r22, 0
    1504:	04 c0       	rjmp	.+8      	; 0x150e <__fp_round+0x20>
    1506:	6f 5f       	subi	r22, 0xFF	; 255
    1508:	7f 4f       	sbci	r23, 0xFF	; 255
    150a:	8f 4f       	sbci	r24, 0xFF	; 255
    150c:	9f 4f       	sbci	r25, 0xFF	; 255
    150e:	08 95       	ret

00001510 <__divmodhi4>:
    1510:	97 fb       	bst	r25, 7
    1512:	07 2e       	mov	r0, r23
    1514:	16 f4       	brtc	.+4      	; 0x151a <__divmodhi4+0xa>
    1516:	00 94       	com	r0
    1518:	06 d0       	rcall	.+12     	; 0x1526 <__divmodhi4_neg1>
    151a:	77 fd       	sbrc	r23, 7
    151c:	08 d0       	rcall	.+16     	; 0x152e <__divmodhi4_neg2>
    151e:	3f d0       	rcall	.+126    	; 0x159e <__udivmodhi4>
    1520:	07 fc       	sbrc	r0, 7
    1522:	05 d0       	rcall	.+10     	; 0x152e <__divmodhi4_neg2>
    1524:	3e f4       	brtc	.+14     	; 0x1534 <__divmodhi4_exit>

00001526 <__divmodhi4_neg1>:
    1526:	90 95       	com	r25
    1528:	81 95       	neg	r24
    152a:	9f 4f       	sbci	r25, 0xFF	; 255
    152c:	08 95       	ret

0000152e <__divmodhi4_neg2>:
    152e:	70 95       	com	r23
    1530:	61 95       	neg	r22
    1532:	7f 4f       	sbci	r23, 0xFF	; 255

00001534 <__divmodhi4_exit>:
    1534:	08 95       	ret

00001536 <__udivmodsi4>:
    1536:	a1 e2       	ldi	r26, 0x21	; 33
    1538:	1a 2e       	mov	r1, r26
    153a:	aa 1b       	sub	r26, r26
    153c:	bb 1b       	sub	r27, r27
    153e:	fd 01       	movw	r30, r26
    1540:	0d c0       	rjmp	.+26     	; 0x155c <__udivmodsi4_ep>

00001542 <__udivmodsi4_loop>:
    1542:	aa 1f       	adc	r26, r26
    1544:	bb 1f       	adc	r27, r27
    1546:	ee 1f       	adc	r30, r30
    1548:	ff 1f       	adc	r31, r31
    154a:	a2 17       	cp	r26, r18
    154c:	b3 07       	cpc	r27, r19
    154e:	e4 07       	cpc	r30, r20
    1550:	f5 07       	cpc	r31, r21
    1552:	20 f0       	brcs	.+8      	; 0x155c <__udivmodsi4_ep>
    1554:	a2 1b       	sub	r26, r18
    1556:	b3 0b       	sbc	r27, r19
    1558:	e4 0b       	sbc	r30, r20
    155a:	f5 0b       	sbc	r31, r21

0000155c <__udivmodsi4_ep>:
    155c:	66 1f       	adc	r22, r22
    155e:	77 1f       	adc	r23, r23
    1560:	88 1f       	adc	r24, r24
    1562:	99 1f       	adc	r25, r25
    1564:	1a 94       	dec	r1
    1566:	69 f7       	brne	.-38     	; 0x1542 <__udivmodsi4_loop>
    1568:	60 95       	com	r22
    156a:	70 95       	com	r23
    156c:	80 95       	com	r24
    156e:	90 95       	com	r25
    1570:	9b 01       	movw	r18, r22
    1572:	ac 01       	movw	r20, r24
    1574:	bd 01       	movw	r22, r26
    1576:	cf 01       	movw	r24, r30
    1578:	08 95       	ret

0000157a <__tablejump2__>:
    157a:	ee 0f       	add	r30, r30
    157c:	ff 1f       	adc	r31, r31
    157e:	88 1f       	adc	r24, r24
    1580:	8b bf       	out	0x3b, r24	; 59
    1582:	07 90       	elpm	r0, Z+
    1584:	f6 91       	elpm	r31, Z
    1586:	e0 2d       	mov	r30, r0
    1588:	19 94       	eijmp

0000158a <__muluhisi3>:
    158a:	1d d0       	rcall	.+58     	; 0x15c6 <__umulhisi3>
    158c:	a5 9f       	mul	r26, r21
    158e:	90 0d       	add	r25, r0
    1590:	b4 9f       	mul	r27, r20
    1592:	90 0d       	add	r25, r0
    1594:	a4 9f       	mul	r26, r20
    1596:	80 0d       	add	r24, r0
    1598:	91 1d       	adc	r25, r1
    159a:	11 24       	eor	r1, r1
    159c:	08 95       	ret

0000159e <__udivmodhi4>:
    159e:	aa 1b       	sub	r26, r26
    15a0:	bb 1b       	sub	r27, r27
    15a2:	51 e1       	ldi	r21, 0x11	; 17
    15a4:	07 c0       	rjmp	.+14     	; 0x15b4 <__udivmodhi4_ep>

000015a6 <__udivmodhi4_loop>:
    15a6:	aa 1f       	adc	r26, r26
    15a8:	bb 1f       	adc	r27, r27
    15aa:	a6 17       	cp	r26, r22
    15ac:	b7 07       	cpc	r27, r23
    15ae:	10 f0       	brcs	.+4      	; 0x15b4 <__udivmodhi4_ep>
    15b0:	a6 1b       	sub	r26, r22
    15b2:	b7 0b       	sbc	r27, r23

000015b4 <__udivmodhi4_ep>:
    15b4:	88 1f       	adc	r24, r24
    15b6:	99 1f       	adc	r25, r25
    15b8:	5a 95       	dec	r21
    15ba:	a9 f7       	brne	.-22     	; 0x15a6 <__udivmodhi4_loop>
    15bc:	80 95       	com	r24
    15be:	90 95       	com	r25
    15c0:	bc 01       	movw	r22, r24
    15c2:	cd 01       	movw	r24, r26
    15c4:	08 95       	ret

000015c6 <__umulhisi3>:
    15c6:	a2 9f       	mul	r26, r18
    15c8:	b0 01       	movw	r22, r0
    15ca:	b3 9f       	mul	r27, r19
    15cc:	c0 01       	movw	r24, r0
    15ce:	a3 9f       	mul	r26, r19
    15d0:	70 0d       	add	r23, r0
    15d2:	81 1d       	adc	r24, r1
    15d4:	11 24       	eor	r1, r1
    15d6:	91 1d       	adc	r25, r1
    15d8:	b2 9f       	mul	r27, r18
    15da:	70 0d       	add	r23, r0
    15dc:	81 1d       	adc	r24, r1
    15de:	11 24       	eor	r1, r1
    15e0:	91 1d       	adc	r25, r1
    15e2:	08 95       	ret

000015e4 <_exit>:
    15e4:	f8 94       	cli

000015e6 <__stop_program>:
    15e6:	ff cf       	rjmp	.-2      	; 0x15e6 <__stop_program>
