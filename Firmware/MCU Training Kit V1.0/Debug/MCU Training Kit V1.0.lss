
MCU Training Kit V1.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000056  00800200  00000c58  00000cec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c58  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800256  00800256  00000d42  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d42  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d74  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000228  00000000  00000000  00000db4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002d09  00000000  00000000  00000fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011aa  00000000  00000000  00003ce5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001662  00000000  00000000  00004e8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000640  00000000  00000000  000064f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000990  00000000  00000000  00006b34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002086  00000000  00000000  000074c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000290  00000000  00000000  0000954a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	88 c0       	rjmp	.+272    	; 0x112 <__ctors_end>
   2:	00 00       	nop
   4:	a5 c0       	rjmp	.+330    	; 0x150 <__bad_interrupt>
   6:	00 00       	nop
   8:	a3 c0       	rjmp	.+326    	; 0x150 <__bad_interrupt>
   a:	00 00       	nop
   c:	a1 c0       	rjmp	.+322    	; 0x150 <__bad_interrupt>
   e:	00 00       	nop
  10:	9f c0       	rjmp	.+318    	; 0x150 <__bad_interrupt>
  12:	00 00       	nop
  14:	9d c0       	rjmp	.+314    	; 0x150 <__bad_interrupt>
  16:	00 00       	nop
  18:	9b c0       	rjmp	.+310    	; 0x150 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	99 c0       	rjmp	.+306    	; 0x150 <__bad_interrupt>
  1e:	00 00       	nop
  20:	97 c0       	rjmp	.+302    	; 0x150 <__bad_interrupt>
  22:	00 00       	nop
  24:	95 c0       	rjmp	.+298    	; 0x150 <__bad_interrupt>
  26:	00 00       	nop
  28:	13 c4       	rjmp	.+2086   	; 0x850 <__vector_10>
  2a:	00 00       	nop
  2c:	91 c0       	rjmp	.+290    	; 0x150 <__bad_interrupt>
  2e:	00 00       	nop
  30:	8f c0       	rjmp	.+286    	; 0x150 <__bad_interrupt>
  32:	00 00       	nop
  34:	8d c0       	rjmp	.+282    	; 0x150 <__bad_interrupt>
  36:	00 00       	nop
  38:	8b c0       	rjmp	.+278    	; 0x150 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	89 c0       	rjmp	.+274    	; 0x150 <__bad_interrupt>
  3e:	00 00       	nop
  40:	87 c0       	rjmp	.+270    	; 0x150 <__bad_interrupt>
  42:	00 00       	nop
  44:	c4 c1       	rjmp	.+904    	; 0x3ce <__vector_17>
  46:	00 00       	nop
  48:	83 c0       	rjmp	.+262    	; 0x150 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	81 c0       	rjmp	.+258    	; 0x150 <__bad_interrupt>
  4e:	00 00       	nop
  50:	7f c0       	rjmp	.+254    	; 0x150 <__bad_interrupt>
  52:	00 00       	nop
  54:	7d c0       	rjmp	.+250    	; 0x150 <__bad_interrupt>
  56:	00 00       	nop
  58:	7b c0       	rjmp	.+246    	; 0x150 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	79 c0       	rjmp	.+242    	; 0x150 <__bad_interrupt>
  5e:	00 00       	nop
  60:	77 c0       	rjmp	.+238    	; 0x150 <__bad_interrupt>
  62:	00 00       	nop
  64:	75 c0       	rjmp	.+234    	; 0x150 <__bad_interrupt>
  66:	00 00       	nop
  68:	73 c0       	rjmp	.+230    	; 0x150 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	71 c0       	rjmp	.+226    	; 0x150 <__bad_interrupt>
  6e:	00 00       	nop
  70:	6f c0       	rjmp	.+222    	; 0x150 <__bad_interrupt>
  72:	00 00       	nop
  74:	6d c0       	rjmp	.+218    	; 0x150 <__bad_interrupt>
  76:	00 00       	nop
  78:	6b c0       	rjmp	.+214    	; 0x150 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	69 c0       	rjmp	.+210    	; 0x150 <__bad_interrupt>
  7e:	00 00       	nop
  80:	67 c0       	rjmp	.+206    	; 0x150 <__bad_interrupt>
  82:	00 00       	nop
  84:	65 c0       	rjmp	.+202    	; 0x150 <__bad_interrupt>
  86:	00 00       	nop
  88:	63 c0       	rjmp	.+198    	; 0x150 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	61 c0       	rjmp	.+194    	; 0x150 <__bad_interrupt>
  8e:	00 00       	nop
  90:	5f c0       	rjmp	.+190    	; 0x150 <__bad_interrupt>
  92:	00 00       	nop
  94:	5d c0       	rjmp	.+186    	; 0x150 <__bad_interrupt>
  96:	00 00       	nop
  98:	5b c0       	rjmp	.+182    	; 0x150 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	59 c0       	rjmp	.+178    	; 0x150 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	57 c0       	rjmp	.+174    	; 0x150 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	55 c0       	rjmp	.+170    	; 0x150 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	53 c0       	rjmp	.+166    	; 0x150 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	51 c0       	rjmp	.+162    	; 0x150 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	4f c0       	rjmp	.+158    	; 0x150 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	4d c0       	rjmp	.+154    	; 0x150 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	4b c0       	rjmp	.+150    	; 0x150 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	49 c0       	rjmp	.+146    	; 0x150 <__bad_interrupt>
  be:	00 00       	nop
  c0:	47 c0       	rjmp	.+142    	; 0x150 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	45 c0       	rjmp	.+138    	; 0x150 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	43 c0       	rjmp	.+134    	; 0x150 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	41 c0       	rjmp	.+130    	; 0x150 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	3f c0       	rjmp	.+126    	; 0x150 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	3d c0       	rjmp	.+122    	; 0x150 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	3b c0       	rjmp	.+118    	; 0x150 <__bad_interrupt>
  da:	00 00       	nop
  dc:	39 c0       	rjmp	.+114    	; 0x150 <__bad_interrupt>
  de:	00 00       	nop
  e0:	37 c0       	rjmp	.+110    	; 0x150 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	12 01       	movw	r2, r4
  e6:	18 01       	movw	r2, r16
  e8:	1e 01       	movw	r2, r28
  ea:	24 01       	movw	r4, r8
  ec:	2a 01       	movw	r4, r20
  ee:	30 01       	movw	r6, r0
  f0:	36 01       	movw	r6, r12
  f2:	3c 01       	movw	r6, r24
  f4:	42 01       	movw	r8, r4
  f6:	48 01       	movw	r8, r16
  f8:	4e 01       	movw	r8, r28
  fa:	54 01       	movw	r10, r8
  fc:	5a 01       	movw	r10, r20
  fe:	60 01       	movw	r12, r0
 100:	66 01       	movw	r12, r12
 102:	6c 01       	movw	r12, r24
 104:	9d 01       	movw	r18, r26
 106:	a4 01       	movw	r20, r8
 108:	ab 01       	movw	r20, r22
 10a:	b2 01       	movw	r22, r4
 10c:	b9 01       	movw	r22, r18
 10e:	c0 01       	movw	r24, r0
 110:	c7 01       	movw	r24, r14

00000112 <__ctors_end>:
 112:	11 24       	eor	r1, r1
 114:	1f be       	out	0x3f, r1	; 63
 116:	cf ef       	ldi	r28, 0xFF	; 255
 118:	d1 e2       	ldi	r29, 0x21	; 33
 11a:	de bf       	out	0x3e, r29	; 62
 11c:	cd bf       	out	0x3d, r28	; 61
 11e:	00 e0       	ldi	r16, 0x00	; 0
 120:	0c bf       	out	0x3c, r16	; 60

00000122 <__do_copy_data>:
 122:	12 e0       	ldi	r17, 0x02	; 2
 124:	a0 e0       	ldi	r26, 0x00	; 0
 126:	b2 e0       	ldi	r27, 0x02	; 2
 128:	e8 e5       	ldi	r30, 0x58	; 88
 12a:	fc e0       	ldi	r31, 0x0C	; 12
 12c:	00 e0       	ldi	r16, 0x00	; 0
 12e:	0b bf       	out	0x3b, r16	; 59
 130:	02 c0       	rjmp	.+4      	; 0x136 <__do_copy_data+0x14>
 132:	07 90       	elpm	r0, Z+
 134:	0d 92       	st	X+, r0
 136:	a6 35       	cpi	r26, 0x56	; 86
 138:	b1 07       	cpc	r27, r17
 13a:	d9 f7       	brne	.-10     	; 0x132 <__do_copy_data+0x10>

0000013c <__do_clear_bss>:
 13c:	22 e0       	ldi	r18, 0x02	; 2
 13e:	a6 e5       	ldi	r26, 0x56	; 86
 140:	b2 e0       	ldi	r27, 0x02	; 2
 142:	01 c0       	rjmp	.+2      	; 0x146 <.do_clear_bss_start>

00000144 <.do_clear_bss_loop>:
 144:	1d 92       	st	X+, r1

00000146 <.do_clear_bss_start>:
 146:	aa 35       	cpi	r26, 0x5A	; 90
 148:	b2 07       	cpc	r27, r18
 14a:	e1 f7       	brne	.-8      	; 0x144 <.do_clear_bss_loop>
 14c:	e6 d3       	rcall	.+1996   	; 0x91a <main>
 14e:	82 c5       	rjmp	.+2820   	; 0xc54 <_exit>

00000150 <__bad_interrupt>:
 150:	57 cf       	rjmp	.-338    	; 0x0 <__vectors>

00000152 <keypad_Init>:
	if(x==0)
	{
		OCR2A = val;
	}else if(x==1)
	{
		OCR2B = val;
 152:	8f e0       	ldi	r24, 0x0F	; 15
 154:	87 b9       	out	0x07, r24	; 7
 156:	8f ef       	ldi	r24, 0xFF	; 255
 158:	88 b9       	out	0x08, r24	; 8
 15a:	08 95       	ret

0000015c <read_keypad>:
 15c:	cf 93       	push	r28
 15e:	8e ef       	ldi	r24, 0xFE	; 254
 160:	88 b9       	out	0x08, r24	; 8
 162:	00 c0       	rjmp	.+0      	; 0x164 <read_keypad+0x8>
 164:	86 b1       	in	r24, 0x06	; 6
 166:	80 7f       	andi	r24, 0xF0	; 240
 168:	80 3e       	cpi	r24, 0xE0	; 224
 16a:	41 f0       	breq	.+16     	; 0x17c <read_keypad+0x20>
 16c:	80 3d       	cpi	r24, 0xD0	; 208
 16e:	41 f0       	breq	.+16     	; 0x180 <read_keypad+0x24>
 170:	80 3b       	cpi	r24, 0xB0	; 176
 172:	41 f0       	breq	.+16     	; 0x184 <read_keypad+0x28>
 174:	80 37       	cpi	r24, 0x70	; 112
 176:	41 f4       	brne	.+16     	; 0x188 <read_keypad+0x2c>
 178:	cc e0       	ldi	r28, 0x0C	; 12
 17a:	07 c0       	rjmp	.+14     	; 0x18a <read_keypad+0x2e>
 17c:	c1 e0       	ldi	r28, 0x01	; 1
 17e:	05 c0       	rjmp	.+10     	; 0x18a <read_keypad+0x2e>
 180:	c2 e0       	ldi	r28, 0x02	; 2
 182:	03 c0       	rjmp	.+6      	; 0x18a <read_keypad+0x2e>
 184:	c3 e0       	ldi	r28, 0x03	; 3
 186:	01 c0       	rjmp	.+2      	; 0x18a <read_keypad+0x2e>
 188:	cf ef       	ldi	r28, 0xFF	; 255
 18a:	8d ef       	ldi	r24, 0xFD	; 253
 18c:	88 b9       	out	0x08, r24	; 8
 18e:	00 c0       	rjmp	.+0      	; 0x190 <read_keypad+0x34>
 190:	86 b1       	in	r24, 0x06	; 6
 192:	80 7f       	andi	r24, 0xF0	; 240
 194:	80 3e       	cpi	r24, 0xE0	; 224
 196:	41 f0       	breq	.+16     	; 0x1a8 <read_keypad+0x4c>
 198:	80 3d       	cpi	r24, 0xD0	; 208
 19a:	41 f0       	breq	.+16     	; 0x1ac <read_keypad+0x50>
 19c:	80 3b       	cpi	r24, 0xB0	; 176
 19e:	41 f0       	breq	.+16     	; 0x1b0 <read_keypad+0x54>
 1a0:	80 37       	cpi	r24, 0x70	; 112
 1a2:	39 f4       	brne	.+14     	; 0x1b2 <read_keypad+0x56>
 1a4:	cd e0       	ldi	r28, 0x0D	; 13
 1a6:	05 c0       	rjmp	.+10     	; 0x1b2 <read_keypad+0x56>
 1a8:	c4 e0       	ldi	r28, 0x04	; 4
 1aa:	03 c0       	rjmp	.+6      	; 0x1b2 <read_keypad+0x56>
 1ac:	c5 e0       	ldi	r28, 0x05	; 5
 1ae:	01 c0       	rjmp	.+2      	; 0x1b2 <read_keypad+0x56>
 1b0:	c6 e0       	ldi	r28, 0x06	; 6
 1b2:	8b ef       	ldi	r24, 0xFB	; 251
 1b4:	88 b9       	out	0x08, r24	; 8
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <read_keypad+0x5c>
 1b8:	86 b1       	in	r24, 0x06	; 6
 1ba:	80 7f       	andi	r24, 0xF0	; 240
 1bc:	80 3e       	cpi	r24, 0xE0	; 224
 1be:	41 f0       	breq	.+16     	; 0x1d0 <read_keypad+0x74>
 1c0:	80 3d       	cpi	r24, 0xD0	; 208
 1c2:	41 f0       	breq	.+16     	; 0x1d4 <read_keypad+0x78>
 1c4:	80 3b       	cpi	r24, 0xB0	; 176
 1c6:	41 f0       	breq	.+16     	; 0x1d8 <read_keypad+0x7c>
 1c8:	80 37       	cpi	r24, 0x70	; 112
 1ca:	39 f4       	brne	.+14     	; 0x1da <read_keypad+0x7e>
 1cc:	ce e0       	ldi	r28, 0x0E	; 14
 1ce:	05 c0       	rjmp	.+10     	; 0x1da <read_keypad+0x7e>
 1d0:	c7 e0       	ldi	r28, 0x07	; 7
 1d2:	03 c0       	rjmp	.+6      	; 0x1da <read_keypad+0x7e>
 1d4:	c8 e0       	ldi	r28, 0x08	; 8
 1d6:	01 c0       	rjmp	.+2      	; 0x1da <read_keypad+0x7e>
 1d8:	c9 e0       	ldi	r28, 0x09	; 9
 1da:	87 ef       	ldi	r24, 0xF7	; 247
 1dc:	88 b9       	out	0x08, r24	; 8
 1de:	00 c0       	rjmp	.+0      	; 0x1e0 <read_keypad+0x84>
 1e0:	86 b1       	in	r24, 0x06	; 6
 1e2:	80 7f       	andi	r24, 0xF0	; 240
 1e4:	80 3e       	cpi	r24, 0xE0	; 224
 1e6:	09 f4       	brne	.+2      	; 0x1ea <read_keypad+0x8e>
 1e8:	89 c0       	rjmp	.+274    	; 0x2fc <read_keypad+0x1a0>
 1ea:	80 3d       	cpi	r24, 0xD0	; 208
 1ec:	09 f4       	brne	.+2      	; 0x1f0 <read_keypad+0x94>
 1ee:	7a c0       	rjmp	.+244    	; 0x2e4 <read_keypad+0x188>
 1f0:	80 3b       	cpi	r24, 0xB0	; 176
 1f2:	09 f4       	brne	.+2      	; 0x1f6 <read_keypad+0x9a>
 1f4:	89 c0       	rjmp	.+274    	; 0x308 <read_keypad+0x1ac>
 1f6:	80 37       	cpi	r24, 0x70	; 112
 1f8:	09 f4       	brne	.+2      	; 0x1fc <read_keypad+0xa0>
 1fa:	7a c0       	rjmp	.+244    	; 0x2f0 <read_keypad+0x194>
 1fc:	cf 3f       	cpi	r28, 0xFF	; 255
 1fe:	09 f4       	brne	.+2      	; 0x202 <read_keypad+0xa6>
 200:	89 c0       	rjmp	.+274    	; 0x314 <read_keypad+0x1b8>
 202:	43 e0       	ldi	r20, 0x03	; 3
 204:	60 e0       	ldi	r22, 0x00	; 0
 206:	8c e0       	ldi	r24, 0x0C	; 12
 208:	92 e0       	ldi	r25, 0x02	; 2
 20a:	9d d4       	rcall	.+2362   	; 0xb46 <LCD_PrintString>
 20c:	8c 2f       	mov	r24, r28
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	80 31       	cpi	r24, 0x10	; 16
 212:	91 05       	cpc	r25, r1
 214:	08 f0       	brcs	.+2      	; 0x218 <read_keypad+0xbc>
 216:	7e c0       	rjmp	.+252    	; 0x314 <read_keypad+0x1b8>
 218:	fc 01       	movw	r30, r24
 21a:	88 27       	eor	r24, r24
 21c:	ee 58       	subi	r30, 0x8E	; 142
 21e:	ff 4f       	sbci	r31, 0xFF	; 255
 220:	8f 4f       	sbci	r24, 0xFF	; 255
 222:	dd c4       	rjmp	.+2490   	; 0xbde <__tablejump2__>
 224:	43 e0       	ldi	r20, 0x03	; 3
 226:	69 e0       	ldi	r22, 0x09	; 9
 228:	87 e1       	ldi	r24, 0x17	; 23
 22a:	92 e0       	ldi	r25, 0x02	; 2
 22c:	8c d4       	rcall	.+2328   	; 0xb46 <LCD_PrintString>
 22e:	72 c0       	rjmp	.+228    	; 0x314 <read_keypad+0x1b8>
 230:	43 e0       	ldi	r20, 0x03	; 3
 232:	69 e0       	ldi	r22, 0x09	; 9
 234:	89 e1       	ldi	r24, 0x19	; 25
 236:	92 e0       	ldi	r25, 0x02	; 2
 238:	86 d4       	rcall	.+2316   	; 0xb46 <LCD_PrintString>
 23a:	6c c0       	rjmp	.+216    	; 0x314 <read_keypad+0x1b8>
 23c:	43 e0       	ldi	r20, 0x03	; 3
 23e:	69 e0       	ldi	r22, 0x09	; 9
 240:	8b e1       	ldi	r24, 0x1B	; 27
 242:	92 e0       	ldi	r25, 0x02	; 2
 244:	80 d4       	rcall	.+2304   	; 0xb46 <LCD_PrintString>
 246:	66 c0       	rjmp	.+204    	; 0x314 <read_keypad+0x1b8>
 248:	43 e0       	ldi	r20, 0x03	; 3
 24a:	69 e0       	ldi	r22, 0x09	; 9
 24c:	8d e1       	ldi	r24, 0x1D	; 29
 24e:	92 e0       	ldi	r25, 0x02	; 2
 250:	7a d4       	rcall	.+2292   	; 0xb46 <LCD_PrintString>
 252:	60 c0       	rjmp	.+192    	; 0x314 <read_keypad+0x1b8>
 254:	43 e0       	ldi	r20, 0x03	; 3
 256:	69 e0       	ldi	r22, 0x09	; 9
 258:	8f e1       	ldi	r24, 0x1F	; 31
 25a:	92 e0       	ldi	r25, 0x02	; 2
 25c:	74 d4       	rcall	.+2280   	; 0xb46 <LCD_PrintString>
 25e:	5a c0       	rjmp	.+180    	; 0x314 <read_keypad+0x1b8>
 260:	43 e0       	ldi	r20, 0x03	; 3
 262:	69 e0       	ldi	r22, 0x09	; 9
 264:	81 e2       	ldi	r24, 0x21	; 33
 266:	92 e0       	ldi	r25, 0x02	; 2
 268:	6e d4       	rcall	.+2268   	; 0xb46 <LCD_PrintString>
 26a:	54 c0       	rjmp	.+168    	; 0x314 <read_keypad+0x1b8>
 26c:	43 e0       	ldi	r20, 0x03	; 3
 26e:	69 e0       	ldi	r22, 0x09	; 9
 270:	83 e2       	ldi	r24, 0x23	; 35
 272:	92 e0       	ldi	r25, 0x02	; 2
 274:	68 d4       	rcall	.+2256   	; 0xb46 <LCD_PrintString>
 276:	4e c0       	rjmp	.+156    	; 0x314 <read_keypad+0x1b8>
 278:	43 e0       	ldi	r20, 0x03	; 3
 27a:	69 e0       	ldi	r22, 0x09	; 9
 27c:	85 e2       	ldi	r24, 0x25	; 37
 27e:	92 e0       	ldi	r25, 0x02	; 2
 280:	62 d4       	rcall	.+2244   	; 0xb46 <LCD_PrintString>
 282:	48 c0       	rjmp	.+144    	; 0x314 <read_keypad+0x1b8>
 284:	43 e0       	ldi	r20, 0x03	; 3
 286:	69 e0       	ldi	r22, 0x09	; 9
 288:	87 e2       	ldi	r24, 0x27	; 39
 28a:	92 e0       	ldi	r25, 0x02	; 2
 28c:	5c d4       	rcall	.+2232   	; 0xb46 <LCD_PrintString>
 28e:	42 c0       	rjmp	.+132    	; 0x314 <read_keypad+0x1b8>
 290:	43 e0       	ldi	r20, 0x03	; 3
 292:	69 e0       	ldi	r22, 0x09	; 9
 294:	89 e2       	ldi	r24, 0x29	; 41
 296:	92 e0       	ldi	r25, 0x02	; 2
 298:	56 d4       	rcall	.+2220   	; 0xb46 <LCD_PrintString>
 29a:	3c c0       	rjmp	.+120    	; 0x314 <read_keypad+0x1b8>
 29c:	43 e0       	ldi	r20, 0x03	; 3
 29e:	69 e0       	ldi	r22, 0x09	; 9
 2a0:	8b e2       	ldi	r24, 0x2B	; 43
 2a2:	92 e0       	ldi	r25, 0x02	; 2
 2a4:	50 d4       	rcall	.+2208   	; 0xb46 <LCD_PrintString>
 2a6:	36 c0       	rjmp	.+108    	; 0x314 <read_keypad+0x1b8>
 2a8:	43 e0       	ldi	r20, 0x03	; 3
 2aa:	69 e0       	ldi	r22, 0x09	; 9
 2ac:	8d e2       	ldi	r24, 0x2D	; 45
 2ae:	92 e0       	ldi	r25, 0x02	; 2
 2b0:	4a d4       	rcall	.+2196   	; 0xb46 <LCD_PrintString>
 2b2:	30 c0       	rjmp	.+96     	; 0x314 <read_keypad+0x1b8>
 2b4:	43 e0       	ldi	r20, 0x03	; 3
 2b6:	69 e0       	ldi	r22, 0x09	; 9
 2b8:	8f e2       	ldi	r24, 0x2F	; 47
 2ba:	92 e0       	ldi	r25, 0x02	; 2
 2bc:	44 d4       	rcall	.+2184   	; 0xb46 <LCD_PrintString>
 2be:	2a c0       	rjmp	.+84     	; 0x314 <read_keypad+0x1b8>
 2c0:	43 e0       	ldi	r20, 0x03	; 3
 2c2:	69 e0       	ldi	r22, 0x09	; 9
 2c4:	81 e3       	ldi	r24, 0x31	; 49
 2c6:	92 e0       	ldi	r25, 0x02	; 2
 2c8:	3e d4       	rcall	.+2172   	; 0xb46 <LCD_PrintString>
 2ca:	24 c0       	rjmp	.+72     	; 0x314 <read_keypad+0x1b8>
 2cc:	43 e0       	ldi	r20, 0x03	; 3
 2ce:	69 e0       	ldi	r22, 0x09	; 9
 2d0:	83 e3       	ldi	r24, 0x33	; 51
 2d2:	92 e0       	ldi	r25, 0x02	; 2
 2d4:	38 d4       	rcall	.+2160   	; 0xb46 <LCD_PrintString>
 2d6:	1e c0       	rjmp	.+60     	; 0x314 <read_keypad+0x1b8>
 2d8:	43 e0       	ldi	r20, 0x03	; 3
 2da:	69 e0       	ldi	r22, 0x09	; 9
 2dc:	85 e3       	ldi	r24, 0x35	; 53
 2de:	92 e0       	ldi	r25, 0x02	; 2
 2e0:	32 d4       	rcall	.+2148   	; 0xb46 <LCD_PrintString>
 2e2:	18 c0       	rjmp	.+48     	; 0x314 <read_keypad+0x1b8>
 2e4:	43 e0       	ldi	r20, 0x03	; 3
 2e6:	60 e0       	ldi	r22, 0x00	; 0
 2e8:	8c e0       	ldi	r24, 0x0C	; 12
 2ea:	92 e0       	ldi	r25, 0x02	; 2
 2ec:	2c d4       	rcall	.+2136   	; 0xb46 <LCD_PrintString>
 2ee:	9a cf       	rjmp	.-204    	; 0x224 <read_keypad+0xc8>
 2f0:	43 e0       	ldi	r20, 0x03	; 3
 2f2:	60 e0       	ldi	r22, 0x00	; 0
 2f4:	8c e0       	ldi	r24, 0x0C	; 12
 2f6:	92 e0       	ldi	r25, 0x02	; 2
 2f8:	26 d4       	rcall	.+2124   	; 0xb46 <LCD_PrintString>
 2fa:	ee cf       	rjmp	.-36     	; 0x2d8 <read_keypad+0x17c>
 2fc:	43 e0       	ldi	r20, 0x03	; 3
 2fe:	60 e0       	ldi	r22, 0x00	; 0
 300:	8c e0       	ldi	r24, 0x0C	; 12
 302:	92 e0       	ldi	r25, 0x02	; 2
 304:	20 d4       	rcall	.+2112   	; 0xb46 <LCD_PrintString>
 306:	ca cf       	rjmp	.-108    	; 0x29c <read_keypad+0x140>
 308:	43 e0       	ldi	r20, 0x03	; 3
 30a:	60 e0       	ldi	r22, 0x00	; 0
 30c:	8c e0       	ldi	r24, 0x0C	; 12
 30e:	92 e0       	ldi	r25, 0x02	; 2
 310:	1a d4       	rcall	.+2100   	; 0xb46 <LCD_PrintString>
 312:	ca cf       	rjmp	.-108    	; 0x2a8 <read_keypad+0x14c>
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	cf 91       	pop	r28
 318:	08 95       	ret

0000031a <LED_Init>:
 31a:	e7 e0       	ldi	r30, 0x07	; 7
 31c:	f1 e0       	ldi	r31, 0x01	; 1
 31e:	80 81       	ld	r24, Z
 320:	8f 67       	ori	r24, 0x7F	; 127
 322:	80 83       	st	Z, r24
 324:	08 95       	ret

00000326 <toggleLED>:
 326:	01 97       	sbiw	r24, 0x01	; 1
 328:	87 30       	cpi	r24, 0x07	; 7
 32a:	91 05       	cpc	r25, r1
 32c:	b0 f5       	brcc	.+108    	; 0x39a <toggleLED+0x74>
 32e:	fc 01       	movw	r30, r24
 330:	88 27       	eor	r24, r24
 332:	ee 57       	subi	r30, 0x7E	; 126
 334:	ff 4f       	sbci	r31, 0xFF	; 255
 336:	8f 4f       	sbci	r24, 0xFF	; 255
 338:	52 c4       	rjmp	.+2212   	; 0xbde <__tablejump2__>
 33a:	e8 e0       	ldi	r30, 0x08	; 8
 33c:	f1 e0       	ldi	r31, 0x01	; 1
 33e:	90 81       	ld	r25, Z
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	89 27       	eor	r24, r25
 344:	80 83       	st	Z, r24
 346:	08 95       	ret
 348:	e8 e0       	ldi	r30, 0x08	; 8
 34a:	f1 e0       	ldi	r31, 0x01	; 1
 34c:	90 81       	ld	r25, Z
 34e:	82 e0       	ldi	r24, 0x02	; 2
 350:	89 27       	eor	r24, r25
 352:	80 83       	st	Z, r24
 354:	08 95       	ret
 356:	e8 e0       	ldi	r30, 0x08	; 8
 358:	f1 e0       	ldi	r31, 0x01	; 1
 35a:	90 81       	ld	r25, Z
 35c:	84 e0       	ldi	r24, 0x04	; 4
 35e:	89 27       	eor	r24, r25
 360:	80 83       	st	Z, r24
 362:	08 95       	ret
 364:	e8 e0       	ldi	r30, 0x08	; 8
 366:	f1 e0       	ldi	r31, 0x01	; 1
 368:	90 81       	ld	r25, Z
 36a:	88 e0       	ldi	r24, 0x08	; 8
 36c:	89 27       	eor	r24, r25
 36e:	80 83       	st	Z, r24
 370:	08 95       	ret
 372:	e8 e0       	ldi	r30, 0x08	; 8
 374:	f1 e0       	ldi	r31, 0x01	; 1
 376:	90 81       	ld	r25, Z
 378:	80 e1       	ldi	r24, 0x10	; 16
 37a:	89 27       	eor	r24, r25
 37c:	80 83       	st	Z, r24
 37e:	08 95       	ret
 380:	e8 e0       	ldi	r30, 0x08	; 8
 382:	f1 e0       	ldi	r31, 0x01	; 1
 384:	90 81       	ld	r25, Z
 386:	80 e2       	ldi	r24, 0x20	; 32
 388:	89 27       	eor	r24, r25
 38a:	80 83       	st	Z, r24
 38c:	08 95       	ret
 38e:	e8 e0       	ldi	r30, 0x08	; 8
 390:	f1 e0       	ldi	r31, 0x01	; 1
 392:	90 81       	ld	r25, Z
 394:	80 e4       	ldi	r24, 0x40	; 64
 396:	89 27       	eor	r24, r25
 398:	80 83       	st	Z, r24
 39a:	08 95       	ret

0000039c <timer1_Init>:
 39c:	f8 94       	cli
 39e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
 3a2:	e1 e8       	ldi	r30, 0x81	; 129
 3a4:	f0 e0       	ldi	r31, 0x00	; 0
 3a6:	10 82       	st	Z, r1
 3a8:	80 81       	ld	r24, Z
 3aa:	8a 60       	ori	r24, 0x0A	; 10
 3ac:	80 83       	st	Z, r24
 3ae:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 3b2:	8d e7       	ldi	r24, 0x7D	; 125
 3b4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
 3b8:	ef e6       	ldi	r30, 0x6F	; 111
 3ba:	f0 e0       	ldi	r31, 0x00	; 0
 3bc:	80 81       	ld	r24, Z
 3be:	82 60       	ori	r24, 0x02	; 2
 3c0:	80 83       	st	Z, r24
 3c2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
 3c6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
 3ca:	78 94       	sei
 3cc:	08 95       	ret

000003ce <__vector_17>:
 3ce:	1f 92       	push	r1
 3d0:	0f 92       	push	r0
 3d2:	0f b6       	in	r0, 0x3f	; 63
 3d4:	0f 92       	push	r0
 3d6:	11 24       	eor	r1, r1
 3d8:	8f 93       	push	r24
 3da:	9f 93       	push	r25
 3dc:	af 93       	push	r26
 3de:	bf 93       	push	r27
 3e0:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <__data_end>
 3e4:	90 91 57 02 	lds	r25, 0x0257	; 0x800257 <__data_end+0x1>
 3e8:	a0 91 58 02 	lds	r26, 0x0258	; 0x800258 <__data_end+0x2>
 3ec:	b0 91 59 02 	lds	r27, 0x0259	; 0x800259 <__data_end+0x3>
 3f0:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <__data_end>
 3f4:	90 91 57 02 	lds	r25, 0x0257	; 0x800257 <__data_end+0x1>
 3f8:	a0 91 58 02 	lds	r26, 0x0258	; 0x800258 <__data_end+0x2>
 3fc:	b0 91 59 02 	lds	r27, 0x0259	; 0x800259 <__data_end+0x3>
 400:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <__data_end>
 404:	90 91 57 02 	lds	r25, 0x0257	; 0x800257 <__data_end+0x1>
 408:	a0 91 58 02 	lds	r26, 0x0258	; 0x800258 <__data_end+0x2>
 40c:	b0 91 59 02 	lds	r27, 0x0259	; 0x800259 <__data_end+0x3>
 410:	01 96       	adiw	r24, 0x01	; 1
 412:	a1 1d       	adc	r26, r1
 414:	b1 1d       	adc	r27, r1
 416:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <__data_end>
 41a:	90 93 57 02 	sts	0x0257, r25	; 0x800257 <__data_end+0x1>
 41e:	a0 93 58 02 	sts	0x0258, r26	; 0x800258 <__data_end+0x2>
 422:	b0 93 59 02 	sts	0x0259, r27	; 0x800259 <__data_end+0x3>
 426:	bf 91       	pop	r27
 428:	af 91       	pop	r26
 42a:	9f 91       	pop	r25
 42c:	8f 91       	pop	r24
 42e:	0f 90       	pop	r0
 430:	0f be       	out	0x3f, r0	; 63
 432:	0f 90       	pop	r0
 434:	1f 90       	pop	r1
 436:	18 95       	reti

00000438 <ADC_init>:
 438:	ec e7       	ldi	r30, 0x7C	; 124
 43a:	f0 e0       	ldi	r31, 0x00	; 0
 43c:	80 81       	ld	r24, Z
 43e:	80 64       	ori	r24, 0x40	; 64
 440:	80 83       	st	Z, r24
 442:	ea e7       	ldi	r30, 0x7A	; 122
 444:	f0 e0       	ldi	r31, 0x00	; 0
 446:	80 81       	ld	r24, Z
 448:	83 68       	ori	r24, 0x83	; 131
 44a:	80 83       	st	Z, r24
 44c:	08 95       	ret

0000044e <ADC_read>:
 44e:	ec e7       	ldi	r30, 0x7C	; 124
 450:	f0 e0       	ldi	r31, 0x00	; 0
 452:	90 81       	ld	r25, Z
 454:	90 7f       	andi	r25, 0xF0	; 240
 456:	8f 70       	andi	r24, 0x0F	; 15
 458:	89 2b       	or	r24, r25
 45a:	80 83       	st	Z, r24
 45c:	ea e7       	ldi	r30, 0x7A	; 122
 45e:	f0 e0       	ldi	r31, 0x00	; 0
 460:	80 81       	ld	r24, Z
 462:	80 64       	ori	r24, 0x40	; 64
 464:	80 83       	st	Z, r24
 466:	80 81       	ld	r24, Z
 468:	86 fd       	sbrc	r24, 6
 46a:	fd cf       	rjmp	.-6      	; 0x466 <ADC_read+0x18>
 46c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
 470:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
 474:	08 95       	ret

00000476 <I2CInit>:
 476:	82 e0       	ldi	r24, 0x02	; 2
 478:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
 47c:	e9 eb       	ldi	r30, 0xB9	; 185
 47e:	f0 e0       	ldi	r31, 0x00	; 0
 480:	80 81       	ld	r24, Z
 482:	83 60       	ori	r24, 0x03	; 3
 484:	80 83       	st	Z, r24
 486:	ec eb       	ldi	r30, 0xBC	; 188
 488:	f0 e0       	ldi	r31, 0x00	; 0
 48a:	80 81       	ld	r24, Z
 48c:	84 60       	ori	r24, 0x04	; 4
 48e:	80 83       	st	Z, r24
 490:	08 95       	ret

00000492 <I2CStart>:
 492:	84 ea       	ldi	r24, 0xA4	; 164
 494:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 498:	ec eb       	ldi	r30, 0xBC	; 188
 49a:	f0 e0       	ldi	r31, 0x00	; 0
 49c:	80 81       	ld	r24, Z
 49e:	88 23       	and	r24, r24
 4a0:	ec f7       	brge	.-6      	; 0x49c <I2CStart+0xa>
 4a2:	08 95       	ret

000004a4 <I2CStop>:
 4a4:	84 e9       	ldi	r24, 0x94	; 148
 4a6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 4aa:	ec eb       	ldi	r30, 0xBC	; 188
 4ac:	f0 e0       	ldi	r31, 0x00	; 0
 4ae:	80 81       	ld	r24, Z
 4b0:	84 fd       	sbrc	r24, 4
 4b2:	fd cf       	rjmp	.-6      	; 0x4ae <I2CStop+0xa>
 4b4:	08 95       	ret

000004b6 <I2CWriteByte>:
 4b6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 4ba:	84 e8       	ldi	r24, 0x84	; 132
 4bc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 4c0:	ec eb       	ldi	r30, 0xBC	; 188
 4c2:	f0 e0       	ldi	r31, 0x00	; 0
 4c4:	80 81       	ld	r24, Z
 4c6:	88 23       	and	r24, r24
 4c8:	ec f7       	brge	.-6      	; 0x4c4 <I2CWriteByte+0xe>
 4ca:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
 4ce:	88 7f       	andi	r24, 0xF8	; 248
 4d0:	88 31       	cpi	r24, 0x18	; 24
 4d2:	69 f0       	breq	.+26     	; 0x4ee <I2CWriteByte+0x38>
 4d4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
 4d8:	88 7f       	andi	r24, 0xF8	; 248
 4da:	88 32       	cpi	r24, 0x28	; 40
 4dc:	51 f0       	breq	.+20     	; 0x4f2 <I2CWriteByte+0x3c>
 4de:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
 4e2:	98 7f       	andi	r25, 0xF8	; 248
 4e4:	81 e0       	ldi	r24, 0x01	; 1
 4e6:	90 34       	cpi	r25, 0x40	; 64
 4e8:	29 f0       	breq	.+10     	; 0x4f4 <I2CWriteByte+0x3e>
 4ea:	80 e0       	ldi	r24, 0x00	; 0
 4ec:	08 95       	ret
 4ee:	81 e0       	ldi	r24, 0x01	; 1
 4f0:	08 95       	ret
 4f2:	81 e0       	ldi	r24, 0x01	; 1
 4f4:	08 95       	ret

000004f6 <I2CReadByte>:
 4f6:	dc 01       	movw	r26, r24
 4f8:	66 23       	and	r22, r22
 4fa:	31 f0       	breq	.+12     	; 0x508 <I2CReadByte+0x12>
 4fc:	ec eb       	ldi	r30, 0xBC	; 188
 4fe:	f0 e0       	ldi	r31, 0x00	; 0
 500:	90 81       	ld	r25, Z
 502:	90 64       	ori	r25, 0x40	; 64
 504:	90 83       	st	Z, r25
 506:	05 c0       	rjmp	.+10     	; 0x512 <I2CReadByte+0x1c>
 508:	ec eb       	ldi	r30, 0xBC	; 188
 50a:	f0 e0       	ldi	r31, 0x00	; 0
 50c:	90 81       	ld	r25, Z
 50e:	9f 7b       	andi	r25, 0xBF	; 191
 510:	90 83       	st	Z, r25
 512:	ec eb       	ldi	r30, 0xBC	; 188
 514:	f0 e0       	ldi	r31, 0x00	; 0
 516:	90 81       	ld	r25, Z
 518:	90 68       	ori	r25, 0x80	; 128
 51a:	90 83       	st	Z, r25
 51c:	90 81       	ld	r25, Z
 51e:	99 23       	and	r25, r25
 520:	ec f7       	brge	.-6      	; 0x51c <I2CReadByte+0x26>
 522:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
 526:	98 7f       	andi	r25, 0xF8	; 248
 528:	98 35       	cpi	r25, 0x58	; 88
 52a:	29 f0       	breq	.+10     	; 0x536 <I2CReadByte+0x40>
 52c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
 530:	98 7f       	andi	r25, 0xF8	; 248
 532:	90 35       	cpi	r25, 0x50	; 80
 534:	29 f4       	brne	.+10     	; 0x540 <I2CReadByte+0x4a>
 536:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 53a:	8c 93       	st	X, r24
 53c:	81 e0       	ldi	r24, 0x01	; 1
 53e:	08 95       	ret
 540:	80 e0       	ldi	r24, 0x00	; 0
 542:	08 95       	ret

00000544 <DS1307Read>:
 544:	0f 93       	push	r16
 546:	1f 93       	push	r17
 548:	cf 93       	push	r28
 54a:	c8 2f       	mov	r28, r24
 54c:	8b 01       	movw	r16, r22
 54e:	a1 df       	rcall	.-190    	; 0x492 <I2CStart>
 550:	80 ed       	ldi	r24, 0xD0	; 208
 552:	b1 df       	rcall	.-158    	; 0x4b6 <I2CWriteByte>
 554:	88 23       	and	r24, r24
 556:	89 f0       	breq	.+34     	; 0x57a <DS1307Read+0x36>
 558:	8c 2f       	mov	r24, r28
 55a:	ad df       	rcall	.-166    	; 0x4b6 <I2CWriteByte>
 55c:	88 23       	and	r24, r24
 55e:	79 f0       	breq	.+30     	; 0x57e <DS1307Read+0x3a>
 560:	98 df       	rcall	.-208    	; 0x492 <I2CStart>
 562:	81 ed       	ldi	r24, 0xD1	; 209
 564:	a8 df       	rcall	.-176    	; 0x4b6 <I2CWriteByte>
 566:	88 23       	and	r24, r24
 568:	61 f0       	breq	.+24     	; 0x582 <DS1307Read+0x3e>
 56a:	60 e0       	ldi	r22, 0x00	; 0
 56c:	c8 01       	movw	r24, r16
 56e:	c3 df       	rcall	.-122    	; 0x4f6 <I2CReadByte>
 570:	88 23       	and	r24, r24
 572:	49 f0       	breq	.+18     	; 0x586 <DS1307Read+0x42>
 574:	97 df       	rcall	.-210    	; 0x4a4 <I2CStop>
 576:	81 e0       	ldi	r24, 0x01	; 1
 578:	07 c0       	rjmp	.+14     	; 0x588 <DS1307Read+0x44>
 57a:	80 e0       	ldi	r24, 0x00	; 0
 57c:	05 c0       	rjmp	.+10     	; 0x588 <DS1307Read+0x44>
 57e:	80 e0       	ldi	r24, 0x00	; 0
 580:	03 c0       	rjmp	.+6      	; 0x588 <DS1307Read+0x44>
 582:	80 e0       	ldi	r24, 0x00	; 0
 584:	01 c0       	rjmp	.+2      	; 0x588 <DS1307Read+0x44>
 586:	80 e0       	ldi	r24, 0x00	; 0
 588:	cf 91       	pop	r28
 58a:	1f 91       	pop	r17
 58c:	0f 91       	pop	r16
 58e:	08 95       	ret

00000590 <DS1307Write>:
 590:	cf 93       	push	r28
 592:	df 93       	push	r29
 594:	c8 2f       	mov	r28, r24
 596:	d6 2f       	mov	r29, r22
 598:	7c df       	rcall	.-264    	; 0x492 <I2CStart>
 59a:	80 ed       	ldi	r24, 0xD0	; 208
 59c:	8c df       	rcall	.-232    	; 0x4b6 <I2CWriteByte>
 59e:	88 23       	and	r24, r24
 5a0:	59 f0       	breq	.+22     	; 0x5b8 <DS1307Write+0x28>
 5a2:	8c 2f       	mov	r24, r28
 5a4:	88 df       	rcall	.-240    	; 0x4b6 <I2CWriteByte>
 5a6:	88 23       	and	r24, r24
 5a8:	49 f0       	breq	.+18     	; 0x5bc <DS1307Write+0x2c>
 5aa:	8d 2f       	mov	r24, r29
 5ac:	84 df       	rcall	.-248    	; 0x4b6 <I2CWriteByte>
 5ae:	88 23       	and	r24, r24
 5b0:	39 f0       	breq	.+14     	; 0x5c0 <DS1307Write+0x30>
 5b2:	78 df       	rcall	.-272    	; 0x4a4 <I2CStop>
 5b4:	81 e0       	ldi	r24, 0x01	; 1
 5b6:	05 c0       	rjmp	.+10     	; 0x5c2 <DS1307Write+0x32>
 5b8:	80 e0       	ldi	r24, 0x00	; 0
 5ba:	03 c0       	rjmp	.+6      	; 0x5c2 <DS1307Write+0x32>
 5bc:	80 e0       	ldi	r24, 0x00	; 0
 5be:	01 c0       	rjmp	.+2      	; 0x5c2 <DS1307Write+0x32>
 5c0:	80 e0       	ldi	r24, 0x00	; 0
 5c2:	df 91       	pop	r29
 5c4:	cf 91       	pop	r28
 5c6:	08 95       	ret

000005c8 <ClockInit>:
 5c8:	cf 93       	push	r28
 5ca:	df 93       	push	r29
 5cc:	1f 92       	push	r1
 5ce:	cd b7       	in	r28, 0x3d	; 61
 5d0:	de b7       	in	r29, 0x3e	; 62
 5d2:	51 df       	rcall	.-350    	; 0x476 <I2CInit>
 5d4:	be 01       	movw	r22, r28
 5d6:	6f 5f       	subi	r22, 0xFF	; 255
 5d8:	7f 4f       	sbci	r23, 0xFF	; 255
 5da:	80 e0       	ldi	r24, 0x00	; 0
 5dc:	b3 df       	rcall	.-154    	; 0x544 <DS1307Read>
 5de:	98 2f       	mov	r25, r24
 5e0:	88 23       	and	r24, r24
 5e2:	c9 f0       	breq	.+50     	; 0x616 <ClockInit+0x4e>
 5e4:	69 81       	ldd	r22, Y+1	; 0x01
 5e6:	6f 77       	andi	r22, 0x7F	; 127
 5e8:	69 83       	std	Y+1, r22	; 0x01
 5ea:	80 e0       	ldi	r24, 0x00	; 0
 5ec:	d1 df       	rcall	.-94     	; 0x590 <DS1307Write>
 5ee:	98 2f       	mov	r25, r24
 5f0:	88 23       	and	r24, r24
 5f2:	89 f0       	breq	.+34     	; 0x616 <ClockInit+0x4e>
 5f4:	be 01       	movw	r22, r28
 5f6:	6f 5f       	subi	r22, 0xFF	; 255
 5f8:	7f 4f       	sbci	r23, 0xFF	; 255
 5fa:	82 e0       	ldi	r24, 0x02	; 2
 5fc:	a3 df       	rcall	.-186    	; 0x544 <DS1307Read>
 5fe:	98 2f       	mov	r25, r24
 600:	88 23       	and	r24, r24
 602:	49 f0       	breq	.+18     	; 0x616 <ClockInit+0x4e>
 604:	69 81       	ldd	r22, Y+1	; 0x01
 606:	60 64       	ori	r22, 0x40	; 64
 608:	69 83       	std	Y+1, r22	; 0x01
 60a:	82 e0       	ldi	r24, 0x02	; 2
 60c:	c1 df       	rcall	.-126    	; 0x590 <DS1307Write>
 60e:	91 e0       	ldi	r25, 0x01	; 1
 610:	81 11       	cpse	r24, r1
 612:	01 c0       	rjmp	.+2      	; 0x616 <ClockInit+0x4e>
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	89 2f       	mov	r24, r25
 618:	0f 90       	pop	r0
 61a:	df 91       	pop	r29
 61c:	cf 91       	pop	r28
 61e:	08 95       	ret

00000620 <GetTimeString>:
 620:	0f 93       	push	r16
 622:	1f 93       	push	r17
 624:	cf 93       	push	r28
 626:	df 93       	push	r29
 628:	1f 92       	push	r1
 62a:	cd b7       	in	r28, 0x3d	; 61
 62c:	de b7       	in	r29, 0x3e	; 62
 62e:	8c 01       	movw	r16, r24
 630:	be 01       	movw	r22, r28
 632:	6f 5f       	subi	r22, 0xFF	; 255
 634:	7f 4f       	sbci	r23, 0xFF	; 255
 636:	80 e0       	ldi	r24, 0x00	; 0
 638:	85 df       	rcall	.-246    	; 0x544 <DS1307Read>
 63a:	88 23       	and	r24, r24
 63c:	09 f4       	brne	.+2      	; 0x640 <GetTimeString+0x20>
 63e:	42 c0       	rjmp	.+132    	; 0x6c4 <GetTimeString+0xa4>
 640:	f8 01       	movw	r30, r16
 642:	13 86       	std	Z+11, r1	; 0x0b
 644:	8d e4       	ldi	r24, 0x4D	; 77
 646:	82 87       	std	Z+10, r24	; 0x0a
 648:	80 e2       	ldi	r24, 0x20	; 32
 64a:	80 87       	std	Z+8, r24	; 0x08
 64c:	89 81       	ldd	r24, Y+1	; 0x01
 64e:	98 2f       	mov	r25, r24
 650:	9f 70       	andi	r25, 0x0F	; 15
 652:	90 5d       	subi	r25, 0xD0	; 208
 654:	97 83       	std	Z+7, r25	; 0x07
 656:	80 77       	andi	r24, 0x70	; 112
 658:	82 95       	swap	r24
 65a:	8f 70       	andi	r24, 0x0F	; 15
 65c:	80 5d       	subi	r24, 0xD0	; 208
 65e:	86 83       	std	Z+6, r24	; 0x06
 660:	8a e3       	ldi	r24, 0x3A	; 58
 662:	85 83       	std	Z+5, r24	; 0x05
 664:	be 01       	movw	r22, r28
 666:	6f 5f       	subi	r22, 0xFF	; 255
 668:	7f 4f       	sbci	r23, 0xFF	; 255
 66a:	81 e0       	ldi	r24, 0x01	; 1
 66c:	6b df       	rcall	.-298    	; 0x544 <DS1307Read>
 66e:	88 23       	and	r24, r24
 670:	49 f1       	breq	.+82     	; 0x6c4 <GetTimeString+0xa4>
 672:	89 81       	ldd	r24, Y+1	; 0x01
 674:	98 2f       	mov	r25, r24
 676:	9f 70       	andi	r25, 0x0F	; 15
 678:	90 5d       	subi	r25, 0xD0	; 208
 67a:	f8 01       	movw	r30, r16
 67c:	94 83       	std	Z+4, r25	; 0x04
 67e:	80 77       	andi	r24, 0x70	; 112
 680:	82 95       	swap	r24
 682:	8f 70       	andi	r24, 0x0F	; 15
 684:	80 5d       	subi	r24, 0xD0	; 208
 686:	83 83       	std	Z+3, r24	; 0x03
 688:	8a e3       	ldi	r24, 0x3A	; 58
 68a:	82 83       	std	Z+2, r24	; 0x02
 68c:	be 01       	movw	r22, r28
 68e:	6f 5f       	subi	r22, 0xFF	; 255
 690:	7f 4f       	sbci	r23, 0xFF	; 255
 692:	82 e0       	ldi	r24, 0x02	; 2
 694:	57 df       	rcall	.-338    	; 0x544 <DS1307Read>
 696:	88 23       	and	r24, r24
 698:	a9 f0       	breq	.+42     	; 0x6c4 <GetTimeString+0xa4>
 69a:	89 81       	ldd	r24, Y+1	; 0x01
 69c:	98 2f       	mov	r25, r24
 69e:	9f 70       	andi	r25, 0x0F	; 15
 6a0:	90 5d       	subi	r25, 0xD0	; 208
 6a2:	f8 01       	movw	r30, r16
 6a4:	91 83       	std	Z+1, r25	; 0x01
 6a6:	84 fb       	bst	r24, 4
 6a8:	99 27       	eor	r25, r25
 6aa:	90 f9       	bld	r25, 0
 6ac:	90 5d       	subi	r25, 0xD0	; 208
 6ae:	90 83       	st	Z, r25
 6b0:	85 ff       	sbrs	r24, 5
 6b2:	04 c0       	rjmp	.+8      	; 0x6bc <GetTimeString+0x9c>
 6b4:	80 e5       	ldi	r24, 0x50	; 80
 6b6:	81 87       	std	Z+9, r24	; 0x09
 6b8:	81 e0       	ldi	r24, 0x01	; 1
 6ba:	04 c0       	rjmp	.+8      	; 0x6c4 <GetTimeString+0xa4>
 6bc:	81 e4       	ldi	r24, 0x41	; 65
 6be:	f8 01       	movw	r30, r16
 6c0:	81 87       	std	Z+9, r24	; 0x09
 6c2:	81 e0       	ldi	r24, 0x01	; 1
 6c4:	0f 90       	pop	r0
 6c6:	df 91       	pop	r29
 6c8:	cf 91       	pop	r28
 6ca:	1f 91       	pop	r17
 6cc:	0f 91       	pop	r16
 6ce:	08 95       	ret

000006d0 <HC595Init>:
 6d0:	8a b1       	in	r24, 0x0a	; 10
 6d2:	80 67       	ori	r24, 0x70	; 112
 6d4:	8a b9       	out	0x0a, r24	; 10
 6d6:	08 95       	ret

000006d8 <HC595Pulse>:
 6d8:	5e 9a       	sbi	0x0b, 6	; 11
 6da:	5e 98       	cbi	0x0b, 6	; 11
 6dc:	08 95       	ret

000006de <HC595Latch>:
 6de:	5d 9a       	sbi	0x0b, 5	; 11
 6e0:	81 e0       	ldi	r24, 0x01	; 1
 6e2:	98 2f       	mov	r25, r24
 6e4:	9a 95       	dec	r25
 6e6:	f1 f7       	brne	.-4      	; 0x6e4 <HC595Latch+0x6>
 6e8:	5d 98       	cbi	0x0b, 5	; 11
 6ea:	8a 95       	dec	r24
 6ec:	f1 f7       	brne	.-4      	; 0x6ea <HC595Latch+0xc>
 6ee:	08 95       	ret

000006f0 <HC595Write>:
 6f0:	cf 93       	push	r28
 6f2:	df 93       	push	r29
 6f4:	d8 2f       	mov	r29, r24
 6f6:	c8 e0       	ldi	r28, 0x08	; 8
 6f8:	dd 23       	and	r29, r29
 6fa:	14 f4       	brge	.+4      	; 0x700 <HC595Write+0x10>
 6fc:	5c 9a       	sbi	0x0b, 4	; 11
 6fe:	01 c0       	rjmp	.+2      	; 0x702 <HC595Write+0x12>
 700:	5c 98       	cbi	0x0b, 4	; 11
 702:	ea df       	rcall	.-44     	; 0x6d8 <HC595Pulse>
 704:	dd 0f       	add	r29, r29
 706:	c1 50       	subi	r28, 0x01	; 1
 708:	b9 f7       	brne	.-18     	; 0x6f8 <HC595Write+0x8>
 70a:	e9 df       	rcall	.-46     	; 0x6de <HC595Latch>
 70c:	df 91       	pop	r29
 70e:	cf 91       	pop	r28
 710:	08 95       	ret

00000712 <Segment_Print>:
 712:	8a 30       	cpi	r24, 0x0A	; 10
 714:	20 f0       	brcs	.+8      	; 0x71e <Segment_Print+0xc>
 716:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <__DATA_REGION_ORIGIN__+0xb>
 71a:	ea cf       	rjmp	.-44     	; 0x6f0 <HC595Write>
 71c:	08 95       	ret
 71e:	e8 2f       	mov	r30, r24
 720:	f0 e0       	ldi	r31, 0x00	; 0
 722:	e0 50       	subi	r30, 0x00	; 0
 724:	fe 4f       	sbci	r31, 0xFE	; 254
 726:	80 81       	ld	r24, Z
 728:	e3 cf       	rjmp	.-58     	; 0x6f0 <HC595Write>
 72a:	08 95       	ret

0000072c <pwm_Init>:
 72c:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7000b2>
 730:	e0 eb       	ldi	r30, 0xB0	; 176
 732:	f0 e0       	ldi	r31, 0x00	; 0
 734:	80 81       	ld	r24, Z
 736:	83 68       	ori	r24, 0x83	; 131
 738:	80 83       	st	Z, r24
 73a:	e1 eb       	ldi	r30, 0xB1	; 177
 73c:	f0 e0       	ldi	r31, 0x00	; 0
 73e:	80 81       	ld	r24, Z
 740:	81 60       	ori	r24, 0x01	; 1
 742:	80 83       	st	Z, r24
 744:	24 9a       	sbi	0x04, 4	; 4
 746:	e1 e0       	ldi	r30, 0x01	; 1
 748:	f1 e0       	ldi	r31, 0x01	; 1
 74a:	80 81       	ld	r24, Z
 74c:	80 64       	ori	r24, 0x40	; 64
 74e:	80 83       	st	Z, r24
 750:	08 95       	ret

00000752 <tinudht_read>:

// ----------------------------------------------------------------------------

uint8_t tinudht_read(TinuDHT *ptinudht, uint8_t dht_pin);

uint8_t tinudht_read(TinuDHT *ptinudht, uint8_t dht_pin) {
 752:	1f 93       	push	r17
 754:	cf 93       	push	r28
 756:	df 93       	push	r29
 758:	fc 01       	movw	r30, r24
	uint8_t timeout;

	// Send request to DHT11
	DDRB |= (1 << dht_pin);	// Set port as output
 75a:	84 b1       	in	r24, 0x04	; 4
 75c:	41 e0       	ldi	r20, 0x01	; 1
 75e:	50 e0       	ldi	r21, 0x00	; 0
 760:	02 c0       	rjmp	.+4      	; 0x766 <tinudht_read+0x14>
 762:	44 0f       	add	r20, r20
 764:	55 1f       	adc	r21, r21
 766:	6a 95       	dec	r22
 768:	e2 f7       	brpl	.-8      	; 0x762 <tinudht_read+0x10>
 76a:	84 2b       	or	r24, r20
 76c:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(1 << dht_pin);	// Set line to LO
 76e:	85 b1       	in	r24, 0x05	; 5
 770:	94 2f       	mov	r25, r20
 772:	90 95       	com	r25
 774:	89 23       	and	r24, r25
 776:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 778:	a3 e9       	ldi	r26, 0x93	; 147
 77a:	b1 e1       	ldi	r27, 0x11	; 17
 77c:	11 97       	sbiw	r26, 0x01	; 1
 77e:	f1 f7       	brne	.-4      	; 0x77c <tinudht_read+0x2a>
 780:	00 c0       	rjmp	.+0      	; 0x782 <tinudht_read+0x30>
 782:	00 00       	nop
	_delay_ms(18);	// Keep line to LO for 18 mS
	// Pull to HI and wait for response
	PORTB |= (1 << dht_pin);	// Set to 1, internal pull-up. (optional)
 784:	85 b1       	in	r24, 0x05	; 5
 786:	84 2b       	or	r24, r20
 788:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 78a:	b6 e0       	ldi	r27, 0x06	; 6
 78c:	ba 95       	dec	r27
 78e:	f1 f7       	brne	.-4      	; 0x78c <tinudht_read+0x3a>
 790:	00 c0       	rjmp	.+0      	; 0x792 <tinudht_read+0x40>
	_delay_us(20);	// Wait 20 uS for response

	// Setup pin as input, pulls to HI and wait for response
	DDRB &= ~(1 << dht_pin);	// Set port as input
 792:	84 b1       	in	r24, 0x04	; 4
 794:	98 23       	and	r25, r24
 796:	94 b9       	out	0x04, r25	; 4
	PORTB |= (1 << dht_pin);	// Set to 1, internal pull-up. (optional)
 798:	85 b1       	in	r24, 0x05	; 5
 79a:	84 2b       	or	r24, r20
 79c:	85 b9       	out	0x05, r24	; 5

	// Acknowledge from DHT11
	// NOTE: the timeout should be the equivalent of ~ 80 uS
	timeout = TINUDHT_ACK_TIMEOUT;
	while(bit_is_clear(PINB, dht_pin))	// Wait for LO-to-HI
 79e:	9b e0       	ldi	r25, 0x0B	; 11
 7a0:	03 c0       	rjmp	.+6      	; 0x7a8 <tinudht_read+0x56>
 7a2:	91 50       	subi	r25, 0x01	; 1
	if (--timeout == 0)
 7a4:	09 f4       	brne	.+2      	; 0x7a8 <tinudht_read+0x56>
 7a6:	47 c0       	rjmp	.+142    	; 0x836 <tinudht_read+0xe4>
	PORTB |= (1 << dht_pin);	// Set to 1, internal pull-up. (optional)

	// Acknowledge from DHT11
	// NOTE: the timeout should be the equivalent of ~ 80 uS
	timeout = TINUDHT_ACK_TIMEOUT;
	while(bit_is_clear(PINB, dht_pin))	// Wait for LO-to-HI
 7a8:	23 b1       	in	r18, 0x03	; 3
 7aa:	30 e0       	ldi	r19, 0x00	; 0
 7ac:	24 23       	and	r18, r20
 7ae:	35 23       	and	r19, r21
 7b0:	23 2b       	or	r18, r19
 7b2:	b9 f3       	breq	.-18     	; 0x7a2 <tinudht_read+0x50>
 7b4:	9b e0       	ldi	r25, 0x0B	; 11
 7b6:	03 c0       	rjmp	.+6      	; 0x7be <tinudht_read+0x6c>
 7b8:	91 50       	subi	r25, 0x01	; 1
	if (--timeout == 0)
	return TINUDHT_ERROR_ACK_TIMEOUT;
	timeout = TINUDHT_ACK_TIMEOUT;
	while(bit_is_set(PINB, dht_pin))	// Wait for HI-to-LO
	if (--timeout == 0)
 7ba:	09 f4       	brne	.+2      	; 0x7be <tinudht_read+0x6c>
 7bc:	3e c0       	rjmp	.+124    	; 0x83a <tinudht_read+0xe8>
	timeout = TINUDHT_ACK_TIMEOUT;
	while(bit_is_clear(PINB, dht_pin))	// Wait for LO-to-HI
	if (--timeout == 0)
	return TINUDHT_ERROR_ACK_TIMEOUT;
	timeout = TINUDHT_ACK_TIMEOUT;
	while(bit_is_set(PINB, dht_pin))	// Wait for HI-to-LO
 7be:	23 b1       	in	r18, 0x03	; 3
 7c0:	30 e0       	ldi	r19, 0x00	; 0
 7c2:	24 23       	and	r18, r20
 7c4:	35 23       	and	r19, r21
 7c6:	23 2b       	or	r18, r19
 7c8:	b9 f7       	brne	.-18     	; 0x7b8 <tinudht_read+0x66>
 7ca:	88 e2       	ldi	r24, 0x28	; 40
 7cc:	b0 e0       	ldi	r27, 0x00	; 0
 7ce:	60 e0       	ldi	r22, 0x00	; 0
 7d0:	a0 e0       	ldi	r26, 0x00	; 0
 7d2:	77 e0       	ldi	r23, 0x07	; 7
		if (--timeout == 0)
		return TINUDHT_ERROR_BIT_TIMEOUT;
		// Determine the bit value
		uint8_t len = TINUDHT_BITEND_TIMEOUT - timeout;
		data_byte = (data_byte << 1); // Shift left to make space for the next bit.
		if (len >= TINUDHT_BITLEN) data_byte |= 1; // Add a "1" at the end. Otherwise it will remain a "0".
 7d4:	1a e0       	ldi	r17, 0x0A	; 10
 7d6:	03 c0       	rjmp	.+6      	; 0x7de <tinudht_read+0x8c>
 7d8:	91 50       	subi	r25, 0x01	; 1
	for (uint8_t i = 0; i < 40; i++) {
		// Wait for the bit start
		// NOTE: the timeout should be the equivalent of ~ 50 uS
		timeout = TINUDHT_BITSTART_TIMEOUT;
		while(bit_is_clear(PINB, dht_pin))	// Wait for LO-to-HI
		if (--timeout == 0)
 7da:	11 f4       	brne	.+4      	; 0x7e0 <tinudht_read+0x8e>
 7dc:	30 c0       	rjmp	.+96     	; 0x83e <tinudht_read+0xec>
 7de:	97 e0       	ldi	r25, 0x07	; 7
	// Read the data - 40 bits (5 bytes),
	for (uint8_t i = 0; i < 40; i++) {
		// Wait for the bit start
		// NOTE: the timeout should be the equivalent of ~ 50 uS
		timeout = TINUDHT_BITSTART_TIMEOUT;
		while(bit_is_clear(PINB, dht_pin))	// Wait for LO-to-HI
 7e0:	23 b1       	in	r18, 0x03	; 3
 7e2:	30 e0       	ldi	r19, 0x00	; 0
 7e4:	24 23       	and	r18, r20
 7e6:	35 23       	and	r19, r21
 7e8:	23 2b       	or	r18, r19
 7ea:	b1 f3       	breq	.-20     	; 0x7d8 <tinudht_read+0x86>
 7ec:	9a e0       	ldi	r25, 0x0A	; 10
 7ee:	02 c0       	rjmp	.+4      	; 0x7f4 <tinudht_read+0xa2>
		return TINUDHT_ERROR_BIT_TIMEOUT;
		// Wait for the bit end
		// NOTE: the timeout should be the equivalent of ~ 70 uS
		timeout = TINUDHT_BITEND_TIMEOUT;
		while(bit_is_set(PINB, dht_pin))	// Wait for HI-to-LO
		if (--timeout == 0)
 7f0:	91 50       	subi	r25, 0x01	; 1
 7f2:	39 f1       	breq	.+78     	; 0x842 <tinudht_read+0xf0>
		if (--timeout == 0)
		return TINUDHT_ERROR_BIT_TIMEOUT;
		// Wait for the bit end
		// NOTE: the timeout should be the equivalent of ~ 70 uS
		timeout = TINUDHT_BITEND_TIMEOUT;
		while(bit_is_set(PINB, dht_pin))	// Wait for HI-to-LO
 7f4:	23 b1       	in	r18, 0x03	; 3
 7f6:	30 e0       	ldi	r19, 0x00	; 0
 7f8:	24 23       	and	r18, r20
 7fa:	35 23       	and	r19, r21
 7fc:	23 2b       	or	r18, r19
 7fe:	c1 f7       	brne	.-16     	; 0x7f0 <tinudht_read+0x9e>
		if (--timeout == 0)
		return TINUDHT_ERROR_BIT_TIMEOUT;
		// Determine the bit value
		uint8_t len = TINUDHT_BITEND_TIMEOUT - timeout;
		data_byte = (data_byte << 1); // Shift left to make space for the next bit.
 800:	66 0f       	add	r22, r22
		if (len >= TINUDHT_BITLEN) data_byte |= 1; // Add a "1" at the end. Otherwise it will remain a "0".
 802:	c1 2f       	mov	r28, r17
 804:	c9 1b       	sub	r28, r25
 806:	c5 30       	cpi	r28, 0x05	; 5
 808:	08 f0       	brcs	.+2      	; 0x80c <tinudht_read+0xba>
 80a:	61 60       	ori	r22, 0x01	; 1
		if (bit_index == 0) {	// Next byte?
 80c:	71 11       	cpse	r23, r1
 80e:	0c c0       	rjmp	.+24     	; 0x828 <tinudht_read+0xd6>
			ptinudht->data[data_index] = data_byte;	// Store next byte to the data array.
 810:	9f 01       	movw	r18, r30
 812:	2a 0f       	add	r18, r26
 814:	31 1d       	adc	r19, r1
 816:	e9 01       	movw	r28, r18
 818:	68 83       	st	Y, r22
			if (data_index < 4) checksum += data_byte;	// Add next byte to the checksum.
 81a:	a4 30       	cpi	r26, 0x04	; 4
 81c:	08 f4       	brcc	.+2      	; 0x820 <tinudht_read+0xce>
 81e:	b6 0f       	add	r27, r22
			data_index++;	// Next byte.
 820:	af 5f       	subi	r26, 0xFF	; 255
			bit_index = 7;	// Restart at MSB
			data_byte = 0;	// Clear
 822:	60 e0       	ldi	r22, 0x00	; 0
		if (len >= TINUDHT_BITLEN) data_byte |= 1; // Add a "1" at the end. Otherwise it will remain a "0".
		if (bit_index == 0) {	// Next byte?
			ptinudht->data[data_index] = data_byte;	// Store next byte to the data array.
			if (data_index < 4) checksum += data_byte;	// Add next byte to the checksum.
			data_index++;	// Next byte.
			bit_index = 7;	// Restart at MSB
 824:	77 e0       	ldi	r23, 0x07	; 7
 826:	01 c0       	rjmp	.+2      	; 0x82a <tinudht_read+0xd8>
			data_byte = 0;	// Clear
		} else bit_index--;
 828:	71 50       	subi	r23, 0x01	; 1
 82a:	81 50       	subi	r24, 0x01	; 1
	uint8_t bit_index = 7;
	uint8_t data_index = 0;
	uint8_t data_byte = 0;
	uint8_t checksum = 0;	// NOTE: Should change to 16-bit.
	// Read the data - 40 bits (5 bytes),
	for (uint8_t i = 0; i < 40; i++) {
 82c:	c1 f6       	brne	.-80     	; 0x7de <tinudht_read+0x8c>
			data_byte = 0;	// Clear
		} else bit_index--;
	}
	// checksum &= 0xff; // NOTE: Uncomment this after changing checksum to 16-bit.
	// NOTE: On DHT11 data[1],data[3] are always zero so not used.
	if (ptinudht->checksum != checksum) return TINUDHT_ERROR_CHECKSUM;
 82e:	94 81       	ldd	r25, Z+4	; 0x04
 830:	b9 13       	cpse	r27, r25
 832:	09 c0       	rjmp	.+18     	; 0x846 <tinudht_read+0xf4>
 834:	09 c0       	rjmp	.+18     	; 0x848 <tinudht_read+0xf6>
	// Acknowledge from DHT11
	// NOTE: the timeout should be the equivalent of ~ 80 uS
	timeout = TINUDHT_ACK_TIMEOUT;
	while(bit_is_clear(PINB, dht_pin))	// Wait for LO-to-HI
	if (--timeout == 0)
	return TINUDHT_ERROR_ACK_TIMEOUT;
 836:	8f ef       	ldi	r24, 0xFF	; 255
 838:	07 c0       	rjmp	.+14     	; 0x848 <tinudht_read+0xf6>
	timeout = TINUDHT_ACK_TIMEOUT;
	while(bit_is_set(PINB, dht_pin))	// Wait for HI-to-LO
	if (--timeout == 0)
	return TINUDHT_ERROR_ACK_TIMEOUT;
 83a:	8f ef       	ldi	r24, 0xFF	; 255
 83c:	05 c0       	rjmp	.+10     	; 0x848 <tinudht_read+0xf6>
		// Wait for the bit start
		// NOTE: the timeout should be the equivalent of ~ 50 uS
		timeout = TINUDHT_BITSTART_TIMEOUT;
		while(bit_is_clear(PINB, dht_pin))	// Wait for LO-to-HI
		if (--timeout == 0)
		return TINUDHT_ERROR_BIT_TIMEOUT;
 83e:	8e ef       	ldi	r24, 0xFE	; 254
 840:	03 c0       	rjmp	.+6      	; 0x848 <tinudht_read+0xf6>
		// Wait for the bit end
		// NOTE: the timeout should be the equivalent of ~ 70 uS
		timeout = TINUDHT_BITEND_TIMEOUT;
		while(bit_is_set(PINB, dht_pin))	// Wait for HI-to-LO
		if (--timeout == 0)
		return TINUDHT_ERROR_BIT_TIMEOUT;
 842:	8e ef       	ldi	r24, 0xFE	; 254
 844:	01 c0       	rjmp	.+2      	; 0x848 <tinudht_read+0xf6>
			data_byte = 0;	// Clear
		} else bit_index--;
	}
	// checksum &= 0xff; // NOTE: Uncomment this after changing checksum to 16-bit.
	// NOTE: On DHT11 data[1],data[3] are always zero so not used.
	if (ptinudht->checksum != checksum) return TINUDHT_ERROR_CHECKSUM;
 846:	8d ef       	ldi	r24, 0xFD	; 253
	return TINUDHT_OK;
}
 848:	df 91       	pop	r29
 84a:	cf 91       	pop	r28
 84c:	1f 91       	pop	r17
 84e:	08 95       	ret

00000850 <__vector_10>:
		_delay_ms(2000);
		
	}
}

ISR(PCINT1_vect){
 850:	1f 92       	push	r1
 852:	0f 92       	push	r0
 854:	0f b6       	in	r0, 0x3f	; 63
 856:	0f 92       	push	r0
 858:	11 24       	eor	r1, r1
 85a:	0b b6       	in	r0, 0x3b	; 59
 85c:	0f 92       	push	r0
 85e:	2f 93       	push	r18
 860:	3f 93       	push	r19
 862:	4f 93       	push	r20
 864:	5f 93       	push	r21
 866:	6f 93       	push	r22
 868:	7f 93       	push	r23
 86a:	8f 93       	push	r24
 86c:	9f 93       	push	r25
 86e:	af 93       	push	r26
 870:	bf 93       	push	r27
 872:	ef 93       	push	r30
 874:	ff 93       	push	r31
		
	if (PINJ & 1<<PINJ2) {toggleLED(1); }
 876:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
 87a:	82 ff       	sbrs	r24, 2
 87c:	03 c0       	rjmp	.+6      	; 0x884 <__vector_10+0x34>
 87e:	81 e0       	ldi	r24, 0x01	; 1
 880:	90 e0       	ldi	r25, 0x00	; 0
 882:	51 dd       	rcall	.-1374   	; 0x326 <toggleLED>
	if (PINJ & 1<<PINJ3) {toggleLED(2); }
 884:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
 888:	83 ff       	sbrs	r24, 3
 88a:	03 c0       	rjmp	.+6      	; 0x892 <__vector_10+0x42>
 88c:	82 e0       	ldi	r24, 0x02	; 2
 88e:	90 e0       	ldi	r25, 0x00	; 0
 890:	4a dd       	rcall	.-1388   	; 0x326 <toggleLED>
	if (PINJ & 1<<PINJ4) {toggleLED(3); }
 892:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
 896:	84 ff       	sbrs	r24, 4
 898:	03 c0       	rjmp	.+6      	; 0x8a0 <__vector_10+0x50>
 89a:	83 e0       	ldi	r24, 0x03	; 3
 89c:	90 e0       	ldi	r25, 0x00	; 0
 89e:	43 dd       	rcall	.-1402   	; 0x326 <toggleLED>
	if (PINJ & 1<<PINJ5) {toggleLED(4); }
 8a0:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
 8a4:	85 ff       	sbrs	r24, 5
 8a6:	03 c0       	rjmp	.+6      	; 0x8ae <__vector_10+0x5e>
 8a8:	84 e0       	ldi	r24, 0x04	; 4
 8aa:	90 e0       	ldi	r25, 0x00	; 0
 8ac:	3c dd       	rcall	.-1416   	; 0x326 <toggleLED>
	
}
 8ae:	ff 91       	pop	r31
 8b0:	ef 91       	pop	r30
 8b2:	bf 91       	pop	r27
 8b4:	af 91       	pop	r26
 8b6:	9f 91       	pop	r25
 8b8:	8f 91       	pop	r24
 8ba:	7f 91       	pop	r23
 8bc:	6f 91       	pop	r22
 8be:	5f 91       	pop	r21
 8c0:	4f 91       	pop	r20
 8c2:	3f 91       	pop	r19
 8c4:	2f 91       	pop	r18
 8c6:	0f 90       	pop	r0
 8c8:	0b be       	out	0x3b, r0	; 59
 8ca:	0f 90       	pop	r0
 8cc:	0f be       	out	0x3f, r0	; 63
 8ce:	0f 90       	pop	r0
 8d0:	1f 90       	pop	r1
 8d2:	18 95       	reti

000008d4 <LCD_PrintInt>:

void LCD_PrintInt(uint16_t n,uint8_t x,uint8_t y){
 8d4:	0f 93       	push	r16
 8d6:	1f 93       	push	r17
 8d8:	cf 93       	push	r28
 8da:	df 93       	push	r29
 8dc:	cd b7       	in	r28, 0x3d	; 61
 8de:	de b7       	in	r29, 0x3e	; 62
 8e0:	2a 97       	sbiw	r28, 0x0a	; 10
 8e2:	0f b6       	in	r0, 0x3f	; 63
 8e4:	f8 94       	cli
 8e6:	de bf       	out	0x3e, r29	; 62
 8e8:	0f be       	out	0x3f, r0	; 63
 8ea:	cd bf       	out	0x3d, r28	; 61
 8ec:	16 2f       	mov	r17, r22
 8ee:	04 2f       	mov	r16, r20
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 8f0:	4a e0       	ldi	r20, 0x0A	; 10
 8f2:	be 01       	movw	r22, r28
 8f4:	6f 5f       	subi	r22, 0xFF	; 255
 8f6:	7f 4f       	sbci	r23, 0xFF	; 255
 8f8:	7a d1       	rcall	.+756    	; 0xbee <__itoa_ncheck>
	char buffer[10];
	itoa(n,buffer,10);
	LCD_PrintString(buffer,x,y);
 8fa:	40 2f       	mov	r20, r16
 8fc:	61 2f       	mov	r22, r17
 8fe:	ce 01       	movw	r24, r28
 900:	01 96       	adiw	r24, 0x01	; 1
 902:	21 d1       	rcall	.+578    	; 0xb46 <LCD_PrintString>
}
 904:	2a 96       	adiw	r28, 0x0a	; 10
 906:	0f b6       	in	r0, 0x3f	; 63
 908:	f8 94       	cli
 90a:	de bf       	out	0x3e, r29	; 62
 90c:	0f be       	out	0x3f, r0	; 63
 90e:	cd bf       	out	0x3d, r28	; 61
 910:	df 91       	pop	r29
 912:	cf 91       	pop	r28
 914:	1f 91       	pop	r17
 916:	0f 91       	pop	r16
 918:	08 95       	ret

0000091a <main>:
#include "tinudht.h"

void LCD_PrintInt(uint16_t n,uint8_t x,uint8_t y);

int main(void)
{
 91a:	cf 93       	push	r28
 91c:	df 93       	push	r29
 91e:	cd b7       	in	r28, 0x3d	; 61
 920:	de b7       	in	r29, 0x3e	; 62
 922:	60 97       	sbiw	r28, 0x10	; 16
 924:	0f b6       	in	r0, 0x3f	; 63
 926:	f8 94       	cli
 928:	de bf       	out	0x3e, r29	; 62
 92a:	0f be       	out	0x3f, r0	; 63
 92c:	cd bf       	out	0x3d, r28	; 61
	/*---Initialization---------*/
	LCDinit();		//LCD Functionality
 92e:	b8 d0       	rcall	.+368    	; 0xaa0 <LCDinit>
	keypad_Init();	//KEYPAD Functionality
 930:	10 dc       	rcall	.-2016   	; 0x152 <keypad_Init>
	LED_Init();		//LED Control
 932:	f3 dc       	rcall	.-1562   	; 0x31a <LED_Init>
	timer1_Init();	//Timer1 Setup
 934:	33 dd       	rcall	.-1434   	; 0x39c <timer1_Init>
	ADC_init();		//Analog to Digital Conversion
 936:	80 dd       	rcall	.-1280   	; 0x438 <ADC_init>
 938:	47 de       	rcall	.-882    	; 0x5c8 <ClockInit>
	ClockInit();
 93a:	ca de       	rcall	.-620    	; 0x6d0 <HC595Init>
 93c:	f7 de       	rcall	.-530    	; 0x72c <pwm_Init>
	HC595Init();
 93e:	f8 94       	cli
 940:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__TEXT_REGION_LENGTH__+0x700104>
	pwm_Init();
 944:	8f ef       	ldi	r24, 0xFF	; 255
	
	
	/*---------Button Setup-Pin Change Interrupt------------------*/
	cli();
 946:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
	DDRJ = 0;
 94a:	e8 e6       	ldi	r30, 0x68	; 104
	PORTJ = 0xFF;
 94c:	f0 e0       	ldi	r31, 0x00	; 0
 94e:	80 81       	ld	r24, Z
 950:	82 60       	ori	r24, 0x02	; 2
	PCICR |=(1<<PCIE1); //PinChange interrupt Enable 1
 952:	80 83       	st	Z, r24
 954:	d9 9a       	sbi	0x1b, 1	; 27
 956:	ec e6       	ldi	r30, 0x6C	; 108
 958:	f0 e0       	ldi	r31, 0x00	; 0
	PCIFR |=(1<<PCIF1); //Pin Change Interrupt Flag 1
 95a:	80 81       	ld	r24, Z
	PCMSK1 |=(1<<PCINT11)|(1<<PCINT12)|(1<<PCINT13)|(1<<PCINT14); // Mask-pins 2,3,4,5 on Port J will interrupt
 95c:	88 67       	ori	r24, 0x78	; 120
 95e:	80 83       	st	Z, r24
 960:	78 94       	sei
 962:	e0 d0       	rcall	.+448    	; 0xb24 <LCDclr>
 964:	2f e7       	ldi	r18, 0x7F	; 127
	sei();
 966:	8a e1       	ldi	r24, 0x1A	; 26
	
	LCDclr();
 968:	96 e0       	ldi	r25, 0x06	; 6
 96a:	21 50       	subi	r18, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 96c:	80 40       	sbci	r24, 0x00	; 0
 96e:	90 40       	sbci	r25, 0x00	; 0
 970:	e1 f7       	brne	.-8      	; 0x96a <main+0x50>
 972:	00 c0       	rjmp	.+0      	; 0x974 <main+0x5a>
 974:	00 00       	nop
 976:	0f 2e       	mov	r0, r31
 978:	f3 eb       	ldi	r31, 0xB3	; 179
 97a:	ef 2e       	mov	r14, r31

void pwm_out(int x,int val){
	
	if(x==0)
	{
		OCR2A = val;
 97c:	f1 2c       	mov	r15, r1
 97e:	f0 2d       	mov	r31, r0
 980:	80 e0       	ldi	r24, 0x00	; 0
 982:	65 dd       	rcall	.-1334   	; 0x44e <ADC_read>
 984:	8c 01       	movw	r16, r24
	_delay_ms(2000);
	
	while (1)
	{
				
		uint16_t pot = ADC_read(0);
 986:	96 95       	lsr	r25
 988:	87 95       	ror	r24
 98a:	96 95       	lsr	r25
 98c:	87 95       	ror	r24
 98e:	f7 01       	movw	r30, r14
 990:	80 83       	st	Z, r24
 992:	40 e0       	ldi	r20, 0x00	; 0
 994:	63 e0       	ldi	r22, 0x03	; 3
		//--------------------
		 pwm_out(0,pot/4);
		//-----------------------
		LCD_PrintString("MCU TRAINING KIT",3,0);
 996:	87 e3       	ldi	r24, 0x37	; 55
 998:	92 e0       	ldi	r25, 0x02	; 2
 99a:	d5 d0       	rcall	.+426    	; 0xb46 <LCD_PrintString>
 99c:	ce 01       	movw	r24, r28
 99e:	01 96       	adiw	r24, 0x01	; 1
		GetTimeString(time_string);
 9a0:	3f de       	rcall	.-898    	; 0x620 <GetTimeString>
 9a2:	41 e0       	ldi	r20, 0x01	; 1
 9a4:	64 e0       	ldi	r22, 0x04	; 4
		LCD_PrintString(time_string,4,1);
 9a6:	ce 01       	movw	r24, r28
 9a8:	01 96       	adiw	r24, 0x01	; 1
 9aa:	cd d0       	rcall	.+410    	; 0xb46 <LCD_PrintString>
 9ac:	42 e0       	ldi	r20, 0x02	; 2
		
		LCD_PrintString("       ",0,2);		
 9ae:	60 e0       	ldi	r22, 0x00	; 0
 9b0:	88 e4       	ldi	r24, 0x48	; 72
 9b2:	92 e0       	ldi	r25, 0x02	; 2
 9b4:	c8 d0       	rcall	.+400    	; 0xb46 <LCD_PrintString>
 9b6:	42 e0       	ldi	r20, 0x02	; 2
		LCD_PrintInt(pot,0,2);
 9b8:	60 e0       	ldi	r22, 0x00	; 0
 9ba:	c8 01       	movw	r24, r16
 9bc:	8b df       	rcall	.-234    	; 0x8d4 <LCD_PrintInt>
 9be:	ce db       	rcall	.-2148   	; 0x15c <read_keypad>


			
		/*---Keypad--------------*/
		read_keypad();
 9c0:	86 e0       	ldi	r24, 0x06	; 6
 9c2:	a7 de       	rcall	.-690    	; 0x712 <Segment_Print>
		
		Segment_Print(6);
 9c4:	66 e0       	ldi	r22, 0x06	; 6
 9c6:	ce 01       	movw	r24, r28
		//HC595Write(numbers[2],numbers[3]);
		
		TinuDHT tinudht;
		uint8_t tinudht_result = tinudht_read(&tinudht, TINUDHT_PIN);
 9c8:	0c 96       	adiw	r24, 0x0c	; 12
 9ca:	c3 de       	rcall	.-634    	; 0x752 <tinudht_read>
 9cc:	81 11       	cpse	r24, r1
 9ce:	0b c0       	rjmp	.+22     	; 0x9e6 <main+0xcc>
		if (tinudht_result == TINUDHT_OK) {
 9d0:	8c 85       	ldd	r24, Y+12	; 0x0c
 9d2:	42 e0       	ldi	r20, 0x02	; 2
			LCD_PrintInt(tinudht.humidity,8,2);
 9d4:	68 e0       	ldi	r22, 0x08	; 8
 9d6:	90 e0       	ldi	r25, 0x00	; 0
 9d8:	7d df       	rcall	.-262    	; 0x8d4 <LCD_PrintInt>
 9da:	8e 85       	ldd	r24, Y+14	; 0x0e
 9dc:	42 e0       	ldi	r20, 0x02	; 2
 9de:	6a e0       	ldi	r22, 0x0A	; 10
			LCD_PrintInt(tinudht.temperature,10,2);
 9e0:	90 e0       	ldi	r25, 0x00	; 0
 9e2:	78 df       	rcall	.-272    	; 0x8d4 <LCD_PrintInt>
 9e4:	05 c0       	rjmp	.+10     	; 0x9f0 <main+0xd6>
 9e6:	42 e0       	ldi	r20, 0x02	; 2
 9e8:	68 e0       	ldi	r22, 0x08	; 8
 9ea:	80 e5       	ldi	r24, 0x50	; 80
 9ec:	92 e0       	ldi	r25, 0x02	; 2
			} else {
			LCD_PrintString("ERR  ",8,2);
 9ee:	ab d0       	rcall	.+342    	; 0xb46 <LCD_PrintString>
 9f0:	ff e7       	ldi	r31, 0x7F	; 127
 9f2:	2a e1       	ldi	r18, 0x1A	; 26
 9f4:	86 e0       	ldi	r24, 0x06	; 6
 9f6:	f1 50       	subi	r31, 0x01	; 1
 9f8:	20 40       	sbci	r18, 0x00	; 0
 9fa:	80 40       	sbci	r24, 0x00	; 0
 9fc:	e1 f7       	brne	.-8      	; 0x9f6 <main+0xdc>
 9fe:	00 c0       	rjmp	.+0      	; 0xa00 <main+0xe6>
 a00:	00 00       	nop
 a02:	be cf       	rjmp	.-132    	; 0x980 <main+0x66>

00000a04 <LCDsendChar>:
 a04:	98 2f       	mov	r25, r24
 a06:	90 7f       	andi	r25, 0xF0	; 240
 a08:	92 b9       	out	0x02, r25	; 2
 a0a:	17 9a       	sbi	0x02, 7	; 2
		}
		_delay_ms(2000);
		
	}
 a0c:	15 9a       	sbi	0x02, 5	; 2
	for(i=16;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
		
	}
}
 a0e:	e9 ef       	ldi	r30, 0xF9	; 249
 a10:	f0 e0       	ldi	r31, 0x00	; 0
 a12:	31 97       	sbiw	r30, 0x01	; 1
 a14:	f1 f7       	brne	.-4      	; 0xa12 <LCDsendChar+0xe>
 a16:	00 c0       	rjmp	.+0      	; 0xa18 <LCDsendChar+0x14>
 a18:	00 00       	nop
 a1a:	15 98       	cbi	0x02, 5	; 2
 a1c:	17 98       	cbi	0x02, 7	; 2
 a1e:	e9 ef       	ldi	r30, 0xF9	; 249
 a20:	f0 e0       	ldi	r31, 0x00	; 0
 a22:	31 97       	sbiw	r30, 0x01	; 1
 a24:	f1 f7       	brne	.-4      	; 0xa22 <LCDsendChar+0x1e>
 a26:	00 c0       	rjmp	.+0      	; 0xa28 <LCDsendChar+0x24>
 a28:	00 00       	nop
 a2a:	f0 e1       	ldi	r31, 0x10	; 16
 a2c:	8f 9f       	mul	r24, r31
 a2e:	c0 01       	movw	r24, r0
 a30:	11 24       	eor	r1, r1
 a32:	82 b9       	out	0x02, r24	; 2
 a34:	17 9a       	sbi	0x02, 7	; 2
 a36:	15 9a       	sbi	0x02, 5	; 2
 a38:	89 ef       	ldi	r24, 0xF9	; 249
 a3a:	90 e0       	ldi	r25, 0x00	; 0
 a3c:	01 97       	sbiw	r24, 0x01	; 1
 a3e:	f1 f7       	brne	.-4      	; 0xa3c <LCDsendChar+0x38>
 a40:	00 c0       	rjmp	.+0      	; 0xa42 <LCDsendChar+0x3e>
 a42:	00 00       	nop
 a44:	15 98       	cbi	0x02, 5	; 2
 a46:	17 98       	cbi	0x02, 7	; 2
 a48:	e9 ef       	ldi	r30, 0xF9	; 249
 a4a:	f0 e0       	ldi	r31, 0x00	; 0
 a4c:	31 97       	sbiw	r30, 0x01	; 1
 a4e:	f1 f7       	brne	.-4      	; 0xa4c <LCDsendChar+0x48>
 a50:	00 c0       	rjmp	.+0      	; 0xa52 <LCDsendChar+0x4e>
 a52:	00 00       	nop
 a54:	08 95       	ret

00000a56 <LCDsendCommand>:
 a56:	98 2f       	mov	r25, r24
 a58:	90 7f       	andi	r25, 0xF0	; 240
 a5a:	92 b9       	out	0x02, r25	; 2
 a5c:	15 9a       	sbi	0x02, 5	; 2
 a5e:	e9 ef       	ldi	r30, 0xF9	; 249
 a60:	f0 e0       	ldi	r31, 0x00	; 0
 a62:	31 97       	sbiw	r30, 0x01	; 1
 a64:	f1 f7       	brne	.-4      	; 0xa62 <LCDsendCommand+0xc>
 a66:	00 c0       	rjmp	.+0      	; 0xa68 <LCDsendCommand+0x12>
 a68:	00 00       	nop
 a6a:	15 98       	cbi	0x02, 5	; 2
 a6c:	e9 ef       	ldi	r30, 0xF9	; 249
 a6e:	f0 e0       	ldi	r31, 0x00	; 0
 a70:	31 97       	sbiw	r30, 0x01	; 1
 a72:	f1 f7       	brne	.-4      	; 0xa70 <LCDsendCommand+0x1a>
 a74:	00 c0       	rjmp	.+0      	; 0xa76 <LCDsendCommand+0x20>
 a76:	00 00       	nop
 a78:	f0 e1       	ldi	r31, 0x10	; 16
 a7a:	8f 9f       	mul	r24, r31
 a7c:	c0 01       	movw	r24, r0
 a7e:	11 24       	eor	r1, r1
 a80:	82 b9       	out	0x02, r24	; 2
 a82:	15 9a       	sbi	0x02, 5	; 2
 a84:	89 ef       	ldi	r24, 0xF9	; 249
 a86:	90 e0       	ldi	r25, 0x00	; 0
 a88:	01 97       	sbiw	r24, 0x01	; 1
 a8a:	f1 f7       	brne	.-4      	; 0xa88 <LCDsendCommand+0x32>
 a8c:	00 c0       	rjmp	.+0      	; 0xa8e <LCDsendCommand+0x38>
 a8e:	00 00       	nop
 a90:	15 98       	cbi	0x02, 5	; 2
 a92:	e9 ef       	ldi	r30, 0xF9	; 249
 a94:	f0 e0       	ldi	r31, 0x00	; 0
 a96:	31 97       	sbiw	r30, 0x01	; 1
 a98:	f1 f7       	brne	.-4      	; 0xa96 <LCDsendCommand+0x40>
 a9a:	00 c0       	rjmp	.+0      	; 0xa9c <LCDsendCommand+0x46>
 a9c:	00 00       	nop
 a9e:	08 95       	ret

00000aa0 <LCDinit>:
 aa0:	85 ea       	ldi	r24, 0xA5	; 165
 aa2:	9e e0       	ldi	r25, 0x0E	; 14
 aa4:	01 97       	sbiw	r24, 0x01	; 1
 aa6:	f1 f7       	brne	.-4      	; 0xaa4 <LCDinit+0x4>
 aa8:	00 c0       	rjmp	.+0      	; 0xaaa <LCDinit+0xa>
 aaa:	00 00       	nop
 aac:	12 b8       	out	0x02, r1	; 2
 aae:	12 b8       	out	0x02, r1	; 2
 ab0:	81 b1       	in	r24, 0x01	; 1
 ab2:	8f 60       	ori	r24, 0x0F	; 15
 ab4:	81 b9       	out	0x01, r24	; 1
 ab6:	81 b1       	in	r24, 0x01	; 1
 ab8:	80 6e       	ori	r24, 0xE0	; 224
 aba:	81 b9       	out	0x01, r24	; 1
 abc:	8c e0       	ldi	r24, 0x0C	; 12
 abe:	82 b9       	out	0x02, r24	; 2
 ac0:	15 9a       	sbi	0x02, 5	; 2
 ac2:	e9 ef       	ldi	r30, 0xF9	; 249
 ac4:	f0 e0       	ldi	r31, 0x00	; 0
 ac6:	31 97       	sbiw	r30, 0x01	; 1
 ac8:	f1 f7       	brne	.-4      	; 0xac6 <LCDinit+0x26>
 aca:	00 c0       	rjmp	.+0      	; 0xacc <LCDinit+0x2c>
 acc:	00 00       	nop
 ace:	15 98       	cbi	0x02, 5	; 2
 ad0:	e9 ef       	ldi	r30, 0xF9	; 249
 ad2:	f0 e0       	ldi	r31, 0x00	; 0
 ad4:	31 97       	sbiw	r30, 0x01	; 1
 ad6:	f1 f7       	brne	.-4      	; 0xad4 <LCDinit+0x34>
 ad8:	00 c0       	rjmp	.+0      	; 0xada <LCDinit+0x3a>
 ada:	00 00       	nop
 adc:	82 b9       	out	0x02, r24	; 2
 ade:	15 9a       	sbi	0x02, 5	; 2
 ae0:	89 ef       	ldi	r24, 0xF9	; 249
 ae2:	90 e0       	ldi	r25, 0x00	; 0
 ae4:	01 97       	sbiw	r24, 0x01	; 1
 ae6:	f1 f7       	brne	.-4      	; 0xae4 <LCDinit+0x44>
 ae8:	00 c0       	rjmp	.+0      	; 0xaea <LCDinit+0x4a>
 aea:	00 00       	nop
 aec:	15 98       	cbi	0x02, 5	; 2
 aee:	e9 ef       	ldi	r30, 0xF9	; 249
 af0:	f0 e0       	ldi	r31, 0x00	; 0
 af2:	31 97       	sbiw	r30, 0x01	; 1
 af4:	f1 f7       	brne	.-4      	; 0xaf2 <LCDinit+0x52>
 af6:	00 c0       	rjmp	.+0      	; 0xaf8 <LCDinit+0x58>
 af8:	00 00       	nop
 afa:	84 e0       	ldi	r24, 0x04	; 4
 afc:	82 b9       	out	0x02, r24	; 2
 afe:	15 9a       	sbi	0x02, 5	; 2
 b00:	89 ef       	ldi	r24, 0xF9	; 249
 b02:	90 e0       	ldi	r25, 0x00	; 0
 b04:	01 97       	sbiw	r24, 0x01	; 1
 b06:	f1 f7       	brne	.-4      	; 0xb04 <LCDinit+0x64>
 b08:	00 c0       	rjmp	.+0      	; 0xb0a <LCDinit+0x6a>
 b0a:	00 00       	nop
 b0c:	15 98       	cbi	0x02, 5	; 2
 b0e:	e9 ef       	ldi	r30, 0xF9	; 249
 b10:	f0 e0       	ldi	r31, 0x00	; 0
 b12:	31 97       	sbiw	r30, 0x01	; 1
 b14:	f1 f7       	brne	.-4      	; 0xb12 <LCDinit+0x72>
 b16:	00 c0       	rjmp	.+0      	; 0xb18 <LCDinit+0x78>
 b18:	00 00       	nop
 b1a:	88 e2       	ldi	r24, 0x28	; 40
 b1c:	9c df       	rcall	.-200    	; 0xa56 <LCDsendCommand>
 b1e:	8c e0       	ldi	r24, 0x0C	; 12
 b20:	9a cf       	rjmp	.-204    	; 0xa56 <LCDsendCommand>
 b22:	08 95       	ret

00000b24 <LCDclr>:
 b24:	81 e0       	ldi	r24, 0x01	; 1
 b26:	97 cf       	rjmp	.-210    	; 0xa56 <LCDsendCommand>
 b28:	08 95       	ret

00000b2a <LCDGotoXY>:
 b2a:	62 30       	cpi	r22, 0x02	; 2
 b2c:	31 f0       	breq	.+12     	; 0xb3a <LCDGotoXY+0x10>
 b2e:	63 30       	cpi	r22, 0x03	; 3
 b30:	31 f0       	breq	.+12     	; 0xb3e <LCDGotoXY+0x14>
 b32:	61 30       	cpi	r22, 0x01	; 1
 b34:	29 f4       	brne	.+10     	; 0xb40 <LCDGotoXY+0x16>
 b36:	80 5c       	subi	r24, 0xC0	; 192
 b38:	03 c0       	rjmp	.+6      	; 0xb40 <LCDGotoXY+0x16>
 b3a:	8c 5e       	subi	r24, 0xEC	; 236
 b3c:	01 c0       	rjmp	.+2      	; 0xb40 <LCDGotoXY+0x16>
 b3e:	8c 5a       	subi	r24, 0xAC	; 172
 b40:	80 68       	ori	r24, 0x80	; 128
 b42:	89 cf       	rjmp	.-238    	; 0xa56 <LCDsendCommand>
 b44:	08 95       	ret

00000b46 <LCD_PrintString>:

void LCD_PrintString(const char *s,uint8_t x,uint8_t y)
/* print string on lcd) */
{
 b46:	cf 92       	push	r12
 b48:	df 92       	push	r13
 b4a:	ef 92       	push	r14
 b4c:	ff 92       	push	r15
 b4e:	0f 93       	push	r16
 b50:	1f 93       	push	r17
 b52:	cf 93       	push	r28
 b54:	df 93       	push	r29
 b56:	6c 01       	movw	r12, r24
 b58:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
 b5a:	64 2f       	mov	r22, r20
 b5c:	e6 df       	rcall	.-52     	; 0xb2a <LCDGotoXY>
	register char c;
    uint8_t n;
	n=strlen(s);
 b5e:	f6 01       	movw	r30, r12
 b60:	01 90       	ld	r0, Z+
 b62:	00 20       	and	r0, r0
 b64:	e9 f7       	brne	.-6      	; 0xb60 <LCD_PrintString+0x1a>
 b66:	31 97       	sbiw	r30, 0x01	; 1
 b68:	8f 01       	movw	r16, r30
 b6a:	0c 19       	sub	r16, r12
 b6c:	1d 09       	sbc	r17, r13
 b6e:	f0 2e       	mov	r15, r16
	if (n<9)
 b70:	88 e0       	ldi	r24, 0x08	; 8
 b72:	80 17       	cp	r24, r16
 b74:	18 f4       	brcc	.+6      	; 0xb7c <LCD_PrintString+0x36>
			LCDsendChar(c);
		}
	} 
	else
	{
		for(i=0;i<n;i++)
 b76:	01 11       	cpse	r16, r1
 b78:	0d c0       	rjmp	.+26     	; 0xb94 <LCD_PrintString+0x4e>
 b7a:	26 c0       	rjmp	.+76     	; 0xbc8 <LCD_PrintString+0x82>
	register char c;
    uint8_t n;
	n=strlen(s);
	if (n<9)
	{
		for(i=0;i<n;i++)
 b7c:	00 23       	and	r16, r16
 b7e:	31 f1       	breq	.+76     	; 0xbcc <LCD_PrintString+0x86>
 b80:	86 01       	movw	r16, r12
 b82:	d0 e0       	ldi	r29, 0x00	; 0
		{
			c=*s++;
			LCDsendChar(c);
 b84:	f8 01       	movw	r30, r16
 b86:	81 91       	ld	r24, Z+
 b88:	8f 01       	movw	r16, r30
 b8a:	3c df       	rcall	.-392    	; 0xa04 <LCDsendChar>
	register char c;
    uint8_t n;
	n=strlen(s);
	if (n<9)
	{
		for(i=0;i<n;i++)
 b8c:	df 5f       	subi	r29, 0xFF	; 255
 b8e:	fd 12       	cpse	r15, r29
 b90:	f9 cf       	rjmp	.-14     	; 0xb84 <LCD_PrintString+0x3e>
 b92:	1c c0       	rjmp	.+56     	; 0xbcc <LCD_PrintString+0x86>
 b94:	e6 01       	movw	r28, r12
	else
	{
		for(i=0;i<n;i++)
		{
			c=*s++;
			LCDsendChar(c);
 b96:	e1 2c       	mov	r14, r1
 b98:	89 91       	ld	r24, Y+
 b9a:	34 df       	rcall	.-408    	; 0xa04 <LCDsendChar>
			LCDsendChar(c);
		}
	} 
	else
	{
		for(i=0;i<n;i++)
 b9c:	e3 94       	inc	r14
 b9e:	fe 10       	cpse	r15, r14
 ba0:	fb cf       	rjmp	.-10     	; 0xb98 <LCD_PrintString+0x52>
 ba2:	ef ef       	ldi	r30, 0xFF	; 255
 ba4:	e0 0f       	add	r30, r16
 ba6:	f0 e0       	ldi	r31, 0x00	; 0
 ba8:	31 96       	adiw	r30, 0x01	; 1
 baa:	e6 01       	movw	r28, r12
 bac:	ce 0f       	add	r28, r30
		{
			c=*s++;
			LCDsendChar(c);
		}
		// Wrap to the next line
		LCDsendCommand(1<<LCD_DDRAM | LCD_LINE1_DDRAMADDR);
 bae:	df 1f       	adc	r29, r31
 bb0:	80 ec       	ldi	r24, 0xC0	; 192
 bb2:	51 df       	rcall	.-350    	; 0xa56 <LCDsendCommand>
		for(i=16;i<n;i++)
 bb4:	f0 e1       	ldi	r31, 0x10	; 16
 bb6:	ff 15       	cp	r31, r15
 bb8:	48 f4       	brcc	.+18     	; 0xbcc <LCD_PrintString+0x86>
		{
			c = *s++;
			LCDsendChar(c);
 bba:	10 e1       	ldi	r17, 0x10	; 16
 bbc:	89 91       	ld	r24, Y+
 bbe:	22 df       	rcall	.-444    	; 0xa04 <LCDsendChar>
			c=*s++;
			LCDsendChar(c);
		}
		// Wrap to the next line
		LCDsendCommand(1<<LCD_DDRAM | LCD_LINE1_DDRAMADDR);
		for(i=16;i<n;i++)
 bc0:	1f 5f       	subi	r17, 0xFF	; 255
 bc2:	f1 12       	cpse	r15, r17
 bc4:	fb cf       	rjmp	.-10     	; 0xbbc <LCD_PrintString+0x76>
		{
			c=*s++;
			LCDsendChar(c);
		}
		// Wrap to the next line
		LCDsendCommand(1<<LCD_DDRAM | LCD_LINE1_DDRAMADDR);
 bc6:	02 c0       	rjmp	.+4      	; 0xbcc <LCD_PrintString+0x86>
 bc8:	80 ec       	ldi	r24, 0xC0	; 192
 bca:	45 df       	rcall	.-374    	; 0xa56 <LCDsendCommand>
			c = *s++;
			LCDsendChar(c);
		}
	}

}/* PrintString */
 bcc:	df 91       	pop	r29
 bce:	cf 91       	pop	r28
 bd0:	1f 91       	pop	r17
 bd2:	0f 91       	pop	r16
 bd4:	ff 90       	pop	r15
 bd6:	ef 90       	pop	r14
 bd8:	df 90       	pop	r13
 bda:	cf 90       	pop	r12
 bdc:	08 95       	ret

00000bde <__tablejump2__>:
 bde:	ee 0f       	add	r30, r30
 be0:	ff 1f       	adc	r31, r31
 be2:	88 1f       	adc	r24, r24
 be4:	8b bf       	out	0x3b, r24	; 59
 be6:	07 90       	elpm	r0, Z+
 be8:	f6 91       	elpm	r31, Z
 bea:	e0 2d       	mov	r30, r0
 bec:	19 94       	eijmp

00000bee <__itoa_ncheck>:
 bee:	bb 27       	eor	r27, r27
 bf0:	4a 30       	cpi	r20, 0x0A	; 10
 bf2:	31 f4       	brne	.+12     	; 0xc00 <__itoa_ncheck+0x12>
 bf4:	99 23       	and	r25, r25
 bf6:	22 f4       	brpl	.+8      	; 0xc00 <__itoa_ncheck+0x12>
 bf8:	bd e2       	ldi	r27, 0x2D	; 45
 bfa:	90 95       	com	r25
 bfc:	81 95       	neg	r24
 bfe:	9f 4f       	sbci	r25, 0xFF	; 255
 c00:	01 c0       	rjmp	.+2      	; 0xc04 <__utoa_common>

00000c02 <__utoa_ncheck>:
 c02:	bb 27       	eor	r27, r27

00000c04 <__utoa_common>:
 c04:	fb 01       	movw	r30, r22
 c06:	55 27       	eor	r21, r21
 c08:	aa 27       	eor	r26, r26
 c0a:	88 0f       	add	r24, r24
 c0c:	99 1f       	adc	r25, r25
 c0e:	aa 1f       	adc	r26, r26
 c10:	a4 17       	cp	r26, r20
 c12:	10 f0       	brcs	.+4      	; 0xc18 <__utoa_common+0x14>
 c14:	a4 1b       	sub	r26, r20
 c16:	83 95       	inc	r24
 c18:	50 51       	subi	r21, 0x10	; 16
 c1a:	b9 f7       	brne	.-18     	; 0xc0a <__utoa_common+0x6>
 c1c:	a0 5d       	subi	r26, 0xD0	; 208
 c1e:	aa 33       	cpi	r26, 0x3A	; 58
 c20:	08 f0       	brcs	.+2      	; 0xc24 <__utoa_common+0x20>
 c22:	a9 5d       	subi	r26, 0xD9	; 217
 c24:	a1 93       	st	Z+, r26
 c26:	00 97       	sbiw	r24, 0x00	; 0
 c28:	79 f7       	brne	.-34     	; 0xc08 <__utoa_common+0x4>
 c2a:	b1 11       	cpse	r27, r1
 c2c:	b1 93       	st	Z+, r27
 c2e:	11 92       	st	Z+, r1
 c30:	cb 01       	movw	r24, r22
 c32:	00 c0       	rjmp	.+0      	; 0xc34 <strrev>

00000c34 <strrev>:
 c34:	dc 01       	movw	r26, r24
 c36:	fc 01       	movw	r30, r24
 c38:	67 2f       	mov	r22, r23
 c3a:	71 91       	ld	r23, Z+
 c3c:	77 23       	and	r23, r23
 c3e:	e1 f7       	brne	.-8      	; 0xc38 <strrev+0x4>
 c40:	32 97       	sbiw	r30, 0x02	; 2
 c42:	04 c0       	rjmp	.+8      	; 0xc4c <strrev+0x18>
 c44:	7c 91       	ld	r23, X
 c46:	6d 93       	st	X+, r22
 c48:	70 83       	st	Z, r23
 c4a:	62 91       	ld	r22, -Z
 c4c:	ae 17       	cp	r26, r30
 c4e:	bf 07       	cpc	r27, r31
 c50:	c8 f3       	brcs	.-14     	; 0xc44 <strrev+0x10>
 c52:	08 95       	ret

00000c54 <_exit>:
 c54:	f8 94       	cli

00000c56 <__stop_program>:
 c56:	ff cf       	rjmp	.-2      	; 0xc56 <__stop_program>
