
TK2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800200  000018de  00001972  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000018de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000101  00800238  00800238  000019aa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000019aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000019dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000450  00000000  00000000  00001a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004a1d  00000000  00000000  00001e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001cb7  00000000  00000000  00006889  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000029ab  00000000  00000000  00008540  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000cc8  00000000  00000000  0000aeec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000013a8  00000000  00000000  0000bbb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000030fd  00000000  00000000  0000cf5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003d8  00000000  00000000  00010059  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	3d c1       	rjmp	.+634    	; 0x27c <__ctors_end>
       2:	00 00       	nop
       4:	f0 c3       	rjmp	.+2016   	; 0x7e6 <__vector_1>
       6:	00 00       	nop
       8:	19 c4       	rjmp	.+2098   	; 0x83c <__vector_2>
       a:	00 00       	nop
       c:	42 c4       	rjmp	.+2180   	; 0x892 <__vector_3>
       e:	00 00       	nop
      10:	6b c4       	rjmp	.+2262   	; 0x8e8 <__vector_4>
      12:	00 00       	nop
      14:	94 c4       	rjmp	.+2344   	; 0x93e <__vector_5>
      16:	00 00       	nop
      18:	bd c4       	rjmp	.+2426   	; 0x994 <__vector_6>
      1a:	00 00       	nop
      1c:	e6 c4       	rjmp	.+2508   	; 0x9ea <__vector_7>
      1e:	00 00       	nop
      20:	0f c5       	rjmp	.+2590   	; 0xa40 <__vector_8>
      22:	00 00       	nop
      24:	87 c6       	rjmp	.+3342   	; 0xd34 <__vector_9>
      26:	00 00       	nop
      28:	fd c6       	rjmp	.+3578   	; 0xe24 <__vector_10>
      2a:	00 00       	nop
      2c:	78 c7       	rjmp	.+3824   	; 0xf1e <__vector_11>
      2e:	00 00       	nop
      30:	46 c1       	rjmp	.+652    	; 0x2be <__bad_interrupt>
      32:	00 00       	nop
      34:	44 c1       	rjmp	.+648    	; 0x2be <__bad_interrupt>
      36:	00 00       	nop
      38:	42 c1       	rjmp	.+644    	; 0x2be <__bad_interrupt>
      3a:	00 00       	nop
      3c:	40 c1       	rjmp	.+640    	; 0x2be <__bad_interrupt>
      3e:	00 00       	nop
      40:	3e c1       	rjmp	.+636    	; 0x2be <__bad_interrupt>
      42:	00 00       	nop
      44:	3c c1       	rjmp	.+632    	; 0x2be <__bad_interrupt>
      46:	00 00       	nop
      48:	3a c1       	rjmp	.+628    	; 0x2be <__bad_interrupt>
      4a:	00 00       	nop
      4c:	38 c1       	rjmp	.+624    	; 0x2be <__bad_interrupt>
      4e:	00 00       	nop
      50:	36 c1       	rjmp	.+620    	; 0x2be <__bad_interrupt>
      52:	00 00       	nop
      54:	34 c1       	rjmp	.+616    	; 0x2be <__bad_interrupt>
      56:	00 00       	nop
      58:	32 c1       	rjmp	.+612    	; 0x2be <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 8f 0a 	jmp	0x151e	; 0x151e <__vector_23>
      60:	2e c1       	rjmp	.+604    	; 0x2be <__bad_interrupt>
      62:	00 00       	nop
      64:	2c c1       	rjmp	.+600    	; 0x2be <__bad_interrupt>
      66:	00 00       	nop
      68:	2a c1       	rjmp	.+596    	; 0x2be <__bad_interrupt>
      6a:	00 00       	nop
      6c:	28 c1       	rjmp	.+592    	; 0x2be <__bad_interrupt>
      6e:	00 00       	nop
      70:	26 c1       	rjmp	.+588    	; 0x2be <__bad_interrupt>
      72:	00 00       	nop
      74:	24 c1       	rjmp	.+584    	; 0x2be <__bad_interrupt>
      76:	00 00       	nop
      78:	22 c1       	rjmp	.+580    	; 0x2be <__bad_interrupt>
      7a:	00 00       	nop
      7c:	20 c1       	rjmp	.+576    	; 0x2be <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 13 0b 	jmp	0x1626	; 0x1626 <__vector_32>
      84:	1c c1       	rjmp	.+568    	; 0x2be <__bad_interrupt>
      86:	00 00       	nop
      88:	1a c1       	rjmp	.+564    	; 0x2be <__bad_interrupt>
      8a:	00 00       	nop
      8c:	18 c1       	rjmp	.+560    	; 0x2be <__bad_interrupt>
      8e:	00 00       	nop
      90:	16 c1       	rjmp	.+556    	; 0x2be <__bad_interrupt>
      92:	00 00       	nop
      94:	14 c1       	rjmp	.+552    	; 0x2be <__bad_interrupt>
      96:	00 00       	nop
      98:	12 c1       	rjmp	.+548    	; 0x2be <__bad_interrupt>
      9a:	00 00       	nop
      9c:	10 c1       	rjmp	.+544    	; 0x2be <__bad_interrupt>
      9e:	00 00       	nop
      a0:	0e c1       	rjmp	.+540    	; 0x2be <__bad_interrupt>
      a2:	00 00       	nop
      a4:	0c c1       	rjmp	.+536    	; 0x2be <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0a c1       	rjmp	.+532    	; 0x2be <__bad_interrupt>
      aa:	00 00       	nop
      ac:	08 c1       	rjmp	.+528    	; 0x2be <__bad_interrupt>
      ae:	00 00       	nop
      b0:	06 c1       	rjmp	.+524    	; 0x2be <__bad_interrupt>
      b2:	00 00       	nop
      b4:	04 c1       	rjmp	.+520    	; 0x2be <__bad_interrupt>
      b6:	00 00       	nop
      b8:	02 c1       	rjmp	.+516    	; 0x2be <__bad_interrupt>
      ba:	00 00       	nop
      bc:	00 c1       	rjmp	.+512    	; 0x2be <__bad_interrupt>
      be:	00 00       	nop
      c0:	fe c0       	rjmp	.+508    	; 0x2be <__bad_interrupt>
      c2:	00 00       	nop
      c4:	fc c0       	rjmp	.+504    	; 0x2be <__bad_interrupt>
      c6:	00 00       	nop
      c8:	fa c0       	rjmp	.+500    	; 0x2be <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 cb 09 	jmp	0x1396	; 0x1396 <__vector_51>
      d0:	0c 94 f2 09 	jmp	0x13e4	; 0x13e4 <__vector_52>
      d4:	f4 c0       	rjmp	.+488    	; 0x2be <__bad_interrupt>
      d6:	00 00       	nop
      d8:	f2 c0       	rjmp	.+484    	; 0x2be <__bad_interrupt>
      da:	00 00       	nop
      dc:	f0 c0       	rjmp	.+480    	; 0x2be <__bad_interrupt>
      de:	00 00       	nop
      e0:	ee c0       	rjmp	.+476    	; 0x2be <__bad_interrupt>
      e2:	00 00       	nop
      e4:	8d 03       	fmulsu	r16, r21
      e6:	95 03       	fmuls	r17, r21
      e8:	a1 03       	fmuls	r18, r17
      ea:	af 03       	fmulsu	r18, r23
      ec:	c0 03       	fmuls	r20, r16
      ee:	c8 03       	fmulsu	r20, r16
      f0:	d4 03       	fmuls	r21, r20
      f2:	e2 03       	fmuls	r22, r18
      f4:	3e 08       	sbc	r3, r14
      f6:	43 08       	sbc	r4, r3
      f8:	48 08       	sbc	r4, r8
      fa:	52 08       	sbc	r5, r2
      fc:	5c 08       	sbc	r5, r12
      fe:	d0 08       	sbc	r13, r0
     100:	66 08       	sbc	r6, r6
     102:	6e 08       	sbc	r6, r14
     104:	76 08       	sbc	r7, r6
     106:	80 08       	sbc	r8, r0
     108:	8a 08       	sbc	r8, r10
     10a:	94 08       	sbc	r9, r4
     10c:	9e 08       	sbc	r9, r14
     10e:	a8 08       	sbc	r10, r8
     110:	d0 08       	sbc	r13, r0
     112:	b2 08       	sbc	r11, r2
     114:	bc 08       	sbc	r11, r12
     116:	c6 08       	sbc	r12, r6

00000118 <__trampolines_end>:
     118:	00 02       	muls	r16, r16
     11a:	00 00       	nop
     11c:	00 09       	sbc	r16, r0
     11e:	0a 0b       	sbc	r16, r26
     120:	00 00       	nop
     122:	00 00       	nop
     124:	00 00       	nop
     126:	00 0c       	add	r0, r0
     128:	0d 0e       	add	r0, r29
     12a:	08 00       	.word	0x0008	; ????
     12c:	00 00       	nop
     12e:	00 07       	cpc	r16, r16
     130:	03 04       	cpc	r0, r3
     132:	01 00       	.word	0x0001	; ????
	...
     13c:	00 00       	nop
     13e:	10 11       	cpse	r17, r0
     140:	12 00       	.word	0x0012	; ????
	...

0000017d <pin_to_bit_mask_PGM>:
     17d:	00 20 01 02 04 08 10 20 40 80 00 00 01 02 04 08     . ..... @.......
     18d:	10 20 40 01 02 04 08 10 20 40 80 80 08 10 00 00     . @..... @......
     19d:	00 00 00 01 02 04 08 10 20 40 80 01 02 04 08 10     ........ @......
     1ad:	20 40 80 01 02 01 02 04 08 10 20 40 80 00 00 01      @........ @....
     1bd:	02 04 08 10 20 40 04 80 40 20 10 08 04 02 01 80     .... @..@ ......
     1cd:	00 00 80 40 20 10 08 04 02 01 80 40 20 10 08 04     ...@ ......@ ...
     1dd:	02 01 00 00 00                                      .....

000001e2 <pin_to_port_PGM>:
     1e2:	00 07 05 05 05 05 05 05 05 05 00 00 08 08 08 08     ................
     1f2:	08 08 08 02 02 02 02 02 02 02 02 08 07 07 00 00     ................
     202:	00 00 00 0c 0c 0c 0c 0c 0c 0c 0c 04 04 04 04 04     ................
     212:	04 04 04 07 07 03 03 03 03 03 03 03 03 00 00 0a     ................
     222:	0a 0a 0a 0a 0a 0a 07 01 01 01 01 01 01 01 01 0a     ................
     232:	00 00 0b 0b 0b 0b 0b 0b 0b 0b 06 06 06 06 06 06     ................
     242:	06 06 00 00 00                                      .....

00000247 <port_to_output_PGM>:
     247:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     257:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000261 <port_to_ddr_PGM>:
     261:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     271:	01 01 00 00 04 01 07 01 0a 01 00                    ...........

0000027c <__ctors_end>:
     27c:	11 24       	eor	r1, r1
     27e:	1f be       	out	0x3f, r1	; 63
     280:	cf ef       	ldi	r28, 0xFF	; 255
     282:	d1 e2       	ldi	r29, 0x21	; 33
     284:	de bf       	out	0x3e, r29	; 62
     286:	cd bf       	out	0x3d, r28	; 61
     288:	00 e0       	ldi	r16, 0x00	; 0
     28a:	0c bf       	out	0x3c, r16	; 60

0000028c <__do_copy_data>:
     28c:	12 e0       	ldi	r17, 0x02	; 2
     28e:	a0 e0       	ldi	r26, 0x00	; 0
     290:	b2 e0       	ldi	r27, 0x02	; 2
     292:	ee ed       	ldi	r30, 0xDE	; 222
     294:	f8 e1       	ldi	r31, 0x18	; 24
     296:	00 e0       	ldi	r16, 0x00	; 0
     298:	0b bf       	out	0x3b, r16	; 59
     29a:	02 c0       	rjmp	.+4      	; 0x2a0 <__do_copy_data+0x14>
     29c:	07 90       	elpm	r0, Z+
     29e:	0d 92       	st	X+, r0
     2a0:	a8 33       	cpi	r26, 0x38	; 56
     2a2:	b1 07       	cpc	r27, r17
     2a4:	d9 f7       	brne	.-10     	; 0x29c <__do_copy_data+0x10>

000002a6 <__do_clear_bss>:
     2a6:	23 e0       	ldi	r18, 0x03	; 3
     2a8:	a8 e3       	ldi	r26, 0x38	; 56
     2aa:	b2 e0       	ldi	r27, 0x02	; 2
     2ac:	01 c0       	rjmp	.+2      	; 0x2b0 <.do_clear_bss_start>

000002ae <.do_clear_bss_loop>:
     2ae:	1d 92       	st	X+, r1

000002b0 <.do_clear_bss_start>:
     2b0:	a9 33       	cpi	r26, 0x39	; 57
     2b2:	b2 07       	cpc	r27, r18
     2b4:	e1 f7       	brne	.-8      	; 0x2ae <.do_clear_bss_loop>
     2b6:	0e 94 b8 0b 	call	0x1770	; 0x1770 <main>
     2ba:	0c 94 6d 0c 	jmp	0x18da	; 0x18da <_exit>

000002be <__bad_interrupt>:
     2be:	a0 ce       	rjmp	.-704    	; 0x0 <__vectors>

000002c0 <pulseEnable>:
	location &= 0x7; // we only have 8 locations 0-7
	command(LCD_SETCGRAMADDR | (location << 3));
	for (int i=0; i<8; i++) {
		write(charmap[i]);
	}
}
     2c0:	15 98       	cbi	0x02, 5	; 2
     2c2:	85 e0       	ldi	r24, 0x05	; 5
     2c4:	8a 95       	dec	r24
     2c6:	f1 f7       	brne	.-4      	; 0x2c4 <pulseEnable+0x4>
     2c8:	00 00       	nop
     2ca:	15 9a       	sbi	0x02, 5	; 2
     2cc:	95 e0       	ldi	r25, 0x05	; 5
     2ce:	9a 95       	dec	r25
     2d0:	f1 f7       	brne	.-4      	; 0x2ce <pulseEnable+0xe>
     2d2:	00 00       	nop
     2d4:	15 98       	cbi	0x02, 5	; 2
     2d6:	8f e8       	ldi	r24, 0x8F	; 143
     2d8:	91 e0       	ldi	r25, 0x01	; 1
     2da:	01 97       	sbiw	r24, 0x01	; 1
     2dc:	f1 f7       	brne	.-4      	; 0x2da <pulseEnable+0x1a>
     2de:	00 c0       	rjmp	.+0      	; 0x2e0 <pulseEnable+0x20>
     2e0:	00 00       	nop
     2e2:	08 95       	ret

000002e4 <write4bits>:
     2e4:	cf 93       	push	r28
     2e6:	df 93       	push	r29
     2e8:	e0 e5       	ldi	r30, 0x50	; 80
     2ea:	f2 e0       	ldi	r31, 0x02	; 2
     2ec:	20 e0       	ldi	r18, 0x00	; 0
     2ee:	30 e0       	ldi	r19, 0x00	; 0
     2f0:	a8 2f       	mov	r26, r24
     2f2:	b0 e0       	ldi	r27, 0x00	; 0
     2f4:	c1 e0       	ldi	r28, 0x01	; 1
     2f6:	d0 e0       	ldi	r29, 0x00	; 0
     2f8:	ad 01       	movw	r20, r26
     2fa:	02 2e       	mov	r0, r18
     2fc:	02 c0       	rjmp	.+4      	; 0x302 <write4bits+0x1e>
     2fe:	55 95       	asr	r21
     300:	47 95       	ror	r20
     302:	0a 94       	dec	r0
     304:	e2 f7       	brpl	.-8      	; 0x2fe <write4bits+0x1a>
     306:	40 ff       	sbrs	r20, 0
     308:	0b c0       	rjmp	.+22     	; 0x320 <write4bits+0x3c>
     30a:	82 b1       	in	r24, 0x02	; 2
     30c:	ae 01       	movw	r20, r28
     30e:	00 80       	ld	r0, Z
     310:	02 c0       	rjmp	.+4      	; 0x316 <write4bits+0x32>
     312:	44 0f       	add	r20, r20
     314:	55 1f       	adc	r21, r21
     316:	0a 94       	dec	r0
     318:	e2 f7       	brpl	.-8      	; 0x312 <write4bits+0x2e>
     31a:	48 2b       	or	r20, r24
     31c:	42 b9       	out	0x02, r20	; 2
     31e:	0c c0       	rjmp	.+24     	; 0x338 <write4bits+0x54>
     320:	42 b1       	in	r20, 0x02	; 2
     322:	be 01       	movw	r22, r28
     324:	00 80       	ld	r0, Z
     326:	02 c0       	rjmp	.+4      	; 0x32c <write4bits+0x48>
     328:	66 0f       	add	r22, r22
     32a:	77 1f       	adc	r23, r23
     32c:	0a 94       	dec	r0
     32e:	e2 f7       	brpl	.-8      	; 0x328 <write4bits+0x44>
     330:	96 2f       	mov	r25, r22
     332:	90 95       	com	r25
     334:	94 23       	and	r25, r20
     336:	92 b9       	out	0x02, r25	; 2
     338:	2f 5f       	subi	r18, 0xFF	; 255
     33a:	3f 4f       	sbci	r19, 0xFF	; 255
     33c:	31 96       	adiw	r30, 0x01	; 1
     33e:	24 30       	cpi	r18, 0x04	; 4
     340:	31 05       	cpc	r19, r1
     342:	d1 f6       	brne	.-76     	; 0x2f8 <write4bits+0x14>
     344:	bd df       	rcall	.-134    	; 0x2c0 <pulseEnable>
     346:	df 91       	pop	r29
     348:	cf 91       	pop	r28
     34a:	08 95       	ret

0000034c <write8bits>:
     34c:	86 95       	lsr	r24
     34e:	81 70       	andi	r24, 0x01	; 1
     350:	e0 e5       	ldi	r30, 0x50	; 80
     352:	f2 e0       	ldi	r31, 0x02	; 2
     354:	68 e5       	ldi	r22, 0x58	; 88
     356:	72 e0       	ldi	r23, 0x02	; 2
     358:	a1 e0       	ldi	r26, 0x01	; 1
     35a:	b0 e0       	ldi	r27, 0x00	; 0
     35c:	88 23       	and	r24, r24
     35e:	59 f0       	breq	.+22     	; 0x376 <write8bits+0x2a>
     360:	92 b1       	in	r25, 0x02	; 2
     362:	9d 01       	movw	r18, r26
     364:	00 80       	ld	r0, Z
     366:	02 c0       	rjmp	.+4      	; 0x36c <write8bits+0x20>
     368:	22 0f       	add	r18, r18
     36a:	33 1f       	adc	r19, r19
     36c:	0a 94       	dec	r0
     36e:	e2 f7       	brpl	.-8      	; 0x368 <write8bits+0x1c>
     370:	29 2b       	or	r18, r25
     372:	22 b9       	out	0x02, r18	; 2
     374:	0c c0       	rjmp	.+24     	; 0x38e <write8bits+0x42>
     376:	22 b1       	in	r18, 0x02	; 2
     378:	ad 01       	movw	r20, r26
     37a:	00 80       	ld	r0, Z
     37c:	02 c0       	rjmp	.+4      	; 0x382 <write8bits+0x36>
     37e:	44 0f       	add	r20, r20
     380:	55 1f       	adc	r21, r21
     382:	0a 94       	dec	r0
     384:	e2 f7       	brpl	.-8      	; 0x37e <write8bits+0x32>
     386:	94 2f       	mov	r25, r20
     388:	90 95       	com	r25
     38a:	92 23       	and	r25, r18
     38c:	92 b9       	out	0x02, r25	; 2
     38e:	31 96       	adiw	r30, 0x01	; 1
     390:	e6 17       	cp	r30, r22
     392:	f7 07       	cpc	r31, r23
     394:	19 f7       	brne	.-58     	; 0x35c <write8bits+0x10>
     396:	94 cf       	rjmp	.-216    	; 0x2c0 <pulseEnable>
     398:	08 95       	ret

0000039a <send>:
     39a:	cf 93       	push	r28
     39c:	c8 2f       	mov	r28, r24
     39e:	66 23       	and	r22, r22
     3a0:	11 f0       	breq	.+4      	; 0x3a6 <send+0xc>
     3a2:	17 9a       	sbi	0x02, 7	; 2
     3a4:	01 c0       	rjmp	.+2      	; 0x3a8 <send+0xe>
     3a6:	17 98       	cbi	0x02, 7	; 2
     3a8:	16 98       	cbi	0x02, 6	; 2
     3aa:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <_displayfunction>
     3ae:	84 ff       	sbrs	r24, 4
     3b0:	03 c0       	rjmp	.+6      	; 0x3b8 <send+0x1e>
     3b2:	8c 2f       	mov	r24, r28
     3b4:	cb df       	rcall	.-106    	; 0x34c <write8bits>
     3b6:	06 c0       	rjmp	.+12     	; 0x3c4 <send+0x2a>
     3b8:	8c 2f       	mov	r24, r28
     3ba:	82 95       	swap	r24
     3bc:	8f 70       	andi	r24, 0x0F	; 15
     3be:	92 df       	rcall	.-220    	; 0x2e4 <write4bits>
     3c0:	8c 2f       	mov	r24, r28
     3c2:	90 df       	rcall	.-224    	; 0x2e4 <write4bits>
     3c4:	cf 91       	pop	r28
     3c6:	08 95       	ret

000003c8 <command>:
     3c8:	60 e0       	ldi	r22, 0x00	; 0
     3ca:	e7 cf       	rjmp	.-50     	; 0x39a <send>
     3cc:	08 95       	ret

000003ce <lcd_clear>:
     3ce:	81 e0       	ldi	r24, 0x01	; 1
     3d0:	fb df       	rcall	.-10     	; 0x3c8 <command>
     3d2:	8f e3       	ldi	r24, 0x3F	; 63
     3d4:	9f e1       	ldi	r25, 0x1F	; 31
     3d6:	01 97       	sbiw	r24, 0x01	; 1
     3d8:	f1 f7       	brne	.-4      	; 0x3d6 <lcd_clear+0x8>
     3da:	00 c0       	rjmp	.+0      	; 0x3dc <lcd_clear+0xe>
     3dc:	00 00       	nop
     3de:	08 95       	ret

000003e0 <lcd_setCursor>:
     3e0:	ea e4       	ldi	r30, 0x4A	; 74
     3e2:	f2 e0       	ldi	r31, 0x02	; 2
     3e4:	10 82       	st	Z, r1
     3e6:	90 e4       	ldi	r25, 0x40	; 64
     3e8:	91 83       	std	Z+1, r25	; 0x01
     3ea:	94 e1       	ldi	r25, 0x14	; 20
     3ec:	92 83       	std	Z+2, r25	; 0x02
     3ee:	94 e5       	ldi	r25, 0x54	; 84
     3f0:	93 83       	std	Z+3, r25	; 0x03
     3f2:	64 30       	cpi	r22, 0x04	; 4
     3f4:	08 f0       	brcs	.+2      	; 0x3f8 <lcd_setCursor+0x18>
     3f6:	63 e0       	ldi	r22, 0x03	; 3
     3f8:	90 91 4f 02 	lds	r25, 0x024F	; 0x80024f <_numlines>
     3fc:	69 17       	cp	r22, r25
     3fe:	10 f0       	brcs	.+4      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     400:	6f ef       	ldi	r22, 0xFF	; 255
     402:	69 0f       	add	r22, r25
     404:	e6 2f       	mov	r30, r22
     406:	f0 e0       	ldi	r31, 0x00	; 0
     408:	e6 5b       	subi	r30, 0xB6	; 182
     40a:	fd 4f       	sbci	r31, 0xFD	; 253
     40c:	90 81       	ld	r25, Z
     40e:	89 0f       	add	r24, r25
     410:	80 68       	ori	r24, 0x80	; 128
     412:	da cf       	rjmp	.-76     	; 0x3c8 <command>
     414:	08 95       	ret

00000416 <lcd_display_on>:
     416:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <_displaycontrol>
     41a:	98 2f       	mov	r25, r24
     41c:	94 60       	ori	r25, 0x04	; 4
     41e:	90 93 4e 02 	sts	0x024E, r25	; 0x80024e <_displaycontrol>
     422:	8c 60       	ori	r24, 0x0C	; 12
     424:	d1 cf       	rjmp	.-94     	; 0x3c8 <command>
     426:	08 95       	ret

00000428 <lcd_init>:
     428:	cf 93       	push	r28
     42a:	e0 e5       	ldi	r30, 0x50	; 80
     42c:	f2 e0       	ldi	r31, 0x02	; 2
     42e:	83 e0       	ldi	r24, 0x03	; 3
     430:	80 83       	st	Z, r24
     432:	82 e0       	ldi	r24, 0x02	; 2
     434:	81 83       	std	Z+1, r24	; 0x01
     436:	91 e0       	ldi	r25, 0x01	; 1
     438:	92 83       	std	Z+2, r25	; 0x02
     43a:	13 82       	std	Z+3, r1	; 0x03
     43c:	14 82       	std	Z+4, r1	; 0x04
     43e:	15 82       	std	Z+5, r1	; 0x05
     440:	16 82       	std	Z+6, r1	; 0x06
     442:	17 82       	std	Z+7, r1	; 0x07
     444:	98 e0       	ldi	r25, 0x08	; 8
     446:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <_displayfunction>
     44a:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <_numlines>
     44e:	0f 9a       	sbi	0x01, 7	; 1
     450:	0e 9a       	sbi	0x01, 6	; 1
     452:	0d 9a       	sbi	0x01, 5	; 1
     454:	0c 9a       	sbi	0x01, 4	; 1
     456:	14 9a       	sbi	0x02, 4	; 2
     458:	20 e0       	ldi	r18, 0x00	; 0
     45a:	30 e0       	ldi	r19, 0x00	; 0
     45c:	c8 e0       	ldi	r28, 0x08	; 8
     45e:	b0 e0       	ldi	r27, 0x00	; 0
     460:	a4 e0       	ldi	r26, 0x04	; 4
     462:	50 e0       	ldi	r21, 0x00	; 0
     464:	61 e0       	ldi	r22, 0x01	; 1
     466:	70 e0       	ldi	r23, 0x00	; 0
     468:	0c c0       	rjmp	.+24     	; 0x482 <lcd_init+0x5a>
     46a:	41 b1       	in	r20, 0x01	; 1
     46c:	cb 01       	movw	r24, r22
     46e:	01 90       	ld	r0, Z+
     470:	02 c0       	rjmp	.+4      	; 0x476 <lcd_init+0x4e>
     472:	88 0f       	add	r24, r24
     474:	99 1f       	adc	r25, r25
     476:	0a 94       	dec	r0
     478:	e2 f7       	brpl	.-8      	; 0x472 <lcd_init+0x4a>
     47a:	84 2b       	or	r24, r20
     47c:	81 b9       	out	0x01, r24	; 1
     47e:	2f 5f       	subi	r18, 0xFF	; 255
     480:	3f 4f       	sbci	r19, 0xFF	; 255
     482:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <_displayfunction>
     486:	84 fd       	sbrc	r24, 4
     488:	03 c0       	rjmp	.+6      	; 0x490 <lcd_init+0x68>
     48a:	8a 2f       	mov	r24, r26
     48c:	95 2f       	mov	r25, r21
     48e:	02 c0       	rjmp	.+4      	; 0x494 <lcd_init+0x6c>
     490:	8c 2f       	mov	r24, r28
     492:	9b 2f       	mov	r25, r27
     494:	28 17       	cp	r18, r24
     496:	39 07       	cpc	r19, r25
     498:	44 f3       	brlt	.-48     	; 0x46a <lcd_init+0x42>
     49a:	2f ef       	ldi	r18, 0xFF	; 255
     49c:	80 e7       	ldi	r24, 0x70	; 112
     49e:	92 e0       	ldi	r25, 0x02	; 2
     4a0:	21 50       	subi	r18, 0x01	; 1
     4a2:	80 40       	sbci	r24, 0x00	; 0
     4a4:	90 40       	sbci	r25, 0x00	; 0
     4a6:	e1 f7       	brne	.-8      	; 0x4a0 <lcd_init+0x78>
     4a8:	00 c0       	rjmp	.+0      	; 0x4aa <lcd_init+0x82>
     4aa:	00 00       	nop
     4ac:	17 98       	cbi	0x02, 7	; 2
     4ae:	15 98       	cbi	0x02, 5	; 2
     4b0:	16 98       	cbi	0x02, 6	; 2
     4b2:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <_displayfunction>
     4b6:	84 fd       	sbrc	r24, 4
     4b8:	1b c0       	rjmp	.+54     	; 0x4f0 <lcd_init+0xc8>
     4ba:	83 e0       	ldi	r24, 0x03	; 3
     4bc:	13 df       	rcall	.-474    	; 0x2e4 <write4bits>
     4be:	8f e4       	ldi	r24, 0x4F	; 79
     4c0:	96 e4       	ldi	r25, 0x46	; 70
     4c2:	01 97       	sbiw	r24, 0x01	; 1
     4c4:	f1 f7       	brne	.-4      	; 0x4c2 <lcd_init+0x9a>
     4c6:	00 c0       	rjmp	.+0      	; 0x4c8 <lcd_init+0xa0>
     4c8:	00 00       	nop
     4ca:	83 e0       	ldi	r24, 0x03	; 3
     4cc:	0b df       	rcall	.-490    	; 0x2e4 <write4bits>
     4ce:	8f e4       	ldi	r24, 0x4F	; 79
     4d0:	96 e4       	ldi	r25, 0x46	; 70
     4d2:	01 97       	sbiw	r24, 0x01	; 1
     4d4:	f1 f7       	brne	.-4      	; 0x4d2 <lcd_init+0xaa>
     4d6:	00 c0       	rjmp	.+0      	; 0x4d8 <lcd_init+0xb0>
     4d8:	00 00       	nop
     4da:	83 e0       	ldi	r24, 0x03	; 3
     4dc:	03 df       	rcall	.-506    	; 0x2e4 <write4bits>
     4de:	87 e5       	ldi	r24, 0x57	; 87
     4e0:	92 e0       	ldi	r25, 0x02	; 2
     4e2:	01 97       	sbiw	r24, 0x01	; 1
     4e4:	f1 f7       	brne	.-4      	; 0x4e2 <lcd_init+0xba>
     4e6:	00 c0       	rjmp	.+0      	; 0x4e8 <lcd_init+0xc0>
     4e8:	00 00       	nop
     4ea:	82 e0       	ldi	r24, 0x02	; 2
     4ec:	fb de       	rcall	.-522    	; 0x2e4 <write4bits>
     4ee:	16 c0       	rjmp	.+44     	; 0x51c <lcd_init+0xf4>
     4f0:	80 62       	ori	r24, 0x20	; 32
     4f2:	6a df       	rcall	.-300    	; 0x3c8 <command>
     4f4:	8f e4       	ldi	r24, 0x4F	; 79
     4f6:	96 e4       	ldi	r25, 0x46	; 70
     4f8:	01 97       	sbiw	r24, 0x01	; 1
     4fa:	f1 f7       	brne	.-4      	; 0x4f8 <lcd_init+0xd0>
     4fc:	00 c0       	rjmp	.+0      	; 0x4fe <lcd_init+0xd6>
     4fe:	00 00       	nop
     500:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <_displayfunction>
     504:	80 62       	ori	r24, 0x20	; 32
     506:	60 df       	rcall	.-320    	; 0x3c8 <command>
     508:	87 e5       	ldi	r24, 0x57	; 87
     50a:	92 e0       	ldi	r25, 0x02	; 2
     50c:	01 97       	sbiw	r24, 0x01	; 1
     50e:	f1 f7       	brne	.-4      	; 0x50c <lcd_init+0xe4>
     510:	00 c0       	rjmp	.+0      	; 0x512 <lcd_init+0xea>
     512:	00 00       	nop
     514:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <_displayfunction>
     518:	80 62       	ori	r24, 0x20	; 32
     51a:	56 df       	rcall	.-340    	; 0x3c8 <command>
     51c:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <_displayfunction>
     520:	80 62       	ori	r24, 0x20	; 32
     522:	52 df       	rcall	.-348    	; 0x3c8 <command>
     524:	84 e0       	ldi	r24, 0x04	; 4
     526:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <_displaycontrol>
     52a:	75 df       	rcall	.-278    	; 0x416 <lcd_display_on>
     52c:	50 df       	rcall	.-352    	; 0x3ce <lcd_clear>
     52e:	82 e0       	ldi	r24, 0x02	; 2
     530:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <_displaymode>
     534:	86 e0       	ldi	r24, 0x06	; 6
     536:	48 df       	rcall	.-368    	; 0x3c8 <command>
     538:	cf 91       	pop	r28
     53a:	08 95       	ret

0000053c <write>:
     53c:	61 e0       	ldi	r22, 0x01	; 1
     53e:	2d df       	rcall	.-422    	; 0x39a <send>
     540:	81 e0       	ldi	r24, 0x01	; 1
     542:	08 95       	ret

00000544 <lcd_puts>:
	}
	pulseEnable();
}

//------Print------------
void lcd_puts(char *string) {
     544:	cf 93       	push	r28
     546:	df 93       	push	r29
     548:	ec 01       	movw	r28, r24
	for (char *it = string; *it; it++) {
     54a:	88 81       	ld	r24, Y
     54c:	88 23       	and	r24, r24
     54e:	29 f0       	breq	.+10     	; 0x55a <lcd_puts+0x16>
     550:	21 96       	adiw	r28, 0x01	; 1
		write(*it);
     552:	f4 df       	rcall	.-24     	; 0x53c <write>
	pulseEnable();
}

//------Print------------
void lcd_puts(char *string) {
	for (char *it = string; *it; it++) {
     554:	89 91       	ld	r24, Y+
     556:	81 11       	cpse	r24, r1
     558:	fc cf       	rjmp	.-8      	; 0x552 <lcd_puts+0xe>
		write(*it);
	}
}
     55a:	df 91       	pop	r29
     55c:	cf 91       	pop	r28
     55e:	08 95       	ret

00000560 <LCD_PrintString>:

void LCD_PrintString(char *string, uint8_t x, uint8_t y)
{
     560:	cf 93       	push	r28
     562:	df 93       	push	r29
     564:	ec 01       	movw	r28, r24
     566:	86 2f       	mov	r24, r22
	lcd_setCursor(x,y);
     568:	64 2f       	mov	r22, r20
     56a:	3a df       	rcall	.-396    	; 0x3e0 <lcd_setCursor>
	lcd_puts(string);
     56c:	ce 01       	movw	r24, r28
     56e:	ea df       	rcall	.-44     	; 0x544 <lcd_puts>
}
     570:	df 91       	pop	r29
     572:	cf 91       	pop	r28
     574:	08 95       	ret

00000576 <adc_init>:

void adc_init(void)
{
	// set ADC prescaler so we are inside the desired 50-200 KHz range.
#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
	bitSet(ADCSRA, ADPS2);
     576:	ea e7       	ldi	r30, 0x7A	; 122
     578:	f0 e0       	ldi	r31, 0x00	; 0
     57a:	80 81       	ld	r24, Z
     57c:	84 60       	ori	r24, 0x04	; 4
     57e:	80 83       	st	Z, r24
	bitSet(ADCSRA, ADPS1);
     580:	80 81       	ld	r24, Z
     582:	82 60       	ori	r24, 0x02	; 2
     584:	80 83       	st	Z, r24
	bitSet(ADCSRA, ADPS0);
     586:	80 81       	ld	r24, Z
     588:	81 60       	ori	r24, 0x01	; 1
     58a:	80 83       	st	Z, r24
	bitSet(ADCSRA, ADPS1);
	bitSet(ADCSRA, ADPS0);
#endif

	//Enable ADC conversions
	bitSet(ADCSRA, ADEN);
     58c:	80 81       	ld	r24, Z
     58e:	80 68       	ori	r24, 0x80	; 128
     590:	80 83       	st	Z, r24
     592:	08 95       	ret

00000594 <analogRead>:
	
}

int analogRead(uint8_t pin)
{
	uint8_t channel = pinToADCChannel(pin);
     594:	96 ea       	ldi	r25, 0xA6	; 166
     596:	98 0f       	add	r25, r24
     598:	98 30       	cpi	r25, 0x08	; 8
     59a:	20 f4       	brcc	.+8      	; 0x5a4 <analogRead+0x10>
     59c:	91 e6       	ldi	r25, 0x61	; 97
     59e:	98 1b       	sub	r25, r24
     5a0:	89 2f       	mov	r24, r25
     5a2:	09 c0       	rjmp	.+18     	; 0x5b6 <analogRead+0x22>
     5a4:	9e ea       	ldi	r25, 0xAE	; 174
     5a6:	98 0f       	add	r25, r24
     5a8:	98 30       	cpi	r25, 0x08	; 8
     5aa:	20 f4       	brcc	.+8      	; 0x5b4 <analogRead+0x20>
     5ac:	91 e6       	ldi	r25, 0x61	; 97
     5ae:	98 1b       	sub	r25, r24
     5b0:	89 2f       	mov	r24, r25
     5b2:	01 c0       	rjmp	.+2      	; 0x5b6 <analogRead+0x22>
     5b4:	8f ef       	ldi	r24, 0xFF	; 255
	
	if(channel != NOT_ADC_PIN){
		// the MUX5 bit of ADCSRB selects whether we're reading from channels
		// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).
		ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((channel >> 3) & 0x01) << MUX5);
     5b6:	eb e7       	ldi	r30, 0x7B	; 123
     5b8:	f0 e0       	ldi	r31, 0x00	; 0
     5ba:	90 81       	ld	r25, Z
     5bc:	28 2f       	mov	r18, r24
     5be:	28 70       	andi	r18, 0x08	; 8
     5c0:	97 7f       	andi	r25, 0xF7	; 247
     5c2:	92 2b       	or	r25, r18
     5c4:	90 83       	st	Z, r25
		
		// set the analog reference (high two bits of ADMUX) and select the channel (low 4 bits).  
		// this also sets ADLAR (left-adjust result) to 0 (the default- right adjusted).
		ADMUX = (analog_reference << 6) | (channel & 0x0F );
     5c6:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     5ca:	90 e4       	ldi	r25, 0x40	; 64
     5cc:	29 9f       	mul	r18, r25
     5ce:	90 01       	movw	r18, r0
     5d0:	11 24       	eor	r1, r1
     5d2:	8f 70       	andi	r24, 0x0F	; 15
     5d4:	82 2b       	or	r24, r18
     5d6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		
		//Start the conversion
		ADCSRA |= (1<<ADSC);
     5da:	ea e7       	ldi	r30, 0x7A	; 122
     5dc:	f0 e0       	ldi	r31, 0x00	; 0
     5de:	80 81       	ld	r24, Z
     5e0:	80 64       	ori	r24, 0x40	; 64
     5e2:	80 83       	st	Z, r24
		// Wait completion of ADC
		while (bit_is_set(ADCSRA, ADSC));
     5e4:	80 81       	ld	r24, Z
     5e6:	86 fd       	sbrc	r24, 6
     5e8:	fd cf       	rjmp	.-6      	; 0x5e4 <analogRead+0x50>
		
		return (ADC);
     5ea:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
     5ee:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
	}else{
		return 0;
	}
     5f2:	08 95       	ret

000005f4 <pinMode>:
 */ 
#include "tk2560.h"


void pinMode(uint8_t pin, uint8_t mode)
{
     5f4:	cf 93       	push	r28
     5f6:	df 93       	push	r29
	uint8_t bit = pinToBitMask(pin);
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	fc 01       	movw	r30, r24
     5fc:	e3 58       	subi	r30, 0x83	; 131
     5fe:	fe 4f       	sbci	r31, 0xFE	; 254
     600:	24 91       	lpm	r18, Z
	uint8_t port = pinToPort(pin);
     602:	fc 01       	movw	r30, r24
     604:	ee 51       	subi	r30, 0x1E	; 30
     606:	fe 4f       	sbci	r31, 0xFE	; 254
     608:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;
	
	if (port == NOT_A_PIN) return;
     60a:	88 23       	and	r24, r24
     60c:	79 f1       	breq	.+94     	; 0x66c <pinMode+0x78>
	
	reg = portDDRRegister(port);
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	88 0f       	add	r24, r24
     612:	99 1f       	adc	r25, r25
     614:	fc 01       	movw	r30, r24
     616:	ef 59       	subi	r30, 0x9F	; 159
     618:	fd 4f       	sbci	r31, 0xFD	; 253
     61a:	a5 91       	lpm	r26, Z+
     61c:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
     61e:	fc 01       	movw	r30, r24
     620:	e9 5b       	subi	r30, 0xB9	; 185
     622:	fd 4f       	sbci	r31, 0xFD	; 253
     624:	c5 91       	lpm	r28, Z+
     626:	d4 91       	lpm	r29, Z
	
	if (mode == INPUT)
     628:	61 11       	cpse	r22, r1
     62a:	0c c0       	rjmp	.+24     	; 0x644 <pinMode+0x50>
	{
		uint8_t oldSREG = SREG;
     62c:	9f b7       	in	r25, 0x3f	; 63
		cli();
     62e:	f8 94       	cli
		*reg &= ~bit;
     630:	8c 91       	ld	r24, X
     632:	e2 2f       	mov	r30, r18
     634:	e0 95       	com	r30
     636:	8e 23       	and	r24, r30
     638:	8c 93       	st	X, r24
		*out &= ~bit;
     63a:	28 81       	ld	r18, Y
     63c:	e2 23       	and	r30, r18
     63e:	e8 83       	st	Y, r30
		SREG = oldSREG;
     640:	9f bf       	out	0x3f, r25	; 63
     642:	14 c0       	rjmp	.+40     	; 0x66c <pinMode+0x78>
	}else if(mode == INPUT_PULLUP)
     644:	62 30       	cpi	r22, 0x02	; 2
     646:	61 f4       	brne	.+24     	; 0x660 <pinMode+0x6c>
	{
		uint8_t oldSREG = SREG;
     648:	9f b7       	in	r25, 0x3f	; 63
		cli();
     64a:	f8 94       	cli
		*reg &= ~bit;
     64c:	8c 91       	ld	r24, X
     64e:	32 2f       	mov	r19, r18
     650:	30 95       	com	r19
     652:	83 23       	and	r24, r19
     654:	8c 93       	st	X, r24
		*out |= bit;
     656:	e8 81       	ld	r30, Y
     658:	e2 2b       	or	r30, r18
     65a:	e8 83       	st	Y, r30
		SREG = oldSREG;
     65c:	9f bf       	out	0x3f, r25	; 63
     65e:	06 c0       	rjmp	.+12     	; 0x66c <pinMode+0x78>
	}else{
		//output
		uint8_t oldSREG = SREG;
     660:	8f b7       	in	r24, 0x3f	; 63
		cli();
     662:	f8 94       	cli
		*reg |= bit;
     664:	ec 91       	ld	r30, X
     666:	e2 2b       	or	r30, r18
     668:	ec 93       	st	X, r30
		SREG = oldSREG;
     66a:	8f bf       	out	0x3f, r24	; 63
	}
		
}
     66c:	df 91       	pop	r29
     66e:	cf 91       	pop	r28
     670:	08 95       	ret

00000672 <digitalWrite>:

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t bit = pinToBitMask(pin);
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	fc 01       	movw	r30, r24
     676:	e3 58       	subi	r30, 0x83	; 131
     678:	fe 4f       	sbci	r31, 0xFE	; 254
     67a:	24 91       	lpm	r18, Z
	uint8_t port = pinToPort(pin);
     67c:	fc 01       	movw	r30, r24
     67e:	ee 51       	subi	r30, 0x1E	; 30
     680:	fe 4f       	sbci	r31, 0xFE	; 254
     682:	84 91       	lpm	r24, Z
	volatile uint8_t *out;
	
	if (port == NOT_A_PIN) return;
     684:	88 23       	and	r24, r24
     686:	b1 f0       	breq	.+44     	; 0x6b4 <digitalWrite+0x42>
	
	out = portOutputRegister(port);
     688:	e8 2f       	mov	r30, r24
     68a:	f0 e0       	ldi	r31, 0x00	; 0
     68c:	ee 0f       	add	r30, r30
     68e:	ff 1f       	adc	r31, r31
     690:	e9 5b       	subi	r30, 0xB9	; 185
     692:	fd 4f       	sbci	r31, 0xFD	; 253
     694:	a5 91       	lpm	r26, Z+
     696:	b4 91       	lpm	r27, Z
	
	uint8_t oldSREG = SREG;
     698:	8f b7       	in	r24, 0x3f	; 63
	cli();
     69a:	f8 94       	cli
	
	if (val == LOW) {
     69c:	61 11       	cpse	r22, r1
     69e:	06 c0       	rjmp	.+12     	; 0x6ac <digitalWrite+0x3a>
		*out &= ~bit;
     6a0:	9c 91       	ld	r25, X
     6a2:	e2 2f       	mov	r30, r18
     6a4:	e0 95       	com	r30
     6a6:	e9 23       	and	r30, r25
     6a8:	ec 93       	st	X, r30
     6aa:	03 c0       	rjmp	.+6      	; 0x6b2 <digitalWrite+0x40>
	} else {
		*out |= bit;
     6ac:	ec 91       	ld	r30, X
     6ae:	e2 2b       	or	r30, r18
     6b0:	ec 93       	st	X, r30
	}
	
	SREG = oldSREG;
     6b2:	8f bf       	out	0x3f, r24	; 63
     6b4:	08 95       	ret

000006b6 <togglePin>:
	
}

void togglePin(uint8_t pin)
{
	uint8_t bit = pinToBitMask(pin);
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	fc 01       	movw	r30, r24
     6ba:	e3 58       	subi	r30, 0x83	; 131
     6bc:	fe 4f       	sbci	r31, 0xFE	; 254
     6be:	24 91       	lpm	r18, Z
	uint8_t port = pinToPort(pin);
     6c0:	fc 01       	movw	r30, r24
     6c2:	ee 51       	subi	r30, 0x1E	; 30
     6c4:	fe 4f       	sbci	r31, 0xFE	; 254
     6c6:	84 91       	lpm	r24, Z
	volatile uint8_t *out;
	
	if (port == NOT_A_PIN) return;
     6c8:	88 23       	and	r24, r24
     6ca:	71 f0       	breq	.+28     	; 0x6e8 <togglePin+0x32>
	
	out = portOutputRegister(port);
     6cc:	e8 2f       	mov	r30, r24
     6ce:	f0 e0       	ldi	r31, 0x00	; 0
     6d0:	ee 0f       	add	r30, r30
     6d2:	ff 1f       	adc	r31, r31
     6d4:	e9 5b       	subi	r30, 0xB9	; 185
     6d6:	fd 4f       	sbci	r31, 0xFD	; 253
     6d8:	a5 91       	lpm	r26, Z+
     6da:	b4 91       	lpm	r27, Z
	
	uint8_t oldSREG = SREG;
     6dc:	8f b7       	in	r24, 0x3f	; 63
	cli();
     6de:	f8 94       	cli
	
	//toggle
	*out ^= bit;
     6e0:	ec 91       	ld	r30, X
     6e2:	e2 27       	eor	r30, r18
     6e4:	ec 93       	st	X, r30
	
	SREG = oldSREG;
     6e6:	8f bf       	out	0x3f, r24	; 63
     6e8:	08 95       	ret

000006ea <nothing>:
			break;
			case 7:
				EIMSK &= ~(1<<INT7);
			break;
		}
		intFunc[interruptNum] = nothing;
     6ea:	08 95       	ret

000006ec <attachInterrupt>:
     6ec:	88 30       	cpi	r24, 0x08	; 8
     6ee:	08 f0       	brcs	.+2      	; 0x6f2 <attachInterrupt+0x6>
     6f0:	79 c0       	rjmp	.+242    	; 0x7e4 <attachInterrupt+0xf8>
     6f2:	e8 2f       	mov	r30, r24
     6f4:	f0 e0       	ldi	r31, 0x00	; 0
     6f6:	ee 0f       	add	r30, r30
     6f8:	ff 1f       	adc	r31, r31
     6fa:	ef 5f       	subi	r30, 0xFF	; 255
     6fc:	fd 4f       	sbci	r31, 0xFD	; 253
     6fe:	71 83       	std	Z+1, r23	; 0x01
     700:	60 83       	st	Z, r22
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	88 30       	cpi	r24, 0x08	; 8
     706:	91 05       	cpc	r25, r1
     708:	08 f0       	brcs	.+2      	; 0x70c <attachInterrupt+0x20>
     70a:	6c c0       	rjmp	.+216    	; 0x7e4 <attachInterrupt+0xf8>
     70c:	fc 01       	movw	r30, r24
     70e:	88 27       	eor	r24, r24
     710:	ee 58       	subi	r30, 0x8E	; 142
     712:	ff 4f       	sbci	r31, 0xFF	; 255
     714:	8f 4f       	sbci	r24, 0xFF	; 255
     716:	0c 94 32 0c 	jmp	0x1864	; 0x1864 <__tablejump2__>
     71a:	e9 e6       	ldi	r30, 0x69	; 105
     71c:	f0 e0       	ldi	r31, 0x00	; 0
     71e:	80 81       	ld	r24, Z
     720:	8c 7f       	andi	r24, 0xFC	; 252
     722:	48 2b       	or	r20, r24
     724:	40 83       	st	Z, r20
     726:	e8 9a       	sbi	0x1d, 0	; 29
     728:	08 95       	ret
     72a:	e9 e6       	ldi	r30, 0x69	; 105
     72c:	f0 e0       	ldi	r31, 0x00	; 0
     72e:	80 81       	ld	r24, Z
     730:	83 7f       	andi	r24, 0xF3	; 243
     732:	44 0f       	add	r20, r20
     734:	55 1f       	adc	r21, r21
     736:	44 0f       	add	r20, r20
     738:	55 1f       	adc	r21, r21
     73a:	48 2b       	or	r20, r24
     73c:	40 83       	st	Z, r20
     73e:	e9 9a       	sbi	0x1d, 1	; 29
     740:	08 95       	ret
     742:	e9 e6       	ldi	r30, 0x69	; 105
     744:	f0 e0       	ldi	r31, 0x00	; 0
     746:	80 81       	ld	r24, Z
     748:	8f 7c       	andi	r24, 0xCF	; 207
     74a:	42 95       	swap	r20
     74c:	52 95       	swap	r21
     74e:	50 7f       	andi	r21, 0xF0	; 240
     750:	54 27       	eor	r21, r20
     752:	40 7f       	andi	r20, 0xF0	; 240
     754:	54 27       	eor	r21, r20
     756:	48 2b       	or	r20, r24
     758:	40 83       	st	Z, r20
     75a:	ea 9a       	sbi	0x1d, 2	; 29
     75c:	08 95       	ret
     75e:	e9 e6       	ldi	r30, 0x69	; 105
     760:	f0 e0       	ldi	r31, 0x00	; 0
     762:	80 81       	ld	r24, Z
     764:	8f 73       	andi	r24, 0x3F	; 63
     766:	00 24       	eor	r0, r0
     768:	56 95       	lsr	r21
     76a:	47 95       	ror	r20
     76c:	07 94       	ror	r0
     76e:	56 95       	lsr	r21
     770:	47 95       	ror	r20
     772:	07 94       	ror	r0
     774:	54 2f       	mov	r21, r20
     776:	40 2d       	mov	r20, r0
     778:	48 2b       	or	r20, r24
     77a:	40 83       	st	Z, r20
     77c:	eb 9a       	sbi	0x1d, 3	; 29
     77e:	08 95       	ret
     780:	ea e6       	ldi	r30, 0x6A	; 106
     782:	f0 e0       	ldi	r31, 0x00	; 0
     784:	80 81       	ld	r24, Z
     786:	8c 7f       	andi	r24, 0xFC	; 252
     788:	48 2b       	or	r20, r24
     78a:	40 83       	st	Z, r20
     78c:	ec 9a       	sbi	0x1d, 4	; 29
     78e:	08 95       	ret
     790:	ea e6       	ldi	r30, 0x6A	; 106
     792:	f0 e0       	ldi	r31, 0x00	; 0
     794:	80 81       	ld	r24, Z
     796:	83 7f       	andi	r24, 0xF3	; 243
     798:	44 0f       	add	r20, r20
     79a:	55 1f       	adc	r21, r21
     79c:	44 0f       	add	r20, r20
     79e:	55 1f       	adc	r21, r21
     7a0:	48 2b       	or	r20, r24
     7a2:	40 83       	st	Z, r20
     7a4:	ed 9a       	sbi	0x1d, 5	; 29
     7a6:	08 95       	ret
     7a8:	ea e6       	ldi	r30, 0x6A	; 106
     7aa:	f0 e0       	ldi	r31, 0x00	; 0
     7ac:	80 81       	ld	r24, Z
     7ae:	8f 7c       	andi	r24, 0xCF	; 207
     7b0:	42 95       	swap	r20
     7b2:	52 95       	swap	r21
     7b4:	50 7f       	andi	r21, 0xF0	; 240
     7b6:	54 27       	eor	r21, r20
     7b8:	40 7f       	andi	r20, 0xF0	; 240
     7ba:	54 27       	eor	r21, r20
     7bc:	48 2b       	or	r20, r24
     7be:	40 83       	st	Z, r20
     7c0:	ee 9a       	sbi	0x1d, 6	; 29
     7c2:	08 95       	ret
     7c4:	ea e6       	ldi	r30, 0x6A	; 106
     7c6:	f0 e0       	ldi	r31, 0x00	; 0
     7c8:	80 81       	ld	r24, Z
     7ca:	8f 73       	andi	r24, 0x3F	; 63
     7cc:	00 24       	eor	r0, r0
     7ce:	56 95       	lsr	r21
     7d0:	47 95       	ror	r20
     7d2:	07 94       	ror	r0
     7d4:	56 95       	lsr	r21
     7d6:	47 95       	ror	r20
     7d8:	07 94       	ror	r0
     7da:	54 2f       	mov	r21, r20
     7dc:	40 2d       	mov	r20, r0
     7de:	48 2b       	or	r20, r24
     7e0:	40 83       	st	Z, r20
     7e2:	ef 9a       	sbi	0x1d, 7	; 29
     7e4:	08 95       	ret

000007e6 <__vector_1>:
#define IMPLEMENT_ISR(vect, interrupt) \
	ISR(vect) { \
		intFunc[interrupt](); \
	}
	
IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
     7e6:	1f 92       	push	r1
     7e8:	0f 92       	push	r0
     7ea:	0f b6       	in	r0, 0x3f	; 63
     7ec:	0f 92       	push	r0
     7ee:	11 24       	eor	r1, r1
     7f0:	0b b6       	in	r0, 0x3b	; 59
     7f2:	0f 92       	push	r0
     7f4:	2f 93       	push	r18
     7f6:	3f 93       	push	r19
     7f8:	4f 93       	push	r20
     7fa:	5f 93       	push	r21
     7fc:	6f 93       	push	r22
     7fe:	7f 93       	push	r23
     800:	8f 93       	push	r24
     802:	9f 93       	push	r25
     804:	af 93       	push	r26
     806:	bf 93       	push	r27
     808:	ef 93       	push	r30
     80a:	ff 93       	push	r31
     80c:	e0 91 01 02 	lds	r30, 0x0201	; 0x800201 <intFunc>
     810:	f0 91 02 02 	lds	r31, 0x0202	; 0x800202 <intFunc+0x1>
     814:	19 95       	eicall
     816:	ff 91       	pop	r31
     818:	ef 91       	pop	r30
     81a:	bf 91       	pop	r27
     81c:	af 91       	pop	r26
     81e:	9f 91       	pop	r25
     820:	8f 91       	pop	r24
     822:	7f 91       	pop	r23
     824:	6f 91       	pop	r22
     826:	5f 91       	pop	r21
     828:	4f 91       	pop	r20
     82a:	3f 91       	pop	r19
     82c:	2f 91       	pop	r18
     82e:	0f 90       	pop	r0
     830:	0b be       	out	0x3b, r0	; 59
     832:	0f 90       	pop	r0
     834:	0f be       	out	0x3f, r0	; 63
     836:	0f 90       	pop	r0
     838:	1f 90       	pop	r1
     83a:	18 95       	reti

0000083c <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
     83c:	1f 92       	push	r1
     83e:	0f 92       	push	r0
     840:	0f b6       	in	r0, 0x3f	; 63
     842:	0f 92       	push	r0
     844:	11 24       	eor	r1, r1
     846:	0b b6       	in	r0, 0x3b	; 59
     848:	0f 92       	push	r0
     84a:	2f 93       	push	r18
     84c:	3f 93       	push	r19
     84e:	4f 93       	push	r20
     850:	5f 93       	push	r21
     852:	6f 93       	push	r22
     854:	7f 93       	push	r23
     856:	8f 93       	push	r24
     858:	9f 93       	push	r25
     85a:	af 93       	push	r26
     85c:	bf 93       	push	r27
     85e:	ef 93       	push	r30
     860:	ff 93       	push	r31
     862:	e0 91 03 02 	lds	r30, 0x0203	; 0x800203 <intFunc+0x2>
     866:	f0 91 04 02 	lds	r31, 0x0204	; 0x800204 <intFunc+0x3>
     86a:	19 95       	eicall
     86c:	ff 91       	pop	r31
     86e:	ef 91       	pop	r30
     870:	bf 91       	pop	r27
     872:	af 91       	pop	r26
     874:	9f 91       	pop	r25
     876:	8f 91       	pop	r24
     878:	7f 91       	pop	r23
     87a:	6f 91       	pop	r22
     87c:	5f 91       	pop	r21
     87e:	4f 91       	pop	r20
     880:	3f 91       	pop	r19
     882:	2f 91       	pop	r18
     884:	0f 90       	pop	r0
     886:	0b be       	out	0x3b, r0	; 59
     888:	0f 90       	pop	r0
     88a:	0f be       	out	0x3f, r0	; 63
     88c:	0f 90       	pop	r0
     88e:	1f 90       	pop	r1
     890:	18 95       	reti

00000892 <__vector_3>:
IMPLEMENT_ISR(INT2_vect, EXTERNAL_INT_2)
     892:	1f 92       	push	r1
     894:	0f 92       	push	r0
     896:	0f b6       	in	r0, 0x3f	; 63
     898:	0f 92       	push	r0
     89a:	11 24       	eor	r1, r1
     89c:	0b b6       	in	r0, 0x3b	; 59
     89e:	0f 92       	push	r0
     8a0:	2f 93       	push	r18
     8a2:	3f 93       	push	r19
     8a4:	4f 93       	push	r20
     8a6:	5f 93       	push	r21
     8a8:	6f 93       	push	r22
     8aa:	7f 93       	push	r23
     8ac:	8f 93       	push	r24
     8ae:	9f 93       	push	r25
     8b0:	af 93       	push	r26
     8b2:	bf 93       	push	r27
     8b4:	ef 93       	push	r30
     8b6:	ff 93       	push	r31
     8b8:	e0 91 05 02 	lds	r30, 0x0205	; 0x800205 <intFunc+0x4>
     8bc:	f0 91 06 02 	lds	r31, 0x0206	; 0x800206 <intFunc+0x5>
     8c0:	19 95       	eicall
     8c2:	ff 91       	pop	r31
     8c4:	ef 91       	pop	r30
     8c6:	bf 91       	pop	r27
     8c8:	af 91       	pop	r26
     8ca:	9f 91       	pop	r25
     8cc:	8f 91       	pop	r24
     8ce:	7f 91       	pop	r23
     8d0:	6f 91       	pop	r22
     8d2:	5f 91       	pop	r21
     8d4:	4f 91       	pop	r20
     8d6:	3f 91       	pop	r19
     8d8:	2f 91       	pop	r18
     8da:	0f 90       	pop	r0
     8dc:	0b be       	out	0x3b, r0	; 59
     8de:	0f 90       	pop	r0
     8e0:	0f be       	out	0x3f, r0	; 63
     8e2:	0f 90       	pop	r0
     8e4:	1f 90       	pop	r1
     8e6:	18 95       	reti

000008e8 <__vector_4>:
IMPLEMENT_ISR(INT3_vect, EXTERNAL_INT_3)
     8e8:	1f 92       	push	r1
     8ea:	0f 92       	push	r0
     8ec:	0f b6       	in	r0, 0x3f	; 63
     8ee:	0f 92       	push	r0
     8f0:	11 24       	eor	r1, r1
     8f2:	0b b6       	in	r0, 0x3b	; 59
     8f4:	0f 92       	push	r0
     8f6:	2f 93       	push	r18
     8f8:	3f 93       	push	r19
     8fa:	4f 93       	push	r20
     8fc:	5f 93       	push	r21
     8fe:	6f 93       	push	r22
     900:	7f 93       	push	r23
     902:	8f 93       	push	r24
     904:	9f 93       	push	r25
     906:	af 93       	push	r26
     908:	bf 93       	push	r27
     90a:	ef 93       	push	r30
     90c:	ff 93       	push	r31
     90e:	e0 91 07 02 	lds	r30, 0x0207	; 0x800207 <intFunc+0x6>
     912:	f0 91 08 02 	lds	r31, 0x0208	; 0x800208 <intFunc+0x7>
     916:	19 95       	eicall
     918:	ff 91       	pop	r31
     91a:	ef 91       	pop	r30
     91c:	bf 91       	pop	r27
     91e:	af 91       	pop	r26
     920:	9f 91       	pop	r25
     922:	8f 91       	pop	r24
     924:	7f 91       	pop	r23
     926:	6f 91       	pop	r22
     928:	5f 91       	pop	r21
     92a:	4f 91       	pop	r20
     92c:	3f 91       	pop	r19
     92e:	2f 91       	pop	r18
     930:	0f 90       	pop	r0
     932:	0b be       	out	0x3b, r0	; 59
     934:	0f 90       	pop	r0
     936:	0f be       	out	0x3f, r0	; 63
     938:	0f 90       	pop	r0
     93a:	1f 90       	pop	r1
     93c:	18 95       	reti

0000093e <__vector_5>:
IMPLEMENT_ISR(INT4_vect, EXTERNAL_INT_4)
     93e:	1f 92       	push	r1
     940:	0f 92       	push	r0
     942:	0f b6       	in	r0, 0x3f	; 63
     944:	0f 92       	push	r0
     946:	11 24       	eor	r1, r1
     948:	0b b6       	in	r0, 0x3b	; 59
     94a:	0f 92       	push	r0
     94c:	2f 93       	push	r18
     94e:	3f 93       	push	r19
     950:	4f 93       	push	r20
     952:	5f 93       	push	r21
     954:	6f 93       	push	r22
     956:	7f 93       	push	r23
     958:	8f 93       	push	r24
     95a:	9f 93       	push	r25
     95c:	af 93       	push	r26
     95e:	bf 93       	push	r27
     960:	ef 93       	push	r30
     962:	ff 93       	push	r31
     964:	e0 91 09 02 	lds	r30, 0x0209	; 0x800209 <intFunc+0x8>
     968:	f0 91 0a 02 	lds	r31, 0x020A	; 0x80020a <intFunc+0x9>
     96c:	19 95       	eicall
     96e:	ff 91       	pop	r31
     970:	ef 91       	pop	r30
     972:	bf 91       	pop	r27
     974:	af 91       	pop	r26
     976:	9f 91       	pop	r25
     978:	8f 91       	pop	r24
     97a:	7f 91       	pop	r23
     97c:	6f 91       	pop	r22
     97e:	5f 91       	pop	r21
     980:	4f 91       	pop	r20
     982:	3f 91       	pop	r19
     984:	2f 91       	pop	r18
     986:	0f 90       	pop	r0
     988:	0b be       	out	0x3b, r0	; 59
     98a:	0f 90       	pop	r0
     98c:	0f be       	out	0x3f, r0	; 63
     98e:	0f 90       	pop	r0
     990:	1f 90       	pop	r1
     992:	18 95       	reti

00000994 <__vector_6>:
IMPLEMENT_ISR(INT5_vect, EXTERNAL_INT_5)
     994:	1f 92       	push	r1
     996:	0f 92       	push	r0
     998:	0f b6       	in	r0, 0x3f	; 63
     99a:	0f 92       	push	r0
     99c:	11 24       	eor	r1, r1
     99e:	0b b6       	in	r0, 0x3b	; 59
     9a0:	0f 92       	push	r0
     9a2:	2f 93       	push	r18
     9a4:	3f 93       	push	r19
     9a6:	4f 93       	push	r20
     9a8:	5f 93       	push	r21
     9aa:	6f 93       	push	r22
     9ac:	7f 93       	push	r23
     9ae:	8f 93       	push	r24
     9b0:	9f 93       	push	r25
     9b2:	af 93       	push	r26
     9b4:	bf 93       	push	r27
     9b6:	ef 93       	push	r30
     9b8:	ff 93       	push	r31
     9ba:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <intFunc+0xa>
     9be:	f0 91 0c 02 	lds	r31, 0x020C	; 0x80020c <intFunc+0xb>
     9c2:	19 95       	eicall
     9c4:	ff 91       	pop	r31
     9c6:	ef 91       	pop	r30
     9c8:	bf 91       	pop	r27
     9ca:	af 91       	pop	r26
     9cc:	9f 91       	pop	r25
     9ce:	8f 91       	pop	r24
     9d0:	7f 91       	pop	r23
     9d2:	6f 91       	pop	r22
     9d4:	5f 91       	pop	r21
     9d6:	4f 91       	pop	r20
     9d8:	3f 91       	pop	r19
     9da:	2f 91       	pop	r18
     9dc:	0f 90       	pop	r0
     9de:	0b be       	out	0x3b, r0	; 59
     9e0:	0f 90       	pop	r0
     9e2:	0f be       	out	0x3f, r0	; 63
     9e4:	0f 90       	pop	r0
     9e6:	1f 90       	pop	r1
     9e8:	18 95       	reti

000009ea <__vector_7>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
     9ea:	1f 92       	push	r1
     9ec:	0f 92       	push	r0
     9ee:	0f b6       	in	r0, 0x3f	; 63
     9f0:	0f 92       	push	r0
     9f2:	11 24       	eor	r1, r1
     9f4:	0b b6       	in	r0, 0x3b	; 59
     9f6:	0f 92       	push	r0
     9f8:	2f 93       	push	r18
     9fa:	3f 93       	push	r19
     9fc:	4f 93       	push	r20
     9fe:	5f 93       	push	r21
     a00:	6f 93       	push	r22
     a02:	7f 93       	push	r23
     a04:	8f 93       	push	r24
     a06:	9f 93       	push	r25
     a08:	af 93       	push	r26
     a0a:	bf 93       	push	r27
     a0c:	ef 93       	push	r30
     a0e:	ff 93       	push	r31
     a10:	e0 91 0d 02 	lds	r30, 0x020D	; 0x80020d <intFunc+0xc>
     a14:	f0 91 0e 02 	lds	r31, 0x020E	; 0x80020e <intFunc+0xd>
     a18:	19 95       	eicall
     a1a:	ff 91       	pop	r31
     a1c:	ef 91       	pop	r30
     a1e:	bf 91       	pop	r27
     a20:	af 91       	pop	r26
     a22:	9f 91       	pop	r25
     a24:	8f 91       	pop	r24
     a26:	7f 91       	pop	r23
     a28:	6f 91       	pop	r22
     a2a:	5f 91       	pop	r21
     a2c:	4f 91       	pop	r20
     a2e:	3f 91       	pop	r19
     a30:	2f 91       	pop	r18
     a32:	0f 90       	pop	r0
     a34:	0b be       	out	0x3b, r0	; 59
     a36:	0f 90       	pop	r0
     a38:	0f be       	out	0x3f, r0	; 63
     a3a:	0f 90       	pop	r0
     a3c:	1f 90       	pop	r1
     a3e:	18 95       	reti

00000a40 <__vector_8>:
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)
     a40:	1f 92       	push	r1
     a42:	0f 92       	push	r0
     a44:	0f b6       	in	r0, 0x3f	; 63
     a46:	0f 92       	push	r0
     a48:	11 24       	eor	r1, r1
     a4a:	0b b6       	in	r0, 0x3b	; 59
     a4c:	0f 92       	push	r0
     a4e:	2f 93       	push	r18
     a50:	3f 93       	push	r19
     a52:	4f 93       	push	r20
     a54:	5f 93       	push	r21
     a56:	6f 93       	push	r22
     a58:	7f 93       	push	r23
     a5a:	8f 93       	push	r24
     a5c:	9f 93       	push	r25
     a5e:	af 93       	push	r26
     a60:	bf 93       	push	r27
     a62:	ef 93       	push	r30
     a64:	ff 93       	push	r31
     a66:	e0 91 0f 02 	lds	r30, 0x020F	; 0x80020f <intFunc+0xe>
     a6a:	f0 91 10 02 	lds	r31, 0x0210	; 0x800210 <intFunc+0xf>
     a6e:	19 95       	eicall
     a70:	ff 91       	pop	r31
     a72:	ef 91       	pop	r30
     a74:	bf 91       	pop	r27
     a76:	af 91       	pop	r26
     a78:	9f 91       	pop	r25
     a7a:	8f 91       	pop	r24
     a7c:	7f 91       	pop	r23
     a7e:	6f 91       	pop	r22
     a80:	5f 91       	pop	r21
     a82:	4f 91       	pop	r20
     a84:	3f 91       	pop	r19
     a86:	2f 91       	pop	r18
     a88:	0f 90       	pop	r0
     a8a:	0b be       	out	0x3b, r0	; 59
     a8c:	0f 90       	pop	r0
     a8e:	0f be       	out	0x3f, r0	; 63
     a90:	0f 90       	pop	r0
     a92:	1f 90       	pop	r1
     a94:	18 95       	reti

00000a96 <enablePinChangeInterruptHelper>:
	// delete setting
	risingPorts[arrayPos] &= ~pcintMask;
	fallingPorts[arrayPos] &= ~pcintMask;

	// call the actual hardware disable function
	disablePinChangeInterruptHelper(pcintPort, pcintMask);
     a96:	98 2f       	mov	r25, r24
     a98:	81 30       	cpi	r24, 0x01	; 1
     a9a:	59 f0       	breq	.+22     	; 0xab2 <enablePinChangeInterruptHelper+0x1c>
     a9c:	18 f0       	brcs	.+6      	; 0xaa4 <enablePinChangeInterruptHelper+0xe>
     a9e:	82 30       	cpi	r24, 0x02	; 2
     aa0:	a1 f0       	breq	.+40     	; 0xaca <enablePinChangeInterruptHelper+0x34>
     aa2:	1b c0       	rjmp	.+54     	; 0xada <enablePinChangeInterruptHelper+0x44>
     aa4:	83 b1       	in	r24, 0x03	; 3
     aa6:	e4 2f       	mov	r30, r20
     aa8:	f0 e0       	ldi	r31, 0x00	; 0
     aaa:	e2 5c       	subi	r30, 0xC2	; 194
     aac:	fd 4f       	sbci	r31, 0xFD	; 253
     aae:	80 83       	st	Z, r24
     ab0:	1a c0       	rjmp	.+52     	; 0xae6 <enablePinChangeInterruptHelper+0x50>
     ab2:	2c b1       	in	r18, 0x0c	; 12
     ab4:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
     ab8:	e4 2f       	mov	r30, r20
     aba:	f0 e0       	ldi	r31, 0x00	; 0
     abc:	e2 5c       	subi	r30, 0xC2	; 194
     abe:	fd 4f       	sbci	r31, 0xFD	; 253
     ac0:	21 70       	andi	r18, 0x01	; 1
     ac2:	88 0f       	add	r24, r24
     ac4:	82 2b       	or	r24, r18
     ac6:	80 83       	st	Z, r24
     ac8:	14 c0       	rjmp	.+40     	; 0xaf2 <enablePinChangeInterruptHelper+0x5c>
     aca:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
     ace:	e4 2f       	mov	r30, r20
     ad0:	f0 e0       	ldi	r31, 0x00	; 0
     ad2:	e2 5c       	subi	r30, 0xC2	; 194
     ad4:	fd 4f       	sbci	r31, 0xFD	; 253
     ad6:	80 83       	st	Z, r24
     ad8:	12 c0       	rjmp	.+36     	; 0xafe <enablePinChangeInterruptHelper+0x68>
     ada:	81 30       	cpi	r24, 0x01	; 1
     adc:	51 f0       	breq	.+20     	; 0xaf2 <enablePinChangeInterruptHelper+0x5c>
     ade:	18 f0       	brcs	.+6      	; 0xae6 <enablePinChangeInterruptHelper+0x50>
     ae0:	82 30       	cpi	r24, 0x02	; 2
     ae2:	91 f4       	brne	.+36     	; 0xb08 <enablePinChangeInterruptHelper+0x72>
     ae4:	0c c0       	rjmp	.+24     	; 0xafe <enablePinChangeInterruptHelper+0x68>
     ae6:	eb e6       	ldi	r30, 0x6B	; 107
     ae8:	f0 e0       	ldi	r31, 0x00	; 0
     aea:	80 81       	ld	r24, Z
     aec:	68 2b       	or	r22, r24
     aee:	60 83       	st	Z, r22
     af0:	0b c0       	rjmp	.+22     	; 0xb08 <enablePinChangeInterruptHelper+0x72>
     af2:	ec e6       	ldi	r30, 0x6C	; 108
     af4:	f0 e0       	ldi	r31, 0x00	; 0
     af6:	80 81       	ld	r24, Z
     af8:	68 2b       	or	r22, r24
     afa:	60 83       	st	Z, r22
     afc:	05 c0       	rjmp	.+10     	; 0xb08 <enablePinChangeInterruptHelper+0x72>
     afe:	ed e6       	ldi	r30, 0x6D	; 109
     b00:	f0 e0       	ldi	r31, 0x00	; 0
     b02:	80 81       	ld	r24, Z
     b04:	68 2b       	or	r22, r24
     b06:	60 83       	st	Z, r22
     b08:	e8 e6       	ldi	r30, 0x68	; 104
     b0a:	f0 e0       	ldi	r31, 0x00	; 0
     b0c:	40 81       	ld	r20, Z
     b0e:	21 e0       	ldi	r18, 0x01	; 1
     b10:	30 e0       	ldi	r19, 0x00	; 0
     b12:	b9 01       	movw	r22, r18
     b14:	02 c0       	rjmp	.+4      	; 0xb1a <enablePinChangeInterruptHelper+0x84>
     b16:	66 0f       	add	r22, r22
     b18:	77 1f       	adc	r23, r23
     b1a:	9a 95       	dec	r25
     b1c:	e2 f7       	brpl	.-8      	; 0xb16 <enablePinChangeInterruptHelper+0x80>
     b1e:	cb 01       	movw	r24, r22
     b20:	84 2b       	or	r24, r20
     b22:	80 83       	st	Z, r24
     b24:	08 95       	ret

00000b26 <attachPinChangeInterrupt>:
     b26:	98 2f       	mov	r25, r24
     b28:	96 95       	lsr	r25
     b2a:	96 95       	lsr	r25
     b2c:	96 95       	lsr	r25
     b2e:	28 2f       	mov	r18, r24
     b30:	27 70       	andi	r18, 0x07	; 7
     b32:	78 94       	sei
     b34:	91 11       	cpse	r25, r1
     b36:	39 c0       	rjmp	.+114    	; 0xbaa <attachPinChangeInterrupt+0x84>
     b38:	81 11       	cpse	r24, r1
     b3a:	05 c0       	rjmp	.+10     	; 0xb46 <attachPinChangeInterrupt+0x20>
     b3c:	70 93 e0 02 	sts	0x02E0, r23	; 0x8002e0 <callbackPCINT0+0x1>
     b40:	60 93 df 02 	sts	0x02DF, r22	; 0x8002df <callbackPCINT0>
     b44:	0e c0       	rjmp	.+28     	; 0xb62 <attachPinChangeInterrupt+0x3c>
     b46:	81 30       	cpi	r24, 0x01	; 1
     b48:	29 f4       	brne	.+10     	; 0xb54 <attachPinChangeInterrupt+0x2e>
     b4a:	70 93 e6 02 	sts	0x02E6, r23	; 0x8002e6 <callbackPCINT1+0x1>
     b4e:	60 93 e5 02 	sts	0x02E5, r22	; 0x8002e5 <callbackPCINT1>
     b52:	0e c0       	rjmp	.+28     	; 0xb70 <attachPinChangeInterrupt+0x4a>
     b54:	82 30       	cpi	r24, 0x02	; 2
     b56:	29 f4       	brne	.+10     	; 0xb62 <attachPinChangeInterrupt+0x3c>
     b58:	70 93 f8 02 	sts	0x02F8, r23	; 0x8002f8 <callbackPCINT2+0x1>
     b5c:	60 93 f7 02 	sts	0x02F7, r22	; 0x8002f7 <callbackPCINT2>
     b60:	0e c0       	rjmp	.+28     	; 0xb7e <attachPinChangeInterrupt+0x58>
     b62:	83 30       	cpi	r24, 0x03	; 3
     b64:	29 f4       	brne	.+10     	; 0xb70 <attachPinChangeInterrupt+0x4a>
     b66:	70 93 0a 03 	sts	0x030A, r23	; 0x80030a <callbackPCINT3+0x1>
     b6a:	60 93 09 03 	sts	0x0309, r22	; 0x800309 <callbackPCINT3>
     b6e:	0e c0       	rjmp	.+28     	; 0xb8c <attachPinChangeInterrupt+0x66>
     b70:	84 30       	cpi	r24, 0x04	; 4
     b72:	29 f4       	brne	.+10     	; 0xb7e <attachPinChangeInterrupt+0x58>
     b74:	70 93 fa 02 	sts	0x02FA, r23	; 0x8002fa <callbackPCINT4+0x1>
     b78:	60 93 f9 02 	sts	0x02F9, r22	; 0x8002f9 <callbackPCINT4>
     b7c:	0e c0       	rjmp	.+28     	; 0xb9a <attachPinChangeInterrupt+0x74>
     b7e:	85 30       	cpi	r24, 0x05	; 5
     b80:	29 f4       	brne	.+10     	; 0xb8c <attachPinChangeInterrupt+0x66>
     b82:	70 93 04 03 	sts	0x0304, r23	; 0x800304 <callbackPCINT5+0x1>
     b86:	60 93 03 03 	sts	0x0303, r22	; 0x800303 <callbackPCINT5>
     b8a:	84 c0       	rjmp	.+264    	; 0xc94 <attachPinChangeInterrupt+0x16e>
     b8c:	86 30       	cpi	r24, 0x06	; 6
     b8e:	29 f4       	brne	.+10     	; 0xb9a <attachPinChangeInterrupt+0x74>
     b90:	70 93 f4 02 	sts	0x02F4, r23	; 0x8002f4 <callbackPCINT6+0x1>
     b94:	60 93 f3 02 	sts	0x02F3, r22	; 0x8002f3 <callbackPCINT6>
     b98:	7d c0       	rjmp	.+250    	; 0xc94 <attachPinChangeInterrupt+0x16e>
     b9a:	87 30       	cpi	r24, 0x07	; 7
     b9c:	09 f0       	breq	.+2      	; 0xba0 <attachPinChangeInterrupt+0x7a>
     b9e:	7a c0       	rjmp	.+244    	; 0xc94 <attachPinChangeInterrupt+0x16e>
     ba0:	70 93 e8 02 	sts	0x02E8, r23	; 0x8002e8 <callbackPCINT7+0x1>
     ba4:	60 93 e7 02 	sts	0x02E7, r22	; 0x8002e7 <callbackPCINT7>
     ba8:	75 c0       	rjmp	.+234    	; 0xc94 <attachPinChangeInterrupt+0x16e>
     baa:	91 30       	cpi	r25, 0x01	; 1
     bac:	c9 f5       	brne	.+114    	; 0xc20 <attachPinChangeInterrupt+0xfa>
     bae:	88 30       	cpi	r24, 0x08	; 8
     bb0:	29 f4       	brne	.+10     	; 0xbbc <attachPinChangeInterrupt+0x96>
     bb2:	70 93 f6 02 	sts	0x02F6, r23	; 0x8002f6 <callbackPCINT8+0x1>
     bb6:	60 93 f5 02 	sts	0x02F5, r22	; 0x8002f5 <callbackPCINT8>
     bba:	0e c0       	rjmp	.+28     	; 0xbd8 <attachPinChangeInterrupt+0xb2>
     bbc:	89 30       	cpi	r24, 0x09	; 9
     bbe:	29 f4       	brne	.+10     	; 0xbca <attachPinChangeInterrupt+0xa4>
     bc0:	70 93 ee 02 	sts	0x02EE, r23	; 0x8002ee <callbackPCINT9+0x1>
     bc4:	60 93 ed 02 	sts	0x02ED, r22	; 0x8002ed <callbackPCINT9>
     bc8:	0e c0       	rjmp	.+28     	; 0xbe6 <attachPinChangeInterrupt+0xc0>
     bca:	8a 30       	cpi	r24, 0x0A	; 10
     bcc:	29 f4       	brne	.+10     	; 0xbd8 <attachPinChangeInterrupt+0xb2>
     bce:	70 93 00 03 	sts	0x0300, r23	; 0x800300 <callbackPCINT10+0x1>
     bd2:	60 93 ff 02 	sts	0x02FF, r22	; 0x8002ff <callbackPCINT10>
     bd6:	0e c0       	rjmp	.+28     	; 0xbf4 <attachPinChangeInterrupt+0xce>
     bd8:	8b 30       	cpi	r24, 0x0B	; 11
     bda:	29 f4       	brne	.+10     	; 0xbe6 <attachPinChangeInterrupt+0xc0>
     bdc:	70 93 f2 02 	sts	0x02F2, r23	; 0x8002f2 <callbackPCINT11+0x1>
     be0:	60 93 f1 02 	sts	0x02F1, r22	; 0x8002f1 <callbackPCINT11>
     be4:	0e c0       	rjmp	.+28     	; 0xc02 <attachPinChangeInterrupt+0xdc>
     be6:	8c 30       	cpi	r24, 0x0C	; 12
     be8:	29 f4       	brne	.+10     	; 0xbf4 <attachPinChangeInterrupt+0xce>
     bea:	70 93 0c 03 	sts	0x030C, r23	; 0x80030c <callbackPCINT12+0x1>
     bee:	60 93 0b 03 	sts	0x030B, r22	; 0x80030b <callbackPCINT12>
     bf2:	0e c0       	rjmp	.+28     	; 0xc10 <attachPinChangeInterrupt+0xea>
     bf4:	8d 30       	cpi	r24, 0x0D	; 13
     bf6:	29 f4       	brne	.+10     	; 0xc02 <attachPinChangeInterrupt+0xdc>
     bf8:	70 93 fe 02 	sts	0x02FE, r23	; 0x8002fe <callbackPCINT13+0x1>
     bfc:	60 93 fd 02 	sts	0x02FD, r22	; 0x8002fd <callbackPCINT13>
     c00:	49 c0       	rjmp	.+146    	; 0xc94 <attachPinChangeInterrupt+0x16e>
     c02:	8e 30       	cpi	r24, 0x0E	; 14
     c04:	29 f4       	brne	.+10     	; 0xc10 <attachPinChangeInterrupt+0xea>
     c06:	70 93 fc 02 	sts	0x02FC, r23	; 0x8002fc <callbackPCINT14+0x1>
     c0a:	60 93 fb 02 	sts	0x02FB, r22	; 0x8002fb <callbackPCINT14>
     c0e:	42 c0       	rjmp	.+132    	; 0xc94 <attachPinChangeInterrupt+0x16e>
     c10:	8f 30       	cpi	r24, 0x0F	; 15
     c12:	09 f0       	breq	.+2      	; 0xc16 <attachPinChangeInterrupt+0xf0>
     c14:	3f c0       	rjmp	.+126    	; 0xc94 <attachPinChangeInterrupt+0x16e>
     c16:	70 93 08 03 	sts	0x0308, r23	; 0x800308 <callbackPCINT15+0x1>
     c1a:	60 93 07 03 	sts	0x0307, r22	; 0x800307 <callbackPCINT15>
     c1e:	3a c0       	rjmp	.+116    	; 0xc94 <attachPinChangeInterrupt+0x16e>
     c20:	92 30       	cpi	r25, 0x02	; 2
     c22:	09 f0       	breq	.+2      	; 0xc26 <attachPinChangeInterrupt+0x100>
     c24:	56 c0       	rjmp	.+172    	; 0xcd2 <attachPinChangeInterrupt+0x1ac>
     c26:	80 31       	cpi	r24, 0x10	; 16
     c28:	29 f4       	brne	.+10     	; 0xc34 <attachPinChangeInterrupt+0x10e>
     c2a:	70 93 ea 02 	sts	0x02EA, r23	; 0x8002ea <callbackPCINT16+0x1>
     c2e:	60 93 e9 02 	sts	0x02E9, r22	; 0x8002e9 <callbackPCINT16>
     c32:	0e c0       	rjmp	.+28     	; 0xc50 <attachPinChangeInterrupt+0x12a>
     c34:	81 31       	cpi	r24, 0x11	; 17
     c36:	29 f4       	brne	.+10     	; 0xc42 <attachPinChangeInterrupt+0x11c>
     c38:	70 93 02 03 	sts	0x0302, r23	; 0x800302 <callbackPCINT17+0x1>
     c3c:	60 93 01 03 	sts	0x0301, r22	; 0x800301 <callbackPCINT17>
     c40:	0e c0       	rjmp	.+28     	; 0xc5e <attachPinChangeInterrupt+0x138>
     c42:	82 31       	cpi	r24, 0x12	; 18
     c44:	29 f4       	brne	.+10     	; 0xc50 <attachPinChangeInterrupt+0x12a>
     c46:	70 93 e2 02 	sts	0x02E2, r23	; 0x8002e2 <callbackPCINT18+0x1>
     c4a:	60 93 e1 02 	sts	0x02E1, r22	; 0x8002e1 <callbackPCINT18>
     c4e:	0e c0       	rjmp	.+28     	; 0xc6c <attachPinChangeInterrupt+0x146>
     c50:	83 31       	cpi	r24, 0x13	; 19
     c52:	29 f4       	brne	.+10     	; 0xc5e <attachPinChangeInterrupt+0x138>
     c54:	70 93 ec 02 	sts	0x02EC, r23	; 0x8002ec <callbackPCINT19+0x1>
     c58:	60 93 eb 02 	sts	0x02EB, r22	; 0x8002eb <callbackPCINT19>
     c5c:	0e c0       	rjmp	.+28     	; 0xc7a <attachPinChangeInterrupt+0x154>
     c5e:	84 31       	cpi	r24, 0x14	; 20
     c60:	29 f4       	brne	.+10     	; 0xc6c <attachPinChangeInterrupt+0x146>
     c62:	70 93 0e 03 	sts	0x030E, r23	; 0x80030e <callbackPCINT20+0x1>
     c66:	60 93 0d 03 	sts	0x030D, r22	; 0x80030d <callbackPCINT20>
     c6a:	0e c0       	rjmp	.+28     	; 0xc88 <attachPinChangeInterrupt+0x162>
     c6c:	85 31       	cpi	r24, 0x15	; 21
     c6e:	29 f4       	brne	.+10     	; 0xc7a <attachPinChangeInterrupt+0x154>
     c70:	70 93 e4 02 	sts	0x02E4, r23	; 0x8002e4 <callbackPCINT21+0x1>
     c74:	60 93 e3 02 	sts	0x02E3, r22	; 0x8002e3 <callbackPCINT21>
     c78:	0d c0       	rjmp	.+26     	; 0xc94 <attachPinChangeInterrupt+0x16e>
     c7a:	86 31       	cpi	r24, 0x16	; 22
     c7c:	29 f4       	brne	.+10     	; 0xc88 <attachPinChangeInterrupt+0x162>
     c7e:	70 93 06 03 	sts	0x0306, r23	; 0x800306 <callbackPCINT22+0x1>
     c82:	60 93 05 03 	sts	0x0305, r22	; 0x800305 <callbackPCINT22>
     c86:	06 c0       	rjmp	.+12     	; 0xc94 <attachPinChangeInterrupt+0x16e>
     c88:	87 31       	cpi	r24, 0x17	; 23
     c8a:	21 f4       	brne	.+8      	; 0xc94 <attachPinChangeInterrupt+0x16e>
     c8c:	70 93 f0 02 	sts	0x02F0, r23	; 0x8002f0 <callbackPCINT23+0x1>
     c90:	60 93 ef 02 	sts	0x02EF, r22	; 0x8002ef <callbackPCINT23>
     c94:	61 e0       	ldi	r22, 0x01	; 1
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	02 c0       	rjmp	.+4      	; 0xc9e <attachPinChangeInterrupt+0x178>
     c9a:	66 0f       	add	r22, r22
     c9c:	77 1f       	adc	r23, r23
     c9e:	2a 95       	dec	r18
     ca0:	e2 f7       	brpl	.-8      	; 0xc9a <attachPinChangeInterrupt+0x174>
     ca2:	84 2f       	mov	r24, r20
     ca4:	8d 7f       	andi	r24, 0xFD	; 253
     ca6:	81 30       	cpi	r24, 0x01	; 1
     ca8:	39 f4       	brne	.+14     	; 0xcb8 <attachPinChangeInterrupt+0x192>
     caa:	e9 2f       	mov	r30, r25
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	e8 5c       	subi	r30, 0xC8	; 200
     cb0:	fd 4f       	sbci	r31, 0xFD	; 253
     cb2:	80 81       	ld	r24, Z
     cb4:	86 2b       	or	r24, r22
     cb6:	80 83       	st	Z, r24
     cb8:	41 50       	subi	r20, 0x01	; 1
     cba:	42 30       	cpi	r20, 0x02	; 2
     cbc:	38 f4       	brcc	.+14     	; 0xccc <attachPinChangeInterrupt+0x1a6>
     cbe:	e9 2f       	mov	r30, r25
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	e5 5c       	subi	r30, 0xC5	; 197
     cc4:	fd 4f       	sbci	r31, 0xFD	; 253
     cc6:	80 81       	ld	r24, Z
     cc8:	86 2b       	or	r24, r22
     cca:	80 83       	st	Z, r24
     ccc:	49 2f       	mov	r20, r25
     cce:	89 2f       	mov	r24, r25
     cd0:	e2 ce       	rjmp	.-572    	; 0xa96 <enablePinChangeInterruptHelper>
     cd2:	08 95       	ret

00000cd4 <PinChangeInterruptEventPCINT0>:

//============callbacks==============

#if (PCINT_USE_PCINT0 == true)
void PinChangeInterruptEventPCINT0(void) {
	callbackPCINT0();
     cd4:	e0 91 df 02 	lds	r30, 0x02DF	; 0x8002df <callbackPCINT0>
     cd8:	f0 91 e0 02 	lds	r31, 0x02E0	; 0x8002e0 <callbackPCINT0+0x1>
     cdc:	19 95       	eicall
     cde:	08 95       	ret

00000ce0 <PinChangeInterruptEventPCINT1>:
}
#endif
#if (PCINT_USE_PCINT1 == true)
void PinChangeInterruptEventPCINT1(void) {
	callbackPCINT1();
     ce0:	e0 91 e5 02 	lds	r30, 0x02E5	; 0x8002e5 <callbackPCINT1>
     ce4:	f0 91 e6 02 	lds	r31, 0x02E6	; 0x8002e6 <callbackPCINT1+0x1>
     ce8:	19 95       	eicall
     cea:	08 95       	ret

00000cec <PinChangeInterruptEventPCINT2>:
}
#endif
#if (PCINT_USE_PCINT2 == true)
void PinChangeInterruptEventPCINT2(void) {
	callbackPCINT2();
     cec:	e0 91 f7 02 	lds	r30, 0x02F7	; 0x8002f7 <callbackPCINT2>
     cf0:	f0 91 f8 02 	lds	r31, 0x02F8	; 0x8002f8 <callbackPCINT2+0x1>
     cf4:	19 95       	eicall
     cf6:	08 95       	ret

00000cf8 <PinChangeInterruptEventPCINT3>:
}
#endif
#if (PCINT_USE_PCINT3 == true)
void PinChangeInterruptEventPCINT3(void) {
	callbackPCINT3();
     cf8:	e0 91 09 03 	lds	r30, 0x0309	; 0x800309 <callbackPCINT3>
     cfc:	f0 91 0a 03 	lds	r31, 0x030A	; 0x80030a <callbackPCINT3+0x1>
     d00:	19 95       	eicall
     d02:	08 95       	ret

00000d04 <PinChangeInterruptEventPCINT4>:
}
#endif
#if (PCINT_USE_PCINT4 == true)
void PinChangeInterruptEventPCINT4(void) {
	callbackPCINT4();
     d04:	e0 91 f9 02 	lds	r30, 0x02F9	; 0x8002f9 <callbackPCINT4>
     d08:	f0 91 fa 02 	lds	r31, 0x02FA	; 0x8002fa <callbackPCINT4+0x1>
     d0c:	19 95       	eicall
     d0e:	08 95       	ret

00000d10 <PinChangeInterruptEventPCINT5>:
}
#endif
#if (PCINT_USE_PCINT5 == true)
void PinChangeInterruptEventPCINT5(void) {
	callbackPCINT5();
     d10:	e0 91 03 03 	lds	r30, 0x0303	; 0x800303 <callbackPCINT5>
     d14:	f0 91 04 03 	lds	r31, 0x0304	; 0x800304 <callbackPCINT5+0x1>
     d18:	19 95       	eicall
     d1a:	08 95       	ret

00000d1c <PinChangeInterruptEventPCINT6>:
}
#endif
#if (PCINT_USE_PCINT6 == true)
void PinChangeInterruptEventPCINT6(void) {
	callbackPCINT6();
     d1c:	e0 91 f3 02 	lds	r30, 0x02F3	; 0x8002f3 <callbackPCINT6>
     d20:	f0 91 f4 02 	lds	r31, 0x02F4	; 0x8002f4 <callbackPCINT6+0x1>
     d24:	19 95       	eicall
     d26:	08 95       	ret

00000d28 <PinChangeInterruptEventPCINT7>:
}
#endif
#if (PCINT_USE_PCINT7 == true)
void PinChangeInterruptEventPCINT7(void) {
	callbackPCINT7();
     d28:	e0 91 e7 02 	lds	r30, 0x02E7	; 0x8002e7 <callbackPCINT7>
     d2c:	f0 91 e8 02 	lds	r31, 0x02E8	; 0x8002e8 <callbackPCINT7+0x1>
     d30:	19 95       	eicall
     d32:	08 95       	ret

00000d34 <__vector_9>:
// Interrupt Handler
//================================================================================
//============= PORT0 ===================================
#if (PCINT_USE_PORT0 == true)

ISR (PCINT0_vect){
     d34:	1f 92       	push	r1
     d36:	0f 92       	push	r0
     d38:	0f b6       	in	r0, 0x3f	; 63
     d3a:	0f 92       	push	r0
     d3c:	11 24       	eor	r1, r1
     d3e:	0b b6       	in	r0, 0x3b	; 59
     d40:	0f 92       	push	r0
     d42:	2f 93       	push	r18
     d44:	3f 93       	push	r19
     d46:	4f 93       	push	r20
     d48:	5f 93       	push	r21
     d4a:	6f 93       	push	r22
     d4c:	7f 93       	push	r23
     d4e:	8f 93       	push	r24
     d50:	9f 93       	push	r25
     d52:	af 93       	push	r26
     d54:	bf 93       	push	r27
     d56:	cf 93       	push	r28
     d58:	ef 93       	push	r30
     d5a:	ff 93       	push	r31
	// get the new and old pin states for port
	uint8_t newPort = PCINT_INPUT_PORT0;
     d5c:	23 b1       	in	r18, 0x03	; 3
	
	// compare with the old value to detect a rising or falling
	uint8_t arrayPos = getArrayPosPCINT(0);
	uint8_t change = newPort ^ oldPorts[arrayPos]; //XOR detects change
     d5e:	ee e3       	ldi	r30, 0x3E	; 62
     d60:	f2 e0       	ldi	r31, 0x02	; 2
     d62:	c0 81       	ld	r28, Z
     d64:	82 2f       	mov	r24, r18
     d66:	8c 27       	eor	r24, r28
	uint8_t falling = change & oldPorts[arrayPos];
	
	// check which pins are triggered, compared with the settings
	uint8_t risingTrigger = rising & risingPorts[arrayPos];
	uint8_t fallingTrigger = falling & fallingPorts[arrayPos];
	uint8_t trigger = risingTrigger | fallingTrigger;
     d68:	90 91 38 02 	lds	r25, 0x0238	; 0x800238 <__data_end>
     d6c:	92 23       	and	r25, r18
     d6e:	30 91 3b 02 	lds	r19, 0x023B	; 0x80023b <fallingPorts>
     d72:	c3 23       	and	r28, r19
     d74:	c9 2b       	or	r28, r25
     d76:	c8 23       	and	r28, r24
	
	// save the new state for next comparison
	oldPorts[arrayPos] = newPort;
     d78:	20 83       	st	Z, r18
	PCINT_CALLBACK(4, 4);
	PCINT_CALLBACK(5, 5);
	PCINT_CALLBACK(6, 6);
	PCINT_CALLBACK(7, 7);
#else
	PCINT_CALLBACK_PORT0
     d7a:	c4 fd       	sbrc	r28, 4
     d7c:	c3 df       	rcall	.-122    	; 0xd04 <PinChangeInterruptEventPCINT4>
     d7e:	c5 fd       	sbrc	r28, 5
     d80:	c7 df       	rcall	.-114    	; 0xd10 <PinChangeInterruptEventPCINT5>
     d82:	c6 fd       	sbrc	r28, 6
     d84:	cb df       	rcall	.-106    	; 0xd1c <PinChangeInterruptEventPCINT6>
     d86:	cc 23       	and	r28, r28
     d88:	0c f4       	brge	.+2      	; 0xd8c <__vector_9+0x58>
     d8a:	ce df       	rcall	.-100    	; 0xd28 <PinChangeInterruptEventPCINT7>
     d8c:	c0 fd       	sbrc	r28, 0
     d8e:	a2 df       	rcall	.-188    	; 0xcd4 <PinChangeInterruptEventPCINT0>
     d90:	c1 fd       	sbrc	r28, 1
     d92:	a6 df       	rcall	.-180    	; 0xce0 <PinChangeInterruptEventPCINT1>
     d94:	c2 fd       	sbrc	r28, 2
     d96:	aa df       	rcall	.-172    	; 0xcec <PinChangeInterruptEventPCINT2>
     d98:	c3 fd       	sbrc	r28, 3
     d9a:	ae df       	rcall	.-164    	; 0xcf8 <PinChangeInterruptEventPCINT3>
#endif
	
}
     d9c:	ff 91       	pop	r31
     d9e:	ef 91       	pop	r30
     da0:	cf 91       	pop	r28
     da2:	bf 91       	pop	r27
     da4:	af 91       	pop	r26
     da6:	9f 91       	pop	r25
     da8:	8f 91       	pop	r24
     daa:	7f 91       	pop	r23
     dac:	6f 91       	pop	r22
     dae:	5f 91       	pop	r21
     db0:	4f 91       	pop	r20
     db2:	3f 91       	pop	r19
     db4:	2f 91       	pop	r18
     db6:	0f 90       	pop	r0
     db8:	0b be       	out	0x3b, r0	; 59
     dba:	0f 90       	pop	r0
     dbc:	0f be       	out	0x3f, r0	; 63
     dbe:	0f 90       	pop	r0
     dc0:	1f 90       	pop	r1
     dc2:	18 95       	reti

00000dc4 <PinChangeInterruptEventPCINT8>:
}
#endif

#if (PCINT_USE_PCINT8 == true)
void PinChangeInterruptEventPCINT8(void) {
	callbackPCINT8();
     dc4:	e0 91 f5 02 	lds	r30, 0x02F5	; 0x8002f5 <callbackPCINT8>
     dc8:	f0 91 f6 02 	lds	r31, 0x02F6	; 0x8002f6 <callbackPCINT8+0x1>
     dcc:	19 95       	eicall
     dce:	08 95       	ret

00000dd0 <PinChangeInterruptEventPCINT9>:
}
#endif
#if (PCINT_USE_PCINT9 == true)
void PinChangeInterruptEventPCINT9(void) {
	callbackPCINT9();
     dd0:	e0 91 ed 02 	lds	r30, 0x02ED	; 0x8002ed <callbackPCINT9>
     dd4:	f0 91 ee 02 	lds	r31, 0x02EE	; 0x8002ee <callbackPCINT9+0x1>
     dd8:	19 95       	eicall
     dda:	08 95       	ret

00000ddc <PinChangeInterruptEventPCINT10>:
}
#endif
#if (PCINT_USE_PCINT10 == true)
void PinChangeInterruptEventPCINT10(void) {
	callbackPCINT10();
     ddc:	e0 91 ff 02 	lds	r30, 0x02FF	; 0x8002ff <callbackPCINT10>
     de0:	f0 91 00 03 	lds	r31, 0x0300	; 0x800300 <callbackPCINT10+0x1>
     de4:	19 95       	eicall
     de6:	08 95       	ret

00000de8 <PinChangeInterruptEventPCINT11>:
}
#endif
#if (PCINT_USE_PCINT11 == true)
void PinChangeInterruptEventPCINT11(void) {
	callbackPCINT11();
     de8:	e0 91 f1 02 	lds	r30, 0x02F1	; 0x8002f1 <callbackPCINT11>
     dec:	f0 91 f2 02 	lds	r31, 0x02F2	; 0x8002f2 <callbackPCINT11+0x1>
     df0:	19 95       	eicall
     df2:	08 95       	ret

00000df4 <PinChangeInterruptEventPCINT12>:
}
#endif
#if (PCINT_USE_PCINT12 == true)
void PinChangeInterruptEventPCINT12(void) {
	callbackPCINT12();
     df4:	e0 91 0b 03 	lds	r30, 0x030B	; 0x80030b <callbackPCINT12>
     df8:	f0 91 0c 03 	lds	r31, 0x030C	; 0x80030c <callbackPCINT12+0x1>
     dfc:	19 95       	eicall
     dfe:	08 95       	ret

00000e00 <PinChangeInterruptEventPCINT13>:
}
#endif
#if (PCINT_USE_PCINT13 == true)
void PinChangeInterruptEventPCINT13(void) {
	callbackPCINT13();
     e00:	e0 91 fd 02 	lds	r30, 0x02FD	; 0x8002fd <callbackPCINT13>
     e04:	f0 91 fe 02 	lds	r31, 0x02FE	; 0x8002fe <callbackPCINT13+0x1>
     e08:	19 95       	eicall
     e0a:	08 95       	ret

00000e0c <PinChangeInterruptEventPCINT14>:
}
#endif
#if (PCINT_USE_PCINT14 == true)
void PinChangeInterruptEventPCINT14(void) {
	callbackPCINT14();
     e0c:	e0 91 fb 02 	lds	r30, 0x02FB	; 0x8002fb <callbackPCINT14>
     e10:	f0 91 fc 02 	lds	r31, 0x02FC	; 0x8002fc <callbackPCINT14+0x1>
     e14:	19 95       	eicall
     e16:	08 95       	ret

00000e18 <PinChangeInterruptEventPCINT15>:
}
#endif
#if (PCINT_USE_PCINT15 == true)
void PinChangeInterruptEventPCINT15(void) {
	callbackPCINT15();
     e18:	e0 91 07 03 	lds	r30, 0x0307	; 0x800307 <callbackPCINT15>
     e1c:	f0 91 08 03 	lds	r31, 0x0308	; 0x800308 <callbackPCINT15+0x1>
     e20:	19 95       	eicall
     e22:	08 95       	ret

00000e24 <__vector_10>:
	
}

//============= PORT1 ===================================
#if (PCINT_USE_PORT1)
ISR(PCINT1_vect) {
     e24:	1f 92       	push	r1
     e26:	0f 92       	push	r0
     e28:	0f b6       	in	r0, 0x3f	; 63
     e2a:	0f 92       	push	r0
     e2c:	11 24       	eor	r1, r1
     e2e:	0b b6       	in	r0, 0x3b	; 59
     e30:	0f 92       	push	r0
     e32:	2f 93       	push	r18
     e34:	3f 93       	push	r19
     e36:	4f 93       	push	r20
     e38:	5f 93       	push	r21
     e3a:	6f 93       	push	r22
     e3c:	7f 93       	push	r23
     e3e:	8f 93       	push	r24
     e40:	9f 93       	push	r25
     e42:	af 93       	push	r26
     e44:	bf 93       	push	r27
     e46:	cf 93       	push	r28
     e48:	ef 93       	push	r30
     e4a:	ff 93       	push	r31
	// get the new and old pin states for port
	uint8_t newPort = PCINT_INPUT_PORT1;
     e4c:	8c b1       	in	r24, 0x0c	; 12
     e4e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
     e52:	81 70       	andi	r24, 0x01	; 1
     e54:	99 0f       	add	r25, r25
     e56:	98 2b       	or	r25, r24

	// compare with the old value to detect a rising or falling
	uint8_t arrayPos = getArrayPosPCINT(1);
	uint8_t change = newPort ^ oldPorts[arrayPos];
     e58:	ee e3       	ldi	r30, 0x3E	; 62
     e5a:	f2 e0       	ldi	r31, 0x02	; 2
     e5c:	c1 81       	ldd	r28, Z+1	; 0x01
     e5e:	89 2f       	mov	r24, r25
     e60:	8c 27       	eor	r24, r28
	uint8_t falling = change & oldPorts[arrayPos];

	// check which pins are triggered, compared with the settings
	uint8_t risingTrigger = rising & risingPorts[arrayPos];
	uint8_t fallingTrigger = falling & fallingPorts[arrayPos];
	uint8_t trigger = risingTrigger | fallingTrigger;
     e62:	20 91 39 02 	lds	r18, 0x0239	; 0x800239 <__data_end+0x1>
     e66:	29 23       	and	r18, r25
     e68:	30 91 3c 02 	lds	r19, 0x023C	; 0x80023c <fallingPorts+0x1>
     e6c:	c3 23       	and	r28, r19
     e6e:	c2 2b       	or	r28, r18
     e70:	c8 23       	and	r28, r24

	// save the new state for next comparison
	oldPorts[arrayPos] = newPort;
     e72:	91 83       	std	Z+1, r25	; 0x01
	// Execute all functions that should be triggered
	// This way we can exclude a single function
	// and the calling is also much faster
	// We may also reorder the pins for different priority
	#if !defined(PCINT_CALLBACK_PORT1)
	PCINT_CALLBACK(0, 8);
     e74:	c0 fd       	sbrc	r28, 0
     e76:	a6 df       	rcall	.-180    	; 0xdc4 <PinChangeInterruptEventPCINT8>
	PCINT_CALLBACK(1, 9);
     e78:	c1 fd       	sbrc	r28, 1
	PCINT_CALLBACK(2, 10);
     e7a:	aa df       	rcall	.-172    	; 0xdd0 <PinChangeInterruptEventPCINT9>
     e7c:	c2 fd       	sbrc	r28, 2
	PCINT_CALLBACK(3, 11);
     e7e:	ae df       	rcall	.-164    	; 0xddc <PinChangeInterruptEventPCINT10>
	PCINT_CALLBACK(4, 12);
     e80:	c3 fd       	sbrc	r28, 3
     e82:	b2 df       	rcall	.-156    	; 0xde8 <PinChangeInterruptEventPCINT11>
	PCINT_CALLBACK(5, 13);
     e84:	c4 fd       	sbrc	r28, 4
     e86:	b6 df       	rcall	.-148    	; 0xdf4 <PinChangeInterruptEventPCINT12>
	PCINT_CALLBACK(6, 14);
     e88:	c5 fd       	sbrc	r28, 5
     e8a:	ba df       	rcall	.-140    	; 0xe00 <PinChangeInterruptEventPCINT13>
     e8c:	c6 fd       	sbrc	r28, 6
	PCINT_CALLBACK(7, 15);
     e8e:	be df       	rcall	.-132    	; 0xe0c <PinChangeInterruptEventPCINT14>
     e90:	cc 23       	and	r28, r28
     e92:	0c f4       	brge	.+2      	; 0xe96 <__vector_10+0x72>
     e94:	c1 df       	rcall	.-126    	; 0xe18 <PinChangeInterruptEventPCINT15>
	#else
	PCINT_CALLBACK_PORT1
	#endif
}
     e96:	ff 91       	pop	r31
     e98:	ef 91       	pop	r30
     e9a:	cf 91       	pop	r28
     e9c:	bf 91       	pop	r27
     e9e:	af 91       	pop	r26
     ea0:	9f 91       	pop	r25
     ea2:	8f 91       	pop	r24
     ea4:	7f 91       	pop	r23
     ea6:	6f 91       	pop	r22
     ea8:	5f 91       	pop	r21
     eaa:	4f 91       	pop	r20
     eac:	3f 91       	pop	r19
     eae:	2f 91       	pop	r18
     eb0:	0f 90       	pop	r0
     eb2:	0b be       	out	0x3b, r0	; 59
     eb4:	0f 90       	pop	r0
     eb6:	0f be       	out	0x3f, r0	; 63
     eb8:	0f 90       	pop	r0
     eba:	1f 90       	pop	r1
     ebc:	18 95       	reti

00000ebe <PinChangeInterruptEventPCINT16>:
}
#endif

#if (PCINT_USE_PCINT16 == true)
void PinChangeInterruptEventPCINT16(void) {
	callbackPCINT16();
     ebe:	e0 91 e9 02 	lds	r30, 0x02E9	; 0x8002e9 <callbackPCINT16>
     ec2:	f0 91 ea 02 	lds	r31, 0x02EA	; 0x8002ea <callbackPCINT16+0x1>
     ec6:	19 95       	eicall
     ec8:	08 95       	ret

00000eca <PinChangeInterruptEventPCINT17>:
}
#endif
#if (PCINT_USE_PCINT17 == true)
void PinChangeInterruptEventPCINT17(void) {
	callbackPCINT17();
     eca:	e0 91 01 03 	lds	r30, 0x0301	; 0x800301 <callbackPCINT17>
     ece:	f0 91 02 03 	lds	r31, 0x0302	; 0x800302 <callbackPCINT17+0x1>
     ed2:	19 95       	eicall
     ed4:	08 95       	ret

00000ed6 <PinChangeInterruptEventPCINT18>:
}
#endif
#if (PCINT_USE_PCINT18 == true)
void PinChangeInterruptEventPCINT18(void) {
	callbackPCINT18();
     ed6:	e0 91 e1 02 	lds	r30, 0x02E1	; 0x8002e1 <callbackPCINT18>
     eda:	f0 91 e2 02 	lds	r31, 0x02E2	; 0x8002e2 <callbackPCINT18+0x1>
     ede:	19 95       	eicall
     ee0:	08 95       	ret

00000ee2 <PinChangeInterruptEventPCINT19>:
}
#endif
#if (PCINT_USE_PCINT19 == true)
void PinChangeInterruptEventPCINT19(void) {
	callbackPCINT19();
     ee2:	e0 91 eb 02 	lds	r30, 0x02EB	; 0x8002eb <callbackPCINT19>
     ee6:	f0 91 ec 02 	lds	r31, 0x02EC	; 0x8002ec <callbackPCINT19+0x1>
     eea:	19 95       	eicall
     eec:	08 95       	ret

00000eee <PinChangeInterruptEventPCINT20>:
}
#endif
#if (PCINT_USE_PCINT20 == true)
void PinChangeInterruptEventPCINT20(void) {
	callbackPCINT20();
     eee:	e0 91 0d 03 	lds	r30, 0x030D	; 0x80030d <callbackPCINT20>
     ef2:	f0 91 0e 03 	lds	r31, 0x030E	; 0x80030e <callbackPCINT20+0x1>
     ef6:	19 95       	eicall
     ef8:	08 95       	ret

00000efa <PinChangeInterruptEventPCINT21>:
}
#endif
#if (PCINT_USE_PCINT21 == true)
void PinChangeInterruptEventPCINT21(void) {
	callbackPCINT21();
     efa:	e0 91 e3 02 	lds	r30, 0x02E3	; 0x8002e3 <callbackPCINT21>
     efe:	f0 91 e4 02 	lds	r31, 0x02E4	; 0x8002e4 <callbackPCINT21+0x1>
     f02:	19 95       	eicall
     f04:	08 95       	ret

00000f06 <PinChangeInterruptEventPCINT22>:
}
#endif
#if (PCINT_USE_PCINT22 == true)
void PinChangeInterruptEventPCINT22(void) {
	callbackPCINT22();
     f06:	e0 91 05 03 	lds	r30, 0x0305	; 0x800305 <callbackPCINT22>
     f0a:	f0 91 06 03 	lds	r31, 0x0306	; 0x800306 <callbackPCINT22+0x1>
     f0e:	19 95       	eicall
     f10:	08 95       	ret

00000f12 <PinChangeInterruptEventPCINT23>:
}
#endif
#if (PCINT_USE_PCINT23 == true)
void PinChangeInterruptEventPCINT23(void) {
	callbackPCINT23();
     f12:	e0 91 ef 02 	lds	r30, 0x02EF	; 0x8002ef <callbackPCINT23>
     f16:	f0 91 f0 02 	lds	r31, 0x02F0	; 0x8002f0 <callbackPCINT23+0x1>
     f1a:	19 95       	eicall
     f1c:	08 95       	ret

00000f1e <__vector_11>:
	#endif
}
#endif
//============= PORT2 ===================================
#if (PCINT_USE_PORT2)
ISR(PCINT2_vect) {
     f1e:	1f 92       	push	r1
     f20:	0f 92       	push	r0
     f22:	0f b6       	in	r0, 0x3f	; 63
     f24:	0f 92       	push	r0
     f26:	11 24       	eor	r1, r1
     f28:	0b b6       	in	r0, 0x3b	; 59
     f2a:	0f 92       	push	r0
     f2c:	2f 93       	push	r18
     f2e:	3f 93       	push	r19
     f30:	4f 93       	push	r20
     f32:	5f 93       	push	r21
     f34:	6f 93       	push	r22
     f36:	7f 93       	push	r23
     f38:	8f 93       	push	r24
     f3a:	9f 93       	push	r25
     f3c:	af 93       	push	r26
     f3e:	bf 93       	push	r27
     f40:	cf 93       	push	r28
     f42:	ef 93       	push	r30
     f44:	ff 93       	push	r31
	// get the new and old pin states for port
	uint8_t newPort = PCINT_INPUT_PORT2;
     f46:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>

	// compare with the old value to detect a rising or falling
	uint8_t arrayPos = getArrayPosPCINT(2);
	uint8_t change = newPort ^ oldPorts[arrayPos];
     f4a:	ee e3       	ldi	r30, 0x3E	; 62
     f4c:	f2 e0       	ldi	r31, 0x02	; 2
     f4e:	c2 81       	ldd	r28, Z+2	; 0x02
     f50:	82 2f       	mov	r24, r18
     f52:	8c 27       	eor	r24, r28
	uint8_t falling = change & oldPorts[arrayPos];

	// check which pins are triggered, compared with the settings
	uint8_t risingTrigger = rising & risingPorts[arrayPos];
	uint8_t fallingTrigger = falling & fallingPorts[arrayPos];
	uint8_t trigger = risingTrigger | fallingTrigger;
     f54:	90 91 3a 02 	lds	r25, 0x023A	; 0x80023a <__data_end+0x2>
     f58:	92 23       	and	r25, r18
     f5a:	30 91 3d 02 	lds	r19, 0x023D	; 0x80023d <fallingPorts+0x2>
     f5e:	c3 23       	and	r28, r19
     f60:	c9 2b       	or	r28, r25
     f62:	c8 23       	and	r28, r24

	// save the new state for next comparison
	oldPorts[arrayPos] = newPort;
     f64:	22 83       	std	Z+2, r18	; 0x02
	// Execute all functions that should be triggered
	// This way we can exclude a single function
	// and the calling is also much faster
	// We may also reorder the pins for different priority
	#if !defined(PCINT_CALLBACK_PORT2)
	PCINT_CALLBACK(0, 16);
     f66:	c0 fd       	sbrc	r28, 0
     f68:	aa df       	rcall	.-172    	; 0xebe <PinChangeInterruptEventPCINT16>
	PCINT_CALLBACK(1, 17);
     f6a:	c1 fd       	sbrc	r28, 1
	PCINT_CALLBACK(2, 18);
     f6c:	ae df       	rcall	.-164    	; 0xeca <PinChangeInterruptEventPCINT17>
     f6e:	c2 fd       	sbrc	r28, 2
	PCINT_CALLBACK(3, 19);
     f70:	b2 df       	rcall	.-156    	; 0xed6 <PinChangeInterruptEventPCINT18>
	PCINT_CALLBACK(4, 20);
     f72:	c3 fd       	sbrc	r28, 3
     f74:	b6 df       	rcall	.-148    	; 0xee2 <PinChangeInterruptEventPCINT19>
	PCINT_CALLBACK(5, 21);
     f76:	c4 fd       	sbrc	r28, 4
     f78:	ba df       	rcall	.-140    	; 0xeee <PinChangeInterruptEventPCINT20>
	PCINT_CALLBACK(6, 22);
     f7a:	c5 fd       	sbrc	r28, 5
     f7c:	be df       	rcall	.-132    	; 0xefa <PinChangeInterruptEventPCINT21>
     f7e:	c6 fd       	sbrc	r28, 6
	PCINT_CALLBACK(7, 23);
     f80:	c2 df       	rcall	.-124    	; 0xf06 <PinChangeInterruptEventPCINT22>
     f82:	cc 23       	and	r28, r28
     f84:	0c f4       	brge	.+2      	; 0xf88 <__vector_11+0x6a>
     f86:	c5 df       	rcall	.-118    	; 0xf12 <PinChangeInterruptEventPCINT23>
	#else
	PCINT_CALLBACK_PORT2
	#endif
}
     f88:	ff 91       	pop	r31
     f8a:	ef 91       	pop	r30
     f8c:	cf 91       	pop	r28
     f8e:	bf 91       	pop	r27
     f90:	af 91       	pop	r26
     f92:	9f 91       	pop	r25
     f94:	8f 91       	pop	r24
     f96:	7f 91       	pop	r23
     f98:	6f 91       	pop	r22
     f9a:	5f 91       	pop	r21
     f9c:	4f 91       	pop	r20
     f9e:	3f 91       	pop	r19
     fa0:	2f 91       	pop	r18
     fa2:	0f 90       	pop	r0
     fa4:	0b be       	out	0x3b, r0	; 59
     fa6:	0f 90       	pop	r0
     fa8:	0f be       	out	0x3f, r0	; 63
     faa:	0f 90       	pop	r0
     fac:	1f 90       	pop	r1
     fae:	18 95       	reti

00000fb0 <pwm_init>:
*/

void pwm_init(void)
{
	// Configure Timer1
	TCCR1B = 0;
     fb0:	e1 e8       	ldi	r30, 0x81	; 129
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	10 82       	st	Z, r1
	bitSet(TCCR1B, CS11); 
     fb6:	80 81       	ld	r24, Z
     fb8:	82 60       	ori	r24, 0x02	; 2
     fba:	80 83       	st	Z, r24
	bitSet(TCCR1B, CS10);	// set clk/64 prescaler
     fbc:	80 81       	ld	r24, Z
     fbe:	81 60       	ori	r24, 0x01	; 1
     fc0:	80 83       	st	Z, r24
	bitSet(TCCR1A, WGM10);	// PWM, Phase Correct, 8-bit
     fc2:	e0 e8       	ldi	r30, 0x80	; 128
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 81       	ld	r24, Z
     fc8:	81 60       	ori	r24, 0x01	; 1
     fca:	80 83       	st	Z, r24
	
	// Configure Timer2
	bitSet(TCCR2B, CS22);	// clk/64 prescaler
     fcc:	e1 eb       	ldi	r30, 0xB1	; 177
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	84 60       	ori	r24, 0x04	; 4
     fd4:	80 83       	st	Z, r24
	bitSet(TCCR2A, WGM20);	// PWM, Phase Correct
     fd6:	e0 eb       	ldi	r30, 0xB0	; 176
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	81 60       	ori	r24, 0x01	; 1
     fde:	80 83       	st	Z, r24
	
	// Configure Timer3
	bitSet(TCCR3B, CS31);	
     fe0:	e1 e9       	ldi	r30, 0x91	; 145
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	82 60       	ori	r24, 0x02	; 2
     fe8:	80 83       	st	Z, r24
	bitSet(TCCR3B, CS30);	// clk/64 prescaler
     fea:	80 81       	ld	r24, Z
     fec:	81 60       	ori	r24, 0x01	; 1
     fee:	80 83       	st	Z, r24
	bitSet(TCCR3A, WGM30);	// PWM, Phase Correct
     ff0:	e0 e9       	ldi	r30, 0x90	; 144
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	80 81       	ld	r24, Z
     ff6:	81 60       	ori	r24, 0x01	; 1
     ff8:	80 83       	st	Z, r24
	
	// Configure Timer4
	bitSet(TCCR4B, CS41);	
     ffa:	e1 ea       	ldi	r30, 0xA1	; 161
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	82 60       	ori	r24, 0x02	; 2
    1002:	80 83       	st	Z, r24
	bitSet(TCCR4B, CS40);	// clk/64 prescaler
    1004:	80 81       	ld	r24, Z
    1006:	81 60       	ori	r24, 0x01	; 1
    1008:	80 83       	st	Z, r24
	bitSet(TCCR4A, WGM40);	// PWM, Phase Correct
    100a:	e0 ea       	ldi	r30, 0xA0	; 160
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	80 81       	ld	r24, Z
    1010:	81 60       	ori	r24, 0x01	; 1
    1012:	80 83       	st	Z, r24
	
	// Configure Timer5
	bitSet(TCCR5B, CS51);
    1014:	e1 e2       	ldi	r30, 0x21	; 33
    1016:	f1 e0       	ldi	r31, 0x01	; 1
    1018:	80 81       	ld	r24, Z
    101a:	82 60       	ori	r24, 0x02	; 2
    101c:	80 83       	st	Z, r24
	bitSet(TCCR5B, CS50);	// clk/64 prescaler
    101e:	80 81       	ld	r24, Z
    1020:	81 60       	ori	r24, 0x01	; 1
    1022:	80 83       	st	Z, r24
	bitSet(TCCR5A, WGM50);	// PWM, Phase Correct
    1024:	e0 e2       	ldi	r30, 0x20	; 32
    1026:	f1 e0       	ldi	r31, 0x01	; 1
    1028:	80 81       	ld	r24, Z
    102a:	81 60       	ori	r24, 0x01	; 1
    102c:	80 83       	st	Z, r24
    102e:	08 95       	ret

00001030 <analogWrite>:
	 
}

// PWM output
void analogWrite(uint8_t pin, int val)
{
    1030:	1f 93       	push	r17
    1032:	cf 93       	push	r28
    1034:	df 93       	push	r29
    1036:	18 2f       	mov	r17, r24
    1038:	eb 01       	movw	r28, r22
	
	pinMode(pin, OUTPUT);
    103a:	61 e0       	ldi	r22, 0x01	; 1
    103c:	db da       	rcall	.-2634   	; 0x5f4 <pinMode>
	if (val == 0)
    103e:	20 97       	sbiw	r28, 0x00	; 0
    1040:	21 f4       	brne	.+8      	; 0x104a <analogWrite+0x1a>
	{
		digitalWrite(pin, LOW);
    1042:	60 e0       	ldi	r22, 0x00	; 0
    1044:	81 2f       	mov	r24, r17
    1046:	15 db       	rcall	.-2518   	; 0x672 <digitalWrite>
    1048:	b5 c0       	rjmp	.+362    	; 0x11b4 <analogWrite+0x184>
	}
	else if (val == 255)
    104a:	cf 3f       	cpi	r28, 0xFF	; 255
    104c:	d1 05       	cpc	r29, r1
    104e:	21 f4       	brne	.+8      	; 0x1058 <analogWrite+0x28>
	{
		digitalWrite(pin, HIGH);
    1050:	61 e0       	ldi	r22, 0x01	; 1
    1052:	81 2f       	mov	r24, r17
    1054:	0e db       	rcall	.-2532   	; 0x672 <digitalWrite>
    1056:	ae c0       	rjmp	.+348    	; 0x11b4 <analogWrite+0x184>
	}
	else{
		switch(pinToTimer(pin))
    1058:	e1 2f       	mov	r30, r17
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	e8 5e       	subi	r30, 0xE8	; 232
    105e:	fe 4f       	sbci	r31, 0xFE	; 254
    1060:	e4 91       	lpm	r30, Z
    1062:	8e 2f       	mov	r24, r30
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	fc 01       	movw	r30, r24
    1068:	31 97       	sbiw	r30, 0x01	; 1
    106a:	e2 31       	cpi	r30, 0x12	; 18
    106c:	f1 05       	cpc	r31, r1
    106e:	08 f0       	brcs	.+2      	; 0x1072 <analogWrite+0x42>
    1070:	97 c0       	rjmp	.+302    	; 0x11a0 <analogWrite+0x170>
    1072:	88 27       	eor	r24, r24
    1074:	e6 58       	subi	r30, 0x86	; 134
    1076:	ff 4f       	sbci	r31, 0xFF	; 255
    1078:	8f 4f       	sbci	r24, 0xFF	; 255
    107a:	f4 c3       	rjmp	.+2024   	; 0x1864 <__tablejump2__>
		{
			//Timer 0
			case TIMER0A:
				//connect pwm to pin on timer 0, channel A
				bitSet(TCCR0A, COM0A1); //clear OC0A on compare match
    107c:	84 b5       	in	r24, 0x24	; 36
    107e:	80 68       	ori	r24, 0x80	; 128
    1080:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; //set pwm duty
    1082:	c7 bd       	out	0x27, r28	; 39
			break;
    1084:	97 c0       	rjmp	.+302    	; 0x11b4 <analogWrite+0x184>
			
			case TIMER0B:
				//connect pwm to pin on timer 0, channel B
				bitSet(TCCR0B, COM0B1); //clear OC0A on compare match
    1086:	85 b5       	in	r24, 0x25	; 37
    1088:	80 62       	ori	r24, 0x20	; 32
    108a:	85 bd       	out	0x25, r24	; 37
				OCR0B = val; //set pwm duty
    108c:	c8 bd       	out	0x28, r28	; 40
			break;
    108e:	92 c0       	rjmp	.+292    	; 0x11b4 <analogWrite+0x184>
			
			//Timer 1
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				bitSet(TCCR1A, COM1A1);
    1090:	e0 e8       	ldi	r30, 0x80	; 128
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	80 81       	ld	r24, Z
    1096:	80 68       	ori	r24, 0x80	; 128
    1098:	80 83       	st	Z, r24
				OCR1A = val; // set pwm duty
    109a:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
    109e:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
			break;
    10a2:	88 c0       	rjmp	.+272    	; 0x11b4 <analogWrite+0x184>
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				bitSet(TCCR1A, COM1B1);
    10a4:	e0 e8       	ldi	r30, 0x80	; 128
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	80 62       	ori	r24, 0x20	; 32
    10ac:	80 83       	st	Z, r24
				OCR1B = val; // set pwm duty
    10ae:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
    10b2:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
			break;
    10b6:	7e c0       	rjmp	.+252    	; 0x11b4 <analogWrite+0x184>
			case TIMER1C:
				// connect pwm to pin on timer 1, channel C
				bitSet(TCCR1A, COM1C1);
    10b8:	e0 e8       	ldi	r30, 0x80	; 128
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	80 81       	ld	r24, Z
    10be:	88 60       	ori	r24, 0x08	; 8
    10c0:	80 83       	st	Z, r24
				OCR1C = val; // set pwm duty
    10c2:	d0 93 8d 00 	sts	0x008D, r29	; 0x80008d <__TEXT_REGION_LENGTH__+0x70008d>
    10c6:	c0 93 8c 00 	sts	0x008C, r28	; 0x80008c <__TEXT_REGION_LENGTH__+0x70008c>
			break;
    10ca:	74 c0       	rjmp	.+232    	; 0x11b4 <analogWrite+0x184>
			
			//Timer 2
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				bitSet(TCCR2A, COM2A1);
    10cc:	e0 eb       	ldi	r30, 0xB0	; 176
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	80 81       	ld	r24, Z
    10d2:	80 68       	ori	r24, 0x80	; 128
    10d4:	80 83       	st	Z, r24
				OCR2A = val; // set pwm duty
    10d6:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
			break;
    10da:	6c c0       	rjmp	.+216    	; 0x11b4 <analogWrite+0x184>
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				bitSet(TCCR2A, COM2B1);
    10dc:	e0 eb       	ldi	r30, 0xB0	; 176
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 81       	ld	r24, Z
    10e2:	80 62       	ori	r24, 0x20	; 32
    10e4:	80 83       	st	Z, r24
				OCR2B = val; // set pwm duty
    10e6:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7000b4>
			break;
    10ea:	64 c0       	rjmp	.+200    	; 0x11b4 <analogWrite+0x184>
			
			//Timer 3
			case TIMER3A:
				// connect pwm to pin on timer 3, channel A
				bitSet(TCCR3A, COM3A1);
    10ec:	e0 e9       	ldi	r30, 0x90	; 144
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	80 68       	ori	r24, 0x80	; 128
    10f4:	80 83       	st	Z, r24
				OCR3A = val; // set pwm duty
    10f6:	d0 93 99 00 	sts	0x0099, r29	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
    10fa:	c0 93 98 00 	sts	0x0098, r28	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
			break;
    10fe:	5a c0       	rjmp	.+180    	; 0x11b4 <analogWrite+0x184>
			case TIMER3B:
				// connect pwm to pin on timer 3, channel B
				bitSet(TCCR3A, COM3B1);
    1100:	e0 e9       	ldi	r30, 0x90	; 144
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	80 81       	ld	r24, Z
    1106:	80 62       	ori	r24, 0x20	; 32
    1108:	80 83       	st	Z, r24
				OCR3B = val; // set pwm duty
    110a:	d0 93 9b 00 	sts	0x009B, r29	; 0x80009b <__TEXT_REGION_LENGTH__+0x70009b>
    110e:	c0 93 9a 00 	sts	0x009A, r28	; 0x80009a <__TEXT_REGION_LENGTH__+0x70009a>
			break;
    1112:	50 c0       	rjmp	.+160    	; 0x11b4 <analogWrite+0x184>
			case TIMER3C:
				// connect pwm to pin on timer 3, channel C
				bitSet(TCCR3A, COM3C1);
    1114:	e0 e9       	ldi	r30, 0x90	; 144
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	80 81       	ld	r24, Z
    111a:	88 60       	ori	r24, 0x08	; 8
    111c:	80 83       	st	Z, r24
				OCR3C = val; // set pwm duty
    111e:	d0 93 9d 00 	sts	0x009D, r29	; 0x80009d <__TEXT_REGION_LENGTH__+0x70009d>
    1122:	c0 93 9c 00 	sts	0x009C, r28	; 0x80009c <__TEXT_REGION_LENGTH__+0x70009c>
			break;
    1126:	46 c0       	rjmp	.+140    	; 0x11b4 <analogWrite+0x184>
			
			//Timer 4
			case TIMER4A:
				//connect pwm to pin on timer 4, channel A
				bitSet(TCCR4A, COM4A1);
    1128:	e0 ea       	ldi	r30, 0xA0	; 160
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	80 68       	ori	r24, 0x80	; 128
    1130:	80 83       	st	Z, r24
				OCR4A = val;	// set pwm duty
    1132:	d0 93 a9 00 	sts	0x00A9, r29	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
    1136:	c0 93 a8 00 	sts	0x00A8, r28	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
			break;
    113a:	3c c0       	rjmp	.+120    	; 0x11b4 <analogWrite+0x184>
			case TIMER4B:
				// connect pwm to pin on timer 4, channel B
				bitSet(TCCR4A, COM4B1);
    113c:	e0 ea       	ldi	r30, 0xA0	; 160
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	80 62       	ori	r24, 0x20	; 32
    1144:	80 83       	st	Z, r24
				OCR4B = val; // set pwm duty
    1146:	d0 93 ab 00 	sts	0x00AB, r29	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7000ab>
    114a:	c0 93 aa 00 	sts	0x00AA, r28	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7000aa>
			break;
    114e:	32 c0       	rjmp	.+100    	; 0x11b4 <analogWrite+0x184>
			case TIMER4C:
				// connect pwm to pin on timer 4, channel C
				bitSet(TCCR4A, COM4C1);
    1150:	e0 ea       	ldi	r30, 0xA0	; 160
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	80 81       	ld	r24, Z
    1156:	88 60       	ori	r24, 0x08	; 8
    1158:	80 83       	st	Z, r24
				OCR4C = val; // set pwm duty
    115a:	d0 93 ad 00 	sts	0x00AD, r29	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7000ad>
    115e:	c0 93 ac 00 	sts	0x00AC, r28	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7000ac>
			break;
    1162:	28 c0       	rjmp	.+80     	; 0x11b4 <analogWrite+0x184>
			//timer 5
			case TIMER5A:
				// connect pwm to pin on timer 5, channel A
				bitSet(TCCR5A, COM5A1);
    1164:	e0 e2       	ldi	r30, 0x20	; 32
    1166:	f1 e0       	ldi	r31, 0x01	; 1
    1168:	80 81       	ld	r24, Z
    116a:	80 68       	ori	r24, 0x80	; 128
    116c:	80 83       	st	Z, r24
				OCR5A = val; // set pwm duty
    116e:	d0 93 29 01 	sts	0x0129, r29	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    1172:	c0 93 28 01 	sts	0x0128, r28	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
			break;
    1176:	1e c0       	rjmp	.+60     	; 0x11b4 <analogWrite+0x184>
			case TIMER5B:
				// connect pwm to pin on timer 5, channel B
				bitSet(TCCR5A, COM5B1);
    1178:	e0 e2       	ldi	r30, 0x20	; 32
    117a:	f1 e0       	ldi	r31, 0x01	; 1
    117c:	80 81       	ld	r24, Z
    117e:	80 62       	ori	r24, 0x20	; 32
    1180:	80 83       	st	Z, r24
				OCR5B = val; // set pwm duty
    1182:	d0 93 2b 01 	sts	0x012B, r29	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
    1186:	c0 93 2a 01 	sts	0x012A, r28	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
			break;
    118a:	14 c0       	rjmp	.+40     	; 0x11b4 <analogWrite+0x184>
			case TIMER5C:
				// connect pwm to pin on timer 5, channel C
				bitSet(TCCR5A, COM5C1);
    118c:	e0 e2       	ldi	r30, 0x20	; 32
    118e:	f1 e0       	ldi	r31, 0x01	; 1
    1190:	80 81       	ld	r24, Z
    1192:	88 60       	ori	r24, 0x08	; 8
    1194:	80 83       	st	Z, r24
				OCR5C = val; // set pwm duty
    1196:	d0 93 2d 01 	sts	0x012D, r29	; 0x80012d <__TEXT_REGION_LENGTH__+0x70012d>
    119a:	c0 93 2c 01 	sts	0x012C, r28	; 0x80012c <__TEXT_REGION_LENGTH__+0x70012c>
			break;
    119e:	0a c0       	rjmp	.+20     	; 0x11b4 <analogWrite+0x184>
			case NOT_ON_TIMER:
			
			default:
				if (val < 128) {
    11a0:	c0 38       	cpi	r28, 0x80	; 128
    11a2:	d1 05       	cpc	r29, r1
					digitalWrite(pin, LOW);
    11a4:	24 f4       	brge	.+8      	; 0x11ae <analogWrite+0x17e>
    11a6:	60 e0       	ldi	r22, 0x00	; 0
    11a8:	81 2f       	mov	r24, r17
    11aa:	63 da       	rcall	.-2874   	; 0x672 <digitalWrite>
				} else {
					digitalWrite(pin, HIGH);
    11ac:	03 c0       	rjmp	.+6      	; 0x11b4 <analogWrite+0x184>
    11ae:	61 e0       	ldi	r22, 0x01	; 1
    11b0:	81 2f       	mov	r24, r17
    11b2:	5f da       	rcall	.-2882   	; 0x672 <digitalWrite>
				}
		}
	}
    11b4:	df 91       	pop	r29
    11b6:	cf 91       	pop	r28
    11b8:	1f 91       	pop	r17
    11ba:	08 95       	ret

000011bc <Serial2_begin>:
	bitClear(UCSR2B, TXEN2);
	bitClear(UCSR2B, RXCIE2); //Rx complete interrupt enable
	bitClear(UCSR2B, UDRIE2); //data register empty int -disable
	
	//clear any received data
	_rx_buffer_head = _rx_buffer_tail;	
    11bc:	cf 92       	push	r12
    11be:	df 92       	push	r13
    11c0:	ef 92       	push	r14
    11c2:	ff 92       	push	r15
    11c4:	cf 93       	push	r28
    11c6:	6b 01       	movw	r12, r22
    11c8:	7c 01       	movw	r14, r24
    11ca:	c4 2f       	mov	r28, r20
    11cc:	10 92 de 02 	sts	0x02DE, r1	; 0x8002de <_rx_buffer_head>
    11d0:	10 92 dd 02 	sts	0x02DD, r1	; 0x8002dd <_rx_buffer_tail>
    11d4:	10 92 dc 02 	sts	0x02DC, r1	; 0x8002dc <_tx_buffer_head>
    11d8:	10 92 5b 02 	sts	0x025B, r1	; 0x80025b <_tx_buffer_tail>
    11dc:	82 e0       	ldi	r24, 0x02	; 2
    11de:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    11e2:	c1 14       	cp	r12, r1
    11e4:	81 ee       	ldi	r24, 0xE1	; 225
    11e6:	d8 06       	cpc	r13, r24
    11e8:	e1 04       	cpc	r14, r1
    11ea:	f1 04       	cpc	r15, r1
    11ec:	a9 f0       	breq	.+42     	; 0x1218 <Serial2_begin+0x5c>
    11ee:	60 e0       	ldi	r22, 0x00	; 0
    11f0:	79 e0       	ldi	r23, 0x09	; 9
    11f2:	8d e3       	ldi	r24, 0x3D	; 61
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	a7 01       	movw	r20, r14
    11f8:	96 01       	movw	r18, r12
    11fa:	12 d3       	rcall	.+1572   	; 0x1820 <__udivmodsi4>
    11fc:	da 01       	movw	r26, r20
    11fe:	c9 01       	movw	r24, r18
    1200:	01 97       	sbiw	r24, 0x01	; 1
    1202:	a1 09       	sbc	r26, r1
    1204:	b1 09       	sbc	r27, r1
    1206:	b6 95       	lsr	r27
    1208:	a7 95       	ror	r26
    120a:	97 95       	ror	r25
    120c:	87 95       	ror	r24
    120e:	9c 01       	movw	r18, r24
    1210:	21 15       	cp	r18, r1
    1212:	80 e1       	ldi	r24, 0x10	; 16
    1214:	38 07       	cpc	r19, r24
    1216:	98 f0       	brcs	.+38     	; 0x123e <Serial2_begin+0x82>
    1218:	10 92 d0 00 	sts	0x00D0, r1	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    121c:	60 e8       	ldi	r22, 0x80	; 128
    121e:	74 e8       	ldi	r23, 0x84	; 132
    1220:	8e e1       	ldi	r24, 0x1E	; 30
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	a7 01       	movw	r20, r14
    1226:	96 01       	movw	r18, r12
    1228:	fb d2       	rcall	.+1526   	; 0x1820 <__udivmodsi4>
    122a:	da 01       	movw	r26, r20
    122c:	c9 01       	movw	r24, r18
    122e:	01 97       	sbiw	r24, 0x01	; 1
    1230:	a1 09       	sbc	r26, r1
    1232:	b1 09       	sbc	r27, r1
    1234:	b6 95       	lsr	r27
    1236:	a7 95       	ror	r26
    1238:	97 95       	ror	r25
    123a:	87 95       	ror	r24
    123c:	9c 01       	movw	r18, r24
    123e:	30 93 d5 00 	sts	0x00D5, r19	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
    1242:	20 93 d4 00 	sts	0x00D4, r18	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
    1246:	c0 93 d2 00 	sts	0x00D2, r28	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
    124a:	e1 ed       	ldi	r30, 0xD1	; 209
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	80 81       	ld	r24, Z
    1250:	80 61       	ori	r24, 0x10	; 16
    1252:	80 83       	st	Z, r24
    1254:	80 81       	ld	r24, Z
    1256:	88 60       	ori	r24, 0x08	; 8
    1258:	80 83       	st	Z, r24
    125a:	80 81       	ld	r24, Z
    125c:	80 68       	ori	r24, 0x80	; 128
    125e:	80 83       	st	Z, r24
    1260:	80 81       	ld	r24, Z
    1262:	8f 7d       	andi	r24, 0xDF	; 223
    1264:	80 83       	st	Z, r24
    1266:	cf 91       	pop	r28
    1268:	ff 90       	pop	r15
    126a:	ef 90       	pop	r14
    126c:	df 90       	pop	r13
    126e:	cf 90       	pop	r12
    1270:	08 95       	ret

00001272 <_tx2_udr_empty_irq>:
    1272:	e0 91 5b 02 	lds	r30, 0x025B	; 0x80025b <_tx_buffer_tail>
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	e4 5a       	subi	r30, 0xA4	; 164
    127a:	fd 4f       	sbci	r31, 0xFD	; 253
    127c:	20 81       	ld	r18, Z
    127e:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <_tx_buffer_tail>
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	01 96       	adiw	r24, 0x01	; 1
    1286:	8f 73       	andi	r24, 0x3F	; 63
    1288:	90 78       	andi	r25, 0x80	; 128
    128a:	99 23       	and	r25, r25
    128c:	24 f4       	brge	.+8      	; 0x1296 <_tx2_udr_empty_irq+0x24>
    128e:	01 97       	sbiw	r24, 0x01	; 1
    1290:	80 6c       	ori	r24, 0xC0	; 192
    1292:	9f 6f       	ori	r25, 0xFF	; 255
    1294:	01 96       	adiw	r24, 0x01	; 1
    1296:	80 93 5b 02 	sts	0x025B, r24	; 0x80025b <_tx_buffer_tail>
    129a:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    129e:	e0 ed       	ldi	r30, 0xD0	; 208
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	80 81       	ld	r24, Z
    12a4:	83 70       	andi	r24, 0x03	; 3
    12a6:	80 64       	ori	r24, 0x40	; 64
    12a8:	80 83       	st	Z, r24
    12aa:	90 91 dc 02 	lds	r25, 0x02DC	; 0x8002dc <_tx_buffer_head>
    12ae:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <_tx_buffer_tail>
    12b2:	98 13       	cpse	r25, r24
    12b4:	05 c0       	rjmp	.+10     	; 0x12c0 <_tx2_udr_empty_irq+0x4e>
    12b6:	e1 ed       	ldi	r30, 0xD1	; 209
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	80 81       	ld	r24, Z
    12bc:	80 62       	ori	r24, 0x20	; 32
    12be:	80 83       	st	Z, r24
    12c0:	08 95       	ret

000012c2 <Serial2_write>:
    12c2:	0f 93       	push	r16
    12c4:	1f 93       	push	r17
    12c6:	cf 93       	push	r28
    12c8:	df 93       	push	r29
    12ca:	20 91 dc 02 	lds	r18, 0x02DC	; 0x8002dc <_tx_buffer_head>
    12ce:	90 91 5b 02 	lds	r25, 0x025B	; 0x80025b <_tx_buffer_tail>
    12d2:	29 13       	cpse	r18, r25
    12d4:	10 c0       	rjmp	.+32     	; 0x12f6 <Serial2_write+0x34>
    12d6:	90 91 d0 00 	lds	r25, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    12da:	95 ff       	sbrs	r25, 5
    12dc:	0c c0       	rjmp	.+24     	; 0x12f6 <Serial2_write+0x34>
    12de:	9f b7       	in	r25, 0x3f	; 63
    12e0:	f8 94       	cli
    12e2:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    12e6:	e0 ed       	ldi	r30, 0xD0	; 208
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 81       	ld	r24, Z
    12ec:	83 70       	andi	r24, 0x03	; 3
    12ee:	80 64       	ori	r24, 0x40	; 64
    12f0:	80 83       	st	Z, r24
    12f2:	9f bf       	out	0x3f, r25	; 63
    12f4:	2f c0       	rjmp	.+94     	; 0x1354 <Serial2_write+0x92>
    12f6:	20 91 dc 02 	lds	r18, 0x02DC	; 0x8002dc <_tx_buffer_head>
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	2f 5f       	subi	r18, 0xFF	; 255
    12fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1300:	2f 73       	andi	r18, 0x3F	; 63
    1302:	30 78       	andi	r19, 0x80	; 128
    1304:	33 23       	and	r19, r19
    1306:	34 f4       	brge	.+12     	; 0x1314 <Serial2_write+0x52>
    1308:	21 50       	subi	r18, 0x01	; 1
    130a:	31 09       	sbc	r19, r1
    130c:	20 6c       	ori	r18, 0xC0	; 192
    130e:	3f 6f       	ori	r19, 0xFF	; 255
    1310:	2f 5f       	subi	r18, 0xFF	; 255
    1312:	3f 4f       	sbci	r19, 0xFF	; 255
    1314:	d8 2f       	mov	r29, r24
    1316:	c2 2f       	mov	r28, r18
    1318:	00 ed       	ldi	r16, 0xD0	; 208
    131a:	10 e0       	ldi	r17, 0x00	; 0
    131c:	07 c0       	rjmp	.+14     	; 0x132c <Serial2_write+0x6a>
    131e:	0f b6       	in	r0, 0x3f	; 63
    1320:	07 fc       	sbrc	r0, 7
    1322:	04 c0       	rjmp	.+8      	; 0x132c <Serial2_write+0x6a>
    1324:	f8 01       	movw	r30, r16
    1326:	80 81       	ld	r24, Z
    1328:	85 fd       	sbrc	r24, 5
    132a:	a3 df       	rcall	.-186    	; 0x1272 <_tx2_udr_empty_irq>
    132c:	90 91 5b 02 	lds	r25, 0x025B	; 0x80025b <_tx_buffer_tail>
    1330:	c9 17       	cp	r28, r25
    1332:	a9 f3       	breq	.-22     	; 0x131e <Serial2_write+0x5c>
    1334:	e0 91 dc 02 	lds	r30, 0x02DC	; 0x8002dc <_tx_buffer_head>
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	e4 5a       	subi	r30, 0xA4	; 164
    133c:	fd 4f       	sbci	r31, 0xFD	; 253
    133e:	d0 83       	st	Z, r29
    1340:	9f b7       	in	r25, 0x3f	; 63
    1342:	f8 94       	cli
    1344:	c0 93 dc 02 	sts	0x02DC, r28	; 0x8002dc <_tx_buffer_head>
    1348:	e1 ed       	ldi	r30, 0xD1	; 209
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	80 81       	ld	r24, Z
    134e:	80 62       	ori	r24, 0x20	; 32
    1350:	80 83       	st	Z, r24
    1352:	9f bf       	out	0x3f, r25	; 63
    1354:	81 e0       	ldi	r24, 0x01	; 1
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	df 91       	pop	r29
    135a:	cf 91       	pop	r28
    135c:	1f 91       	pop	r17
    135e:	0f 91       	pop	r16
    1360:	08 95       	ret

00001362 <_rx2_complete_irq>:
	}
}

void _rx2_complete_irq(void)
{
	if (bit_is_clear(UCSR2A, UPE0)){
    1362:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    1366:	82 fd       	sbrc	r24, 2
    1368:	13 c0       	rjmp	.+38     	; 0x1390 <_rx2_complete_irq+0x2e>
		// No Parity error, read byte and store it in the buffer if there is room
		unsigned char c = UDR2;
    136a:	20 91 d6 00 	lds	r18, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
		rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    136e:	80 91 de 02 	lds	r24, 0x02DE	; 0x8002de <_rx_buffer_head>
    1372:	8f 5f       	subi	r24, 0xFF	; 255
    1374:	8f 73       	andi	r24, 0x3F	; 63
		
		// if we should be storing the received character into the location just before the tail 
		// (meaning that the head would advance to the current location of the tail), we're about to overflow the buffer
		// and so we don't write the character or advance the head.
		if (i != _rx_buffer_tail) {
    1376:	90 91 dd 02 	lds	r25, 0x02DD	; 0x8002dd <_rx_buffer_tail>
    137a:	89 17       	cp	r24, r25
    137c:	59 f0       	breq	.+22     	; 0x1394 <_rx2_complete_irq+0x32>
			_rx_buffer[_rx_buffer_head] = c;
    137e:	e0 91 de 02 	lds	r30, 0x02DE	; 0x8002de <_rx_buffer_head>
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	e4 56       	subi	r30, 0x64	; 100
    1386:	fd 4f       	sbci	r31, 0xFD	; 253
    1388:	20 83       	st	Z, r18
			_rx_buffer_head = i;
    138a:	80 93 de 02 	sts	0x02DE, r24	; 0x8002de <_rx_buffer_head>
    138e:	08 95       	ret
		}
	}else{
		// Parity error, read byte but discard it
		UDR2;
    1390:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    1394:	08 95       	ret

00001396 <__vector_51>:
	}
}

//IRQ
ISR(USART2_RX_vect){
    1396:	1f 92       	push	r1
    1398:	0f 92       	push	r0
    139a:	0f b6       	in	r0, 0x3f	; 63
    139c:	0f 92       	push	r0
    139e:	11 24       	eor	r1, r1
    13a0:	0b b6       	in	r0, 0x3b	; 59
    13a2:	0f 92       	push	r0
    13a4:	2f 93       	push	r18
    13a6:	3f 93       	push	r19
    13a8:	4f 93       	push	r20
    13aa:	5f 93       	push	r21
    13ac:	6f 93       	push	r22
    13ae:	7f 93       	push	r23
    13b0:	8f 93       	push	r24
    13b2:	9f 93       	push	r25
    13b4:	af 93       	push	r26
    13b6:	bf 93       	push	r27
    13b8:	ef 93       	push	r30
    13ba:	ff 93       	push	r31
	_rx2_complete_irq();
    13bc:	d2 df       	rcall	.-92     	; 0x1362 <_rx2_complete_irq>
}
    13be:	ff 91       	pop	r31
    13c0:	ef 91       	pop	r30
    13c2:	bf 91       	pop	r27
    13c4:	af 91       	pop	r26
    13c6:	9f 91       	pop	r25
    13c8:	8f 91       	pop	r24
    13ca:	7f 91       	pop	r23
    13cc:	6f 91       	pop	r22
    13ce:	5f 91       	pop	r21
    13d0:	4f 91       	pop	r20
    13d2:	3f 91       	pop	r19
    13d4:	2f 91       	pop	r18
    13d6:	0f 90       	pop	r0
    13d8:	0b be       	out	0x3b, r0	; 59
    13da:	0f 90       	pop	r0
    13dc:	0f be       	out	0x3f, r0	; 63
    13de:	0f 90       	pop	r0
    13e0:	1f 90       	pop	r1
    13e2:	18 95       	reti

000013e4 <__vector_52>:

ISR(USART2_UDRE_vect){
    13e4:	1f 92       	push	r1
    13e6:	0f 92       	push	r0
    13e8:	0f b6       	in	r0, 0x3f	; 63
    13ea:	0f 92       	push	r0
    13ec:	11 24       	eor	r1, r1
    13ee:	0b b6       	in	r0, 0x3b	; 59
    13f0:	0f 92       	push	r0
    13f2:	2f 93       	push	r18
    13f4:	3f 93       	push	r19
    13f6:	4f 93       	push	r20
    13f8:	5f 93       	push	r21
    13fa:	6f 93       	push	r22
    13fc:	7f 93       	push	r23
    13fe:	8f 93       	push	r24
    1400:	9f 93       	push	r25
    1402:	af 93       	push	r26
    1404:	bf 93       	push	r27
    1406:	ef 93       	push	r30
    1408:	ff 93       	push	r31
	_tx2_udr_empty_irq();
    140a:	33 df       	rcall	.-410    	; 0x1272 <_tx2_udr_empty_irq>
    140c:	ff 91       	pop	r31
    140e:	ef 91       	pop	r30
    1410:	bf 91       	pop	r27
    1412:	af 91       	pop	r26
    1414:	9f 91       	pop	r25
    1416:	8f 91       	pop	r24
    1418:	7f 91       	pop	r23
    141a:	6f 91       	pop	r22
    141c:	5f 91       	pop	r21
    141e:	4f 91       	pop	r20
    1420:	3f 91       	pop	r19
    1422:	2f 91       	pop	r18
    1424:	0f 90       	pop	r0
    1426:	0b be       	out	0x3b, r0	; 59
    1428:	0f 90       	pop	r0
    142a:	0f be       	out	0x3f, r0	; 63
    142c:	0f 90       	pop	r0
    142e:	1f 90       	pop	r1
    1430:	18 95       	reti

00001432 <millis_init>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    1432:	78 94       	sei
    1434:	84 b5       	in	r24, 0x24	; 36
    1436:	82 60       	ori	r24, 0x02	; 2
    1438:	84 bd       	out	0x24, r24	; 36
    143a:	84 b5       	in	r24, 0x24	; 36
    143c:	81 60       	ori	r24, 0x01	; 1
    143e:	84 bd       	out	0x24, r24	; 36
    1440:	85 b5       	in	r24, 0x25	; 37
    1442:	82 60       	ori	r24, 0x02	; 2
    1444:	85 bd       	out	0x25, r24	; 37
    1446:	85 b5       	in	r24, 0x25	; 37
    1448:	81 60       	ori	r24, 0x01	; 1
    144a:	85 bd       	out	0x25, r24	; 37
    144c:	ee e6       	ldi	r30, 0x6E	; 110
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	80 81       	ld	r24, Z
    1452:	81 60       	ori	r24, 0x01	; 1
    1454:	80 83       	st	Z, r24
    1456:	08 95       	ret

00001458 <micros>:
    1458:	3f b7       	in	r19, 0x3f	; 63
    145a:	f8 94       	cli
    145c:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <timer0_overflow_count>
    1460:	90 91 47 02 	lds	r25, 0x0247	; 0x800247 <timer0_overflow_count+0x1>
    1464:	a0 91 48 02 	lds	r26, 0x0248	; 0x800248 <timer0_overflow_count+0x2>
    1468:	b0 91 49 02 	lds	r27, 0x0249	; 0x800249 <timer0_overflow_count+0x3>
    146c:	26 b5       	in	r18, 0x26	; 38
    146e:	a8 9b       	sbis	0x15, 0	; 21
    1470:	05 c0       	rjmp	.+10     	; 0x147c <micros+0x24>
    1472:	2f 3f       	cpi	r18, 0xFF	; 255
    1474:	19 f0       	breq	.+6      	; 0x147c <micros+0x24>
    1476:	01 96       	adiw	r24, 0x01	; 1
    1478:	a1 1d       	adc	r26, r1
    147a:	b1 1d       	adc	r27, r1
    147c:	3f bf       	out	0x3f, r19	; 63
    147e:	ba 2f       	mov	r27, r26
    1480:	a9 2f       	mov	r26, r25
    1482:	98 2f       	mov	r25, r24
    1484:	88 27       	eor	r24, r24
    1486:	82 0f       	add	r24, r18
    1488:	91 1d       	adc	r25, r1
    148a:	a1 1d       	adc	r26, r1
    148c:	b1 1d       	adc	r27, r1
    148e:	bc 01       	movw	r22, r24
    1490:	cd 01       	movw	r24, r26
    1492:	66 0f       	add	r22, r22
    1494:	77 1f       	adc	r23, r23
    1496:	88 1f       	adc	r24, r24
    1498:	99 1f       	adc	r25, r25
    149a:	66 0f       	add	r22, r22
    149c:	77 1f       	adc	r23, r23
    149e:	88 1f       	adc	r24, r24
    14a0:	99 1f       	adc	r25, r25
    14a2:	08 95       	ret

000014a4 <delay_ms>:
    14a4:	8f 92       	push	r8
    14a6:	9f 92       	push	r9
    14a8:	af 92       	push	r10
    14aa:	bf 92       	push	r11
    14ac:	cf 92       	push	r12
    14ae:	df 92       	push	r13
    14b0:	ef 92       	push	r14
    14b2:	ff 92       	push	r15
    14b4:	6b 01       	movw	r12, r22
    14b6:	7c 01       	movw	r14, r24
    14b8:	cf df       	rcall	.-98     	; 0x1458 <micros>
    14ba:	4b 01       	movw	r8, r22
    14bc:	5c 01       	movw	r10, r24
    14be:	c1 14       	cp	r12, r1
    14c0:	d1 04       	cpc	r13, r1
    14c2:	e1 04       	cpc	r14, r1
    14c4:	f1 04       	cpc	r15, r1
    14c6:	89 f4       	brne	.+34     	; 0x14ea <delay_ms+0x46>
    14c8:	21 c0       	rjmp	.+66     	; 0x150c <delay_ms+0x68>
    14ca:	21 e0       	ldi	r18, 0x01	; 1
    14cc:	c2 1a       	sub	r12, r18
    14ce:	d1 08       	sbc	r13, r1
    14d0:	e1 08       	sbc	r14, r1
    14d2:	f1 08       	sbc	r15, r1
    14d4:	88 ee       	ldi	r24, 0xE8	; 232
    14d6:	88 0e       	add	r8, r24
    14d8:	83 e0       	ldi	r24, 0x03	; 3
    14da:	98 1e       	adc	r9, r24
    14dc:	a1 1c       	adc	r10, r1
    14de:	b1 1c       	adc	r11, r1
    14e0:	c1 14       	cp	r12, r1
    14e2:	d1 04       	cpc	r13, r1
    14e4:	e1 04       	cpc	r14, r1
    14e6:	f1 04       	cpc	r15, r1
    14e8:	89 f0       	breq	.+34     	; 0x150c <delay_ms+0x68>
    14ea:	b6 df       	rcall	.-148    	; 0x1458 <micros>
    14ec:	dc 01       	movw	r26, r24
    14ee:	cb 01       	movw	r24, r22
    14f0:	88 19       	sub	r24, r8
    14f2:	99 09       	sbc	r25, r9
    14f4:	aa 09       	sbc	r26, r10
    14f6:	bb 09       	sbc	r27, r11
    14f8:	88 3e       	cpi	r24, 0xE8	; 232
    14fa:	93 40       	sbci	r25, 0x03	; 3
    14fc:	a1 05       	cpc	r26, r1
    14fe:	b1 05       	cpc	r27, r1
    1500:	20 f7       	brcc	.-56     	; 0x14ca <delay_ms+0x26>
    1502:	c1 14       	cp	r12, r1
    1504:	d1 04       	cpc	r13, r1
    1506:	e1 04       	cpc	r14, r1
    1508:	f1 04       	cpc	r15, r1
    150a:	79 f7       	brne	.-34     	; 0x14ea <delay_ms+0x46>
    150c:	ff 90       	pop	r15
    150e:	ef 90       	pop	r14
    1510:	df 90       	pop	r13
    1512:	cf 90       	pop	r12
    1514:	bf 90       	pop	r11
    1516:	af 90       	pop	r10
    1518:	9f 90       	pop	r9
    151a:	8f 90       	pop	r8
    151c:	08 95       	ret

0000151e <__vector_23>:
	// return = 4 cycles	
}


ISR(TIMER0_OVF_vect)
{
    151e:	1f 92       	push	r1
    1520:	0f 92       	push	r0
    1522:	0f b6       	in	r0, 0x3f	; 63
    1524:	0f 92       	push	r0
    1526:	11 24       	eor	r1, r1
    1528:	2f 93       	push	r18
    152a:	3f 93       	push	r19
    152c:	8f 93       	push	r24
    152e:	9f 93       	push	r25
    1530:	af 93       	push	r26
    1532:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    1534:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <timer0_millis>
    1538:	90 91 43 02 	lds	r25, 0x0243	; 0x800243 <timer0_millis+0x1>
    153c:	a0 91 44 02 	lds	r26, 0x0244	; 0x800244 <timer0_millis+0x2>
    1540:	b0 91 45 02 	lds	r27, 0x0245	; 0x800245 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    1544:	30 91 41 02 	lds	r19, 0x0241	; 0x800241 <timer0_fract>
	
	m += MILLIS_INC;
	f += FRACT_INC;
    1548:	23 e0       	ldi	r18, 0x03	; 3
    154a:	23 0f       	add	r18, r19
	
	if(f >= FRACT_MAX){
    154c:	2d 37       	cpi	r18, 0x7D	; 125
    154e:	20 f4       	brcc	.+8      	; 0x1558 <__vector_23+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;
	
	m += MILLIS_INC;
    1550:	01 96       	adiw	r24, 0x01	; 1
    1552:	a1 1d       	adc	r26, r1
    1554:	b1 1d       	adc	r27, r1
    1556:	05 c0       	rjmp	.+10     	; 0x1562 <__vector_23+0x44>
	f += FRACT_INC;
	
	if(f >= FRACT_MAX){
		f -= FRACT_MAX;
    1558:	26 e8       	ldi	r18, 0x86	; 134
    155a:	23 0f       	add	r18, r19
		m += 1;
    155c:	02 96       	adiw	r24, 0x02	; 2
    155e:	a1 1d       	adc	r26, r1
    1560:	b1 1d       	adc	r27, r1
	}
	
	timer0_fract = f;
    1562:	20 93 41 02 	sts	0x0241, r18	; 0x800241 <timer0_fract>
	timer0_millis = m;
    1566:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <timer0_millis>
    156a:	90 93 43 02 	sts	0x0243, r25	; 0x800243 <timer0_millis+0x1>
    156e:	a0 93 44 02 	sts	0x0244, r26	; 0x800244 <timer0_millis+0x2>
    1572:	b0 93 45 02 	sts	0x0245, r27	; 0x800245 <timer0_millis+0x3>
	timer0_overflow_count++;
    1576:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <timer0_overflow_count>
    157a:	90 91 47 02 	lds	r25, 0x0247	; 0x800247 <timer0_overflow_count+0x1>
    157e:	a0 91 48 02 	lds	r26, 0x0248	; 0x800248 <timer0_overflow_count+0x2>
    1582:	b0 91 49 02 	lds	r27, 0x0249	; 0x800249 <timer0_overflow_count+0x3>
    1586:	01 96       	adiw	r24, 0x01	; 1
    1588:	a1 1d       	adc	r26, r1
    158a:	b1 1d       	adc	r27, r1
    158c:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <timer0_overflow_count>
    1590:	90 93 47 02 	sts	0x0247, r25	; 0x800247 <timer0_overflow_count+0x1>
    1594:	a0 93 48 02 	sts	0x0248, r26	; 0x800248 <timer0_overflow_count+0x2>
    1598:	b0 93 49 02 	sts	0x0249, r27	; 0x800249 <timer0_overflow_count+0x3>
    159c:	bf 91       	pop	r27
    159e:	af 91       	pop	r26
    15a0:	9f 91       	pop	r25
    15a2:	8f 91       	pop	r24
    15a4:	3f 91       	pop	r19
    15a6:	2f 91       	pop	r18
    15a8:	0f 90       	pop	r0
    15aa:	0f be       	out	0x3f, r0	; 63
    15ac:	0f 90       	pop	r0
    15ae:	1f 90       	pop	r1
    15b0:	18 95       	reti

000015b2 <disableTimer>:
		}
	}
	  
	disableTimer(_timer);
	digitalWrite(_pin, 0);
}
    15b2:	82 30       	cpi	r24, 0x02	; 2
    15b4:	a9 f0       	breq	.+42     	; 0x15e0 <disableTimer+0x2e>
    15b6:	28 f4       	brcc	.+10     	; 0x15c2 <disableTimer+0x10>
    15b8:	88 23       	and	r24, r24
    15ba:	49 f0       	breq	.+18     	; 0x15ce <disableTimer+0x1c>
    15bc:	81 30       	cpi	r24, 0x01	; 1
    15be:	51 f0       	breq	.+20     	; 0x15d4 <disableTimer+0x22>
    15c0:	08 95       	ret
    15c2:	84 30       	cpi	r24, 0x04	; 4
    15c4:	21 f1       	breq	.+72     	; 0x160e <disableTimer+0x5c>
    15c6:	e8 f0       	brcs	.+58     	; 0x1602 <disableTimer+0x50>
    15c8:	85 30       	cpi	r24, 0x05	; 5
    15ca:	39 f1       	breq	.+78     	; 0x161a <disableTimer+0x68>
    15cc:	08 95       	ret
    15ce:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
    15d2:	08 95       	ret
    15d4:	ef e6       	ldi	r30, 0x6F	; 111
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	80 81       	ld	r24, Z
    15da:	8d 7f       	andi	r24, 0xFD	; 253
    15dc:	80 83       	st	Z, r24
    15de:	08 95       	ret
    15e0:	e0 e7       	ldi	r30, 0x70	; 112
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	80 81       	ld	r24, Z
    15e6:	8d 7f       	andi	r24, 0xFD	; 253
    15e8:	80 83       	st	Z, r24
    15ea:	81 e0       	ldi	r24, 0x01	; 1
    15ec:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    15f0:	e1 eb       	ldi	r30, 0xB1	; 177
    15f2:	f0 e0       	ldi	r31, 0x00	; 0
    15f4:	80 81       	ld	r24, Z
    15f6:	88 7f       	andi	r24, 0xF8	; 248
    15f8:	84 60       	ori	r24, 0x04	; 4
    15fa:	80 83       	st	Z, r24
    15fc:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
    1600:	08 95       	ret
    1602:	e1 e7       	ldi	r30, 0x71	; 113
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	80 81       	ld	r24, Z
    1608:	8d 7f       	andi	r24, 0xFD	; 253
    160a:	80 83       	st	Z, r24
    160c:	08 95       	ret
    160e:	e2 e7       	ldi	r30, 0x72	; 114
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	80 81       	ld	r24, Z
    1614:	8d 7f       	andi	r24, 0xFD	; 253
    1616:	80 83       	st	Z, r24
    1618:	08 95       	ret
    161a:	e3 e7       	ldi	r30, 0x73	; 115
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	80 81       	ld	r24, Z
    1620:	8d 7f       	andi	r24, 0xFD	; 253
    1622:	80 83       	st	Z, r24
    1624:	08 95       	ret

00001626 <__vector_32>:
}
#endif

#ifdef USE_TIMER3
ISR(TIMER3_COMPA_vect)
{
    1626:	1f 92       	push	r1
    1628:	0f 92       	push	r0
    162a:	0f b6       	in	r0, 0x3f	; 63
    162c:	0f 92       	push	r0
    162e:	11 24       	eor	r1, r1
    1630:	0b b6       	in	r0, 0x3b	; 59
    1632:	0f 92       	push	r0
    1634:	2f 93       	push	r18
    1636:	3f 93       	push	r19
    1638:	4f 93       	push	r20
    163a:	5f 93       	push	r21
    163c:	6f 93       	push	r22
    163e:	7f 93       	push	r23
    1640:	8f 93       	push	r24
    1642:	9f 93       	push	r25
    1644:	af 93       	push	r26
    1646:	bf 93       	push	r27
    1648:	ef 93       	push	r30
    164a:	ff 93       	push	r31
	if (timer3_toggle_count != 0)
    164c:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <timer3_toggle_count>
    1650:	90 91 1f 03 	lds	r25, 0x031F	; 0x80031f <timer3_toggle_count+0x1>
    1654:	a0 91 20 03 	lds	r26, 0x0320	; 0x800320 <timer3_toggle_count+0x2>
    1658:	b0 91 21 03 	lds	r27, 0x0321	; 0x800321 <timer3_toggle_count+0x3>
    165c:	89 2b       	or	r24, r25
    165e:	8a 2b       	or	r24, r26
    1660:	8b 2b       	or	r24, r27
    1662:	51 f1       	breq	.+84     	; 0x16b8 <__vector_32+0x92>
	{
		// toggle the pin
		*timer3_pin_port ^= timer3_pin_mask;
    1664:	90 91 10 03 	lds	r25, 0x0310	; 0x800310 <timer3_pin_mask>
    1668:	e0 91 18 03 	lds	r30, 0x0318	; 0x800318 <timer3_pin_port>
    166c:	f0 91 19 03 	lds	r31, 0x0319	; 0x800319 <timer3_pin_port+0x1>
    1670:	80 81       	ld	r24, Z
    1672:	89 27       	eor	r24, r25
    1674:	80 83       	st	Z, r24
		
		if (timer3_toggle_count > 0)
    1676:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <timer3_toggle_count>
    167a:	90 91 1f 03 	lds	r25, 0x031F	; 0x80031f <timer3_toggle_count+0x1>
    167e:	a0 91 20 03 	lds	r26, 0x0320	; 0x800320 <timer3_toggle_count+0x2>
    1682:	b0 91 21 03 	lds	r27, 0x0321	; 0x800321 <timer3_toggle_count+0x3>
    1686:	18 16       	cp	r1, r24
    1688:	19 06       	cpc	r1, r25
    168a:	1a 06       	cpc	r1, r26
    168c:	1b 06       	cpc	r1, r27
    168e:	04 f5       	brge	.+64     	; 0x16d0 <__vector_32+0xaa>
			timer3_toggle_count--;
    1690:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <timer3_toggle_count>
    1694:	90 91 1f 03 	lds	r25, 0x031F	; 0x80031f <timer3_toggle_count+0x1>
    1698:	a0 91 20 03 	lds	r26, 0x0320	; 0x800320 <timer3_toggle_count+0x2>
    169c:	b0 91 21 03 	lds	r27, 0x0321	; 0x800321 <timer3_toggle_count+0x3>
    16a0:	01 97       	sbiw	r24, 0x01	; 1
    16a2:	a1 09       	sbc	r26, r1
    16a4:	b1 09       	sbc	r27, r1
    16a6:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <timer3_toggle_count>
    16aa:	90 93 1f 03 	sts	0x031F, r25	; 0x80031f <timer3_toggle_count+0x1>
    16ae:	a0 93 20 03 	sts	0x0320, r26	; 0x800320 <timer3_toggle_count+0x2>
    16b2:	b0 93 21 03 	sts	0x0321, r27	; 0x800321 <timer3_toggle_count+0x3>
    16b6:	0c c0       	rjmp	.+24     	; 0x16d0 <__vector_32+0xaa>
	}
	else
	{
		disableTimer(3);
    16b8:	83 e0       	ldi	r24, 0x03	; 3
    16ba:	7b df       	rcall	.-266    	; 0x15b2 <disableTimer>
		
		*timer3_pin_port &= ~(timer3_pin_mask);  // keep pin low after stop
    16bc:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <timer3_pin_mask>
    16c0:	e0 91 18 03 	lds	r30, 0x0318	; 0x800318 <timer3_pin_port>
    16c4:	f0 91 19 03 	lds	r31, 0x0319	; 0x800319 <timer3_pin_port+0x1>
    16c8:	90 81       	ld	r25, Z
    16ca:	80 95       	com	r24
    16cc:	89 23       	and	r24, r25
    16ce:	80 83       	st	Z, r24
	}
}
    16d0:	ff 91       	pop	r31
    16d2:	ef 91       	pop	r30
    16d4:	bf 91       	pop	r27
    16d6:	af 91       	pop	r26
    16d8:	9f 91       	pop	r25
    16da:	8f 91       	pop	r24
    16dc:	7f 91       	pop	r23
    16de:	6f 91       	pop	r22
    16e0:	5f 91       	pop	r21
    16e2:	4f 91       	pop	r20
    16e4:	3f 91       	pop	r19
    16e6:	2f 91       	pop	r18
    16e8:	0f 90       	pop	r0
    16ea:	0b be       	out	0x3b, r0	; 59
    16ec:	0f 90       	pop	r0
    16ee:	0f be       	out	0x3f, r0	; 63
    16f0:	0f 90       	pop	r0
    16f2:	1f 90       	pop	r1
    16f4:	18 95       	reti

000016f6 <sdDetected>:
    }
}

void sdDetected(void)
{
	LCD_PrintString("SD Detected",0,1);
    16f6:	41 e0       	ldi	r20, 0x01	; 1
    16f8:	60 e0       	ldi	r22, 0x00	; 0
    16fa:	81 e1       	ldi	r24, 0x11	; 17
    16fc:	92 e0       	ldi	r25, 0x02	; 2
    16fe:	0c 94 b0 02 	jmp	0x560	; 0x560 <LCD_PrintString>
    1702:	08 95       	ret

00001704 <Button2>:
	Serial2_write('o');

}
void Button2(void)
{
	togglePin(Pin_PK1);
    1704:	88 e5       	ldi	r24, 0x58	; 88
    1706:	0c 94 5b 03 	jmp	0x6b6	; 0x6b6 <togglePin>
    170a:	08 95       	ret

0000170c <Button3>:
}
void Button3(void)
{
	togglePin(Pin_PK2);
    170c:	87 e5       	ldi	r24, 0x57	; 87
    170e:	0c 94 5b 03 	jmp	0x6b6	; 0x6b6 <togglePin>
    1712:	08 95       	ret

00001714 <Button1>:
}

void Button1(void)
{
	char str[] = "Good";
	togglePin(Pin_PK0);
    1714:	89 e5       	ldi	r24, 0x59	; 89
    1716:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <togglePin>
	Serial2_write('G');
    171a:	87 e4       	ldi	r24, 0x47	; 71
    171c:	d2 dd       	rcall	.-1116   	; 0x12c2 <Serial2_write>
	Serial2_write('o');
    171e:	8f e6       	ldi	r24, 0x6F	; 111
    1720:	d0 dd       	rcall	.-1120   	; 0x12c2 <Serial2_write>
	Serial2_write('o');
    1722:	8f e6       	ldi	r24, 0x6F	; 111
    1724:	ce cd       	rjmp	.-1124   	; 0x12c2 <Serial2_write>
    1726:	08 95       	ret

00001728 <LCD_PrintInt>:
    1728:	0f 93       	push	r16
{
	togglePin(Pin_PK2);
	
}

void LCD_PrintInt(uint16_t n,uint8_t x,uint8_t y){
    172a:	1f 93       	push	r17
    172c:	cf 93       	push	r28
    172e:	df 93       	push	r29
    1730:	cd b7       	in	r28, 0x3d	; 61
    1732:	de b7       	in	r29, 0x3e	; 62
    1734:	2a 97       	sbiw	r28, 0x0a	; 10
    1736:	0f b6       	in	r0, 0x3f	; 63
    1738:	f8 94       	cli
    173a:	de bf       	out	0x3e, r29	; 62
    173c:	0f be       	out	0x3f, r0	; 63
    173e:	cd bf       	out	0x3d, r28	; 61
    1740:	16 2f       	mov	r17, r22
    1742:	04 2f       	mov	r16, r20
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    1744:	4a e0       	ldi	r20, 0x0A	; 10
    1746:	be 01       	movw	r22, r28
    1748:	6f 5f       	subi	r22, 0xFF	; 255
    174a:	7f 4f       	sbci	r23, 0xFF	; 255
    174c:	93 d0       	rcall	.+294    	; 0x1874 <__itoa_ncheck>
	char buffer[10];
	itoa(n,buffer,10);
	LCD_PrintString(buffer,x,y);
    174e:	40 2f       	mov	r20, r16
    1750:	61 2f       	mov	r22, r17
    1752:	ce 01       	movw	r24, r28
    1754:	01 96       	adiw	r24, 0x01	; 1
    1756:	0e 94 b0 02 	call	0x560	; 0x560 <LCD_PrintString>
}
    175a:	2a 96       	adiw	r28, 0x0a	; 10
    175c:	0f b6       	in	r0, 0x3f	; 63
    175e:	f8 94       	cli
    1760:	de bf       	out	0x3e, r29	; 62
    1762:	0f be       	out	0x3f, r0	; 63
    1764:	cd bf       	out	0x3d, r28	; 61
    1766:	df 91       	pop	r29
    1768:	cf 91       	pop	r28
    176a:	1f 91       	pop	r17
    176c:	0f 91       	pop	r16
    176e:	08 95       	ret

00001770 <main>:
void Button3(void);
void LCD_PrintInt(uint16_t n,uint8_t x,uint8_t y);

int main(void)
{
	millis_init();
    1770:	60 de       	rcall	.-832    	; 0x1432 <millis_init>
	pwm_init();
    1772:	1e dc       	rcall	.-1988   	; 0xfb0 <pwm_init>
    1774:	0e 94 bb 02 	call	0x576	; 0x576 <adc_init>
	adc_init();
    1778:	46 e0       	ldi	r20, 0x06	; 6
	Serial2_begin(9600, SERIAL_8N1);
    177a:	60 e8       	ldi	r22, 0x80	; 128
    177c:	75 e2       	ldi	r23, 0x25	; 37
    177e:	80 e0       	ldi	r24, 0x00	; 0
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	1c dd       	rcall	.-1480   	; 0x11bc <Serial2_begin>
    1784:	0e 94 14 02 	call	0x428	; 0x428 <lcd_init>
	
	lcd_init();
    1788:	0e 94 e7 01 	call	0x3ce	; 0x3ce <lcd_clear>
	lcd_clear();
    178c:	40 e0       	ldi	r20, 0x00	; 0
	LCD_PrintString("MCU TRAINING KIT",0,0);
    178e:	60 e0       	ldi	r22, 0x00	; 0
    1790:	8d e1       	ldi	r24, 0x1D	; 29
    1792:	92 e0       	ldi	r25, 0x02	; 2
    1794:	0e 94 b0 02 	call	0x560	; 0x560 <LCD_PrintString>
    1798:	61 e0       	ldi	r22, 0x01	; 1

	//User LEDs
	pinMode(Pin_PK0, OUTPUT);
    179a:	89 e5       	ldi	r24, 0x59	; 89
    179c:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <pinMode>
    17a0:	61 e0       	ldi	r22, 0x01	; 1
	pinMode(Pin_PK1, OUTPUT);
    17a2:	88 e5       	ldi	r24, 0x58	; 88
    17a4:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <pinMode>
    17a8:	61 e0       	ldi	r22, 0x01	; 1
	pinMode(Pin_PK2, OUTPUT);
    17aa:	87 e5       	ldi	r24, 0x57	; 87
    17ac:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <pinMode>
    17b0:	60 e0       	ldi	r22, 0x00	; 0
	
	//Buttons - Pin change
	pinMode(Pin_PJ2, INPUT);
    17b2:	81 e4       	ldi	r24, 0x41	; 65
    17b4:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <pinMode>
    17b8:	60 e0       	ldi	r22, 0x00	; 0
	pinMode(Pin_PJ3, INPUT);
    17ba:	82 e4       	ldi	r24, 0x42	; 66
    17bc:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <pinMode>
    17c0:	60 e0       	ldi	r22, 0x00	; 0
	pinMode(Pin_PJ4, INPUT);
    17c2:	83 e4       	ldi	r24, 0x43	; 67
    17c4:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <pinMode>
    17c8:	43 e0       	ldi	r20, 0x03	; 3
	attachPCINT(pinToPCINT(Pin_PJ2), Button1, RISING);
    17ca:	6a e8       	ldi	r22, 0x8A	; 138
    17cc:	7b e0       	ldi	r23, 0x0B	; 11
    17ce:	8b e0       	ldi	r24, 0x0B	; 11
    17d0:	aa d9       	rcall	.-3244   	; 0xb26 <attachPinChangeInterrupt>
    17d2:	43 e0       	ldi	r20, 0x03	; 3
	attachPCINT(pinToPCINT(Pin_PJ3), Button2, RISING);
    17d4:	62 e8       	ldi	r22, 0x82	; 130
    17d6:	7b e0       	ldi	r23, 0x0B	; 11
    17d8:	8c e0       	ldi	r24, 0x0C	; 12
    17da:	a5 d9       	rcall	.-3254   	; 0xb26 <attachPinChangeInterrupt>
    17dc:	43 e0       	ldi	r20, 0x03	; 3
	attachPCINT(pinToPCINT(Pin_PJ4), Button3, RISING);
    17de:	66 e8       	ldi	r22, 0x86	; 134
    17e0:	7b e0       	ldi	r23, 0x0B	; 11
    17e2:	8d e0       	ldi	r24, 0x0D	; 13
    17e4:	a0 d9       	rcall	.-3264   	; 0xb26 <attachPinChangeInterrupt>
    17e6:	43 e0       	ldi	r20, 0x03	; 3
    17e8:	50 e0       	ldi	r21, 0x00	; 0
	
	attachInterrupt(EXTERNAL_INT_5,sdDetected, RISING);
    17ea:	6b e7       	ldi	r22, 0x7B	; 123
    17ec:	7b e0       	ldi	r23, 0x0B	; 11
    17ee:	85 e0       	ldi	r24, 0x05	; 5
    17f0:	0e 94 76 03 	call	0x6ec	; 0x6ec <attachInterrupt>
    17f4:	6f e3       	ldi	r22, 0x3F	; 63
	
	analogWrite(Pin_PH3,255/4);
    17f6:	70 e0       	ldi	r23, 0x00	; 0
    17f8:	8f e0       	ldi	r24, 0x0F	; 15
    17fa:	1a dc       	rcall	.-1996   	; 0x1030 <analogWrite>
    17fc:	81 e6       	ldi	r24, 0x61	; 97

		

    while (1) 
    {
		int pot_val = analogRead(Pin_PF0);
    17fe:	0e 94 ca 02 	call	0x594	; 0x594 <analogRead>
    1802:	41 e0       	ldi	r20, 0x01	; 1
		
		LCD_PrintInt(pot_val,4,1);
    1804:	64 e0       	ldi	r22, 0x04	; 4
    1806:	90 df       	rcall	.-224    	; 0x1728 <LCD_PrintInt>
    1808:	62 e3       	ldi	r22, 0x32	; 50
		delay_ms(50);
    180a:	70 e0       	ldi	r23, 0x00	; 0
    180c:	80 e0       	ldi	r24, 0x00	; 0
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	49 de       	rcall	.-878    	; 0x14a4 <delay_ms>
    1812:	41 e0       	ldi	r20, 0x01	; 1
    1814:	60 e0       	ldi	r22, 0x00	; 0
		LCD_PrintString("ADC:    ",0,1);//clear line
    1816:	8e e2       	ldi	r24, 0x2E	; 46
    1818:	92 e0       	ldi	r25, 0x02	; 2
    181a:	0e 94 b0 02 	call	0x560	; 0x560 <LCD_PrintString>
    181e:	ee cf       	rjmp	.-36     	; 0x17fc <main+0x8c>

00001820 <__udivmodsi4>:
    1820:	a1 e2       	ldi	r26, 0x21	; 33
    1822:	1a 2e       	mov	r1, r26
    1824:	aa 1b       	sub	r26, r26
    1826:	bb 1b       	sub	r27, r27
    1828:	fd 01       	movw	r30, r26
    182a:	0d c0       	rjmp	.+26     	; 0x1846 <__udivmodsi4_ep>

0000182c <__udivmodsi4_loop>:
    182c:	aa 1f       	adc	r26, r26
    182e:	bb 1f       	adc	r27, r27
    1830:	ee 1f       	adc	r30, r30
    1832:	ff 1f       	adc	r31, r31
    1834:	a2 17       	cp	r26, r18
    1836:	b3 07       	cpc	r27, r19
    1838:	e4 07       	cpc	r30, r20
    183a:	f5 07       	cpc	r31, r21
    183c:	20 f0       	brcs	.+8      	; 0x1846 <__udivmodsi4_ep>
    183e:	a2 1b       	sub	r26, r18
    1840:	b3 0b       	sbc	r27, r19
    1842:	e4 0b       	sbc	r30, r20
    1844:	f5 0b       	sbc	r31, r21

00001846 <__udivmodsi4_ep>:
    1846:	66 1f       	adc	r22, r22
    1848:	77 1f       	adc	r23, r23
    184a:	88 1f       	adc	r24, r24
    184c:	99 1f       	adc	r25, r25
    184e:	1a 94       	dec	r1
    1850:	69 f7       	brne	.-38     	; 0x182c <__udivmodsi4_loop>
    1852:	60 95       	com	r22
    1854:	70 95       	com	r23
    1856:	80 95       	com	r24
    1858:	90 95       	com	r25
    185a:	9b 01       	movw	r18, r22
    185c:	ac 01       	movw	r20, r24
    185e:	bd 01       	movw	r22, r26
    1860:	cf 01       	movw	r24, r30
    1862:	08 95       	ret

00001864 <__tablejump2__>:
    1864:	ee 0f       	add	r30, r30
    1866:	ff 1f       	adc	r31, r31
    1868:	88 1f       	adc	r24, r24
    186a:	8b bf       	out	0x3b, r24	; 59
    186c:	07 90       	elpm	r0, Z+
    186e:	f6 91       	elpm	r31, Z
    1870:	e0 2d       	mov	r30, r0
    1872:	19 94       	eijmp

00001874 <__itoa_ncheck>:
    1874:	bb 27       	eor	r27, r27
    1876:	4a 30       	cpi	r20, 0x0A	; 10
    1878:	31 f4       	brne	.+12     	; 0x1886 <__itoa_ncheck+0x12>
    187a:	99 23       	and	r25, r25
    187c:	22 f4       	brpl	.+8      	; 0x1886 <__itoa_ncheck+0x12>
    187e:	bd e2       	ldi	r27, 0x2D	; 45
    1880:	90 95       	com	r25
    1882:	81 95       	neg	r24
    1884:	9f 4f       	sbci	r25, 0xFF	; 255
    1886:	01 c0       	rjmp	.+2      	; 0x188a <__utoa_common>

00001888 <__utoa_ncheck>:
    1888:	bb 27       	eor	r27, r27

0000188a <__utoa_common>:
    188a:	fb 01       	movw	r30, r22
    188c:	55 27       	eor	r21, r21
    188e:	aa 27       	eor	r26, r26
    1890:	88 0f       	add	r24, r24
    1892:	99 1f       	adc	r25, r25
    1894:	aa 1f       	adc	r26, r26
    1896:	a4 17       	cp	r26, r20
    1898:	10 f0       	brcs	.+4      	; 0x189e <__utoa_common+0x14>
    189a:	a4 1b       	sub	r26, r20
    189c:	83 95       	inc	r24
    189e:	50 51       	subi	r21, 0x10	; 16
    18a0:	b9 f7       	brne	.-18     	; 0x1890 <__utoa_common+0x6>
    18a2:	a0 5d       	subi	r26, 0xD0	; 208
    18a4:	aa 33       	cpi	r26, 0x3A	; 58
    18a6:	08 f0       	brcs	.+2      	; 0x18aa <__utoa_common+0x20>
    18a8:	a9 5d       	subi	r26, 0xD9	; 217
    18aa:	a1 93       	st	Z+, r26
    18ac:	00 97       	sbiw	r24, 0x00	; 0
    18ae:	79 f7       	brne	.-34     	; 0x188e <__utoa_common+0x4>
    18b0:	b1 11       	cpse	r27, r1
    18b2:	b1 93       	st	Z+, r27
    18b4:	11 92       	st	Z+, r1
    18b6:	cb 01       	movw	r24, r22
    18b8:	00 c0       	rjmp	.+0      	; 0x18ba <strrev>

000018ba <strrev>:
    18ba:	dc 01       	movw	r26, r24
    18bc:	fc 01       	movw	r30, r24
    18be:	67 2f       	mov	r22, r23
    18c0:	71 91       	ld	r23, Z+
    18c2:	77 23       	and	r23, r23
    18c4:	e1 f7       	brne	.-8      	; 0x18be <strrev+0x4>
    18c6:	32 97       	sbiw	r30, 0x02	; 2
    18c8:	04 c0       	rjmp	.+8      	; 0x18d2 <strrev+0x18>
    18ca:	7c 91       	ld	r23, X
    18cc:	6d 93       	st	X+, r22
    18ce:	70 83       	st	Z, r23
    18d0:	62 91       	ld	r22, -Z
    18d2:	ae 17       	cp	r26, r30
    18d4:	bf 07       	cpc	r27, r31
    18d6:	c8 f3       	brcs	.-14     	; 0x18ca <strrev+0x10>
    18d8:	08 95       	ret

000018da <_exit>:
    18da:	f8 94       	cli

000018dc <__stop_program>:
    18dc:	ff cf       	rjmp	.-2      	; 0x18dc <__stop_program>
