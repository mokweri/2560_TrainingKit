
TK2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800200  000015ec  00001680  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000015ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000007d  00800238  00800238  000016b8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000016b8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000016e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003e0  00000000  00000000  00001728  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003f52  00000000  00000000  00001b08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001a64  00000000  00000000  00005a5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000243d  00000000  00000000  000074be  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b10  00000000  00000000  000098fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001236  00000000  00000000  0000a40c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002b6a  00000000  00000000  0000b642  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000378  00000000  00000000  0000e1ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	3d c1       	rjmp	.+634    	; 0x27c <__ctors_end>
       2:	00 00       	nop
       4:	ef c3       	rjmp	.+2014   	; 0x7e4 <__vector_1>
       6:	00 00       	nop
       8:	18 c4       	rjmp	.+2096   	; 0x83a <__vector_2>
       a:	00 00       	nop
       c:	41 c4       	rjmp	.+2178   	; 0x890 <__vector_3>
       e:	00 00       	nop
      10:	6a c4       	rjmp	.+2260   	; 0x8e6 <__vector_4>
      12:	00 00       	nop
      14:	93 c4       	rjmp	.+2342   	; 0x93c <__vector_5>
      16:	00 00       	nop
      18:	bc c4       	rjmp	.+2424   	; 0x992 <__vector_6>
      1a:	00 00       	nop
      1c:	e5 c4       	rjmp	.+2506   	; 0x9e8 <__vector_7>
      1e:	00 00       	nop
      20:	0e c5       	rjmp	.+2588   	; 0xa3e <__vector_8>
      22:	00 00       	nop
      24:	86 c6       	rjmp	.+3340   	; 0xd32 <__vector_9>
      26:	00 00       	nop
      28:	fc c6       	rjmp	.+3576   	; 0xe22 <__vector_10>
      2a:	00 00       	nop
      2c:	77 c7       	rjmp	.+3822   	; 0xf1c <__vector_11>
      2e:	00 00       	nop
      30:	46 c1       	rjmp	.+652    	; 0x2be <__bad_interrupt>
      32:	00 00       	nop
      34:	44 c1       	rjmp	.+648    	; 0x2be <__bad_interrupt>
      36:	00 00       	nop
      38:	42 c1       	rjmp	.+644    	; 0x2be <__bad_interrupt>
      3a:	00 00       	nop
      3c:	40 c1       	rjmp	.+640    	; 0x2be <__bad_interrupt>
      3e:	00 00       	nop
      40:	3e c1       	rjmp	.+636    	; 0x2be <__bad_interrupt>
      42:	00 00       	nop
      44:	3c c1       	rjmp	.+632    	; 0x2be <__bad_interrupt>
      46:	00 00       	nop
      48:	3a c1       	rjmp	.+628    	; 0x2be <__bad_interrupt>
      4a:	00 00       	nop
      4c:	38 c1       	rjmp	.+624    	; 0x2be <__bad_interrupt>
      4e:	00 00       	nop
      50:	36 c1       	rjmp	.+620    	; 0x2be <__bad_interrupt>
      52:	00 00       	nop
      54:	34 c1       	rjmp	.+616    	; 0x2be <__bad_interrupt>
      56:	00 00       	nop
      58:	32 c1       	rjmp	.+612    	; 0x2be <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 53 09 	jmp	0x12a6	; 0x12a6 <__vector_23>
      60:	2e c1       	rjmp	.+604    	; 0x2be <__bad_interrupt>
      62:	00 00       	nop
      64:	2c c1       	rjmp	.+600    	; 0x2be <__bad_interrupt>
      66:	00 00       	nop
      68:	2a c1       	rjmp	.+596    	; 0x2be <__bad_interrupt>
      6a:	00 00       	nop
      6c:	28 c1       	rjmp	.+592    	; 0x2be <__bad_interrupt>
      6e:	00 00       	nop
      70:	26 c1       	rjmp	.+588    	; 0x2be <__bad_interrupt>
      72:	00 00       	nop
      74:	24 c1       	rjmp	.+584    	; 0x2be <__bad_interrupt>
      76:	00 00       	nop
      78:	22 c1       	rjmp	.+580    	; 0x2be <__bad_interrupt>
      7a:	00 00       	nop
      7c:	20 c1       	rjmp	.+576    	; 0x2be <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 d7 09 	jmp	0x13ae	; 0x13ae <__vector_32>
      84:	1c c1       	rjmp	.+568    	; 0x2be <__bad_interrupt>
      86:	00 00       	nop
      88:	1a c1       	rjmp	.+564    	; 0x2be <__bad_interrupt>
      8a:	00 00       	nop
      8c:	18 c1       	rjmp	.+560    	; 0x2be <__bad_interrupt>
      8e:	00 00       	nop
      90:	16 c1       	rjmp	.+556    	; 0x2be <__bad_interrupt>
      92:	00 00       	nop
      94:	14 c1       	rjmp	.+552    	; 0x2be <__bad_interrupt>
      96:	00 00       	nop
      98:	12 c1       	rjmp	.+548    	; 0x2be <__bad_interrupt>
      9a:	00 00       	nop
      9c:	10 c1       	rjmp	.+544    	; 0x2be <__bad_interrupt>
      9e:	00 00       	nop
      a0:	0e c1       	rjmp	.+540    	; 0x2be <__bad_interrupt>
      a2:	00 00       	nop
      a4:	0c c1       	rjmp	.+536    	; 0x2be <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0a c1       	rjmp	.+532    	; 0x2be <__bad_interrupt>
      aa:	00 00       	nop
      ac:	08 c1       	rjmp	.+528    	; 0x2be <__bad_interrupt>
      ae:	00 00       	nop
      b0:	06 c1       	rjmp	.+524    	; 0x2be <__bad_interrupt>
      b2:	00 00       	nop
      b4:	04 c1       	rjmp	.+520    	; 0x2be <__bad_interrupt>
      b6:	00 00       	nop
      b8:	02 c1       	rjmp	.+516    	; 0x2be <__bad_interrupt>
      ba:	00 00       	nop
      bc:	00 c1       	rjmp	.+512    	; 0x2be <__bad_interrupt>
      be:	00 00       	nop
      c0:	fe c0       	rjmp	.+508    	; 0x2be <__bad_interrupt>
      c2:	00 00       	nop
      c4:	fc c0       	rjmp	.+504    	; 0x2be <__bad_interrupt>
      c6:	00 00       	nop
      c8:	fa c0       	rjmp	.+500    	; 0x2be <__bad_interrupt>
      ca:	00 00       	nop
      cc:	f8 c0       	rjmp	.+496    	; 0x2be <__bad_interrupt>
      ce:	00 00       	nop
      d0:	f6 c0       	rjmp	.+492    	; 0x2be <__bad_interrupt>
      d2:	00 00       	nop
      d4:	f4 c0       	rjmp	.+488    	; 0x2be <__bad_interrupt>
      d6:	00 00       	nop
      d8:	f2 c0       	rjmp	.+484    	; 0x2be <__bad_interrupt>
      da:	00 00       	nop
      dc:	f0 c0       	rjmp	.+480    	; 0x2be <__bad_interrupt>
      de:	00 00       	nop
      e0:	ee c0       	rjmp	.+476    	; 0x2be <__bad_interrupt>
      e2:	00 00       	nop
      e4:	8c 03       	fmulsu	r16, r20
      e6:	94 03       	fmuls	r17, r20
      e8:	a0 03       	fmuls	r18, r16
      ea:	ae 03       	fmulsu	r18, r22
      ec:	bf 03       	fmulsu	r19, r23
      ee:	c7 03       	fmuls	r20, r23
      f0:	d3 03       	fmuls	r21, r19
      f2:	e1 03       	fmuls	r22, r17
      f4:	3d 08       	sbc	r3, r13
      f6:	42 08       	sbc	r4, r2
      f8:	47 08       	sbc	r4, r7
      fa:	51 08       	sbc	r5, r1
      fc:	5b 08       	sbc	r5, r11
      fe:	cf 08       	sbc	r12, r15
     100:	65 08       	sbc	r6, r5
     102:	6d 08       	sbc	r6, r13
     104:	75 08       	sbc	r7, r5
     106:	7f 08       	sbc	r7, r15
     108:	89 08       	sbc	r8, r9
     10a:	93 08       	sbc	r9, r3
     10c:	9d 08       	sbc	r9, r13
     10e:	a7 08       	sbc	r10, r7
     110:	cf 08       	sbc	r12, r15
     112:	b1 08       	sbc	r11, r1
     114:	bb 08       	sbc	r11, r11
     116:	c5 08       	sbc	r12, r5

00000118 <__trampolines_end>:
     118:	00 02       	muls	r16, r16
     11a:	00 00       	nop
     11c:	00 09       	sbc	r16, r0
     11e:	0a 0b       	sbc	r16, r26
     120:	00 00       	nop
     122:	00 00       	nop
     124:	00 00       	nop
     126:	00 0c       	add	r0, r0
     128:	0d 0e       	add	r0, r29
     12a:	08 00       	.word	0x0008	; ????
     12c:	00 00       	nop
     12e:	00 07       	cpc	r16, r16
     130:	03 04       	cpc	r0, r3
     132:	01 00       	.word	0x0001	; ????
	...
     13c:	00 00       	nop
     13e:	10 11       	cpse	r17, r0
     140:	12 00       	.word	0x0012	; ????
	...

0000017d <pin_to_bit_mask_PGM>:
     17d:	00 20 01 02 04 08 10 20 40 80 00 00 01 02 04 08     . ..... @.......
     18d:	10 20 40 01 02 04 08 10 20 40 80 80 08 10 00 00     . @..... @......
     19d:	00 00 00 01 02 04 08 10 20 40 80 01 02 04 08 10     ........ @......
     1ad:	20 40 80 01 02 01 02 04 08 10 20 40 80 00 00 01      @........ @....
     1bd:	02 04 08 10 20 40 04 80 40 20 10 08 04 02 01 80     .... @..@ ......
     1cd:	00 00 80 40 20 10 08 04 02 01 80 40 20 10 08 04     ...@ ......@ ...
     1dd:	02 01 00 00 00                                      .....

000001e2 <pin_to_port_PGM>:
     1e2:	00 07 05 05 05 05 05 05 05 05 00 00 08 08 08 08     ................
     1f2:	08 08 08 02 02 02 02 02 02 02 02 08 07 07 00 00     ................
     202:	00 00 00 0c 0c 0c 0c 0c 0c 0c 0c 04 04 04 04 04     ................
     212:	04 04 04 07 07 03 03 03 03 03 03 03 03 00 00 0a     ................
     222:	0a 0a 0a 0a 0a 0a 07 01 01 01 01 01 01 01 01 0a     ................
     232:	00 00 0b 0b 0b 0b 0b 0b 0b 0b 06 06 06 06 06 06     ................
     242:	06 06 00 00 00                                      .....

00000247 <port_to_output_PGM>:
     247:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     257:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000261 <port_to_ddr_PGM>:
     261:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     271:	01 01 00 00 04 01 07 01 0a 01 00                    ...........

0000027c <__ctors_end>:
     27c:	11 24       	eor	r1, r1
     27e:	1f be       	out	0x3f, r1	; 63
     280:	cf ef       	ldi	r28, 0xFF	; 255
     282:	d1 e2       	ldi	r29, 0x21	; 33
     284:	de bf       	out	0x3e, r29	; 62
     286:	cd bf       	out	0x3d, r28	; 61
     288:	00 e0       	ldi	r16, 0x00	; 0
     28a:	0c bf       	out	0x3c, r16	; 60

0000028c <__do_copy_data>:
     28c:	12 e0       	ldi	r17, 0x02	; 2
     28e:	a0 e0       	ldi	r26, 0x00	; 0
     290:	b2 e0       	ldi	r27, 0x02	; 2
     292:	ec ee       	ldi	r30, 0xEC	; 236
     294:	f5 e1       	ldi	r31, 0x15	; 21
     296:	00 e0       	ldi	r16, 0x00	; 0
     298:	0b bf       	out	0x3b, r16	; 59
     29a:	02 c0       	rjmp	.+4      	; 0x2a0 <__do_copy_data+0x14>
     29c:	07 90       	elpm	r0, Z+
     29e:	0d 92       	st	X+, r0
     2a0:	a8 33       	cpi	r26, 0x38	; 56
     2a2:	b1 07       	cpc	r27, r17
     2a4:	d9 f7       	brne	.-10     	; 0x29c <__do_copy_data+0x10>

000002a6 <__do_clear_bss>:
     2a6:	22 e0       	ldi	r18, 0x02	; 2
     2a8:	a8 e3       	ldi	r26, 0x38	; 56
     2aa:	b2 e0       	ldi	r27, 0x02	; 2
     2ac:	01 c0       	rjmp	.+2      	; 0x2b0 <.do_clear_bss_start>

000002ae <.do_clear_bss_loop>:
     2ae:	1d 92       	st	X+, r1

000002b0 <.do_clear_bss_start>:
     2b0:	a5 3b       	cpi	r26, 0xB5	; 181
     2b2:	b2 07       	cpc	r27, r18
     2b4:	e1 f7       	brne	.-8      	; 0x2ae <.do_clear_bss_loop>
     2b6:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <main>
     2ba:	0c 94 f4 0a 	jmp	0x15e8	; 0x15e8 <_exit>

000002be <__bad_interrupt>:
     2be:	a0 ce       	rjmp	.-704    	; 0x0 <__vectors>

000002c0 <pulseEnable>:
	location &= 0x7; // we only have 8 locations 0-7
	command(LCD_SETCGRAMADDR | (location << 3));
	for (int i=0; i<8; i++) {
		write(charmap[i]);
	}
}
     2c0:	15 98       	cbi	0x02, 5	; 2
     2c2:	85 e0       	ldi	r24, 0x05	; 5
     2c4:	8a 95       	dec	r24
     2c6:	f1 f7       	brne	.-4      	; 0x2c4 <pulseEnable+0x4>
     2c8:	00 00       	nop
     2ca:	15 9a       	sbi	0x02, 5	; 2
     2cc:	95 e0       	ldi	r25, 0x05	; 5
     2ce:	9a 95       	dec	r25
     2d0:	f1 f7       	brne	.-4      	; 0x2ce <pulseEnable+0xe>
     2d2:	00 00       	nop
     2d4:	15 98       	cbi	0x02, 5	; 2
     2d6:	8f e8       	ldi	r24, 0x8F	; 143
     2d8:	91 e0       	ldi	r25, 0x01	; 1
     2da:	01 97       	sbiw	r24, 0x01	; 1
     2dc:	f1 f7       	brne	.-4      	; 0x2da <pulseEnable+0x1a>
     2de:	00 c0       	rjmp	.+0      	; 0x2e0 <pulseEnable+0x20>
     2e0:	00 00       	nop
     2e2:	08 95       	ret

000002e4 <write4bits>:
     2e4:	cf 93       	push	r28
     2e6:	df 93       	push	r29
     2e8:	e0 e5       	ldi	r30, 0x50	; 80
     2ea:	f2 e0       	ldi	r31, 0x02	; 2
     2ec:	20 e0       	ldi	r18, 0x00	; 0
     2ee:	30 e0       	ldi	r19, 0x00	; 0
     2f0:	a8 2f       	mov	r26, r24
     2f2:	b0 e0       	ldi	r27, 0x00	; 0
     2f4:	c1 e0       	ldi	r28, 0x01	; 1
     2f6:	d0 e0       	ldi	r29, 0x00	; 0
     2f8:	ad 01       	movw	r20, r26
     2fa:	02 2e       	mov	r0, r18
     2fc:	02 c0       	rjmp	.+4      	; 0x302 <write4bits+0x1e>
     2fe:	55 95       	asr	r21
     300:	47 95       	ror	r20
     302:	0a 94       	dec	r0
     304:	e2 f7       	brpl	.-8      	; 0x2fe <write4bits+0x1a>
     306:	40 ff       	sbrs	r20, 0
     308:	0b c0       	rjmp	.+22     	; 0x320 <write4bits+0x3c>
     30a:	82 b1       	in	r24, 0x02	; 2
     30c:	ae 01       	movw	r20, r28
     30e:	00 80       	ld	r0, Z
     310:	02 c0       	rjmp	.+4      	; 0x316 <write4bits+0x32>
     312:	44 0f       	add	r20, r20
     314:	55 1f       	adc	r21, r21
     316:	0a 94       	dec	r0
     318:	e2 f7       	brpl	.-8      	; 0x312 <write4bits+0x2e>
     31a:	48 2b       	or	r20, r24
     31c:	42 b9       	out	0x02, r20	; 2
     31e:	0c c0       	rjmp	.+24     	; 0x338 <write4bits+0x54>
     320:	42 b1       	in	r20, 0x02	; 2
     322:	be 01       	movw	r22, r28
     324:	00 80       	ld	r0, Z
     326:	02 c0       	rjmp	.+4      	; 0x32c <write4bits+0x48>
     328:	66 0f       	add	r22, r22
     32a:	77 1f       	adc	r23, r23
     32c:	0a 94       	dec	r0
     32e:	e2 f7       	brpl	.-8      	; 0x328 <write4bits+0x44>
     330:	96 2f       	mov	r25, r22
     332:	90 95       	com	r25
     334:	94 23       	and	r25, r20
     336:	92 b9       	out	0x02, r25	; 2
     338:	2f 5f       	subi	r18, 0xFF	; 255
     33a:	3f 4f       	sbci	r19, 0xFF	; 255
     33c:	31 96       	adiw	r30, 0x01	; 1
     33e:	24 30       	cpi	r18, 0x04	; 4
     340:	31 05       	cpc	r19, r1
     342:	d1 f6       	brne	.-76     	; 0x2f8 <write4bits+0x14>
     344:	bd df       	rcall	.-134    	; 0x2c0 <pulseEnable>
     346:	df 91       	pop	r29
     348:	cf 91       	pop	r28
     34a:	08 95       	ret

0000034c <write8bits>:
     34c:	86 95       	lsr	r24
     34e:	81 70       	andi	r24, 0x01	; 1
     350:	e0 e5       	ldi	r30, 0x50	; 80
     352:	f2 e0       	ldi	r31, 0x02	; 2
     354:	68 e5       	ldi	r22, 0x58	; 88
     356:	72 e0       	ldi	r23, 0x02	; 2
     358:	a1 e0       	ldi	r26, 0x01	; 1
     35a:	b0 e0       	ldi	r27, 0x00	; 0
     35c:	88 23       	and	r24, r24
     35e:	59 f0       	breq	.+22     	; 0x376 <write8bits+0x2a>
     360:	92 b1       	in	r25, 0x02	; 2
     362:	9d 01       	movw	r18, r26
     364:	00 80       	ld	r0, Z
     366:	02 c0       	rjmp	.+4      	; 0x36c <write8bits+0x20>
     368:	22 0f       	add	r18, r18
     36a:	33 1f       	adc	r19, r19
     36c:	0a 94       	dec	r0
     36e:	e2 f7       	brpl	.-8      	; 0x368 <write8bits+0x1c>
     370:	29 2b       	or	r18, r25
     372:	22 b9       	out	0x02, r18	; 2
     374:	0c c0       	rjmp	.+24     	; 0x38e <write8bits+0x42>
     376:	22 b1       	in	r18, 0x02	; 2
     378:	ad 01       	movw	r20, r26
     37a:	00 80       	ld	r0, Z
     37c:	02 c0       	rjmp	.+4      	; 0x382 <write8bits+0x36>
     37e:	44 0f       	add	r20, r20
     380:	55 1f       	adc	r21, r21
     382:	0a 94       	dec	r0
     384:	e2 f7       	brpl	.-8      	; 0x37e <write8bits+0x32>
     386:	94 2f       	mov	r25, r20
     388:	90 95       	com	r25
     38a:	92 23       	and	r25, r18
     38c:	92 b9       	out	0x02, r25	; 2
     38e:	31 96       	adiw	r30, 0x01	; 1
     390:	e6 17       	cp	r30, r22
     392:	f7 07       	cpc	r31, r23
     394:	19 f7       	brne	.-58     	; 0x35c <write8bits+0x10>
     396:	94 cf       	rjmp	.-216    	; 0x2c0 <pulseEnable>
     398:	08 95       	ret

0000039a <send>:
     39a:	cf 93       	push	r28
     39c:	c8 2f       	mov	r28, r24
     39e:	66 23       	and	r22, r22
     3a0:	11 f0       	breq	.+4      	; 0x3a6 <send+0xc>
     3a2:	17 9a       	sbi	0x02, 7	; 2
     3a4:	01 c0       	rjmp	.+2      	; 0x3a8 <send+0xe>
     3a6:	17 98       	cbi	0x02, 7	; 2
     3a8:	16 98       	cbi	0x02, 6	; 2
     3aa:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <_displayfunction>
     3ae:	84 ff       	sbrs	r24, 4
     3b0:	03 c0       	rjmp	.+6      	; 0x3b8 <send+0x1e>
     3b2:	8c 2f       	mov	r24, r28
     3b4:	cb df       	rcall	.-106    	; 0x34c <write8bits>
     3b6:	06 c0       	rjmp	.+12     	; 0x3c4 <send+0x2a>
     3b8:	8c 2f       	mov	r24, r28
     3ba:	82 95       	swap	r24
     3bc:	8f 70       	andi	r24, 0x0F	; 15
     3be:	92 df       	rcall	.-220    	; 0x2e4 <write4bits>
     3c0:	8c 2f       	mov	r24, r28
     3c2:	90 df       	rcall	.-224    	; 0x2e4 <write4bits>
     3c4:	cf 91       	pop	r28
     3c6:	08 95       	ret

000003c8 <command>:
     3c8:	60 e0       	ldi	r22, 0x00	; 0
     3ca:	e7 cf       	rjmp	.-50     	; 0x39a <send>
     3cc:	08 95       	ret

000003ce <lcd_clear>:
     3ce:	81 e0       	ldi	r24, 0x01	; 1
     3d0:	fb df       	rcall	.-10     	; 0x3c8 <command>
     3d2:	8f e3       	ldi	r24, 0x3F	; 63
     3d4:	9f e1       	ldi	r25, 0x1F	; 31
     3d6:	01 97       	sbiw	r24, 0x01	; 1
     3d8:	f1 f7       	brne	.-4      	; 0x3d6 <lcd_clear+0x8>
     3da:	00 c0       	rjmp	.+0      	; 0x3dc <lcd_clear+0xe>
     3dc:	00 00       	nop
     3de:	08 95       	ret

000003e0 <lcd_setCursor>:
     3e0:	ea e4       	ldi	r30, 0x4A	; 74
     3e2:	f2 e0       	ldi	r31, 0x02	; 2
     3e4:	10 82       	st	Z, r1
     3e6:	90 e4       	ldi	r25, 0x40	; 64
     3e8:	91 83       	std	Z+1, r25	; 0x01
     3ea:	94 e1       	ldi	r25, 0x14	; 20
     3ec:	92 83       	std	Z+2, r25	; 0x02
     3ee:	94 e5       	ldi	r25, 0x54	; 84
     3f0:	93 83       	std	Z+3, r25	; 0x03
     3f2:	64 30       	cpi	r22, 0x04	; 4
     3f4:	08 f0       	brcs	.+2      	; 0x3f8 <lcd_setCursor+0x18>
     3f6:	63 e0       	ldi	r22, 0x03	; 3
     3f8:	90 91 4f 02 	lds	r25, 0x024F	; 0x80024f <_numlines>
     3fc:	69 17       	cp	r22, r25
     3fe:	10 f0       	brcs	.+4      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     400:	6f ef       	ldi	r22, 0xFF	; 255
     402:	69 0f       	add	r22, r25
     404:	e6 2f       	mov	r30, r22
     406:	f0 e0       	ldi	r31, 0x00	; 0
     408:	e6 5b       	subi	r30, 0xB6	; 182
     40a:	fd 4f       	sbci	r31, 0xFD	; 253
     40c:	90 81       	ld	r25, Z
     40e:	89 0f       	add	r24, r25
     410:	80 68       	ori	r24, 0x80	; 128
     412:	da cf       	rjmp	.-76     	; 0x3c8 <command>
     414:	08 95       	ret

00000416 <lcd_display_on>:
     416:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <_displaycontrol>
     41a:	98 2f       	mov	r25, r24
     41c:	94 60       	ori	r25, 0x04	; 4
     41e:	90 93 4e 02 	sts	0x024E, r25	; 0x80024e <_displaycontrol>
     422:	8c 60       	ori	r24, 0x0C	; 12
     424:	d1 cf       	rjmp	.-94     	; 0x3c8 <command>
     426:	08 95       	ret

00000428 <lcd_init>:
     428:	cf 93       	push	r28
     42a:	e0 e5       	ldi	r30, 0x50	; 80
     42c:	f2 e0       	ldi	r31, 0x02	; 2
     42e:	83 e0       	ldi	r24, 0x03	; 3
     430:	80 83       	st	Z, r24
     432:	82 e0       	ldi	r24, 0x02	; 2
     434:	81 83       	std	Z+1, r24	; 0x01
     436:	91 e0       	ldi	r25, 0x01	; 1
     438:	92 83       	std	Z+2, r25	; 0x02
     43a:	13 82       	std	Z+3, r1	; 0x03
     43c:	14 82       	std	Z+4, r1	; 0x04
     43e:	15 82       	std	Z+5, r1	; 0x05
     440:	16 82       	std	Z+6, r1	; 0x06
     442:	17 82       	std	Z+7, r1	; 0x07
     444:	98 e0       	ldi	r25, 0x08	; 8
     446:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <_displayfunction>
     44a:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <_numlines>
     44e:	0f 9a       	sbi	0x01, 7	; 1
     450:	0e 9a       	sbi	0x01, 6	; 1
     452:	0d 9a       	sbi	0x01, 5	; 1
     454:	0c 9a       	sbi	0x01, 4	; 1
     456:	14 9a       	sbi	0x02, 4	; 2
     458:	20 e0       	ldi	r18, 0x00	; 0
     45a:	30 e0       	ldi	r19, 0x00	; 0
     45c:	c8 e0       	ldi	r28, 0x08	; 8
     45e:	b0 e0       	ldi	r27, 0x00	; 0
     460:	a4 e0       	ldi	r26, 0x04	; 4
     462:	50 e0       	ldi	r21, 0x00	; 0
     464:	61 e0       	ldi	r22, 0x01	; 1
     466:	70 e0       	ldi	r23, 0x00	; 0
     468:	0c c0       	rjmp	.+24     	; 0x482 <lcd_init+0x5a>
     46a:	41 b1       	in	r20, 0x01	; 1
     46c:	cb 01       	movw	r24, r22
     46e:	01 90       	ld	r0, Z+
     470:	02 c0       	rjmp	.+4      	; 0x476 <lcd_init+0x4e>
     472:	88 0f       	add	r24, r24
     474:	99 1f       	adc	r25, r25
     476:	0a 94       	dec	r0
     478:	e2 f7       	brpl	.-8      	; 0x472 <lcd_init+0x4a>
     47a:	84 2b       	or	r24, r20
     47c:	81 b9       	out	0x01, r24	; 1
     47e:	2f 5f       	subi	r18, 0xFF	; 255
     480:	3f 4f       	sbci	r19, 0xFF	; 255
     482:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <_displayfunction>
     486:	84 fd       	sbrc	r24, 4
     488:	03 c0       	rjmp	.+6      	; 0x490 <lcd_init+0x68>
     48a:	8a 2f       	mov	r24, r26
     48c:	95 2f       	mov	r25, r21
     48e:	02 c0       	rjmp	.+4      	; 0x494 <lcd_init+0x6c>
     490:	8c 2f       	mov	r24, r28
     492:	9b 2f       	mov	r25, r27
     494:	28 17       	cp	r18, r24
     496:	39 07       	cpc	r19, r25
     498:	44 f3       	brlt	.-48     	; 0x46a <lcd_init+0x42>
     49a:	2f ef       	ldi	r18, 0xFF	; 255
     49c:	80 e7       	ldi	r24, 0x70	; 112
     49e:	92 e0       	ldi	r25, 0x02	; 2
     4a0:	21 50       	subi	r18, 0x01	; 1
     4a2:	80 40       	sbci	r24, 0x00	; 0
     4a4:	90 40       	sbci	r25, 0x00	; 0
     4a6:	e1 f7       	brne	.-8      	; 0x4a0 <lcd_init+0x78>
     4a8:	00 c0       	rjmp	.+0      	; 0x4aa <lcd_init+0x82>
     4aa:	00 00       	nop
     4ac:	17 98       	cbi	0x02, 7	; 2
     4ae:	15 98       	cbi	0x02, 5	; 2
     4b0:	16 98       	cbi	0x02, 6	; 2
     4b2:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <_displayfunction>
     4b6:	84 fd       	sbrc	r24, 4
     4b8:	1b c0       	rjmp	.+54     	; 0x4f0 <lcd_init+0xc8>
     4ba:	83 e0       	ldi	r24, 0x03	; 3
     4bc:	13 df       	rcall	.-474    	; 0x2e4 <write4bits>
     4be:	8f e4       	ldi	r24, 0x4F	; 79
     4c0:	96 e4       	ldi	r25, 0x46	; 70
     4c2:	01 97       	sbiw	r24, 0x01	; 1
     4c4:	f1 f7       	brne	.-4      	; 0x4c2 <lcd_init+0x9a>
     4c6:	00 c0       	rjmp	.+0      	; 0x4c8 <lcd_init+0xa0>
     4c8:	00 00       	nop
     4ca:	83 e0       	ldi	r24, 0x03	; 3
     4cc:	0b df       	rcall	.-490    	; 0x2e4 <write4bits>
     4ce:	8f e4       	ldi	r24, 0x4F	; 79
     4d0:	96 e4       	ldi	r25, 0x46	; 70
     4d2:	01 97       	sbiw	r24, 0x01	; 1
     4d4:	f1 f7       	brne	.-4      	; 0x4d2 <lcd_init+0xaa>
     4d6:	00 c0       	rjmp	.+0      	; 0x4d8 <lcd_init+0xb0>
     4d8:	00 00       	nop
     4da:	83 e0       	ldi	r24, 0x03	; 3
     4dc:	03 df       	rcall	.-506    	; 0x2e4 <write4bits>
     4de:	87 e5       	ldi	r24, 0x57	; 87
     4e0:	92 e0       	ldi	r25, 0x02	; 2
     4e2:	01 97       	sbiw	r24, 0x01	; 1
     4e4:	f1 f7       	brne	.-4      	; 0x4e2 <lcd_init+0xba>
     4e6:	00 c0       	rjmp	.+0      	; 0x4e8 <lcd_init+0xc0>
     4e8:	00 00       	nop
     4ea:	82 e0       	ldi	r24, 0x02	; 2
     4ec:	fb de       	rcall	.-522    	; 0x2e4 <write4bits>
     4ee:	16 c0       	rjmp	.+44     	; 0x51c <lcd_init+0xf4>
     4f0:	80 62       	ori	r24, 0x20	; 32
     4f2:	6a df       	rcall	.-300    	; 0x3c8 <command>
     4f4:	8f e4       	ldi	r24, 0x4F	; 79
     4f6:	96 e4       	ldi	r25, 0x46	; 70
     4f8:	01 97       	sbiw	r24, 0x01	; 1
     4fa:	f1 f7       	brne	.-4      	; 0x4f8 <lcd_init+0xd0>
     4fc:	00 c0       	rjmp	.+0      	; 0x4fe <lcd_init+0xd6>
     4fe:	00 00       	nop
     500:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <_displayfunction>
     504:	80 62       	ori	r24, 0x20	; 32
     506:	60 df       	rcall	.-320    	; 0x3c8 <command>
     508:	87 e5       	ldi	r24, 0x57	; 87
     50a:	92 e0       	ldi	r25, 0x02	; 2
     50c:	01 97       	sbiw	r24, 0x01	; 1
     50e:	f1 f7       	brne	.-4      	; 0x50c <lcd_init+0xe4>
     510:	00 c0       	rjmp	.+0      	; 0x512 <lcd_init+0xea>
     512:	00 00       	nop
     514:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <_displayfunction>
     518:	80 62       	ori	r24, 0x20	; 32
     51a:	56 df       	rcall	.-340    	; 0x3c8 <command>
     51c:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <_displayfunction>
     520:	80 62       	ori	r24, 0x20	; 32
     522:	52 df       	rcall	.-348    	; 0x3c8 <command>
     524:	84 e0       	ldi	r24, 0x04	; 4
     526:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <_displaycontrol>
     52a:	75 df       	rcall	.-278    	; 0x416 <lcd_display_on>
     52c:	50 df       	rcall	.-352    	; 0x3ce <lcd_clear>
     52e:	82 e0       	ldi	r24, 0x02	; 2
     530:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <_displaymode>
     534:	86 e0       	ldi	r24, 0x06	; 6
     536:	48 df       	rcall	.-368    	; 0x3c8 <command>
     538:	cf 91       	pop	r28
     53a:	08 95       	ret

0000053c <write>:
     53c:	61 e0       	ldi	r22, 0x01	; 1
     53e:	2d df       	rcall	.-422    	; 0x39a <send>
     540:	81 e0       	ldi	r24, 0x01	; 1
     542:	08 95       	ret

00000544 <lcd_puts>:
	}
	pulseEnable();
}

//------Print------------
void lcd_puts(char *string) {
     544:	cf 93       	push	r28
     546:	df 93       	push	r29
     548:	ec 01       	movw	r28, r24
	for (char *it = string; *it; it++) {
     54a:	88 81       	ld	r24, Y
     54c:	88 23       	and	r24, r24
     54e:	29 f0       	breq	.+10     	; 0x55a <lcd_puts+0x16>
     550:	21 96       	adiw	r28, 0x01	; 1
		write(*it);
     552:	f4 df       	rcall	.-24     	; 0x53c <write>
	pulseEnable();
}

//------Print------------
void lcd_puts(char *string) {
	for (char *it = string; *it; it++) {
     554:	89 91       	ld	r24, Y+
     556:	81 11       	cpse	r24, r1
     558:	fc cf       	rjmp	.-8      	; 0x552 <lcd_puts+0xe>
		write(*it);
	}
}
     55a:	df 91       	pop	r29
     55c:	cf 91       	pop	r28
     55e:	08 95       	ret

00000560 <LCD_PrintString>:

void LCD_PrintString(char *string, uint8_t x, uint8_t y)
{
     560:	cf 93       	push	r28
     562:	df 93       	push	r29
     564:	ec 01       	movw	r28, r24
     566:	86 2f       	mov	r24, r22
	lcd_setCursor(x,y);
     568:	64 2f       	mov	r22, r20
     56a:	3a df       	rcall	.-396    	; 0x3e0 <lcd_setCursor>
	lcd_puts(string);
     56c:	ce 01       	movw	r24, r28
     56e:	ea df       	rcall	.-44     	; 0x544 <lcd_puts>
}
     570:	df 91       	pop	r29
     572:	cf 91       	pop	r28
     574:	08 95       	ret

00000576 <adc_init>:

void adc_init(void)
{
	// set ADC prescaler so we are inside the desired 50-200 KHz range.
#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
	bitSet(ADCSRA, ADPS2);
     576:	ea e7       	ldi	r30, 0x7A	; 122
     578:	f0 e0       	ldi	r31, 0x00	; 0
     57a:	80 81       	ld	r24, Z
     57c:	84 60       	ori	r24, 0x04	; 4
     57e:	80 83       	st	Z, r24
	bitSet(ADCSRA, ADPS1);
     580:	80 81       	ld	r24, Z
     582:	82 60       	ori	r24, 0x02	; 2
     584:	80 83       	st	Z, r24
	bitSet(ADCSRA, ADPS0);
     586:	80 81       	ld	r24, Z
     588:	81 60       	ori	r24, 0x01	; 1
     58a:	80 83       	st	Z, r24
	bitSet(ADCSRA, ADPS1);
	bitSet(ADCSRA, ADPS0);
#endif

	//Enable ADC conversions
	bitSet(ADCSRA, ADEN);
     58c:	80 81       	ld	r24, Z
     58e:	80 68       	ori	r24, 0x80	; 128
     590:	80 83       	st	Z, r24
     592:	08 95       	ret

00000594 <analogRead>:
	
}

int analogRead(uint8_t pin)
{
	uint8_t channel = pinToADCChannel(pin);
     594:	96 ea       	ldi	r25, 0xA6	; 166
     596:	98 0f       	add	r25, r24
     598:	98 30       	cpi	r25, 0x08	; 8
     59a:	20 f4       	brcc	.+8      	; 0x5a4 <analogRead+0x10>
     59c:	91 e6       	ldi	r25, 0x61	; 97
     59e:	98 1b       	sub	r25, r24
     5a0:	89 2f       	mov	r24, r25
     5a2:	09 c0       	rjmp	.+18     	; 0x5b6 <analogRead+0x22>
     5a4:	9e ea       	ldi	r25, 0xAE	; 174
     5a6:	98 0f       	add	r25, r24
     5a8:	98 30       	cpi	r25, 0x08	; 8
     5aa:	20 f4       	brcc	.+8      	; 0x5b4 <analogRead+0x20>
     5ac:	91 e6       	ldi	r25, 0x61	; 97
     5ae:	98 1b       	sub	r25, r24
     5b0:	89 2f       	mov	r24, r25
     5b2:	01 c0       	rjmp	.+2      	; 0x5b6 <analogRead+0x22>
     5b4:	8f ef       	ldi	r24, 0xFF	; 255
	
	if(channel != NOT_ADC_PIN){
		// the MUX5 bit of ADCSRB selects whether we're reading from channels
		// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).
		ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((channel >> 3) & 0x01) << MUX5);
     5b6:	eb e7       	ldi	r30, 0x7B	; 123
     5b8:	f0 e0       	ldi	r31, 0x00	; 0
     5ba:	90 81       	ld	r25, Z
     5bc:	28 2f       	mov	r18, r24
     5be:	28 70       	andi	r18, 0x08	; 8
     5c0:	97 7f       	andi	r25, 0xF7	; 247
     5c2:	92 2b       	or	r25, r18
     5c4:	90 83       	st	Z, r25
		
		// set the analog reference (high two bits of ADMUX) and select the channel (low 4 bits).  
		// this also sets ADLAR (left-adjust result) to 0 (the default- right adjusted).
		ADMUX = (analog_reference << 6) | (channel & 0x0F );
     5c6:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     5ca:	90 e4       	ldi	r25, 0x40	; 64
     5cc:	29 9f       	mul	r18, r25
     5ce:	90 01       	movw	r18, r0
     5d0:	11 24       	eor	r1, r1
     5d2:	8f 70       	andi	r24, 0x0F	; 15
     5d4:	82 2b       	or	r24, r18
     5d6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		
		//Start the conversion
		ADCSRA |= (1<<ADSC);
     5da:	ea e7       	ldi	r30, 0x7A	; 122
     5dc:	f0 e0       	ldi	r31, 0x00	; 0
     5de:	80 81       	ld	r24, Z
     5e0:	80 64       	ori	r24, 0x40	; 64
     5e2:	80 83       	st	Z, r24
		// Wait completion of ADC
		while (bit_is_set(ADCSRA, ADSC));
     5e4:	80 81       	ld	r24, Z
     5e6:	86 fd       	sbrc	r24, 6
     5e8:	fd cf       	rjmp	.-6      	; 0x5e4 <analogRead+0x50>
		
		return (ADC);
     5ea:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
     5ee:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
	}else{
		return 0;
	}
     5f2:	08 95       	ret

000005f4 <pinMode>:
 */ 
#include "tk2560.h"


void pinMode(uint8_t pin, uint8_t mode)
{
     5f4:	cf 93       	push	r28
     5f6:	df 93       	push	r29
	uint8_t bit = pinToBitMask(pin);
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	fc 01       	movw	r30, r24
     5fc:	e3 58       	subi	r30, 0x83	; 131
     5fe:	fe 4f       	sbci	r31, 0xFE	; 254
     600:	24 91       	lpm	r18, Z
	uint8_t port = pinToPort(pin);
     602:	fc 01       	movw	r30, r24
     604:	ee 51       	subi	r30, 0x1E	; 30
     606:	fe 4f       	sbci	r31, 0xFE	; 254
     608:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;
	
	if (port == NOT_A_PIN) return;
     60a:	88 23       	and	r24, r24
     60c:	79 f1       	breq	.+94     	; 0x66c <pinMode+0x78>
	
	reg = portDDRRegister(port);
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	88 0f       	add	r24, r24
     612:	99 1f       	adc	r25, r25
     614:	fc 01       	movw	r30, r24
     616:	ef 59       	subi	r30, 0x9F	; 159
     618:	fd 4f       	sbci	r31, 0xFD	; 253
     61a:	a5 91       	lpm	r26, Z+
     61c:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
     61e:	fc 01       	movw	r30, r24
     620:	e9 5b       	subi	r30, 0xB9	; 185
     622:	fd 4f       	sbci	r31, 0xFD	; 253
     624:	c5 91       	lpm	r28, Z+
     626:	d4 91       	lpm	r29, Z
	
	if (mode == INPUT)
     628:	61 11       	cpse	r22, r1
     62a:	0c c0       	rjmp	.+24     	; 0x644 <pinMode+0x50>
	{
		uint8_t oldSREG = SREG;
     62c:	9f b7       	in	r25, 0x3f	; 63
		cli();
     62e:	f8 94       	cli
		*reg &= ~bit;
     630:	8c 91       	ld	r24, X
     632:	e2 2f       	mov	r30, r18
     634:	e0 95       	com	r30
     636:	8e 23       	and	r24, r30
     638:	8c 93       	st	X, r24
		*out &= ~bit;
     63a:	28 81       	ld	r18, Y
     63c:	e2 23       	and	r30, r18
     63e:	e8 83       	st	Y, r30
		SREG = oldSREG;
     640:	9f bf       	out	0x3f, r25	; 63
     642:	14 c0       	rjmp	.+40     	; 0x66c <pinMode+0x78>
	}else if(mode == INPUT_PULLUP)
     644:	62 30       	cpi	r22, 0x02	; 2
     646:	61 f4       	brne	.+24     	; 0x660 <pinMode+0x6c>
	{
		uint8_t oldSREG = SREG;
     648:	9f b7       	in	r25, 0x3f	; 63
		cli();
     64a:	f8 94       	cli
		*reg &= ~bit;
     64c:	8c 91       	ld	r24, X
     64e:	32 2f       	mov	r19, r18
     650:	30 95       	com	r19
     652:	83 23       	and	r24, r19
     654:	8c 93       	st	X, r24
		*out |= bit;
     656:	e8 81       	ld	r30, Y
     658:	e2 2b       	or	r30, r18
     65a:	e8 83       	st	Y, r30
		SREG = oldSREG;
     65c:	9f bf       	out	0x3f, r25	; 63
     65e:	06 c0       	rjmp	.+12     	; 0x66c <pinMode+0x78>
	}else{
		//output
		uint8_t oldSREG = SREG;
     660:	8f b7       	in	r24, 0x3f	; 63
		cli();
     662:	f8 94       	cli
		*reg |= bit;
     664:	ec 91       	ld	r30, X
     666:	e2 2b       	or	r30, r18
     668:	ec 93       	st	X, r30
		SREG = oldSREG;
     66a:	8f bf       	out	0x3f, r24	; 63
	}
		
}
     66c:	df 91       	pop	r29
     66e:	cf 91       	pop	r28
     670:	08 95       	ret

00000672 <digitalWrite>:

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t bit = pinToBitMask(pin);
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	fc 01       	movw	r30, r24
     676:	e3 58       	subi	r30, 0x83	; 131
     678:	fe 4f       	sbci	r31, 0xFE	; 254
     67a:	24 91       	lpm	r18, Z
	uint8_t port = pinToPort(pin);
     67c:	fc 01       	movw	r30, r24
     67e:	ee 51       	subi	r30, 0x1E	; 30
     680:	fe 4f       	sbci	r31, 0xFE	; 254
     682:	84 91       	lpm	r24, Z
	volatile uint8_t *out;
	
	if (port == NOT_A_PIN) return;
     684:	88 23       	and	r24, r24
     686:	b1 f0       	breq	.+44     	; 0x6b4 <digitalWrite+0x42>
	
	out = portOutputRegister(port);
     688:	e8 2f       	mov	r30, r24
     68a:	f0 e0       	ldi	r31, 0x00	; 0
     68c:	ee 0f       	add	r30, r30
     68e:	ff 1f       	adc	r31, r31
     690:	e9 5b       	subi	r30, 0xB9	; 185
     692:	fd 4f       	sbci	r31, 0xFD	; 253
     694:	a5 91       	lpm	r26, Z+
     696:	b4 91       	lpm	r27, Z
	
	uint8_t oldSREG = SREG;
     698:	8f b7       	in	r24, 0x3f	; 63
	cli();
     69a:	f8 94       	cli
	
	if (val == LOW) {
     69c:	61 11       	cpse	r22, r1
     69e:	06 c0       	rjmp	.+12     	; 0x6ac <digitalWrite+0x3a>
		*out &= ~bit;
     6a0:	9c 91       	ld	r25, X
     6a2:	e2 2f       	mov	r30, r18
     6a4:	e0 95       	com	r30
     6a6:	e9 23       	and	r30, r25
     6a8:	ec 93       	st	X, r30
     6aa:	03 c0       	rjmp	.+6      	; 0x6b2 <digitalWrite+0x40>
	} else {
		*out |= bit;
     6ac:	ec 91       	ld	r30, X
     6ae:	e2 2b       	or	r30, r18
     6b0:	ec 93       	st	X, r30
	}
	
	SREG = oldSREG;
     6b2:	8f bf       	out	0x3f, r24	; 63
     6b4:	08 95       	ret

000006b6 <togglePin>:
	
}

void togglePin(uint8_t pin)
{
	uint8_t bit = pinToBitMask(pin);
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	fc 01       	movw	r30, r24
     6ba:	e3 58       	subi	r30, 0x83	; 131
     6bc:	fe 4f       	sbci	r31, 0xFE	; 254
     6be:	24 91       	lpm	r18, Z
	uint8_t port = pinToPort(pin);
     6c0:	fc 01       	movw	r30, r24
     6c2:	ee 51       	subi	r30, 0x1E	; 30
     6c4:	fe 4f       	sbci	r31, 0xFE	; 254
     6c6:	84 91       	lpm	r24, Z
	volatile uint8_t *out;
	
	if (port == NOT_A_PIN) return;
     6c8:	88 23       	and	r24, r24
     6ca:	71 f0       	breq	.+28     	; 0x6e8 <togglePin+0x32>
	
	out = portOutputRegister(port);
     6cc:	e8 2f       	mov	r30, r24
     6ce:	f0 e0       	ldi	r31, 0x00	; 0
     6d0:	ee 0f       	add	r30, r30
     6d2:	ff 1f       	adc	r31, r31
     6d4:	e9 5b       	subi	r30, 0xB9	; 185
     6d6:	fd 4f       	sbci	r31, 0xFD	; 253
     6d8:	a5 91       	lpm	r26, Z+
     6da:	b4 91       	lpm	r27, Z
	
	uint8_t oldSREG = SREG;
     6dc:	8f b7       	in	r24, 0x3f	; 63
	cli();
     6de:	f8 94       	cli
	
	//toggle
	*out ^= bit;
     6e0:	ec 91       	ld	r30, X
     6e2:	e2 27       	eor	r30, r18
     6e4:	ec 93       	st	X, r30
	
	SREG = oldSREG;
     6e6:	8f bf       	out	0x3f, r24	; 63
     6e8:	08 95       	ret

000006ea <nothing>:
			break;
			case 7:
				EIMSK &= ~(1<<INT7);
			break;
		}
		intFunc[interruptNum] = nothing;
     6ea:	08 95       	ret

000006ec <attachInterrupt>:
     6ec:	88 30       	cpi	r24, 0x08	; 8
     6ee:	08 f0       	brcs	.+2      	; 0x6f2 <attachInterrupt+0x6>
     6f0:	78 c0       	rjmp	.+240    	; 0x7e2 <attachInterrupt+0xf6>
     6f2:	e8 2f       	mov	r30, r24
     6f4:	f0 e0       	ldi	r31, 0x00	; 0
     6f6:	ee 0f       	add	r30, r30
     6f8:	ff 1f       	adc	r31, r31
     6fa:	ef 5f       	subi	r30, 0xFF	; 255
     6fc:	fd 4f       	sbci	r31, 0xFD	; 253
     6fe:	71 83       	std	Z+1, r23	; 0x01
     700:	60 83       	st	Z, r22
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	88 30       	cpi	r24, 0x08	; 8
     706:	91 05       	cpc	r25, r1
     708:	08 f0       	brcs	.+2      	; 0x70c <attachInterrupt+0x20>
     70a:	6b c0       	rjmp	.+214    	; 0x7e2 <attachInterrupt+0xf6>
     70c:	fc 01       	movw	r30, r24
     70e:	88 27       	eor	r24, r24
     710:	ee 58       	subi	r30, 0x8E	; 142
     712:	ff 4f       	sbci	r31, 0xFF	; 255
     714:	8f 4f       	sbci	r24, 0xFF	; 255
     716:	2d c7       	rjmp	.+3674   	; 0x1572 <__tablejump2__>
     718:	e9 e6       	ldi	r30, 0x69	; 105
     71a:	f0 e0       	ldi	r31, 0x00	; 0
     71c:	80 81       	ld	r24, Z
     71e:	8c 7f       	andi	r24, 0xFC	; 252
     720:	48 2b       	or	r20, r24
     722:	40 83       	st	Z, r20
     724:	e8 9a       	sbi	0x1d, 0	; 29
     726:	08 95       	ret
     728:	e9 e6       	ldi	r30, 0x69	; 105
     72a:	f0 e0       	ldi	r31, 0x00	; 0
     72c:	80 81       	ld	r24, Z
     72e:	83 7f       	andi	r24, 0xF3	; 243
     730:	44 0f       	add	r20, r20
     732:	55 1f       	adc	r21, r21
     734:	44 0f       	add	r20, r20
     736:	55 1f       	adc	r21, r21
     738:	48 2b       	or	r20, r24
     73a:	40 83       	st	Z, r20
     73c:	e9 9a       	sbi	0x1d, 1	; 29
     73e:	08 95       	ret
     740:	e9 e6       	ldi	r30, 0x69	; 105
     742:	f0 e0       	ldi	r31, 0x00	; 0
     744:	80 81       	ld	r24, Z
     746:	8f 7c       	andi	r24, 0xCF	; 207
     748:	42 95       	swap	r20
     74a:	52 95       	swap	r21
     74c:	50 7f       	andi	r21, 0xF0	; 240
     74e:	54 27       	eor	r21, r20
     750:	40 7f       	andi	r20, 0xF0	; 240
     752:	54 27       	eor	r21, r20
     754:	48 2b       	or	r20, r24
     756:	40 83       	st	Z, r20
     758:	ea 9a       	sbi	0x1d, 2	; 29
     75a:	08 95       	ret
     75c:	e9 e6       	ldi	r30, 0x69	; 105
     75e:	f0 e0       	ldi	r31, 0x00	; 0
     760:	80 81       	ld	r24, Z
     762:	8f 73       	andi	r24, 0x3F	; 63
     764:	00 24       	eor	r0, r0
     766:	56 95       	lsr	r21
     768:	47 95       	ror	r20
     76a:	07 94       	ror	r0
     76c:	56 95       	lsr	r21
     76e:	47 95       	ror	r20
     770:	07 94       	ror	r0
     772:	54 2f       	mov	r21, r20
     774:	40 2d       	mov	r20, r0
     776:	48 2b       	or	r20, r24
     778:	40 83       	st	Z, r20
     77a:	eb 9a       	sbi	0x1d, 3	; 29
     77c:	08 95       	ret
     77e:	ea e6       	ldi	r30, 0x6A	; 106
     780:	f0 e0       	ldi	r31, 0x00	; 0
     782:	80 81       	ld	r24, Z
     784:	8c 7f       	andi	r24, 0xFC	; 252
     786:	48 2b       	or	r20, r24
     788:	40 83       	st	Z, r20
     78a:	ec 9a       	sbi	0x1d, 4	; 29
     78c:	08 95       	ret
     78e:	ea e6       	ldi	r30, 0x6A	; 106
     790:	f0 e0       	ldi	r31, 0x00	; 0
     792:	80 81       	ld	r24, Z
     794:	83 7f       	andi	r24, 0xF3	; 243
     796:	44 0f       	add	r20, r20
     798:	55 1f       	adc	r21, r21
     79a:	44 0f       	add	r20, r20
     79c:	55 1f       	adc	r21, r21
     79e:	48 2b       	or	r20, r24
     7a0:	40 83       	st	Z, r20
     7a2:	ed 9a       	sbi	0x1d, 5	; 29
     7a4:	08 95       	ret
     7a6:	ea e6       	ldi	r30, 0x6A	; 106
     7a8:	f0 e0       	ldi	r31, 0x00	; 0
     7aa:	80 81       	ld	r24, Z
     7ac:	8f 7c       	andi	r24, 0xCF	; 207
     7ae:	42 95       	swap	r20
     7b0:	52 95       	swap	r21
     7b2:	50 7f       	andi	r21, 0xF0	; 240
     7b4:	54 27       	eor	r21, r20
     7b6:	40 7f       	andi	r20, 0xF0	; 240
     7b8:	54 27       	eor	r21, r20
     7ba:	48 2b       	or	r20, r24
     7bc:	40 83       	st	Z, r20
     7be:	ee 9a       	sbi	0x1d, 6	; 29
     7c0:	08 95       	ret
     7c2:	ea e6       	ldi	r30, 0x6A	; 106
     7c4:	f0 e0       	ldi	r31, 0x00	; 0
     7c6:	80 81       	ld	r24, Z
     7c8:	8f 73       	andi	r24, 0x3F	; 63
     7ca:	00 24       	eor	r0, r0
     7cc:	56 95       	lsr	r21
     7ce:	47 95       	ror	r20
     7d0:	07 94       	ror	r0
     7d2:	56 95       	lsr	r21
     7d4:	47 95       	ror	r20
     7d6:	07 94       	ror	r0
     7d8:	54 2f       	mov	r21, r20
     7da:	40 2d       	mov	r20, r0
     7dc:	48 2b       	or	r20, r24
     7de:	40 83       	st	Z, r20
     7e0:	ef 9a       	sbi	0x1d, 7	; 29
     7e2:	08 95       	ret

000007e4 <__vector_1>:
#define IMPLEMENT_ISR(vect, interrupt) \
	ISR(vect) { \
		intFunc[interrupt](); \
	}
	
IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
     7e4:	1f 92       	push	r1
     7e6:	0f 92       	push	r0
     7e8:	0f b6       	in	r0, 0x3f	; 63
     7ea:	0f 92       	push	r0
     7ec:	11 24       	eor	r1, r1
     7ee:	0b b6       	in	r0, 0x3b	; 59
     7f0:	0f 92       	push	r0
     7f2:	2f 93       	push	r18
     7f4:	3f 93       	push	r19
     7f6:	4f 93       	push	r20
     7f8:	5f 93       	push	r21
     7fa:	6f 93       	push	r22
     7fc:	7f 93       	push	r23
     7fe:	8f 93       	push	r24
     800:	9f 93       	push	r25
     802:	af 93       	push	r26
     804:	bf 93       	push	r27
     806:	ef 93       	push	r30
     808:	ff 93       	push	r31
     80a:	e0 91 01 02 	lds	r30, 0x0201	; 0x800201 <intFunc>
     80e:	f0 91 02 02 	lds	r31, 0x0202	; 0x800202 <intFunc+0x1>
     812:	19 95       	eicall
     814:	ff 91       	pop	r31
     816:	ef 91       	pop	r30
     818:	bf 91       	pop	r27
     81a:	af 91       	pop	r26
     81c:	9f 91       	pop	r25
     81e:	8f 91       	pop	r24
     820:	7f 91       	pop	r23
     822:	6f 91       	pop	r22
     824:	5f 91       	pop	r21
     826:	4f 91       	pop	r20
     828:	3f 91       	pop	r19
     82a:	2f 91       	pop	r18
     82c:	0f 90       	pop	r0
     82e:	0b be       	out	0x3b, r0	; 59
     830:	0f 90       	pop	r0
     832:	0f be       	out	0x3f, r0	; 63
     834:	0f 90       	pop	r0
     836:	1f 90       	pop	r1
     838:	18 95       	reti

0000083a <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
     83a:	1f 92       	push	r1
     83c:	0f 92       	push	r0
     83e:	0f b6       	in	r0, 0x3f	; 63
     840:	0f 92       	push	r0
     842:	11 24       	eor	r1, r1
     844:	0b b6       	in	r0, 0x3b	; 59
     846:	0f 92       	push	r0
     848:	2f 93       	push	r18
     84a:	3f 93       	push	r19
     84c:	4f 93       	push	r20
     84e:	5f 93       	push	r21
     850:	6f 93       	push	r22
     852:	7f 93       	push	r23
     854:	8f 93       	push	r24
     856:	9f 93       	push	r25
     858:	af 93       	push	r26
     85a:	bf 93       	push	r27
     85c:	ef 93       	push	r30
     85e:	ff 93       	push	r31
     860:	e0 91 03 02 	lds	r30, 0x0203	; 0x800203 <intFunc+0x2>
     864:	f0 91 04 02 	lds	r31, 0x0204	; 0x800204 <intFunc+0x3>
     868:	19 95       	eicall
     86a:	ff 91       	pop	r31
     86c:	ef 91       	pop	r30
     86e:	bf 91       	pop	r27
     870:	af 91       	pop	r26
     872:	9f 91       	pop	r25
     874:	8f 91       	pop	r24
     876:	7f 91       	pop	r23
     878:	6f 91       	pop	r22
     87a:	5f 91       	pop	r21
     87c:	4f 91       	pop	r20
     87e:	3f 91       	pop	r19
     880:	2f 91       	pop	r18
     882:	0f 90       	pop	r0
     884:	0b be       	out	0x3b, r0	; 59
     886:	0f 90       	pop	r0
     888:	0f be       	out	0x3f, r0	; 63
     88a:	0f 90       	pop	r0
     88c:	1f 90       	pop	r1
     88e:	18 95       	reti

00000890 <__vector_3>:
IMPLEMENT_ISR(INT2_vect, EXTERNAL_INT_2)
     890:	1f 92       	push	r1
     892:	0f 92       	push	r0
     894:	0f b6       	in	r0, 0x3f	; 63
     896:	0f 92       	push	r0
     898:	11 24       	eor	r1, r1
     89a:	0b b6       	in	r0, 0x3b	; 59
     89c:	0f 92       	push	r0
     89e:	2f 93       	push	r18
     8a0:	3f 93       	push	r19
     8a2:	4f 93       	push	r20
     8a4:	5f 93       	push	r21
     8a6:	6f 93       	push	r22
     8a8:	7f 93       	push	r23
     8aa:	8f 93       	push	r24
     8ac:	9f 93       	push	r25
     8ae:	af 93       	push	r26
     8b0:	bf 93       	push	r27
     8b2:	ef 93       	push	r30
     8b4:	ff 93       	push	r31
     8b6:	e0 91 05 02 	lds	r30, 0x0205	; 0x800205 <intFunc+0x4>
     8ba:	f0 91 06 02 	lds	r31, 0x0206	; 0x800206 <intFunc+0x5>
     8be:	19 95       	eicall
     8c0:	ff 91       	pop	r31
     8c2:	ef 91       	pop	r30
     8c4:	bf 91       	pop	r27
     8c6:	af 91       	pop	r26
     8c8:	9f 91       	pop	r25
     8ca:	8f 91       	pop	r24
     8cc:	7f 91       	pop	r23
     8ce:	6f 91       	pop	r22
     8d0:	5f 91       	pop	r21
     8d2:	4f 91       	pop	r20
     8d4:	3f 91       	pop	r19
     8d6:	2f 91       	pop	r18
     8d8:	0f 90       	pop	r0
     8da:	0b be       	out	0x3b, r0	; 59
     8dc:	0f 90       	pop	r0
     8de:	0f be       	out	0x3f, r0	; 63
     8e0:	0f 90       	pop	r0
     8e2:	1f 90       	pop	r1
     8e4:	18 95       	reti

000008e6 <__vector_4>:
IMPLEMENT_ISR(INT3_vect, EXTERNAL_INT_3)
     8e6:	1f 92       	push	r1
     8e8:	0f 92       	push	r0
     8ea:	0f b6       	in	r0, 0x3f	; 63
     8ec:	0f 92       	push	r0
     8ee:	11 24       	eor	r1, r1
     8f0:	0b b6       	in	r0, 0x3b	; 59
     8f2:	0f 92       	push	r0
     8f4:	2f 93       	push	r18
     8f6:	3f 93       	push	r19
     8f8:	4f 93       	push	r20
     8fa:	5f 93       	push	r21
     8fc:	6f 93       	push	r22
     8fe:	7f 93       	push	r23
     900:	8f 93       	push	r24
     902:	9f 93       	push	r25
     904:	af 93       	push	r26
     906:	bf 93       	push	r27
     908:	ef 93       	push	r30
     90a:	ff 93       	push	r31
     90c:	e0 91 07 02 	lds	r30, 0x0207	; 0x800207 <intFunc+0x6>
     910:	f0 91 08 02 	lds	r31, 0x0208	; 0x800208 <intFunc+0x7>
     914:	19 95       	eicall
     916:	ff 91       	pop	r31
     918:	ef 91       	pop	r30
     91a:	bf 91       	pop	r27
     91c:	af 91       	pop	r26
     91e:	9f 91       	pop	r25
     920:	8f 91       	pop	r24
     922:	7f 91       	pop	r23
     924:	6f 91       	pop	r22
     926:	5f 91       	pop	r21
     928:	4f 91       	pop	r20
     92a:	3f 91       	pop	r19
     92c:	2f 91       	pop	r18
     92e:	0f 90       	pop	r0
     930:	0b be       	out	0x3b, r0	; 59
     932:	0f 90       	pop	r0
     934:	0f be       	out	0x3f, r0	; 63
     936:	0f 90       	pop	r0
     938:	1f 90       	pop	r1
     93a:	18 95       	reti

0000093c <__vector_5>:
IMPLEMENT_ISR(INT4_vect, EXTERNAL_INT_4)
     93c:	1f 92       	push	r1
     93e:	0f 92       	push	r0
     940:	0f b6       	in	r0, 0x3f	; 63
     942:	0f 92       	push	r0
     944:	11 24       	eor	r1, r1
     946:	0b b6       	in	r0, 0x3b	; 59
     948:	0f 92       	push	r0
     94a:	2f 93       	push	r18
     94c:	3f 93       	push	r19
     94e:	4f 93       	push	r20
     950:	5f 93       	push	r21
     952:	6f 93       	push	r22
     954:	7f 93       	push	r23
     956:	8f 93       	push	r24
     958:	9f 93       	push	r25
     95a:	af 93       	push	r26
     95c:	bf 93       	push	r27
     95e:	ef 93       	push	r30
     960:	ff 93       	push	r31
     962:	e0 91 09 02 	lds	r30, 0x0209	; 0x800209 <intFunc+0x8>
     966:	f0 91 0a 02 	lds	r31, 0x020A	; 0x80020a <intFunc+0x9>
     96a:	19 95       	eicall
     96c:	ff 91       	pop	r31
     96e:	ef 91       	pop	r30
     970:	bf 91       	pop	r27
     972:	af 91       	pop	r26
     974:	9f 91       	pop	r25
     976:	8f 91       	pop	r24
     978:	7f 91       	pop	r23
     97a:	6f 91       	pop	r22
     97c:	5f 91       	pop	r21
     97e:	4f 91       	pop	r20
     980:	3f 91       	pop	r19
     982:	2f 91       	pop	r18
     984:	0f 90       	pop	r0
     986:	0b be       	out	0x3b, r0	; 59
     988:	0f 90       	pop	r0
     98a:	0f be       	out	0x3f, r0	; 63
     98c:	0f 90       	pop	r0
     98e:	1f 90       	pop	r1
     990:	18 95       	reti

00000992 <__vector_6>:
IMPLEMENT_ISR(INT5_vect, EXTERNAL_INT_5)
     992:	1f 92       	push	r1
     994:	0f 92       	push	r0
     996:	0f b6       	in	r0, 0x3f	; 63
     998:	0f 92       	push	r0
     99a:	11 24       	eor	r1, r1
     99c:	0b b6       	in	r0, 0x3b	; 59
     99e:	0f 92       	push	r0
     9a0:	2f 93       	push	r18
     9a2:	3f 93       	push	r19
     9a4:	4f 93       	push	r20
     9a6:	5f 93       	push	r21
     9a8:	6f 93       	push	r22
     9aa:	7f 93       	push	r23
     9ac:	8f 93       	push	r24
     9ae:	9f 93       	push	r25
     9b0:	af 93       	push	r26
     9b2:	bf 93       	push	r27
     9b4:	ef 93       	push	r30
     9b6:	ff 93       	push	r31
     9b8:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <intFunc+0xa>
     9bc:	f0 91 0c 02 	lds	r31, 0x020C	; 0x80020c <intFunc+0xb>
     9c0:	19 95       	eicall
     9c2:	ff 91       	pop	r31
     9c4:	ef 91       	pop	r30
     9c6:	bf 91       	pop	r27
     9c8:	af 91       	pop	r26
     9ca:	9f 91       	pop	r25
     9cc:	8f 91       	pop	r24
     9ce:	7f 91       	pop	r23
     9d0:	6f 91       	pop	r22
     9d2:	5f 91       	pop	r21
     9d4:	4f 91       	pop	r20
     9d6:	3f 91       	pop	r19
     9d8:	2f 91       	pop	r18
     9da:	0f 90       	pop	r0
     9dc:	0b be       	out	0x3b, r0	; 59
     9de:	0f 90       	pop	r0
     9e0:	0f be       	out	0x3f, r0	; 63
     9e2:	0f 90       	pop	r0
     9e4:	1f 90       	pop	r1
     9e6:	18 95       	reti

000009e8 <__vector_7>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
     9e8:	1f 92       	push	r1
     9ea:	0f 92       	push	r0
     9ec:	0f b6       	in	r0, 0x3f	; 63
     9ee:	0f 92       	push	r0
     9f0:	11 24       	eor	r1, r1
     9f2:	0b b6       	in	r0, 0x3b	; 59
     9f4:	0f 92       	push	r0
     9f6:	2f 93       	push	r18
     9f8:	3f 93       	push	r19
     9fa:	4f 93       	push	r20
     9fc:	5f 93       	push	r21
     9fe:	6f 93       	push	r22
     a00:	7f 93       	push	r23
     a02:	8f 93       	push	r24
     a04:	9f 93       	push	r25
     a06:	af 93       	push	r26
     a08:	bf 93       	push	r27
     a0a:	ef 93       	push	r30
     a0c:	ff 93       	push	r31
     a0e:	e0 91 0d 02 	lds	r30, 0x020D	; 0x80020d <intFunc+0xc>
     a12:	f0 91 0e 02 	lds	r31, 0x020E	; 0x80020e <intFunc+0xd>
     a16:	19 95       	eicall
     a18:	ff 91       	pop	r31
     a1a:	ef 91       	pop	r30
     a1c:	bf 91       	pop	r27
     a1e:	af 91       	pop	r26
     a20:	9f 91       	pop	r25
     a22:	8f 91       	pop	r24
     a24:	7f 91       	pop	r23
     a26:	6f 91       	pop	r22
     a28:	5f 91       	pop	r21
     a2a:	4f 91       	pop	r20
     a2c:	3f 91       	pop	r19
     a2e:	2f 91       	pop	r18
     a30:	0f 90       	pop	r0
     a32:	0b be       	out	0x3b, r0	; 59
     a34:	0f 90       	pop	r0
     a36:	0f be       	out	0x3f, r0	; 63
     a38:	0f 90       	pop	r0
     a3a:	1f 90       	pop	r1
     a3c:	18 95       	reti

00000a3e <__vector_8>:
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)
     a3e:	1f 92       	push	r1
     a40:	0f 92       	push	r0
     a42:	0f b6       	in	r0, 0x3f	; 63
     a44:	0f 92       	push	r0
     a46:	11 24       	eor	r1, r1
     a48:	0b b6       	in	r0, 0x3b	; 59
     a4a:	0f 92       	push	r0
     a4c:	2f 93       	push	r18
     a4e:	3f 93       	push	r19
     a50:	4f 93       	push	r20
     a52:	5f 93       	push	r21
     a54:	6f 93       	push	r22
     a56:	7f 93       	push	r23
     a58:	8f 93       	push	r24
     a5a:	9f 93       	push	r25
     a5c:	af 93       	push	r26
     a5e:	bf 93       	push	r27
     a60:	ef 93       	push	r30
     a62:	ff 93       	push	r31
     a64:	e0 91 0f 02 	lds	r30, 0x020F	; 0x80020f <intFunc+0xe>
     a68:	f0 91 10 02 	lds	r31, 0x0210	; 0x800210 <intFunc+0xf>
     a6c:	19 95       	eicall
     a6e:	ff 91       	pop	r31
     a70:	ef 91       	pop	r30
     a72:	bf 91       	pop	r27
     a74:	af 91       	pop	r26
     a76:	9f 91       	pop	r25
     a78:	8f 91       	pop	r24
     a7a:	7f 91       	pop	r23
     a7c:	6f 91       	pop	r22
     a7e:	5f 91       	pop	r21
     a80:	4f 91       	pop	r20
     a82:	3f 91       	pop	r19
     a84:	2f 91       	pop	r18
     a86:	0f 90       	pop	r0
     a88:	0b be       	out	0x3b, r0	; 59
     a8a:	0f 90       	pop	r0
     a8c:	0f be       	out	0x3f, r0	; 63
     a8e:	0f 90       	pop	r0
     a90:	1f 90       	pop	r1
     a92:	18 95       	reti

00000a94 <enablePinChangeInterruptHelper>:
	// delete setting
	risingPorts[arrayPos] &= ~pcintMask;
	fallingPorts[arrayPos] &= ~pcintMask;

	// call the actual hardware disable function
	disablePinChangeInterruptHelper(pcintPort, pcintMask);
     a94:	98 2f       	mov	r25, r24
     a96:	81 30       	cpi	r24, 0x01	; 1
     a98:	59 f0       	breq	.+22     	; 0xab0 <enablePinChangeInterruptHelper+0x1c>
     a9a:	18 f0       	brcs	.+6      	; 0xaa2 <enablePinChangeInterruptHelper+0xe>
     a9c:	82 30       	cpi	r24, 0x02	; 2
     a9e:	a1 f0       	breq	.+40     	; 0xac8 <enablePinChangeInterruptHelper+0x34>
     aa0:	1b c0       	rjmp	.+54     	; 0xad8 <enablePinChangeInterruptHelper+0x44>
     aa2:	83 b1       	in	r24, 0x03	; 3
     aa4:	e4 2f       	mov	r30, r20
     aa6:	f0 e0       	ldi	r31, 0x00	; 0
     aa8:	e2 5c       	subi	r30, 0xC2	; 194
     aaa:	fd 4f       	sbci	r31, 0xFD	; 253
     aac:	80 83       	st	Z, r24
     aae:	1a c0       	rjmp	.+52     	; 0xae4 <enablePinChangeInterruptHelper+0x50>
     ab0:	2c b1       	in	r18, 0x0c	; 12
     ab2:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
     ab6:	e4 2f       	mov	r30, r20
     ab8:	f0 e0       	ldi	r31, 0x00	; 0
     aba:	e2 5c       	subi	r30, 0xC2	; 194
     abc:	fd 4f       	sbci	r31, 0xFD	; 253
     abe:	21 70       	andi	r18, 0x01	; 1
     ac0:	88 0f       	add	r24, r24
     ac2:	82 2b       	or	r24, r18
     ac4:	80 83       	st	Z, r24
     ac6:	14 c0       	rjmp	.+40     	; 0xaf0 <enablePinChangeInterruptHelper+0x5c>
     ac8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
     acc:	e4 2f       	mov	r30, r20
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	e2 5c       	subi	r30, 0xC2	; 194
     ad2:	fd 4f       	sbci	r31, 0xFD	; 253
     ad4:	80 83       	st	Z, r24
     ad6:	12 c0       	rjmp	.+36     	; 0xafc <enablePinChangeInterruptHelper+0x68>
     ad8:	81 30       	cpi	r24, 0x01	; 1
     ada:	51 f0       	breq	.+20     	; 0xaf0 <enablePinChangeInterruptHelper+0x5c>
     adc:	18 f0       	brcs	.+6      	; 0xae4 <enablePinChangeInterruptHelper+0x50>
     ade:	82 30       	cpi	r24, 0x02	; 2
     ae0:	91 f4       	brne	.+36     	; 0xb06 <enablePinChangeInterruptHelper+0x72>
     ae2:	0c c0       	rjmp	.+24     	; 0xafc <enablePinChangeInterruptHelper+0x68>
     ae4:	eb e6       	ldi	r30, 0x6B	; 107
     ae6:	f0 e0       	ldi	r31, 0x00	; 0
     ae8:	80 81       	ld	r24, Z
     aea:	68 2b       	or	r22, r24
     aec:	60 83       	st	Z, r22
     aee:	0b c0       	rjmp	.+22     	; 0xb06 <enablePinChangeInterruptHelper+0x72>
     af0:	ec e6       	ldi	r30, 0x6C	; 108
     af2:	f0 e0       	ldi	r31, 0x00	; 0
     af4:	80 81       	ld	r24, Z
     af6:	68 2b       	or	r22, r24
     af8:	60 83       	st	Z, r22
     afa:	05 c0       	rjmp	.+10     	; 0xb06 <enablePinChangeInterruptHelper+0x72>
     afc:	ed e6       	ldi	r30, 0x6D	; 109
     afe:	f0 e0       	ldi	r31, 0x00	; 0
     b00:	80 81       	ld	r24, Z
     b02:	68 2b       	or	r22, r24
     b04:	60 83       	st	Z, r22
     b06:	e8 e6       	ldi	r30, 0x68	; 104
     b08:	f0 e0       	ldi	r31, 0x00	; 0
     b0a:	40 81       	ld	r20, Z
     b0c:	21 e0       	ldi	r18, 0x01	; 1
     b0e:	30 e0       	ldi	r19, 0x00	; 0
     b10:	b9 01       	movw	r22, r18
     b12:	02 c0       	rjmp	.+4      	; 0xb18 <enablePinChangeInterruptHelper+0x84>
     b14:	66 0f       	add	r22, r22
     b16:	77 1f       	adc	r23, r23
     b18:	9a 95       	dec	r25
     b1a:	e2 f7       	brpl	.-8      	; 0xb14 <enablePinChangeInterruptHelper+0x80>
     b1c:	cb 01       	movw	r24, r22
     b1e:	84 2b       	or	r24, r20
     b20:	80 83       	st	Z, r24
     b22:	08 95       	ret

00000b24 <attachPinChangeInterrupt>:
     b24:	98 2f       	mov	r25, r24
     b26:	96 95       	lsr	r25
     b28:	96 95       	lsr	r25
     b2a:	96 95       	lsr	r25
     b2c:	28 2f       	mov	r18, r24
     b2e:	27 70       	andi	r18, 0x07	; 7
     b30:	78 94       	sei
     b32:	91 11       	cpse	r25, r1
     b34:	39 c0       	rjmp	.+114    	; 0xba8 <attachPinChangeInterrupt+0x84>
     b36:	81 11       	cpse	r24, r1
     b38:	05 c0       	rjmp	.+10     	; 0xb44 <attachPinChangeInterrupt+0x20>
     b3a:	70 93 5c 02 	sts	0x025C, r23	; 0x80025c <callbackPCINT0+0x1>
     b3e:	60 93 5b 02 	sts	0x025B, r22	; 0x80025b <callbackPCINT0>
     b42:	0e c0       	rjmp	.+28     	; 0xb60 <attachPinChangeInterrupt+0x3c>
     b44:	81 30       	cpi	r24, 0x01	; 1
     b46:	29 f4       	brne	.+10     	; 0xb52 <attachPinChangeInterrupt+0x2e>
     b48:	70 93 62 02 	sts	0x0262, r23	; 0x800262 <callbackPCINT1+0x1>
     b4c:	60 93 61 02 	sts	0x0261, r22	; 0x800261 <callbackPCINT1>
     b50:	0e c0       	rjmp	.+28     	; 0xb6e <attachPinChangeInterrupt+0x4a>
     b52:	82 30       	cpi	r24, 0x02	; 2
     b54:	29 f4       	brne	.+10     	; 0xb60 <attachPinChangeInterrupt+0x3c>
     b56:	70 93 74 02 	sts	0x0274, r23	; 0x800274 <callbackPCINT2+0x1>
     b5a:	60 93 73 02 	sts	0x0273, r22	; 0x800273 <callbackPCINT2>
     b5e:	0e c0       	rjmp	.+28     	; 0xb7c <attachPinChangeInterrupt+0x58>
     b60:	83 30       	cpi	r24, 0x03	; 3
     b62:	29 f4       	brne	.+10     	; 0xb6e <attachPinChangeInterrupt+0x4a>
     b64:	70 93 86 02 	sts	0x0286, r23	; 0x800286 <callbackPCINT3+0x1>
     b68:	60 93 85 02 	sts	0x0285, r22	; 0x800285 <callbackPCINT3>
     b6c:	0e c0       	rjmp	.+28     	; 0xb8a <attachPinChangeInterrupt+0x66>
     b6e:	84 30       	cpi	r24, 0x04	; 4
     b70:	29 f4       	brne	.+10     	; 0xb7c <attachPinChangeInterrupt+0x58>
     b72:	70 93 76 02 	sts	0x0276, r23	; 0x800276 <callbackPCINT4+0x1>
     b76:	60 93 75 02 	sts	0x0275, r22	; 0x800275 <callbackPCINT4>
     b7a:	0e c0       	rjmp	.+28     	; 0xb98 <attachPinChangeInterrupt+0x74>
     b7c:	85 30       	cpi	r24, 0x05	; 5
     b7e:	29 f4       	brne	.+10     	; 0xb8a <attachPinChangeInterrupt+0x66>
     b80:	70 93 80 02 	sts	0x0280, r23	; 0x800280 <callbackPCINT5+0x1>
     b84:	60 93 7f 02 	sts	0x027F, r22	; 0x80027f <callbackPCINT5>
     b88:	84 c0       	rjmp	.+264    	; 0xc92 <attachPinChangeInterrupt+0x16e>
     b8a:	86 30       	cpi	r24, 0x06	; 6
     b8c:	29 f4       	brne	.+10     	; 0xb98 <attachPinChangeInterrupt+0x74>
     b8e:	70 93 70 02 	sts	0x0270, r23	; 0x800270 <callbackPCINT6+0x1>
     b92:	60 93 6f 02 	sts	0x026F, r22	; 0x80026f <callbackPCINT6>
     b96:	7d c0       	rjmp	.+250    	; 0xc92 <attachPinChangeInterrupt+0x16e>
     b98:	87 30       	cpi	r24, 0x07	; 7
     b9a:	09 f0       	breq	.+2      	; 0xb9e <attachPinChangeInterrupt+0x7a>
     b9c:	7a c0       	rjmp	.+244    	; 0xc92 <attachPinChangeInterrupt+0x16e>
     b9e:	70 93 64 02 	sts	0x0264, r23	; 0x800264 <callbackPCINT7+0x1>
     ba2:	60 93 63 02 	sts	0x0263, r22	; 0x800263 <callbackPCINT7>
     ba6:	75 c0       	rjmp	.+234    	; 0xc92 <attachPinChangeInterrupt+0x16e>
     ba8:	91 30       	cpi	r25, 0x01	; 1
     baa:	c9 f5       	brne	.+114    	; 0xc1e <attachPinChangeInterrupt+0xfa>
     bac:	88 30       	cpi	r24, 0x08	; 8
     bae:	29 f4       	brne	.+10     	; 0xbba <attachPinChangeInterrupt+0x96>
     bb0:	70 93 72 02 	sts	0x0272, r23	; 0x800272 <callbackPCINT8+0x1>
     bb4:	60 93 71 02 	sts	0x0271, r22	; 0x800271 <callbackPCINT8>
     bb8:	0e c0       	rjmp	.+28     	; 0xbd6 <attachPinChangeInterrupt+0xb2>
     bba:	89 30       	cpi	r24, 0x09	; 9
     bbc:	29 f4       	brne	.+10     	; 0xbc8 <attachPinChangeInterrupt+0xa4>
     bbe:	70 93 6a 02 	sts	0x026A, r23	; 0x80026a <callbackPCINT9+0x1>
     bc2:	60 93 69 02 	sts	0x0269, r22	; 0x800269 <callbackPCINT9>
     bc6:	0e c0       	rjmp	.+28     	; 0xbe4 <attachPinChangeInterrupt+0xc0>
     bc8:	8a 30       	cpi	r24, 0x0A	; 10
     bca:	29 f4       	brne	.+10     	; 0xbd6 <attachPinChangeInterrupt+0xb2>
     bcc:	70 93 7c 02 	sts	0x027C, r23	; 0x80027c <callbackPCINT10+0x1>
     bd0:	60 93 7b 02 	sts	0x027B, r22	; 0x80027b <callbackPCINT10>
     bd4:	0e c0       	rjmp	.+28     	; 0xbf2 <attachPinChangeInterrupt+0xce>
     bd6:	8b 30       	cpi	r24, 0x0B	; 11
     bd8:	29 f4       	brne	.+10     	; 0xbe4 <attachPinChangeInterrupt+0xc0>
     bda:	70 93 6e 02 	sts	0x026E, r23	; 0x80026e <callbackPCINT11+0x1>
     bde:	60 93 6d 02 	sts	0x026D, r22	; 0x80026d <callbackPCINT11>
     be2:	0e c0       	rjmp	.+28     	; 0xc00 <attachPinChangeInterrupt+0xdc>
     be4:	8c 30       	cpi	r24, 0x0C	; 12
     be6:	29 f4       	brne	.+10     	; 0xbf2 <attachPinChangeInterrupt+0xce>
     be8:	70 93 88 02 	sts	0x0288, r23	; 0x800288 <callbackPCINT12+0x1>
     bec:	60 93 87 02 	sts	0x0287, r22	; 0x800287 <callbackPCINT12>
     bf0:	0e c0       	rjmp	.+28     	; 0xc0e <attachPinChangeInterrupt+0xea>
     bf2:	8d 30       	cpi	r24, 0x0D	; 13
     bf4:	29 f4       	brne	.+10     	; 0xc00 <attachPinChangeInterrupt+0xdc>
     bf6:	70 93 7a 02 	sts	0x027A, r23	; 0x80027a <callbackPCINT13+0x1>
     bfa:	60 93 79 02 	sts	0x0279, r22	; 0x800279 <callbackPCINT13>
     bfe:	49 c0       	rjmp	.+146    	; 0xc92 <attachPinChangeInterrupt+0x16e>
     c00:	8e 30       	cpi	r24, 0x0E	; 14
     c02:	29 f4       	brne	.+10     	; 0xc0e <attachPinChangeInterrupt+0xea>
     c04:	70 93 78 02 	sts	0x0278, r23	; 0x800278 <callbackPCINT14+0x1>
     c08:	60 93 77 02 	sts	0x0277, r22	; 0x800277 <callbackPCINT14>
     c0c:	42 c0       	rjmp	.+132    	; 0xc92 <attachPinChangeInterrupt+0x16e>
     c0e:	8f 30       	cpi	r24, 0x0F	; 15
     c10:	09 f0       	breq	.+2      	; 0xc14 <attachPinChangeInterrupt+0xf0>
     c12:	3f c0       	rjmp	.+126    	; 0xc92 <attachPinChangeInterrupt+0x16e>
     c14:	70 93 84 02 	sts	0x0284, r23	; 0x800284 <callbackPCINT15+0x1>
     c18:	60 93 83 02 	sts	0x0283, r22	; 0x800283 <callbackPCINT15>
     c1c:	3a c0       	rjmp	.+116    	; 0xc92 <attachPinChangeInterrupt+0x16e>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	09 f0       	breq	.+2      	; 0xc24 <attachPinChangeInterrupt+0x100>
     c22:	56 c0       	rjmp	.+172    	; 0xcd0 <attachPinChangeInterrupt+0x1ac>
     c24:	80 31       	cpi	r24, 0x10	; 16
     c26:	29 f4       	brne	.+10     	; 0xc32 <attachPinChangeInterrupt+0x10e>
     c28:	70 93 66 02 	sts	0x0266, r23	; 0x800266 <callbackPCINT16+0x1>
     c2c:	60 93 65 02 	sts	0x0265, r22	; 0x800265 <callbackPCINT16>
     c30:	0e c0       	rjmp	.+28     	; 0xc4e <attachPinChangeInterrupt+0x12a>
     c32:	81 31       	cpi	r24, 0x11	; 17
     c34:	29 f4       	brne	.+10     	; 0xc40 <attachPinChangeInterrupt+0x11c>
     c36:	70 93 7e 02 	sts	0x027E, r23	; 0x80027e <callbackPCINT17+0x1>
     c3a:	60 93 7d 02 	sts	0x027D, r22	; 0x80027d <callbackPCINT17>
     c3e:	0e c0       	rjmp	.+28     	; 0xc5c <attachPinChangeInterrupt+0x138>
     c40:	82 31       	cpi	r24, 0x12	; 18
     c42:	29 f4       	brne	.+10     	; 0xc4e <attachPinChangeInterrupt+0x12a>
     c44:	70 93 5e 02 	sts	0x025E, r23	; 0x80025e <callbackPCINT18+0x1>
     c48:	60 93 5d 02 	sts	0x025D, r22	; 0x80025d <callbackPCINT18>
     c4c:	0e c0       	rjmp	.+28     	; 0xc6a <attachPinChangeInterrupt+0x146>
     c4e:	83 31       	cpi	r24, 0x13	; 19
     c50:	29 f4       	brne	.+10     	; 0xc5c <attachPinChangeInterrupt+0x138>
     c52:	70 93 68 02 	sts	0x0268, r23	; 0x800268 <callbackPCINT19+0x1>
     c56:	60 93 67 02 	sts	0x0267, r22	; 0x800267 <callbackPCINT19>
     c5a:	0e c0       	rjmp	.+28     	; 0xc78 <attachPinChangeInterrupt+0x154>
     c5c:	84 31       	cpi	r24, 0x14	; 20
     c5e:	29 f4       	brne	.+10     	; 0xc6a <attachPinChangeInterrupt+0x146>
     c60:	70 93 8a 02 	sts	0x028A, r23	; 0x80028a <callbackPCINT20+0x1>
     c64:	60 93 89 02 	sts	0x0289, r22	; 0x800289 <callbackPCINT20>
     c68:	0e c0       	rjmp	.+28     	; 0xc86 <attachPinChangeInterrupt+0x162>
     c6a:	85 31       	cpi	r24, 0x15	; 21
     c6c:	29 f4       	brne	.+10     	; 0xc78 <attachPinChangeInterrupt+0x154>
     c6e:	70 93 60 02 	sts	0x0260, r23	; 0x800260 <callbackPCINT21+0x1>
     c72:	60 93 5f 02 	sts	0x025F, r22	; 0x80025f <callbackPCINT21>
     c76:	0d c0       	rjmp	.+26     	; 0xc92 <attachPinChangeInterrupt+0x16e>
     c78:	86 31       	cpi	r24, 0x16	; 22
     c7a:	29 f4       	brne	.+10     	; 0xc86 <attachPinChangeInterrupt+0x162>
     c7c:	70 93 82 02 	sts	0x0282, r23	; 0x800282 <callbackPCINT22+0x1>
     c80:	60 93 81 02 	sts	0x0281, r22	; 0x800281 <callbackPCINT22>
     c84:	06 c0       	rjmp	.+12     	; 0xc92 <attachPinChangeInterrupt+0x16e>
     c86:	87 31       	cpi	r24, 0x17	; 23
     c88:	21 f4       	brne	.+8      	; 0xc92 <attachPinChangeInterrupt+0x16e>
     c8a:	70 93 6c 02 	sts	0x026C, r23	; 0x80026c <callbackPCINT23+0x1>
     c8e:	60 93 6b 02 	sts	0x026B, r22	; 0x80026b <callbackPCINT23>
     c92:	61 e0       	ldi	r22, 0x01	; 1
     c94:	70 e0       	ldi	r23, 0x00	; 0
     c96:	02 c0       	rjmp	.+4      	; 0xc9c <attachPinChangeInterrupt+0x178>
     c98:	66 0f       	add	r22, r22
     c9a:	77 1f       	adc	r23, r23
     c9c:	2a 95       	dec	r18
     c9e:	e2 f7       	brpl	.-8      	; 0xc98 <attachPinChangeInterrupt+0x174>
     ca0:	84 2f       	mov	r24, r20
     ca2:	8d 7f       	andi	r24, 0xFD	; 253
     ca4:	81 30       	cpi	r24, 0x01	; 1
     ca6:	39 f4       	brne	.+14     	; 0xcb6 <attachPinChangeInterrupt+0x192>
     ca8:	e9 2f       	mov	r30, r25
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	e8 5c       	subi	r30, 0xC8	; 200
     cae:	fd 4f       	sbci	r31, 0xFD	; 253
     cb0:	80 81       	ld	r24, Z
     cb2:	86 2b       	or	r24, r22
     cb4:	80 83       	st	Z, r24
     cb6:	41 50       	subi	r20, 0x01	; 1
     cb8:	42 30       	cpi	r20, 0x02	; 2
     cba:	38 f4       	brcc	.+14     	; 0xcca <attachPinChangeInterrupt+0x1a6>
     cbc:	e9 2f       	mov	r30, r25
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	e5 5c       	subi	r30, 0xC5	; 197
     cc2:	fd 4f       	sbci	r31, 0xFD	; 253
     cc4:	80 81       	ld	r24, Z
     cc6:	86 2b       	or	r24, r22
     cc8:	80 83       	st	Z, r24
     cca:	49 2f       	mov	r20, r25
     ccc:	89 2f       	mov	r24, r25
     cce:	e2 ce       	rjmp	.-572    	; 0xa94 <enablePinChangeInterruptHelper>
     cd0:	08 95       	ret

00000cd2 <PinChangeInterruptEventPCINT0>:

//============callbacks==============

#if (PCINT_USE_PCINT0 == true)
void PinChangeInterruptEventPCINT0(void) {
	callbackPCINT0();
     cd2:	e0 91 5b 02 	lds	r30, 0x025B	; 0x80025b <callbackPCINT0>
     cd6:	f0 91 5c 02 	lds	r31, 0x025C	; 0x80025c <callbackPCINT0+0x1>
     cda:	19 95       	eicall
     cdc:	08 95       	ret

00000cde <PinChangeInterruptEventPCINT1>:
}
#endif
#if (PCINT_USE_PCINT1 == true)
void PinChangeInterruptEventPCINT1(void) {
	callbackPCINT1();
     cde:	e0 91 61 02 	lds	r30, 0x0261	; 0x800261 <callbackPCINT1>
     ce2:	f0 91 62 02 	lds	r31, 0x0262	; 0x800262 <callbackPCINT1+0x1>
     ce6:	19 95       	eicall
     ce8:	08 95       	ret

00000cea <PinChangeInterruptEventPCINT2>:
}
#endif
#if (PCINT_USE_PCINT2 == true)
void PinChangeInterruptEventPCINT2(void) {
	callbackPCINT2();
     cea:	e0 91 73 02 	lds	r30, 0x0273	; 0x800273 <callbackPCINT2>
     cee:	f0 91 74 02 	lds	r31, 0x0274	; 0x800274 <callbackPCINT2+0x1>
     cf2:	19 95       	eicall
     cf4:	08 95       	ret

00000cf6 <PinChangeInterruptEventPCINT3>:
}
#endif
#if (PCINT_USE_PCINT3 == true)
void PinChangeInterruptEventPCINT3(void) {
	callbackPCINT3();
     cf6:	e0 91 85 02 	lds	r30, 0x0285	; 0x800285 <callbackPCINT3>
     cfa:	f0 91 86 02 	lds	r31, 0x0286	; 0x800286 <callbackPCINT3+0x1>
     cfe:	19 95       	eicall
     d00:	08 95       	ret

00000d02 <PinChangeInterruptEventPCINT4>:
}
#endif
#if (PCINT_USE_PCINT4 == true)
void PinChangeInterruptEventPCINT4(void) {
	callbackPCINT4();
     d02:	e0 91 75 02 	lds	r30, 0x0275	; 0x800275 <callbackPCINT4>
     d06:	f0 91 76 02 	lds	r31, 0x0276	; 0x800276 <callbackPCINT4+0x1>
     d0a:	19 95       	eicall
     d0c:	08 95       	ret

00000d0e <PinChangeInterruptEventPCINT5>:
}
#endif
#if (PCINT_USE_PCINT5 == true)
void PinChangeInterruptEventPCINT5(void) {
	callbackPCINT5();
     d0e:	e0 91 7f 02 	lds	r30, 0x027F	; 0x80027f <callbackPCINT5>
     d12:	f0 91 80 02 	lds	r31, 0x0280	; 0x800280 <callbackPCINT5+0x1>
     d16:	19 95       	eicall
     d18:	08 95       	ret

00000d1a <PinChangeInterruptEventPCINT6>:
}
#endif
#if (PCINT_USE_PCINT6 == true)
void PinChangeInterruptEventPCINT6(void) {
	callbackPCINT6();
     d1a:	e0 91 6f 02 	lds	r30, 0x026F	; 0x80026f <callbackPCINT6>
     d1e:	f0 91 70 02 	lds	r31, 0x0270	; 0x800270 <callbackPCINT6+0x1>
     d22:	19 95       	eicall
     d24:	08 95       	ret

00000d26 <PinChangeInterruptEventPCINT7>:
}
#endif
#if (PCINT_USE_PCINT7 == true)
void PinChangeInterruptEventPCINT7(void) {
	callbackPCINT7();
     d26:	e0 91 63 02 	lds	r30, 0x0263	; 0x800263 <callbackPCINT7>
     d2a:	f0 91 64 02 	lds	r31, 0x0264	; 0x800264 <callbackPCINT7+0x1>
     d2e:	19 95       	eicall
     d30:	08 95       	ret

00000d32 <__vector_9>:
// Interrupt Handler
//================================================================================
//============= PORT0 ===================================
#if (PCINT_USE_PORT0 == true)

ISR (PCINT0_vect){
     d32:	1f 92       	push	r1
     d34:	0f 92       	push	r0
     d36:	0f b6       	in	r0, 0x3f	; 63
     d38:	0f 92       	push	r0
     d3a:	11 24       	eor	r1, r1
     d3c:	0b b6       	in	r0, 0x3b	; 59
     d3e:	0f 92       	push	r0
     d40:	2f 93       	push	r18
     d42:	3f 93       	push	r19
     d44:	4f 93       	push	r20
     d46:	5f 93       	push	r21
     d48:	6f 93       	push	r22
     d4a:	7f 93       	push	r23
     d4c:	8f 93       	push	r24
     d4e:	9f 93       	push	r25
     d50:	af 93       	push	r26
     d52:	bf 93       	push	r27
     d54:	cf 93       	push	r28
     d56:	ef 93       	push	r30
     d58:	ff 93       	push	r31
	// get the new and old pin states for port
	uint8_t newPort = PCINT_INPUT_PORT0;
     d5a:	23 b1       	in	r18, 0x03	; 3
	
	// compare with the old value to detect a rising or falling
	uint8_t arrayPos = getArrayPosPCINT(0);
	uint8_t change = newPort ^ oldPorts[arrayPos]; //XOR detects change
     d5c:	ee e3       	ldi	r30, 0x3E	; 62
     d5e:	f2 e0       	ldi	r31, 0x02	; 2
     d60:	c0 81       	ld	r28, Z
     d62:	82 2f       	mov	r24, r18
     d64:	8c 27       	eor	r24, r28
	uint8_t falling = change & oldPorts[arrayPos];
	
	// check which pins are triggered, compared with the settings
	uint8_t risingTrigger = rising & risingPorts[arrayPos];
	uint8_t fallingTrigger = falling & fallingPorts[arrayPos];
	uint8_t trigger = risingTrigger | fallingTrigger;
     d66:	90 91 38 02 	lds	r25, 0x0238	; 0x800238 <__data_end>
     d6a:	92 23       	and	r25, r18
     d6c:	30 91 3b 02 	lds	r19, 0x023B	; 0x80023b <fallingPorts>
     d70:	c3 23       	and	r28, r19
     d72:	c9 2b       	or	r28, r25
     d74:	c8 23       	and	r28, r24
	
	// save the new state for next comparison
	oldPorts[arrayPos] = newPort;
     d76:	20 83       	st	Z, r18
	PCINT_CALLBACK(4, 4);
	PCINT_CALLBACK(5, 5);
	PCINT_CALLBACK(6, 6);
	PCINT_CALLBACK(7, 7);
#else
	PCINT_CALLBACK_PORT0
     d78:	c4 fd       	sbrc	r28, 4
     d7a:	c3 df       	rcall	.-122    	; 0xd02 <PinChangeInterruptEventPCINT4>
     d7c:	c5 fd       	sbrc	r28, 5
     d7e:	c7 df       	rcall	.-114    	; 0xd0e <PinChangeInterruptEventPCINT5>
     d80:	c6 fd       	sbrc	r28, 6
     d82:	cb df       	rcall	.-106    	; 0xd1a <PinChangeInterruptEventPCINT6>
     d84:	cc 23       	and	r28, r28
     d86:	0c f4       	brge	.+2      	; 0xd8a <__vector_9+0x58>
     d88:	ce df       	rcall	.-100    	; 0xd26 <PinChangeInterruptEventPCINT7>
     d8a:	c0 fd       	sbrc	r28, 0
     d8c:	a2 df       	rcall	.-188    	; 0xcd2 <PinChangeInterruptEventPCINT0>
     d8e:	c1 fd       	sbrc	r28, 1
     d90:	a6 df       	rcall	.-180    	; 0xcde <PinChangeInterruptEventPCINT1>
     d92:	c2 fd       	sbrc	r28, 2
     d94:	aa df       	rcall	.-172    	; 0xcea <PinChangeInterruptEventPCINT2>
     d96:	c3 fd       	sbrc	r28, 3
     d98:	ae df       	rcall	.-164    	; 0xcf6 <PinChangeInterruptEventPCINT3>
#endif
	
}
     d9a:	ff 91       	pop	r31
     d9c:	ef 91       	pop	r30
     d9e:	cf 91       	pop	r28
     da0:	bf 91       	pop	r27
     da2:	af 91       	pop	r26
     da4:	9f 91       	pop	r25
     da6:	8f 91       	pop	r24
     da8:	7f 91       	pop	r23
     daa:	6f 91       	pop	r22
     dac:	5f 91       	pop	r21
     dae:	4f 91       	pop	r20
     db0:	3f 91       	pop	r19
     db2:	2f 91       	pop	r18
     db4:	0f 90       	pop	r0
     db6:	0b be       	out	0x3b, r0	; 59
     db8:	0f 90       	pop	r0
     dba:	0f be       	out	0x3f, r0	; 63
     dbc:	0f 90       	pop	r0
     dbe:	1f 90       	pop	r1
     dc0:	18 95       	reti

00000dc2 <PinChangeInterruptEventPCINT8>:
}
#endif

#if (PCINT_USE_PCINT8 == true)
void PinChangeInterruptEventPCINT8(void) {
	callbackPCINT8();
     dc2:	e0 91 71 02 	lds	r30, 0x0271	; 0x800271 <callbackPCINT8>
     dc6:	f0 91 72 02 	lds	r31, 0x0272	; 0x800272 <callbackPCINT8+0x1>
     dca:	19 95       	eicall
     dcc:	08 95       	ret

00000dce <PinChangeInterruptEventPCINT9>:
}
#endif
#if (PCINT_USE_PCINT9 == true)
void PinChangeInterruptEventPCINT9(void) {
	callbackPCINT9();
     dce:	e0 91 69 02 	lds	r30, 0x0269	; 0x800269 <callbackPCINT9>
     dd2:	f0 91 6a 02 	lds	r31, 0x026A	; 0x80026a <callbackPCINT9+0x1>
     dd6:	19 95       	eicall
     dd8:	08 95       	ret

00000dda <PinChangeInterruptEventPCINT10>:
}
#endif
#if (PCINT_USE_PCINT10 == true)
void PinChangeInterruptEventPCINT10(void) {
	callbackPCINT10();
     dda:	e0 91 7b 02 	lds	r30, 0x027B	; 0x80027b <callbackPCINT10>
     dde:	f0 91 7c 02 	lds	r31, 0x027C	; 0x80027c <callbackPCINT10+0x1>
     de2:	19 95       	eicall
     de4:	08 95       	ret

00000de6 <PinChangeInterruptEventPCINT11>:
}
#endif
#if (PCINT_USE_PCINT11 == true)
void PinChangeInterruptEventPCINT11(void) {
	callbackPCINT11();
     de6:	e0 91 6d 02 	lds	r30, 0x026D	; 0x80026d <callbackPCINT11>
     dea:	f0 91 6e 02 	lds	r31, 0x026E	; 0x80026e <callbackPCINT11+0x1>
     dee:	19 95       	eicall
     df0:	08 95       	ret

00000df2 <PinChangeInterruptEventPCINT12>:
}
#endif
#if (PCINT_USE_PCINT12 == true)
void PinChangeInterruptEventPCINT12(void) {
	callbackPCINT12();
     df2:	e0 91 87 02 	lds	r30, 0x0287	; 0x800287 <callbackPCINT12>
     df6:	f0 91 88 02 	lds	r31, 0x0288	; 0x800288 <callbackPCINT12+0x1>
     dfa:	19 95       	eicall
     dfc:	08 95       	ret

00000dfe <PinChangeInterruptEventPCINT13>:
}
#endif
#if (PCINT_USE_PCINT13 == true)
void PinChangeInterruptEventPCINT13(void) {
	callbackPCINT13();
     dfe:	e0 91 79 02 	lds	r30, 0x0279	; 0x800279 <callbackPCINT13>
     e02:	f0 91 7a 02 	lds	r31, 0x027A	; 0x80027a <callbackPCINT13+0x1>
     e06:	19 95       	eicall
     e08:	08 95       	ret

00000e0a <PinChangeInterruptEventPCINT14>:
}
#endif
#if (PCINT_USE_PCINT14 == true)
void PinChangeInterruptEventPCINT14(void) {
	callbackPCINT14();
     e0a:	e0 91 77 02 	lds	r30, 0x0277	; 0x800277 <callbackPCINT14>
     e0e:	f0 91 78 02 	lds	r31, 0x0278	; 0x800278 <callbackPCINT14+0x1>
     e12:	19 95       	eicall
     e14:	08 95       	ret

00000e16 <PinChangeInterruptEventPCINT15>:
}
#endif
#if (PCINT_USE_PCINT15 == true)
void PinChangeInterruptEventPCINT15(void) {
	callbackPCINT15();
     e16:	e0 91 83 02 	lds	r30, 0x0283	; 0x800283 <callbackPCINT15>
     e1a:	f0 91 84 02 	lds	r31, 0x0284	; 0x800284 <callbackPCINT15+0x1>
     e1e:	19 95       	eicall
     e20:	08 95       	ret

00000e22 <__vector_10>:
	
}

//============= PORT1 ===================================
#if (PCINT_USE_PORT1)
ISR(PCINT1_vect) {
     e22:	1f 92       	push	r1
     e24:	0f 92       	push	r0
     e26:	0f b6       	in	r0, 0x3f	; 63
     e28:	0f 92       	push	r0
     e2a:	11 24       	eor	r1, r1
     e2c:	0b b6       	in	r0, 0x3b	; 59
     e2e:	0f 92       	push	r0
     e30:	2f 93       	push	r18
     e32:	3f 93       	push	r19
     e34:	4f 93       	push	r20
     e36:	5f 93       	push	r21
     e38:	6f 93       	push	r22
     e3a:	7f 93       	push	r23
     e3c:	8f 93       	push	r24
     e3e:	9f 93       	push	r25
     e40:	af 93       	push	r26
     e42:	bf 93       	push	r27
     e44:	cf 93       	push	r28
     e46:	ef 93       	push	r30
     e48:	ff 93       	push	r31
	// get the new and old pin states for port
	uint8_t newPort = PCINT_INPUT_PORT1;
     e4a:	8c b1       	in	r24, 0x0c	; 12
     e4c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
     e50:	81 70       	andi	r24, 0x01	; 1
     e52:	99 0f       	add	r25, r25
     e54:	98 2b       	or	r25, r24

	// compare with the old value to detect a rising or falling
	uint8_t arrayPos = getArrayPosPCINT(1);
	uint8_t change = newPort ^ oldPorts[arrayPos];
     e56:	ee e3       	ldi	r30, 0x3E	; 62
     e58:	f2 e0       	ldi	r31, 0x02	; 2
     e5a:	c1 81       	ldd	r28, Z+1	; 0x01
     e5c:	89 2f       	mov	r24, r25
     e5e:	8c 27       	eor	r24, r28
	uint8_t falling = change & oldPorts[arrayPos];

	// check which pins are triggered, compared with the settings
	uint8_t risingTrigger = rising & risingPorts[arrayPos];
	uint8_t fallingTrigger = falling & fallingPorts[arrayPos];
	uint8_t trigger = risingTrigger | fallingTrigger;
     e60:	20 91 39 02 	lds	r18, 0x0239	; 0x800239 <__data_end+0x1>
     e64:	29 23       	and	r18, r25
     e66:	30 91 3c 02 	lds	r19, 0x023C	; 0x80023c <fallingPorts+0x1>
     e6a:	c3 23       	and	r28, r19
     e6c:	c2 2b       	or	r28, r18
     e6e:	c8 23       	and	r28, r24

	// save the new state for next comparison
	oldPorts[arrayPos] = newPort;
     e70:	91 83       	std	Z+1, r25	; 0x01
	// Execute all functions that should be triggered
	// This way we can exclude a single function
	// and the calling is also much faster
	// We may also reorder the pins for different priority
	#if !defined(PCINT_CALLBACK_PORT1)
	PCINT_CALLBACK(0, 8);
     e72:	c0 fd       	sbrc	r28, 0
     e74:	a6 df       	rcall	.-180    	; 0xdc2 <PinChangeInterruptEventPCINT8>
	PCINT_CALLBACK(1, 9);
     e76:	c1 fd       	sbrc	r28, 1
	PCINT_CALLBACK(2, 10);
     e78:	aa df       	rcall	.-172    	; 0xdce <PinChangeInterruptEventPCINT9>
     e7a:	c2 fd       	sbrc	r28, 2
	PCINT_CALLBACK(3, 11);
     e7c:	ae df       	rcall	.-164    	; 0xdda <PinChangeInterruptEventPCINT10>
	PCINT_CALLBACK(4, 12);
     e7e:	c3 fd       	sbrc	r28, 3
     e80:	b2 df       	rcall	.-156    	; 0xde6 <PinChangeInterruptEventPCINT11>
	PCINT_CALLBACK(5, 13);
     e82:	c4 fd       	sbrc	r28, 4
     e84:	b6 df       	rcall	.-148    	; 0xdf2 <PinChangeInterruptEventPCINT12>
	PCINT_CALLBACK(6, 14);
     e86:	c5 fd       	sbrc	r28, 5
     e88:	ba df       	rcall	.-140    	; 0xdfe <PinChangeInterruptEventPCINT13>
     e8a:	c6 fd       	sbrc	r28, 6
	PCINT_CALLBACK(7, 15);
     e8c:	be df       	rcall	.-132    	; 0xe0a <PinChangeInterruptEventPCINT14>
     e8e:	cc 23       	and	r28, r28
     e90:	0c f4       	brge	.+2      	; 0xe94 <__vector_10+0x72>
     e92:	c1 df       	rcall	.-126    	; 0xe16 <PinChangeInterruptEventPCINT15>
	#else
	PCINT_CALLBACK_PORT1
	#endif
}
     e94:	ff 91       	pop	r31
     e96:	ef 91       	pop	r30
     e98:	cf 91       	pop	r28
     e9a:	bf 91       	pop	r27
     e9c:	af 91       	pop	r26
     e9e:	9f 91       	pop	r25
     ea0:	8f 91       	pop	r24
     ea2:	7f 91       	pop	r23
     ea4:	6f 91       	pop	r22
     ea6:	5f 91       	pop	r21
     ea8:	4f 91       	pop	r20
     eaa:	3f 91       	pop	r19
     eac:	2f 91       	pop	r18
     eae:	0f 90       	pop	r0
     eb0:	0b be       	out	0x3b, r0	; 59
     eb2:	0f 90       	pop	r0
     eb4:	0f be       	out	0x3f, r0	; 63
     eb6:	0f 90       	pop	r0
     eb8:	1f 90       	pop	r1
     eba:	18 95       	reti

00000ebc <PinChangeInterruptEventPCINT16>:
}
#endif

#if (PCINT_USE_PCINT16 == true)
void PinChangeInterruptEventPCINT16(void) {
	callbackPCINT16();
     ebc:	e0 91 65 02 	lds	r30, 0x0265	; 0x800265 <callbackPCINT16>
     ec0:	f0 91 66 02 	lds	r31, 0x0266	; 0x800266 <callbackPCINT16+0x1>
     ec4:	19 95       	eicall
     ec6:	08 95       	ret

00000ec8 <PinChangeInterruptEventPCINT17>:
}
#endif
#if (PCINT_USE_PCINT17 == true)
void PinChangeInterruptEventPCINT17(void) {
	callbackPCINT17();
     ec8:	e0 91 7d 02 	lds	r30, 0x027D	; 0x80027d <callbackPCINT17>
     ecc:	f0 91 7e 02 	lds	r31, 0x027E	; 0x80027e <callbackPCINT17+0x1>
     ed0:	19 95       	eicall
     ed2:	08 95       	ret

00000ed4 <PinChangeInterruptEventPCINT18>:
}
#endif
#if (PCINT_USE_PCINT18 == true)
void PinChangeInterruptEventPCINT18(void) {
	callbackPCINT18();
     ed4:	e0 91 5d 02 	lds	r30, 0x025D	; 0x80025d <callbackPCINT18>
     ed8:	f0 91 5e 02 	lds	r31, 0x025E	; 0x80025e <callbackPCINT18+0x1>
     edc:	19 95       	eicall
     ede:	08 95       	ret

00000ee0 <PinChangeInterruptEventPCINT19>:
}
#endif
#if (PCINT_USE_PCINT19 == true)
void PinChangeInterruptEventPCINT19(void) {
	callbackPCINT19();
     ee0:	e0 91 67 02 	lds	r30, 0x0267	; 0x800267 <callbackPCINT19>
     ee4:	f0 91 68 02 	lds	r31, 0x0268	; 0x800268 <callbackPCINT19+0x1>
     ee8:	19 95       	eicall
     eea:	08 95       	ret

00000eec <PinChangeInterruptEventPCINT20>:
}
#endif
#if (PCINT_USE_PCINT20 == true)
void PinChangeInterruptEventPCINT20(void) {
	callbackPCINT20();
     eec:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <callbackPCINT20>
     ef0:	f0 91 8a 02 	lds	r31, 0x028A	; 0x80028a <callbackPCINT20+0x1>
     ef4:	19 95       	eicall
     ef6:	08 95       	ret

00000ef8 <PinChangeInterruptEventPCINT21>:
}
#endif
#if (PCINT_USE_PCINT21 == true)
void PinChangeInterruptEventPCINT21(void) {
	callbackPCINT21();
     ef8:	e0 91 5f 02 	lds	r30, 0x025F	; 0x80025f <callbackPCINT21>
     efc:	f0 91 60 02 	lds	r31, 0x0260	; 0x800260 <callbackPCINT21+0x1>
     f00:	19 95       	eicall
     f02:	08 95       	ret

00000f04 <PinChangeInterruptEventPCINT22>:
}
#endif
#if (PCINT_USE_PCINT22 == true)
void PinChangeInterruptEventPCINT22(void) {
	callbackPCINT22();
     f04:	e0 91 81 02 	lds	r30, 0x0281	; 0x800281 <callbackPCINT22>
     f08:	f0 91 82 02 	lds	r31, 0x0282	; 0x800282 <callbackPCINT22+0x1>
     f0c:	19 95       	eicall
     f0e:	08 95       	ret

00000f10 <PinChangeInterruptEventPCINT23>:
}
#endif
#if (PCINT_USE_PCINT23 == true)
void PinChangeInterruptEventPCINT23(void) {
	callbackPCINT23();
     f10:	e0 91 6b 02 	lds	r30, 0x026B	; 0x80026b <callbackPCINT23>
     f14:	f0 91 6c 02 	lds	r31, 0x026C	; 0x80026c <callbackPCINT23+0x1>
     f18:	19 95       	eicall
     f1a:	08 95       	ret

00000f1c <__vector_11>:
	#endif
}
#endif
//============= PORT2 ===================================
#if (PCINT_USE_PORT2)
ISR(PCINT2_vect) {
     f1c:	1f 92       	push	r1
     f1e:	0f 92       	push	r0
     f20:	0f b6       	in	r0, 0x3f	; 63
     f22:	0f 92       	push	r0
     f24:	11 24       	eor	r1, r1
     f26:	0b b6       	in	r0, 0x3b	; 59
     f28:	0f 92       	push	r0
     f2a:	2f 93       	push	r18
     f2c:	3f 93       	push	r19
     f2e:	4f 93       	push	r20
     f30:	5f 93       	push	r21
     f32:	6f 93       	push	r22
     f34:	7f 93       	push	r23
     f36:	8f 93       	push	r24
     f38:	9f 93       	push	r25
     f3a:	af 93       	push	r26
     f3c:	bf 93       	push	r27
     f3e:	cf 93       	push	r28
     f40:	ef 93       	push	r30
     f42:	ff 93       	push	r31
	// get the new and old pin states for port
	uint8_t newPort = PCINT_INPUT_PORT2;
     f44:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>

	// compare with the old value to detect a rising or falling
	uint8_t arrayPos = getArrayPosPCINT(2);
	uint8_t change = newPort ^ oldPorts[arrayPos];
     f48:	ee e3       	ldi	r30, 0x3E	; 62
     f4a:	f2 e0       	ldi	r31, 0x02	; 2
     f4c:	c2 81       	ldd	r28, Z+2	; 0x02
     f4e:	82 2f       	mov	r24, r18
     f50:	8c 27       	eor	r24, r28
	uint8_t falling = change & oldPorts[arrayPos];

	// check which pins are triggered, compared with the settings
	uint8_t risingTrigger = rising & risingPorts[arrayPos];
	uint8_t fallingTrigger = falling & fallingPorts[arrayPos];
	uint8_t trigger = risingTrigger | fallingTrigger;
     f52:	90 91 3a 02 	lds	r25, 0x023A	; 0x80023a <__data_end+0x2>
     f56:	92 23       	and	r25, r18
     f58:	30 91 3d 02 	lds	r19, 0x023D	; 0x80023d <fallingPorts+0x2>
     f5c:	c3 23       	and	r28, r19
     f5e:	c9 2b       	or	r28, r25
     f60:	c8 23       	and	r28, r24

	// save the new state for next comparison
	oldPorts[arrayPos] = newPort;
     f62:	22 83       	std	Z+2, r18	; 0x02
	// Execute all functions that should be triggered
	// This way we can exclude a single function
	// and the calling is also much faster
	// We may also reorder the pins for different priority
	#if !defined(PCINT_CALLBACK_PORT2)
	PCINT_CALLBACK(0, 16);
     f64:	c0 fd       	sbrc	r28, 0
     f66:	aa df       	rcall	.-172    	; 0xebc <PinChangeInterruptEventPCINT16>
	PCINT_CALLBACK(1, 17);
     f68:	c1 fd       	sbrc	r28, 1
	PCINT_CALLBACK(2, 18);
     f6a:	ae df       	rcall	.-164    	; 0xec8 <PinChangeInterruptEventPCINT17>
     f6c:	c2 fd       	sbrc	r28, 2
	PCINT_CALLBACK(3, 19);
     f6e:	b2 df       	rcall	.-156    	; 0xed4 <PinChangeInterruptEventPCINT18>
	PCINT_CALLBACK(4, 20);
     f70:	c3 fd       	sbrc	r28, 3
     f72:	b6 df       	rcall	.-148    	; 0xee0 <PinChangeInterruptEventPCINT19>
	PCINT_CALLBACK(5, 21);
     f74:	c4 fd       	sbrc	r28, 4
     f76:	ba df       	rcall	.-140    	; 0xeec <PinChangeInterruptEventPCINT20>
	PCINT_CALLBACK(6, 22);
     f78:	c5 fd       	sbrc	r28, 5
     f7a:	be df       	rcall	.-132    	; 0xef8 <PinChangeInterruptEventPCINT21>
     f7c:	c6 fd       	sbrc	r28, 6
	PCINT_CALLBACK(7, 23);
     f7e:	c2 df       	rcall	.-124    	; 0xf04 <PinChangeInterruptEventPCINT22>
     f80:	cc 23       	and	r28, r28
     f82:	0c f4       	brge	.+2      	; 0xf86 <__vector_11+0x6a>
     f84:	c5 df       	rcall	.-118    	; 0xf10 <PinChangeInterruptEventPCINT23>
	#else
	PCINT_CALLBACK_PORT2
	#endif
}
     f86:	ff 91       	pop	r31
     f88:	ef 91       	pop	r30
     f8a:	cf 91       	pop	r28
     f8c:	bf 91       	pop	r27
     f8e:	af 91       	pop	r26
     f90:	9f 91       	pop	r25
     f92:	8f 91       	pop	r24
     f94:	7f 91       	pop	r23
     f96:	6f 91       	pop	r22
     f98:	5f 91       	pop	r21
     f9a:	4f 91       	pop	r20
     f9c:	3f 91       	pop	r19
     f9e:	2f 91       	pop	r18
     fa0:	0f 90       	pop	r0
     fa2:	0b be       	out	0x3b, r0	; 59
     fa4:	0f 90       	pop	r0
     fa6:	0f be       	out	0x3f, r0	; 63
     fa8:	0f 90       	pop	r0
     faa:	1f 90       	pop	r1
     fac:	18 95       	reti

00000fae <pwm_init>:
*/

void pwm_init(void)
{
	// Configure Timer1
	TCCR1B = 0;
     fae:	e1 e8       	ldi	r30, 0x81	; 129
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	10 82       	st	Z, r1
	bitSet(TCCR1B, CS11); 
     fb4:	80 81       	ld	r24, Z
     fb6:	82 60       	ori	r24, 0x02	; 2
     fb8:	80 83       	st	Z, r24
	bitSet(TCCR1B, CS10);	// set clk/64 prescaler
     fba:	80 81       	ld	r24, Z
     fbc:	81 60       	ori	r24, 0x01	; 1
     fbe:	80 83       	st	Z, r24
	bitSet(TCCR1A, WGM10);	// PWM, Phase Correct, 8-bit
     fc0:	e0 e8       	ldi	r30, 0x80	; 128
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	80 81       	ld	r24, Z
     fc6:	81 60       	ori	r24, 0x01	; 1
     fc8:	80 83       	st	Z, r24
	
	// Configure Timer2
	bitSet(TCCR2B, CS22);	// clk/64 prescaler
     fca:	e1 eb       	ldi	r30, 0xB1	; 177
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	84 60       	ori	r24, 0x04	; 4
     fd2:	80 83       	st	Z, r24
	bitSet(TCCR2A, WGM20);	// PWM, Phase Correct
     fd4:	e0 eb       	ldi	r30, 0xB0	; 176
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	81 60       	ori	r24, 0x01	; 1
     fdc:	80 83       	st	Z, r24
	
	// Configure Timer3
	bitSet(TCCR3B, CS31);	
     fde:	e1 e9       	ldi	r30, 0x91	; 145
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	82 60       	ori	r24, 0x02	; 2
     fe6:	80 83       	st	Z, r24
	bitSet(TCCR3B, CS30);	// clk/64 prescaler
     fe8:	80 81       	ld	r24, Z
     fea:	81 60       	ori	r24, 0x01	; 1
     fec:	80 83       	st	Z, r24
	bitSet(TCCR3A, WGM30);	// PWM, Phase Correct
     fee:	e0 e9       	ldi	r30, 0x90	; 144
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 81       	ld	r24, Z
     ff4:	81 60       	ori	r24, 0x01	; 1
     ff6:	80 83       	st	Z, r24
	
	// Configure Timer4
	bitSet(TCCR4B, CS41);	
     ff8:	e1 ea       	ldi	r30, 0xA1	; 161
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	80 81       	ld	r24, Z
     ffe:	82 60       	ori	r24, 0x02	; 2
    1000:	80 83       	st	Z, r24
	bitSet(TCCR4B, CS40);	// clk/64 prescaler
    1002:	80 81       	ld	r24, Z
    1004:	81 60       	ori	r24, 0x01	; 1
    1006:	80 83       	st	Z, r24
	bitSet(TCCR4A, WGM40);	// PWM, Phase Correct
    1008:	e0 ea       	ldi	r30, 0xA0	; 160
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	81 60       	ori	r24, 0x01	; 1
    1010:	80 83       	st	Z, r24
	
	// Configure Timer5
	bitSet(TCCR5B, CS51);
    1012:	e1 e2       	ldi	r30, 0x21	; 33
    1014:	f1 e0       	ldi	r31, 0x01	; 1
    1016:	80 81       	ld	r24, Z
    1018:	82 60       	ori	r24, 0x02	; 2
    101a:	80 83       	st	Z, r24
	bitSet(TCCR5B, CS50);	// clk/64 prescaler
    101c:	80 81       	ld	r24, Z
    101e:	81 60       	ori	r24, 0x01	; 1
    1020:	80 83       	st	Z, r24
	bitSet(TCCR5A, WGM50);	// PWM, Phase Correct
    1022:	e0 e2       	ldi	r30, 0x20	; 32
    1024:	f1 e0       	ldi	r31, 0x01	; 1
    1026:	80 81       	ld	r24, Z
    1028:	81 60       	ori	r24, 0x01	; 1
    102a:	80 83       	st	Z, r24
    102c:	08 95       	ret

0000102e <analogWrite>:
	 
}

// PWM output
void analogWrite(uint8_t pin, int val)
{
    102e:	1f 93       	push	r17
    1030:	cf 93       	push	r28
    1032:	df 93       	push	r29
    1034:	18 2f       	mov	r17, r24
    1036:	eb 01       	movw	r28, r22
	
	pinMode(pin, OUTPUT);
    1038:	61 e0       	ldi	r22, 0x01	; 1
    103a:	dc da       	rcall	.-2632   	; 0x5f4 <pinMode>
	if (val == 0)
    103c:	20 97       	sbiw	r28, 0x00	; 0
    103e:	21 f4       	brne	.+8      	; 0x1048 <analogWrite+0x1a>
	{
		digitalWrite(pin, LOW);
    1040:	60 e0       	ldi	r22, 0x00	; 0
    1042:	81 2f       	mov	r24, r17
    1044:	16 db       	rcall	.-2516   	; 0x672 <digitalWrite>
    1046:	b5 c0       	rjmp	.+362    	; 0x11b2 <analogWrite+0x184>
	}
	else if (val == 255)
    1048:	cf 3f       	cpi	r28, 0xFF	; 255
    104a:	d1 05       	cpc	r29, r1
    104c:	21 f4       	brne	.+8      	; 0x1056 <analogWrite+0x28>
	{
		digitalWrite(pin, HIGH);
    104e:	61 e0       	ldi	r22, 0x01	; 1
    1050:	81 2f       	mov	r24, r17
    1052:	0f db       	rcall	.-2530   	; 0x672 <digitalWrite>
    1054:	ae c0       	rjmp	.+348    	; 0x11b2 <analogWrite+0x184>
	}
	else{
		switch(pinToTimer(pin))
    1056:	e1 2f       	mov	r30, r17
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	e8 5e       	subi	r30, 0xE8	; 232
    105c:	fe 4f       	sbci	r31, 0xFE	; 254
    105e:	e4 91       	lpm	r30, Z
    1060:	8e 2f       	mov	r24, r30
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	fc 01       	movw	r30, r24
    1066:	31 97       	sbiw	r30, 0x01	; 1
    1068:	e2 31       	cpi	r30, 0x12	; 18
    106a:	f1 05       	cpc	r31, r1
    106c:	08 f0       	brcs	.+2      	; 0x1070 <analogWrite+0x42>
    106e:	97 c0       	rjmp	.+302    	; 0x119e <analogWrite+0x170>
    1070:	88 27       	eor	r24, r24
    1072:	e6 58       	subi	r30, 0x86	; 134
    1074:	ff 4f       	sbci	r31, 0xFF	; 255
    1076:	8f 4f       	sbci	r24, 0xFF	; 255
    1078:	7c c2       	rjmp	.+1272   	; 0x1572 <__tablejump2__>
		{
			//Timer 0
			case TIMER0A:
				//connect pwm to pin on timer 0, channel A
				bitSet(TCCR0A, COM0A1); //clear OC0A on compare match
    107a:	84 b5       	in	r24, 0x24	; 36
    107c:	80 68       	ori	r24, 0x80	; 128
    107e:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; //set pwm duty
    1080:	c7 bd       	out	0x27, r28	; 39
			break;
    1082:	97 c0       	rjmp	.+302    	; 0x11b2 <analogWrite+0x184>
			
			case TIMER0B:
				//connect pwm to pin on timer 0, channel B
				bitSet(TCCR0B, COM0B1); //clear OC0A on compare match
    1084:	85 b5       	in	r24, 0x25	; 37
    1086:	80 62       	ori	r24, 0x20	; 32
    1088:	85 bd       	out	0x25, r24	; 37
				OCR0B = val; //set pwm duty
    108a:	c8 bd       	out	0x28, r28	; 40
			break;
    108c:	92 c0       	rjmp	.+292    	; 0x11b2 <analogWrite+0x184>
			
			//Timer 1
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				bitSet(TCCR1A, COM1A1);
    108e:	e0 e8       	ldi	r30, 0x80	; 128
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	80 68       	ori	r24, 0x80	; 128
    1096:	80 83       	st	Z, r24
				OCR1A = val; // set pwm duty
    1098:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
    109c:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
			break;
    10a0:	88 c0       	rjmp	.+272    	; 0x11b2 <analogWrite+0x184>
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				bitSet(TCCR1A, COM1B1);
    10a2:	e0 e8       	ldi	r30, 0x80	; 128
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	80 62       	ori	r24, 0x20	; 32
    10aa:	80 83       	st	Z, r24
				OCR1B = val; // set pwm duty
    10ac:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
    10b0:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
			break;
    10b4:	7e c0       	rjmp	.+252    	; 0x11b2 <analogWrite+0x184>
			case TIMER1C:
				// connect pwm to pin on timer 1, channel C
				bitSet(TCCR1A, COM1C1);
    10b6:	e0 e8       	ldi	r30, 0x80	; 128
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	80 81       	ld	r24, Z
    10bc:	88 60       	ori	r24, 0x08	; 8
    10be:	80 83       	st	Z, r24
				OCR1C = val; // set pwm duty
    10c0:	d0 93 8d 00 	sts	0x008D, r29	; 0x80008d <__TEXT_REGION_LENGTH__+0x70008d>
    10c4:	c0 93 8c 00 	sts	0x008C, r28	; 0x80008c <__TEXT_REGION_LENGTH__+0x70008c>
			break;
    10c8:	74 c0       	rjmp	.+232    	; 0x11b2 <analogWrite+0x184>
			
			//Timer 2
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				bitSet(TCCR2A, COM2A1);
    10ca:	e0 eb       	ldi	r30, 0xB0	; 176
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z
    10d0:	80 68       	ori	r24, 0x80	; 128
    10d2:	80 83       	st	Z, r24
				OCR2A = val; // set pwm duty
    10d4:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
			break;
    10d8:	6c c0       	rjmp	.+216    	; 0x11b2 <analogWrite+0x184>
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				bitSet(TCCR2A, COM2B1);
    10da:	e0 eb       	ldi	r30, 0xB0	; 176
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	80 81       	ld	r24, Z
    10e0:	80 62       	ori	r24, 0x20	; 32
    10e2:	80 83       	st	Z, r24
				OCR2B = val; // set pwm duty
    10e4:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7000b4>
			break;
    10e8:	64 c0       	rjmp	.+200    	; 0x11b2 <analogWrite+0x184>
			
			//Timer 3
			case TIMER3A:
				// connect pwm to pin on timer 3, channel A
				bitSet(TCCR3A, COM3A1);
    10ea:	e0 e9       	ldi	r30, 0x90	; 144
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	80 81       	ld	r24, Z
    10f0:	80 68       	ori	r24, 0x80	; 128
    10f2:	80 83       	st	Z, r24
				OCR3A = val; // set pwm duty
    10f4:	d0 93 99 00 	sts	0x0099, r29	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
    10f8:	c0 93 98 00 	sts	0x0098, r28	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
			break;
    10fc:	5a c0       	rjmp	.+180    	; 0x11b2 <analogWrite+0x184>
			case TIMER3B:
				// connect pwm to pin on timer 3, channel B
				bitSet(TCCR3A, COM3B1);
    10fe:	e0 e9       	ldi	r30, 0x90	; 144
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	80 81       	ld	r24, Z
    1104:	80 62       	ori	r24, 0x20	; 32
    1106:	80 83       	st	Z, r24
				OCR3B = val; // set pwm duty
    1108:	d0 93 9b 00 	sts	0x009B, r29	; 0x80009b <__TEXT_REGION_LENGTH__+0x70009b>
    110c:	c0 93 9a 00 	sts	0x009A, r28	; 0x80009a <__TEXT_REGION_LENGTH__+0x70009a>
			break;
    1110:	50 c0       	rjmp	.+160    	; 0x11b2 <analogWrite+0x184>
			case TIMER3C:
				// connect pwm to pin on timer 3, channel C
				bitSet(TCCR3A, COM3C1);
    1112:	e0 e9       	ldi	r30, 0x90	; 144
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	80 81       	ld	r24, Z
    1118:	88 60       	ori	r24, 0x08	; 8
    111a:	80 83       	st	Z, r24
				OCR3C = val; // set pwm duty
    111c:	d0 93 9d 00 	sts	0x009D, r29	; 0x80009d <__TEXT_REGION_LENGTH__+0x70009d>
    1120:	c0 93 9c 00 	sts	0x009C, r28	; 0x80009c <__TEXT_REGION_LENGTH__+0x70009c>
			break;
    1124:	46 c0       	rjmp	.+140    	; 0x11b2 <analogWrite+0x184>
			
			//Timer 4
			case TIMER4A:
				//connect pwm to pin on timer 4, channel A
				bitSet(TCCR4A, COM4A1);
    1126:	e0 ea       	ldi	r30, 0xA0	; 160
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	80 68       	ori	r24, 0x80	; 128
    112e:	80 83       	st	Z, r24
				OCR4A = val;	// set pwm duty
    1130:	d0 93 a9 00 	sts	0x00A9, r29	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
    1134:	c0 93 a8 00 	sts	0x00A8, r28	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
			break;
    1138:	3c c0       	rjmp	.+120    	; 0x11b2 <analogWrite+0x184>
			case TIMER4B:
				// connect pwm to pin on timer 4, channel B
				bitSet(TCCR4A, COM4B1);
    113a:	e0 ea       	ldi	r30, 0xA0	; 160
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	80 81       	ld	r24, Z
    1140:	80 62       	ori	r24, 0x20	; 32
    1142:	80 83       	st	Z, r24
				OCR4B = val; // set pwm duty
    1144:	d0 93 ab 00 	sts	0x00AB, r29	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7000ab>
    1148:	c0 93 aa 00 	sts	0x00AA, r28	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7000aa>
			break;
    114c:	32 c0       	rjmp	.+100    	; 0x11b2 <analogWrite+0x184>
			case TIMER4C:
				// connect pwm to pin on timer 4, channel C
				bitSet(TCCR4A, COM4C1);
    114e:	e0 ea       	ldi	r30, 0xA0	; 160
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 81       	ld	r24, Z
    1154:	88 60       	ori	r24, 0x08	; 8
    1156:	80 83       	st	Z, r24
				OCR4C = val; // set pwm duty
    1158:	d0 93 ad 00 	sts	0x00AD, r29	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7000ad>
    115c:	c0 93 ac 00 	sts	0x00AC, r28	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7000ac>
			break;
    1160:	28 c0       	rjmp	.+80     	; 0x11b2 <analogWrite+0x184>
			//timer 5
			case TIMER5A:
				// connect pwm to pin on timer 5, channel A
				bitSet(TCCR5A, COM5A1);
    1162:	e0 e2       	ldi	r30, 0x20	; 32
    1164:	f1 e0       	ldi	r31, 0x01	; 1
    1166:	80 81       	ld	r24, Z
    1168:	80 68       	ori	r24, 0x80	; 128
    116a:	80 83       	st	Z, r24
				OCR5A = val; // set pwm duty
    116c:	d0 93 29 01 	sts	0x0129, r29	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    1170:	c0 93 28 01 	sts	0x0128, r28	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
			break;
    1174:	1e c0       	rjmp	.+60     	; 0x11b2 <analogWrite+0x184>
			case TIMER5B:
				// connect pwm to pin on timer 5, channel B
				bitSet(TCCR5A, COM5B1);
    1176:	e0 e2       	ldi	r30, 0x20	; 32
    1178:	f1 e0       	ldi	r31, 0x01	; 1
    117a:	80 81       	ld	r24, Z
    117c:	80 62       	ori	r24, 0x20	; 32
    117e:	80 83       	st	Z, r24
				OCR5B = val; // set pwm duty
    1180:	d0 93 2b 01 	sts	0x012B, r29	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
    1184:	c0 93 2a 01 	sts	0x012A, r28	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
			break;
    1188:	14 c0       	rjmp	.+40     	; 0x11b2 <analogWrite+0x184>
			case TIMER5C:
				// connect pwm to pin on timer 5, channel C
				bitSet(TCCR5A, COM5C1);
    118a:	e0 e2       	ldi	r30, 0x20	; 32
    118c:	f1 e0       	ldi	r31, 0x01	; 1
    118e:	80 81       	ld	r24, Z
    1190:	88 60       	ori	r24, 0x08	; 8
    1192:	80 83       	st	Z, r24
				OCR5C = val; // set pwm duty
    1194:	d0 93 2d 01 	sts	0x012D, r29	; 0x80012d <__TEXT_REGION_LENGTH__+0x70012d>
    1198:	c0 93 2c 01 	sts	0x012C, r28	; 0x80012c <__TEXT_REGION_LENGTH__+0x70012c>
			break;
    119c:	0a c0       	rjmp	.+20     	; 0x11b2 <analogWrite+0x184>
			case NOT_ON_TIMER:
			
			default:
				if (val < 128) {
    119e:	c0 38       	cpi	r28, 0x80	; 128
    11a0:	d1 05       	cpc	r29, r1
					digitalWrite(pin, LOW);
    11a2:	24 f4       	brge	.+8      	; 0x11ac <analogWrite+0x17e>
    11a4:	60 e0       	ldi	r22, 0x00	; 0
    11a6:	81 2f       	mov	r24, r17
    11a8:	64 da       	rcall	.-2872   	; 0x672 <digitalWrite>
				} else {
					digitalWrite(pin, HIGH);
    11aa:	03 c0       	rjmp	.+6      	; 0x11b2 <analogWrite+0x184>
    11ac:	61 e0       	ldi	r22, 0x01	; 1
    11ae:	81 2f       	mov	r24, r17
    11b0:	60 da       	rcall	.-2880   	; 0x672 <digitalWrite>
				}
		}
	}
    11b2:	df 91       	pop	r29
    11b4:	cf 91       	pop	r28
    11b6:	1f 91       	pop	r17
    11b8:	08 95       	ret

000011ba <millis_init>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    11ba:	78 94       	sei
    11bc:	84 b5       	in	r24, 0x24	; 36
    11be:	82 60       	ori	r24, 0x02	; 2
    11c0:	84 bd       	out	0x24, r24	; 36
    11c2:	84 b5       	in	r24, 0x24	; 36
    11c4:	81 60       	ori	r24, 0x01	; 1
    11c6:	84 bd       	out	0x24, r24	; 36
    11c8:	85 b5       	in	r24, 0x25	; 37
    11ca:	82 60       	ori	r24, 0x02	; 2
    11cc:	85 bd       	out	0x25, r24	; 37
    11ce:	85 b5       	in	r24, 0x25	; 37
    11d0:	81 60       	ori	r24, 0x01	; 1
    11d2:	85 bd       	out	0x25, r24	; 37
    11d4:	ee e6       	ldi	r30, 0x6E	; 110
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	80 81       	ld	r24, Z
    11da:	81 60       	ori	r24, 0x01	; 1
    11dc:	80 83       	st	Z, r24
    11de:	08 95       	ret

000011e0 <micros>:
    11e0:	3f b7       	in	r19, 0x3f	; 63
    11e2:	f8 94       	cli
    11e4:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <timer0_overflow_count>
    11e8:	90 91 47 02 	lds	r25, 0x0247	; 0x800247 <timer0_overflow_count+0x1>
    11ec:	a0 91 48 02 	lds	r26, 0x0248	; 0x800248 <timer0_overflow_count+0x2>
    11f0:	b0 91 49 02 	lds	r27, 0x0249	; 0x800249 <timer0_overflow_count+0x3>
    11f4:	26 b5       	in	r18, 0x26	; 38
    11f6:	a8 9b       	sbis	0x15, 0	; 21
    11f8:	05 c0       	rjmp	.+10     	; 0x1204 <micros+0x24>
    11fa:	2f 3f       	cpi	r18, 0xFF	; 255
    11fc:	19 f0       	breq	.+6      	; 0x1204 <micros+0x24>
    11fe:	01 96       	adiw	r24, 0x01	; 1
    1200:	a1 1d       	adc	r26, r1
    1202:	b1 1d       	adc	r27, r1
    1204:	3f bf       	out	0x3f, r19	; 63
    1206:	ba 2f       	mov	r27, r26
    1208:	a9 2f       	mov	r26, r25
    120a:	98 2f       	mov	r25, r24
    120c:	88 27       	eor	r24, r24
    120e:	82 0f       	add	r24, r18
    1210:	91 1d       	adc	r25, r1
    1212:	a1 1d       	adc	r26, r1
    1214:	b1 1d       	adc	r27, r1
    1216:	bc 01       	movw	r22, r24
    1218:	cd 01       	movw	r24, r26
    121a:	66 0f       	add	r22, r22
    121c:	77 1f       	adc	r23, r23
    121e:	88 1f       	adc	r24, r24
    1220:	99 1f       	adc	r25, r25
    1222:	66 0f       	add	r22, r22
    1224:	77 1f       	adc	r23, r23
    1226:	88 1f       	adc	r24, r24
    1228:	99 1f       	adc	r25, r25
    122a:	08 95       	ret

0000122c <delay_ms>:
    122c:	8f 92       	push	r8
    122e:	9f 92       	push	r9
    1230:	af 92       	push	r10
    1232:	bf 92       	push	r11
    1234:	cf 92       	push	r12
    1236:	df 92       	push	r13
    1238:	ef 92       	push	r14
    123a:	ff 92       	push	r15
    123c:	6b 01       	movw	r12, r22
    123e:	7c 01       	movw	r14, r24
    1240:	cf df       	rcall	.-98     	; 0x11e0 <micros>
    1242:	4b 01       	movw	r8, r22
    1244:	5c 01       	movw	r10, r24
    1246:	c1 14       	cp	r12, r1
    1248:	d1 04       	cpc	r13, r1
    124a:	e1 04       	cpc	r14, r1
    124c:	f1 04       	cpc	r15, r1
    124e:	89 f4       	brne	.+34     	; 0x1272 <delay_ms+0x46>
    1250:	21 c0       	rjmp	.+66     	; 0x1294 <delay_ms+0x68>
    1252:	21 e0       	ldi	r18, 0x01	; 1
    1254:	c2 1a       	sub	r12, r18
    1256:	d1 08       	sbc	r13, r1
    1258:	e1 08       	sbc	r14, r1
    125a:	f1 08       	sbc	r15, r1
    125c:	88 ee       	ldi	r24, 0xE8	; 232
    125e:	88 0e       	add	r8, r24
    1260:	83 e0       	ldi	r24, 0x03	; 3
    1262:	98 1e       	adc	r9, r24
    1264:	a1 1c       	adc	r10, r1
    1266:	b1 1c       	adc	r11, r1
    1268:	c1 14       	cp	r12, r1
    126a:	d1 04       	cpc	r13, r1
    126c:	e1 04       	cpc	r14, r1
    126e:	f1 04       	cpc	r15, r1
    1270:	89 f0       	breq	.+34     	; 0x1294 <delay_ms+0x68>
    1272:	b6 df       	rcall	.-148    	; 0x11e0 <micros>
    1274:	dc 01       	movw	r26, r24
    1276:	cb 01       	movw	r24, r22
    1278:	88 19       	sub	r24, r8
    127a:	99 09       	sbc	r25, r9
    127c:	aa 09       	sbc	r26, r10
    127e:	bb 09       	sbc	r27, r11
    1280:	88 3e       	cpi	r24, 0xE8	; 232
    1282:	93 40       	sbci	r25, 0x03	; 3
    1284:	a1 05       	cpc	r26, r1
    1286:	b1 05       	cpc	r27, r1
    1288:	20 f7       	brcc	.-56     	; 0x1252 <delay_ms+0x26>
    128a:	c1 14       	cp	r12, r1
    128c:	d1 04       	cpc	r13, r1
    128e:	e1 04       	cpc	r14, r1
    1290:	f1 04       	cpc	r15, r1
    1292:	79 f7       	brne	.-34     	; 0x1272 <delay_ms+0x46>
    1294:	ff 90       	pop	r15
    1296:	ef 90       	pop	r14
    1298:	df 90       	pop	r13
    129a:	cf 90       	pop	r12
    129c:	bf 90       	pop	r11
    129e:	af 90       	pop	r10
    12a0:	9f 90       	pop	r9
    12a2:	8f 90       	pop	r8
    12a4:	08 95       	ret

000012a6 <__vector_23>:
	// return = 4 cycles	
}


ISR(TIMER0_OVF_vect)
{
    12a6:	1f 92       	push	r1
    12a8:	0f 92       	push	r0
    12aa:	0f b6       	in	r0, 0x3f	; 63
    12ac:	0f 92       	push	r0
    12ae:	11 24       	eor	r1, r1
    12b0:	2f 93       	push	r18
    12b2:	3f 93       	push	r19
    12b4:	8f 93       	push	r24
    12b6:	9f 93       	push	r25
    12b8:	af 93       	push	r26
    12ba:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    12bc:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <timer0_millis>
    12c0:	90 91 43 02 	lds	r25, 0x0243	; 0x800243 <timer0_millis+0x1>
    12c4:	a0 91 44 02 	lds	r26, 0x0244	; 0x800244 <timer0_millis+0x2>
    12c8:	b0 91 45 02 	lds	r27, 0x0245	; 0x800245 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    12cc:	30 91 41 02 	lds	r19, 0x0241	; 0x800241 <timer0_fract>
	
	m += MILLIS_INC;
	f += FRACT_INC;
    12d0:	23 e0       	ldi	r18, 0x03	; 3
    12d2:	23 0f       	add	r18, r19
	
	if(f >= FRACT_MAX){
    12d4:	2d 37       	cpi	r18, 0x7D	; 125
    12d6:	20 f4       	brcc	.+8      	; 0x12e0 <__vector_23+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;
	
	m += MILLIS_INC;
    12d8:	01 96       	adiw	r24, 0x01	; 1
    12da:	a1 1d       	adc	r26, r1
    12dc:	b1 1d       	adc	r27, r1
    12de:	05 c0       	rjmp	.+10     	; 0x12ea <__vector_23+0x44>
	f += FRACT_INC;
	
	if(f >= FRACT_MAX){
		f -= FRACT_MAX;
    12e0:	26 e8       	ldi	r18, 0x86	; 134
    12e2:	23 0f       	add	r18, r19
		m += 1;
    12e4:	02 96       	adiw	r24, 0x02	; 2
    12e6:	a1 1d       	adc	r26, r1
    12e8:	b1 1d       	adc	r27, r1
	}
	
	timer0_fract = f;
    12ea:	20 93 41 02 	sts	0x0241, r18	; 0x800241 <timer0_fract>
	timer0_millis = m;
    12ee:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <timer0_millis>
    12f2:	90 93 43 02 	sts	0x0243, r25	; 0x800243 <timer0_millis+0x1>
    12f6:	a0 93 44 02 	sts	0x0244, r26	; 0x800244 <timer0_millis+0x2>
    12fa:	b0 93 45 02 	sts	0x0245, r27	; 0x800245 <timer0_millis+0x3>
	timer0_overflow_count++;
    12fe:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <timer0_overflow_count>
    1302:	90 91 47 02 	lds	r25, 0x0247	; 0x800247 <timer0_overflow_count+0x1>
    1306:	a0 91 48 02 	lds	r26, 0x0248	; 0x800248 <timer0_overflow_count+0x2>
    130a:	b0 91 49 02 	lds	r27, 0x0249	; 0x800249 <timer0_overflow_count+0x3>
    130e:	01 96       	adiw	r24, 0x01	; 1
    1310:	a1 1d       	adc	r26, r1
    1312:	b1 1d       	adc	r27, r1
    1314:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <timer0_overflow_count>
    1318:	90 93 47 02 	sts	0x0247, r25	; 0x800247 <timer0_overflow_count+0x1>
    131c:	a0 93 48 02 	sts	0x0248, r26	; 0x800248 <timer0_overflow_count+0x2>
    1320:	b0 93 49 02 	sts	0x0249, r27	; 0x800249 <timer0_overflow_count+0x3>
    1324:	bf 91       	pop	r27
    1326:	af 91       	pop	r26
    1328:	9f 91       	pop	r25
    132a:	8f 91       	pop	r24
    132c:	3f 91       	pop	r19
    132e:	2f 91       	pop	r18
    1330:	0f 90       	pop	r0
    1332:	0f be       	out	0x3f, r0	; 63
    1334:	0f 90       	pop	r0
    1336:	1f 90       	pop	r1
    1338:	18 95       	reti

0000133a <disableTimer>:
		}
	}
	  
	disableTimer(_timer);
	digitalWrite(_pin, 0);
}
    133a:	82 30       	cpi	r24, 0x02	; 2
    133c:	a9 f0       	breq	.+42     	; 0x1368 <disableTimer+0x2e>
    133e:	28 f4       	brcc	.+10     	; 0x134a <disableTimer+0x10>
    1340:	88 23       	and	r24, r24
    1342:	49 f0       	breq	.+18     	; 0x1356 <disableTimer+0x1c>
    1344:	81 30       	cpi	r24, 0x01	; 1
    1346:	51 f0       	breq	.+20     	; 0x135c <disableTimer+0x22>
    1348:	08 95       	ret
    134a:	84 30       	cpi	r24, 0x04	; 4
    134c:	21 f1       	breq	.+72     	; 0x1396 <disableTimer+0x5c>
    134e:	e8 f0       	brcs	.+58     	; 0x138a <disableTimer+0x50>
    1350:	85 30       	cpi	r24, 0x05	; 5
    1352:	39 f1       	breq	.+78     	; 0x13a2 <disableTimer+0x68>
    1354:	08 95       	ret
    1356:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
    135a:	08 95       	ret
    135c:	ef e6       	ldi	r30, 0x6F	; 111
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	80 81       	ld	r24, Z
    1362:	8d 7f       	andi	r24, 0xFD	; 253
    1364:	80 83       	st	Z, r24
    1366:	08 95       	ret
    1368:	e0 e7       	ldi	r30, 0x70	; 112
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	80 81       	ld	r24, Z
    136e:	8d 7f       	andi	r24, 0xFD	; 253
    1370:	80 83       	st	Z, r24
    1372:	81 e0       	ldi	r24, 0x01	; 1
    1374:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    1378:	e1 eb       	ldi	r30, 0xB1	; 177
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	80 81       	ld	r24, Z
    137e:	88 7f       	andi	r24, 0xF8	; 248
    1380:	84 60       	ori	r24, 0x04	; 4
    1382:	80 83       	st	Z, r24
    1384:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
    1388:	08 95       	ret
    138a:	e1 e7       	ldi	r30, 0x71	; 113
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 81       	ld	r24, Z
    1390:	8d 7f       	andi	r24, 0xFD	; 253
    1392:	80 83       	st	Z, r24
    1394:	08 95       	ret
    1396:	e2 e7       	ldi	r30, 0x72	; 114
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	80 81       	ld	r24, Z
    139c:	8d 7f       	andi	r24, 0xFD	; 253
    139e:	80 83       	st	Z, r24
    13a0:	08 95       	ret
    13a2:	e3 e7       	ldi	r30, 0x73	; 115
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	80 81       	ld	r24, Z
    13a8:	8d 7f       	andi	r24, 0xFD	; 253
    13aa:	80 83       	st	Z, r24
    13ac:	08 95       	ret

000013ae <__vector_32>:
}
#endif

#ifdef USE_TIMER3
ISR(TIMER3_COMPA_vect)
{
    13ae:	1f 92       	push	r1
    13b0:	0f 92       	push	r0
    13b2:	0f b6       	in	r0, 0x3f	; 63
    13b4:	0f 92       	push	r0
    13b6:	11 24       	eor	r1, r1
    13b8:	0b b6       	in	r0, 0x3b	; 59
    13ba:	0f 92       	push	r0
    13bc:	2f 93       	push	r18
    13be:	3f 93       	push	r19
    13c0:	4f 93       	push	r20
    13c2:	5f 93       	push	r21
    13c4:	6f 93       	push	r22
    13c6:	7f 93       	push	r23
    13c8:	8f 93       	push	r24
    13ca:	9f 93       	push	r25
    13cc:	af 93       	push	r26
    13ce:	bf 93       	push	r27
    13d0:	ef 93       	push	r30
    13d2:	ff 93       	push	r31
	if (timer3_toggle_count != 0)
    13d4:	80 91 9a 02 	lds	r24, 0x029A	; 0x80029a <timer3_toggle_count>
    13d8:	90 91 9b 02 	lds	r25, 0x029B	; 0x80029b <timer3_toggle_count+0x1>
    13dc:	a0 91 9c 02 	lds	r26, 0x029C	; 0x80029c <timer3_toggle_count+0x2>
    13e0:	b0 91 9d 02 	lds	r27, 0x029D	; 0x80029d <timer3_toggle_count+0x3>
    13e4:	89 2b       	or	r24, r25
    13e6:	8a 2b       	or	r24, r26
    13e8:	8b 2b       	or	r24, r27
    13ea:	51 f1       	breq	.+84     	; 0x1440 <__vector_32+0x92>
	{
		// toggle the pin
		*timer3_pin_port ^= timer3_pin_mask;
    13ec:	90 91 8c 02 	lds	r25, 0x028C	; 0x80028c <timer3_pin_mask>
    13f0:	e0 91 94 02 	lds	r30, 0x0294	; 0x800294 <timer3_pin_port>
    13f4:	f0 91 95 02 	lds	r31, 0x0295	; 0x800295 <timer3_pin_port+0x1>
    13f8:	80 81       	ld	r24, Z
    13fa:	89 27       	eor	r24, r25
    13fc:	80 83       	st	Z, r24
		
		if (timer3_toggle_count > 0)
    13fe:	80 91 9a 02 	lds	r24, 0x029A	; 0x80029a <timer3_toggle_count>
    1402:	90 91 9b 02 	lds	r25, 0x029B	; 0x80029b <timer3_toggle_count+0x1>
    1406:	a0 91 9c 02 	lds	r26, 0x029C	; 0x80029c <timer3_toggle_count+0x2>
    140a:	b0 91 9d 02 	lds	r27, 0x029D	; 0x80029d <timer3_toggle_count+0x3>
    140e:	18 16       	cp	r1, r24
    1410:	19 06       	cpc	r1, r25
    1412:	1a 06       	cpc	r1, r26
    1414:	1b 06       	cpc	r1, r27
    1416:	04 f5       	brge	.+64     	; 0x1458 <__vector_32+0xaa>
			timer3_toggle_count--;
    1418:	80 91 9a 02 	lds	r24, 0x029A	; 0x80029a <timer3_toggle_count>
    141c:	90 91 9b 02 	lds	r25, 0x029B	; 0x80029b <timer3_toggle_count+0x1>
    1420:	a0 91 9c 02 	lds	r26, 0x029C	; 0x80029c <timer3_toggle_count+0x2>
    1424:	b0 91 9d 02 	lds	r27, 0x029D	; 0x80029d <timer3_toggle_count+0x3>
    1428:	01 97       	sbiw	r24, 0x01	; 1
    142a:	a1 09       	sbc	r26, r1
    142c:	b1 09       	sbc	r27, r1
    142e:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <timer3_toggle_count>
    1432:	90 93 9b 02 	sts	0x029B, r25	; 0x80029b <timer3_toggle_count+0x1>
    1436:	a0 93 9c 02 	sts	0x029C, r26	; 0x80029c <timer3_toggle_count+0x2>
    143a:	b0 93 9d 02 	sts	0x029D, r27	; 0x80029d <timer3_toggle_count+0x3>
    143e:	0c c0       	rjmp	.+24     	; 0x1458 <__vector_32+0xaa>
	}
	else
	{
		disableTimer(3);
    1440:	83 e0       	ldi	r24, 0x03	; 3
    1442:	7b df       	rcall	.-266    	; 0x133a <disableTimer>
		
		*timer3_pin_port &= ~(timer3_pin_mask);  // keep pin low after stop
    1444:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <timer3_pin_mask>
    1448:	e0 91 94 02 	lds	r30, 0x0294	; 0x800294 <timer3_pin_port>
    144c:	f0 91 95 02 	lds	r31, 0x0295	; 0x800295 <timer3_pin_port+0x1>
    1450:	90 81       	ld	r25, Z
    1452:	80 95       	com	r24
    1454:	89 23       	and	r24, r25
    1456:	80 83       	st	Z, r24
	}
}
    1458:	ff 91       	pop	r31
    145a:	ef 91       	pop	r30
    145c:	bf 91       	pop	r27
    145e:	af 91       	pop	r26
    1460:	9f 91       	pop	r25
    1462:	8f 91       	pop	r24
    1464:	7f 91       	pop	r23
    1466:	6f 91       	pop	r22
    1468:	5f 91       	pop	r21
    146a:	4f 91       	pop	r20
    146c:	3f 91       	pop	r19
    146e:	2f 91       	pop	r18
    1470:	0f 90       	pop	r0
    1472:	0b be       	out	0x3b, r0	; 59
    1474:	0f 90       	pop	r0
    1476:	0f be       	out	0x3f, r0	; 63
    1478:	0f 90       	pop	r0
    147a:	1f 90       	pop	r1
    147c:	18 95       	reti

0000147e <sdDetected>:
    }
}

void sdDetected(void)
{
	LCD_PrintString("SD Detected",0,1);
    147e:	41 e0       	ldi	r20, 0x01	; 1
    1480:	60 e0       	ldi	r22, 0x00	; 0
    1482:	81 e1       	ldi	r24, 0x11	; 17
    1484:	92 e0       	ldi	r25, 0x02	; 2
    1486:	6c c8       	rjmp	.-3880   	; 0x560 <LCD_PrintString>
    1488:	08 95       	ret

0000148a <Button1>:
}

void Button1(void)
{
	togglePin(Pin_PK0);
    148a:	89 e5       	ldi	r24, 0x59	; 89
    148c:	14 c9       	rjmp	.-3544   	; 0x6b6 <togglePin>
    148e:	08 95       	ret

00001490 <Button2>:
}
void Button2(void)
{
	togglePin(Pin_PK1);
    1490:	88 e5       	ldi	r24, 0x58	; 88
    1492:	11 c9       	rjmp	.-3550   	; 0x6b6 <togglePin>
    1494:	08 95       	ret

00001496 <Button3>:
}
void Button3(void)
{
	togglePin(Pin_PK2);
    1496:	87 e5       	ldi	r24, 0x57	; 87
    1498:	0e c9       	rjmp	.-3556   	; 0x6b6 <togglePin>
    149a:	08 95       	ret

0000149c <LCD_PrintInt>:
	
}

void LCD_PrintInt(uint16_t n,uint8_t x,uint8_t y){
    149c:	0f 93       	push	r16
    149e:	1f 93       	push	r17
    14a0:	cf 93       	push	r28
    14a2:	df 93       	push	r29
    14a4:	cd b7       	in	r28, 0x3d	; 61
    14a6:	de b7       	in	r29, 0x3e	; 62
    14a8:	2a 97       	sbiw	r28, 0x0a	; 10
    14aa:	0f b6       	in	r0, 0x3f	; 63
    14ac:	f8 94       	cli
    14ae:	de bf       	out	0x3e, r29	; 62
    14b0:	0f be       	out	0x3f, r0	; 63
    14b2:	cd bf       	out	0x3d, r28	; 61
    14b4:	16 2f       	mov	r17, r22
    14b6:	04 2f       	mov	r16, r20
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    14b8:	4a e0       	ldi	r20, 0x0A	; 10
    14ba:	be 01       	movw	r22, r28
    14bc:	6f 5f       	subi	r22, 0xFF	; 255
    14be:	7f 4f       	sbci	r23, 0xFF	; 255
    14c0:	60 d0       	rcall	.+192    	; 0x1582 <__itoa_ncheck>
	char buffer[10];
	itoa(n,buffer,10);
	LCD_PrintString(buffer,x,y);
    14c2:	40 2f       	mov	r20, r16
    14c4:	61 2f       	mov	r22, r17
    14c6:	ce 01       	movw	r24, r28
    14c8:	01 96       	adiw	r24, 0x01	; 1
    14ca:	4a d8       	rcall	.-3948   	; 0x560 <LCD_PrintString>
}
    14cc:	2a 96       	adiw	r28, 0x0a	; 10
    14ce:	0f b6       	in	r0, 0x3f	; 63
    14d0:	f8 94       	cli
    14d2:	de bf       	out	0x3e, r29	; 62
    14d4:	0f be       	out	0x3f, r0	; 63
    14d6:	cd bf       	out	0x3d, r28	; 61
    14d8:	df 91       	pop	r29
    14da:	cf 91       	pop	r28
    14dc:	1f 91       	pop	r17
    14de:	0f 91       	pop	r16
    14e0:	08 95       	ret

000014e2 <main>:
void Button3(void);
void LCD_PrintInt(uint16_t n,uint8_t x,uint8_t y);

int main(void)
{
	millis_init();
    14e2:	6b de       	rcall	.-810    	; 0x11ba <millis_init>
	pwm_init();
    14e4:	64 dd       	rcall	.-1336   	; 0xfae <pwm_init>
	adc_init();
    14e6:	47 d8       	rcall	.-3954   	; 0x576 <adc_init>
    14e8:	0e 94 14 02 	call	0x428	; 0x428 <lcd_init>
	
	lcd_init();
    14ec:	0e 94 e7 01 	call	0x3ce	; 0x3ce <lcd_clear>
	lcd_clear();
    14f0:	40 e0       	ldi	r20, 0x00	; 0
	LCD_PrintString("MCU TRAINING KIT",0,0);
    14f2:	60 e0       	ldi	r22, 0x00	; 0
    14f4:	8d e1       	ldi	r24, 0x1D	; 29
    14f6:	92 e0       	ldi	r25, 0x02	; 2
    14f8:	33 d8       	rcall	.-3994   	; 0x560 <LCD_PrintString>

	//User LEDs
	pinMode(Pin_PK0, OUTPUT);
    14fa:	61 e0       	ldi	r22, 0x01	; 1
    14fc:	89 e5       	ldi	r24, 0x59	; 89
    14fe:	7a d8       	rcall	.-3852   	; 0x5f4 <pinMode>
	pinMode(Pin_PK1, OUTPUT);
    1500:	61 e0       	ldi	r22, 0x01	; 1
    1502:	88 e5       	ldi	r24, 0x58	; 88
    1504:	77 d8       	rcall	.-3858   	; 0x5f4 <pinMode>
	pinMode(Pin_PK2, OUTPUT);
    1506:	61 e0       	ldi	r22, 0x01	; 1
    1508:	87 e5       	ldi	r24, 0x57	; 87
    150a:	74 d8       	rcall	.-3864   	; 0x5f4 <pinMode>
	
	//Buttons - Pin change
	pinMode(Pin_PJ2, INPUT);
    150c:	60 e0       	ldi	r22, 0x00	; 0
    150e:	81 e4       	ldi	r24, 0x41	; 65
    1510:	71 d8       	rcall	.-3870   	; 0x5f4 <pinMode>
	pinMode(Pin_PJ3, INPUT);
    1512:	60 e0       	ldi	r22, 0x00	; 0
    1514:	82 e4       	ldi	r24, 0x42	; 66
    1516:	6e d8       	rcall	.-3876   	; 0x5f4 <pinMode>
    1518:	60 e0       	ldi	r22, 0x00	; 0
	pinMode(Pin_PJ4, INPUT);
    151a:	83 e4       	ldi	r24, 0x43	; 67
    151c:	6b d8       	rcall	.-3882   	; 0x5f4 <pinMode>
    151e:	43 e0       	ldi	r20, 0x03	; 3
    1520:	65 e4       	ldi	r22, 0x45	; 69
	attachPCINT(pinToPCINT(Pin_PJ2), Button1, RISING);
    1522:	7a e0       	ldi	r23, 0x0A	; 10
    1524:	8b e0       	ldi	r24, 0x0B	; 11
    1526:	fe da       	rcall	.-2564   	; 0xb24 <attachPinChangeInterrupt>
    1528:	43 e0       	ldi	r20, 0x03	; 3
    152a:	68 e4       	ldi	r22, 0x48	; 72
	attachPCINT(pinToPCINT(Pin_PJ3), Button2, RISING);
    152c:	7a e0       	ldi	r23, 0x0A	; 10
    152e:	8c e0       	ldi	r24, 0x0C	; 12
    1530:	f9 da       	rcall	.-2574   	; 0xb24 <attachPinChangeInterrupt>
    1532:	43 e0       	ldi	r20, 0x03	; 3
    1534:	6b e4       	ldi	r22, 0x4B	; 75
	attachPCINT(pinToPCINT(Pin_PJ4), Button3, RISING);
    1536:	7a e0       	ldi	r23, 0x0A	; 10
    1538:	8d e0       	ldi	r24, 0x0D	; 13
    153a:	f4 da       	rcall	.-2584   	; 0xb24 <attachPinChangeInterrupt>
    153c:	43 e0       	ldi	r20, 0x03	; 3
	
	attachInterrupt(EXTERNAL_INT_5,sdDetected, RISING);
    153e:	50 e0       	ldi	r21, 0x00	; 0
    1540:	6f e3       	ldi	r22, 0x3F	; 63
    1542:	7a e0       	ldi	r23, 0x0A	; 10
    1544:	85 e0       	ldi	r24, 0x05	; 5
    1546:	d2 d8       	rcall	.-3676   	; 0x6ec <attachInterrupt>
	
	analogWrite(Pin_PH3,255/4);
    1548:	6f e3       	ldi	r22, 0x3F	; 63
    154a:	70 e0       	ldi	r23, 0x00	; 0
    154c:	8f e0       	ldi	r24, 0x0F	; 15
    154e:	6f dd       	rcall	.-1314   	; 0x102e <analogWrite>
// 		noTone(Pin_PE3);
// 	}

    while (1) 
    {
		int pot_val = analogRead(Pin_PF0);
    1550:	81 e6       	ldi	r24, 0x61	; 97
    1552:	20 d8       	rcall	.-4032   	; 0x594 <analogRead>
    1554:	41 e0       	ldi	r20, 0x01	; 1
		
		LCD_PrintInt(pot_val,4,1);
    1556:	64 e0       	ldi	r22, 0x04	; 4
    1558:	a1 df       	rcall	.-190    	; 0x149c <LCD_PrintInt>
    155a:	62 e3       	ldi	r22, 0x32	; 50
		delay_ms(50);
    155c:	70 e0       	ldi	r23, 0x00	; 0
    155e:	80 e0       	ldi	r24, 0x00	; 0
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	64 de       	rcall	.-824    	; 0x122c <delay_ms>
    1564:	41 e0       	ldi	r20, 0x01	; 1
    1566:	60 e0       	ldi	r22, 0x00	; 0
		LCD_PrintString("ADC:    ",0,1);//clear line
    1568:	8e e2       	ldi	r24, 0x2E	; 46
    156a:	92 e0       	ldi	r25, 0x02	; 2
    156c:	0e 94 b0 02 	call	0x560	; 0x560 <LCD_PrintString>
    1570:	ef cf       	rjmp	.-34     	; 0x1550 <main+0x6e>

00001572 <__tablejump2__>:
    1572:	ee 0f       	add	r30, r30
    1574:	ff 1f       	adc	r31, r31
    1576:	88 1f       	adc	r24, r24
    1578:	8b bf       	out	0x3b, r24	; 59
    157a:	07 90       	elpm	r0, Z+
    157c:	f6 91       	elpm	r31, Z
    157e:	e0 2d       	mov	r30, r0
    1580:	19 94       	eijmp

00001582 <__itoa_ncheck>:
    1582:	bb 27       	eor	r27, r27
    1584:	4a 30       	cpi	r20, 0x0A	; 10
    1586:	31 f4       	brne	.+12     	; 0x1594 <__itoa_ncheck+0x12>
    1588:	99 23       	and	r25, r25
    158a:	22 f4       	brpl	.+8      	; 0x1594 <__itoa_ncheck+0x12>
    158c:	bd e2       	ldi	r27, 0x2D	; 45
    158e:	90 95       	com	r25
    1590:	81 95       	neg	r24
    1592:	9f 4f       	sbci	r25, 0xFF	; 255
    1594:	01 c0       	rjmp	.+2      	; 0x1598 <__utoa_common>

00001596 <__utoa_ncheck>:
    1596:	bb 27       	eor	r27, r27

00001598 <__utoa_common>:
    1598:	fb 01       	movw	r30, r22
    159a:	55 27       	eor	r21, r21
    159c:	aa 27       	eor	r26, r26
    159e:	88 0f       	add	r24, r24
    15a0:	99 1f       	adc	r25, r25
    15a2:	aa 1f       	adc	r26, r26
    15a4:	a4 17       	cp	r26, r20
    15a6:	10 f0       	brcs	.+4      	; 0x15ac <__utoa_common+0x14>
    15a8:	a4 1b       	sub	r26, r20
    15aa:	83 95       	inc	r24
    15ac:	50 51       	subi	r21, 0x10	; 16
    15ae:	b9 f7       	brne	.-18     	; 0x159e <__utoa_common+0x6>
    15b0:	a0 5d       	subi	r26, 0xD0	; 208
    15b2:	aa 33       	cpi	r26, 0x3A	; 58
    15b4:	08 f0       	brcs	.+2      	; 0x15b8 <__utoa_common+0x20>
    15b6:	a9 5d       	subi	r26, 0xD9	; 217
    15b8:	a1 93       	st	Z+, r26
    15ba:	00 97       	sbiw	r24, 0x00	; 0
    15bc:	79 f7       	brne	.-34     	; 0x159c <__utoa_common+0x4>
    15be:	b1 11       	cpse	r27, r1
    15c0:	b1 93       	st	Z+, r27
    15c2:	11 92       	st	Z+, r1
    15c4:	cb 01       	movw	r24, r22
    15c6:	00 c0       	rjmp	.+0      	; 0x15c8 <strrev>

000015c8 <strrev>:
    15c8:	dc 01       	movw	r26, r24
    15ca:	fc 01       	movw	r30, r24
    15cc:	67 2f       	mov	r22, r23
    15ce:	71 91       	ld	r23, Z+
    15d0:	77 23       	and	r23, r23
    15d2:	e1 f7       	brne	.-8      	; 0x15cc <strrev+0x4>
    15d4:	32 97       	sbiw	r30, 0x02	; 2
    15d6:	04 c0       	rjmp	.+8      	; 0x15e0 <strrev+0x18>
    15d8:	7c 91       	ld	r23, X
    15da:	6d 93       	st	X+, r22
    15dc:	70 83       	st	Z, r23
    15de:	62 91       	ld	r22, -Z
    15e0:	ae 17       	cp	r26, r30
    15e2:	bf 07       	cpc	r27, r31
    15e4:	c8 f3       	brcs	.-14     	; 0x15d8 <strrev+0x10>
    15e6:	08 95       	ret

000015e8 <_exit>:
    15e8:	f8 94       	cli

000015ea <__stop_program>:
    15ea:	ff cf       	rjmp	.-2      	; 0x15ea <__stop_program>
