
TK2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800200  00000f0a  00000f9e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f0a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002a  00800222  00800222  00000fc0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000fc0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ff0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00001030  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ee3  00000000  00000000  000010e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010fc  00000000  00000000  00002fc3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b4d  00000000  00000000  000040bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000170  00000000  00000000  00004c0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000085b  00000000  00000000  00004d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000fe7  00000000  00000000  000055d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  000065be  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	f1 c0       	rjmp	.+482    	; 0x1e4 <__ctors_end>
   2:	00 00       	nop
   4:	0e c1       	rjmp	.+540    	; 0x222 <__bad_interrupt>
   6:	00 00       	nop
   8:	0c c1       	rjmp	.+536    	; 0x222 <__bad_interrupt>
   a:	00 00       	nop
   c:	0a c1       	rjmp	.+532    	; 0x222 <__bad_interrupt>
   e:	00 00       	nop
  10:	08 c1       	rjmp	.+528    	; 0x222 <__bad_interrupt>
  12:	00 00       	nop
  14:	06 c1       	rjmp	.+524    	; 0x222 <__bad_interrupt>
  16:	00 00       	nop
  18:	04 c1       	rjmp	.+520    	; 0x222 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	02 c1       	rjmp	.+516    	; 0x222 <__bad_interrupt>
  1e:	00 00       	nop
  20:	00 c1       	rjmp	.+512    	; 0x222 <__bad_interrupt>
  22:	00 00       	nop
  24:	fe c0       	rjmp	.+508    	; 0x222 <__bad_interrupt>
  26:	00 00       	nop
  28:	fc c0       	rjmp	.+504    	; 0x222 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	fa c0       	rjmp	.+500    	; 0x222 <__bad_interrupt>
  2e:	00 00       	nop
  30:	f8 c0       	rjmp	.+496    	; 0x222 <__bad_interrupt>
  32:	00 00       	nop
  34:	f6 c0       	rjmp	.+492    	; 0x222 <__bad_interrupt>
  36:	00 00       	nop
  38:	f4 c0       	rjmp	.+488    	; 0x222 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	f2 c0       	rjmp	.+484    	; 0x222 <__bad_interrupt>
  3e:	00 00       	nop
  40:	f0 c0       	rjmp	.+480    	; 0x222 <__bad_interrupt>
  42:	00 00       	nop
  44:	ee c0       	rjmp	.+476    	; 0x222 <__bad_interrupt>
  46:	00 00       	nop
  48:	ec c0       	rjmp	.+472    	; 0x222 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	ea c0       	rjmp	.+468    	; 0x222 <__bad_interrupt>
  4e:	00 00       	nop
  50:	e8 c0       	rjmp	.+464    	; 0x222 <__bad_interrupt>
  52:	00 00       	nop
  54:	e6 c0       	rjmp	.+460    	; 0x222 <__bad_interrupt>
  56:	00 00       	nop
  58:	e4 c0       	rjmp	.+456    	; 0x222 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	e2 c0       	rjmp	.+452    	; 0x222 <__bad_interrupt>
  5e:	00 00       	nop
  60:	e0 c0       	rjmp	.+448    	; 0x222 <__bad_interrupt>
  62:	00 00       	nop
  64:	de c0       	rjmp	.+444    	; 0x222 <__bad_interrupt>
  66:	00 00       	nop
  68:	dc c0       	rjmp	.+440    	; 0x222 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	da c0       	rjmp	.+436    	; 0x222 <__bad_interrupt>
  6e:	00 00       	nop
  70:	d8 c0       	rjmp	.+432    	; 0x222 <__bad_interrupt>
  72:	00 00       	nop
  74:	d6 c0       	rjmp	.+428    	; 0x222 <__bad_interrupt>
  76:	00 00       	nop
  78:	d4 c0       	rjmp	.+424    	; 0x222 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	d2 c0       	rjmp	.+420    	; 0x222 <__bad_interrupt>
  7e:	00 00       	nop
  80:	05 c5       	rjmp	.+2570   	; 0xa8c <__vector_32>
  82:	00 00       	nop
  84:	ce c0       	rjmp	.+412    	; 0x222 <__bad_interrupt>
  86:	00 00       	nop
  88:	cc c0       	rjmp	.+408    	; 0x222 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	ca c0       	rjmp	.+404    	; 0x222 <__bad_interrupt>
  8e:	00 00       	nop
  90:	c8 c0       	rjmp	.+400    	; 0x222 <__bad_interrupt>
  92:	00 00       	nop
  94:	c6 c0       	rjmp	.+396    	; 0x222 <__bad_interrupt>
  96:	00 00       	nop
  98:	c4 c0       	rjmp	.+392    	; 0x222 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	c2 c0       	rjmp	.+388    	; 0x222 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	c0 c0       	rjmp	.+384    	; 0x222 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	be c0       	rjmp	.+380    	; 0x222 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	bc c0       	rjmp	.+376    	; 0x222 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	ba c0       	rjmp	.+372    	; 0x222 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	b8 c0       	rjmp	.+368    	; 0x222 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	b6 c0       	rjmp	.+364    	; 0x222 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	b4 c0       	rjmp	.+360    	; 0x222 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	b2 c0       	rjmp	.+356    	; 0x222 <__bad_interrupt>
  be:	00 00       	nop
  c0:	b0 c0       	rjmp	.+352    	; 0x222 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	ae c0       	rjmp	.+348    	; 0x222 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	ac c0       	rjmp	.+344    	; 0x222 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	aa c0       	rjmp	.+340    	; 0x222 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	a8 c0       	rjmp	.+336    	; 0x222 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	a6 c0       	rjmp	.+332    	; 0x222 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	a4 c0       	rjmp	.+328    	; 0x222 <__bad_interrupt>
  da:	00 00       	nop
  dc:	a2 c0       	rjmp	.+324    	; 0x222 <__bad_interrupt>
  de:	00 00       	nop
  e0:	a0 c0       	rjmp	.+320    	; 0x222 <__bad_interrupt>
	...

000000e4 <__trampolines_end>:
  e4:	00 20       	and	r0, r0
  e6:	01 02       	muls	r16, r17
  e8:	04 08       	sbc	r0, r4
  ea:	10 20       	and	r1, r0
  ec:	40 80       	ld	r4, Z
  ee:	00 00       	nop
  f0:	01 02       	muls	r16, r17
  f2:	04 08       	sbc	r0, r4
  f4:	10 20       	and	r1, r0
  f6:	40 01       	movw	r8, r0
  f8:	02 04       	cpc	r0, r2
  fa:	08 10       	cpse	r0, r8
  fc:	20 40       	sbci	r18, 0x00	; 0
  fe:	80 80       	ld	r8, Z
 100:	08 10       	cpse	r0, r8
 102:	00 00       	nop
 104:	00 00       	nop
 106:	00 01       	movw	r0, r0
 108:	02 04       	cpc	r0, r2
 10a:	08 10       	cpse	r0, r8
 10c:	20 40       	sbci	r18, 0x00	; 0
 10e:	80 01       	movw	r16, r0
 110:	02 04       	cpc	r0, r2
 112:	08 10       	cpse	r0, r8
 114:	20 40       	sbci	r18, 0x00	; 0
 116:	80 01       	movw	r16, r0
 118:	02 01       	movw	r0, r4
 11a:	02 04       	cpc	r0, r2
 11c:	08 10       	cpse	r0, r8
 11e:	20 40       	sbci	r18, 0x00	; 0
 120:	80 00       	.word	0x0080	; ????
 122:	00 01       	movw	r0, r0
 124:	02 04       	cpc	r0, r2
 126:	08 10       	cpse	r0, r8
 128:	20 40       	sbci	r18, 0x00	; 0
 12a:	04 80       	ldd	r0, Z+4	; 0x04
 12c:	40 20       	and	r4, r0
 12e:	10 08       	sbc	r1, r0
 130:	04 02       	muls	r16, r20
 132:	01 80       	ldd	r0, Z+1	; 0x01
 134:	00 00       	nop
 136:	80 40       	sbci	r24, 0x00	; 0
 138:	20 10       	cpse	r2, r0
 13a:	08 04       	cpc	r0, r8
 13c:	02 01       	movw	r0, r4
 13e:	80 40       	sbci	r24, 0x00	; 0
 140:	20 10       	cpse	r2, r0
 142:	08 04       	cpc	r0, r8
 144:	02 01       	movw	r0, r4
 146:	00 00       	nop
	...

00000149 <pin_to_port_PGM>:
 149:	00 07 05 05 05 05 05 05 05 05 00 00 08 08 08 08     ................
 159:	08 08 08 02 02 02 02 02 02 02 02 08 07 07 00 00     ................
 169:	00 00 00 0c 0c 0c 0c 0c 0c 0c 0c 04 04 04 04 04     ................
 179:	04 04 04 07 07 03 03 03 03 03 03 03 03 00 00 0a     ................
 189:	0a 0a 0a 0a 0a 0a 07 01 01 01 01 01 01 01 01 0a     ................
 199:	00 00 0b 0b 0b 0b 0b 0b 0b 0b 06 06 06 06 06 06     ................
 1a9:	06 06 00 00 00                                      .....

000001ae <port_to_output_PGM>:
 1ae:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
 1be:	02 01 00 00 05 01 08 01 0b 01                       ..........

000001c8 <port_to_ddr_PGM>:
 1c8:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
 1d8:	01 01 00 00 04 01 07 01 0a 01                       ..........

000001e2 <tone_pin_to_timer_PGM>:
 1e2:	03 00                                               ..

000001e4 <__ctors_end>:
 1e4:	11 24       	eor	r1, r1
 1e6:	1f be       	out	0x3f, r1	; 63
 1e8:	cf ef       	ldi	r28, 0xFF	; 255
 1ea:	d1 e2       	ldi	r29, 0x21	; 33
 1ec:	de bf       	out	0x3e, r29	; 62
 1ee:	cd bf       	out	0x3d, r28	; 61
 1f0:	00 e0       	ldi	r16, 0x00	; 0
 1f2:	0c bf       	out	0x3c, r16	; 60

000001f4 <__do_copy_data>:
 1f4:	12 e0       	ldi	r17, 0x02	; 2
 1f6:	a0 e0       	ldi	r26, 0x00	; 0
 1f8:	b2 e0       	ldi	r27, 0x02	; 2
 1fa:	ea e0       	ldi	r30, 0x0A	; 10
 1fc:	ff e0       	ldi	r31, 0x0F	; 15
 1fe:	00 e0       	ldi	r16, 0x00	; 0
 200:	0b bf       	out	0x3b, r16	; 59
 202:	02 c0       	rjmp	.+4      	; 0x208 <__do_copy_data+0x14>
 204:	07 90       	elpm	r0, Z+
 206:	0d 92       	st	X+, r0
 208:	a2 32       	cpi	r26, 0x22	; 34
 20a:	b1 07       	cpc	r27, r17
 20c:	d9 f7       	brne	.-10     	; 0x204 <__do_copy_data+0x10>

0000020e <__do_clear_bss>:
 20e:	22 e0       	ldi	r18, 0x02	; 2
 210:	a2 e2       	ldi	r26, 0x22	; 34
 212:	b2 e0       	ldi	r27, 0x02	; 2
 214:	01 c0       	rjmp	.+2      	; 0x218 <.do_clear_bss_start>

00000216 <.do_clear_bss_loop>:
 216:	1d 92       	st	X+, r1

00000218 <.do_clear_bss_start>:
 218:	ac 34       	cpi	r26, 0x4C	; 76
 21a:	b2 07       	cpc	r27, r18
 21c:	e1 f7       	brne	.-8      	; 0x216 <.do_clear_bss_loop>
 21e:	a9 d4       	rcall	.+2386   	; 0xb72 <main>
 220:	72 c6       	rjmp	.+3300   	; 0xf06 <_exit>

00000222 <__bad_interrupt>:
 222:	ee ce       	rjmp	.-548    	; 0x0 <__vectors>

00000224 <pinMode>:
 */ 
#include "gpio.h"


void pinMode(uint8_t pin, uint8_t mode)
{
 224:	cf 93       	push	r28
 226:	df 93       	push	r29
	uint8_t bit = pinToBitMask(pin);
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	fc 01       	movw	r30, r24
 22c:	ec 51       	subi	r30, 0x1C	; 28
 22e:	ff 4f       	sbci	r31, 0xFF	; 255
 230:	24 91       	lpm	r18, Z
	uint8_t port = pinToPort(pin);
 232:	fc 01       	movw	r30, r24
 234:	e7 5b       	subi	r30, 0xB7	; 183
 236:	fe 4f       	sbci	r31, 0xFE	; 254
 238:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;
	
	if (port == NOT_A_PIN) return;
 23a:	88 23       	and	r24, r24
 23c:	79 f1       	breq	.+94     	; 0x29c <pinMode+0x78>
	
	reg = portDDRRegister(port);
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	88 0f       	add	r24, r24
 242:	99 1f       	adc	r25, r25
 244:	fc 01       	movw	r30, r24
 246:	e8 53       	subi	r30, 0x38	; 56
 248:	fe 4f       	sbci	r31, 0xFE	; 254
 24a:	a5 91       	lpm	r26, Z+
 24c:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
 24e:	fc 01       	movw	r30, r24
 250:	e2 55       	subi	r30, 0x52	; 82
 252:	fe 4f       	sbci	r31, 0xFE	; 254
 254:	c5 91       	lpm	r28, Z+
 256:	d4 91       	lpm	r29, Z
	
	if (mode == INPUT)
 258:	61 11       	cpse	r22, r1
 25a:	0c c0       	rjmp	.+24     	; 0x274 <pinMode+0x50>
	{
		uint8_t oldSREG = SREG;
 25c:	9f b7       	in	r25, 0x3f	; 63
		cli();
 25e:	f8 94       	cli
		*reg &= ~bit;
 260:	8c 91       	ld	r24, X
 262:	e2 2f       	mov	r30, r18
 264:	e0 95       	com	r30
 266:	8e 23       	and	r24, r30
 268:	8c 93       	st	X, r24
		*out &= ~bit;
 26a:	28 81       	ld	r18, Y
 26c:	e2 23       	and	r30, r18
 26e:	e8 83       	st	Y, r30
		SREG = oldSREG;
 270:	9f bf       	out	0x3f, r25	; 63
 272:	14 c0       	rjmp	.+40     	; 0x29c <pinMode+0x78>
	}else if(mode == INPUT_PULLUP)
 274:	62 30       	cpi	r22, 0x02	; 2
 276:	61 f4       	brne	.+24     	; 0x290 <pinMode+0x6c>
	{
		uint8_t oldSREG = SREG;
 278:	9f b7       	in	r25, 0x3f	; 63
		cli();
 27a:	f8 94       	cli
		*reg &= ~bit;
 27c:	8c 91       	ld	r24, X
 27e:	32 2f       	mov	r19, r18
 280:	30 95       	com	r19
 282:	83 23       	and	r24, r19
 284:	8c 93       	st	X, r24
		*out |= bit;
 286:	e8 81       	ld	r30, Y
 288:	e2 2b       	or	r30, r18
 28a:	e8 83       	st	Y, r30
		SREG = oldSREG;
 28c:	9f bf       	out	0x3f, r25	; 63
 28e:	06 c0       	rjmp	.+12     	; 0x29c <pinMode+0x78>
	}else{
		//output
		uint8_t oldSREG = SREG;
 290:	8f b7       	in	r24, 0x3f	; 63
		cli();
 292:	f8 94       	cli
		*reg |= bit;
 294:	ec 91       	ld	r30, X
 296:	e2 2b       	or	r30, r18
 298:	ec 93       	st	X, r30
		SREG = oldSREG;
 29a:	8f bf       	out	0x3f, r24	; 63
	}
		
}
 29c:	df 91       	pop	r29
 29e:	cf 91       	pop	r28
 2a0:	08 95       	ret

000002a2 <digitalWrite>:

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t bit = pinToBitMask(pin);
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	fc 01       	movw	r30, r24
 2a6:	ec 51       	subi	r30, 0x1C	; 28
 2a8:	ff 4f       	sbci	r31, 0xFF	; 255
 2aa:	24 91       	lpm	r18, Z
	uint8_t port = pinToPort(pin);
 2ac:	fc 01       	movw	r30, r24
 2ae:	e7 5b       	subi	r30, 0xB7	; 183
 2b0:	fe 4f       	sbci	r31, 0xFE	; 254
 2b2:	84 91       	lpm	r24, Z
	volatile uint8_t *out;
	
	if (port == NOT_A_PIN) return;
 2b4:	88 23       	and	r24, r24
 2b6:	b1 f0       	breq	.+44     	; 0x2e4 <digitalWrite+0x42>
	
	out = portOutputRegister(port);
 2b8:	e8 2f       	mov	r30, r24
 2ba:	f0 e0       	ldi	r31, 0x00	; 0
 2bc:	ee 0f       	add	r30, r30
 2be:	ff 1f       	adc	r31, r31
 2c0:	e2 55       	subi	r30, 0x52	; 82
 2c2:	fe 4f       	sbci	r31, 0xFE	; 254
 2c4:	a5 91       	lpm	r26, Z+
 2c6:	b4 91       	lpm	r27, Z
	
	uint8_t oldSREG = SREG;
 2c8:	8f b7       	in	r24, 0x3f	; 63
	cli();
 2ca:	f8 94       	cli
	
	if (val == LOW) {
 2cc:	61 11       	cpse	r22, r1
 2ce:	06 c0       	rjmp	.+12     	; 0x2dc <digitalWrite+0x3a>
		*out &= ~bit;
 2d0:	9c 91       	ld	r25, X
 2d2:	e2 2f       	mov	r30, r18
 2d4:	e0 95       	com	r30
 2d6:	e9 23       	and	r30, r25
 2d8:	ec 93       	st	X, r30
 2da:	03 c0       	rjmp	.+6      	; 0x2e2 <digitalWrite+0x40>
	} else {
		*out |= bit;
 2dc:	ec 91       	ld	r30, X
 2de:	e2 2b       	or	r30, r18
 2e0:	ec 93       	st	X, r30
	}
	
	SREG = oldSREG;
 2e2:	8f bf       	out	0x3f, r24	; 63
 2e4:	08 95       	ret

000002e6 <togglePin>:
	
}

void togglePin(uint8_t pin)
{
	uint8_t bit = pinToBitMask(pin);
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	fc 01       	movw	r30, r24
 2ea:	ec 51       	subi	r30, 0x1C	; 28
 2ec:	ff 4f       	sbci	r31, 0xFF	; 255
 2ee:	24 91       	lpm	r18, Z
	uint8_t port = pinToPort(pin);
 2f0:	fc 01       	movw	r30, r24
 2f2:	e7 5b       	subi	r30, 0xB7	; 183
 2f4:	fe 4f       	sbci	r31, 0xFE	; 254
 2f6:	84 91       	lpm	r24, Z
	volatile uint8_t *out;
	
	if (port == NOT_A_PIN) return;
 2f8:	88 23       	and	r24, r24
 2fa:	71 f0       	breq	.+28     	; 0x318 <togglePin+0x32>
	
	out = portOutputRegister(port);
 2fc:	e8 2f       	mov	r30, r24
 2fe:	f0 e0       	ldi	r31, 0x00	; 0
 300:	ee 0f       	add	r30, r30
 302:	ff 1f       	adc	r31, r31
 304:	e2 55       	subi	r30, 0x52	; 82
 306:	fe 4f       	sbci	r31, 0xFE	; 254
 308:	a5 91       	lpm	r26, Z+
 30a:	b4 91       	lpm	r27, Z
	
	uint8_t oldSREG = SREG;
 30c:	8f b7       	in	r24, 0x3f	; 63
	cli();
 30e:	f8 94       	cli
	
	//toggle
	*out ^= bit;
 310:	ec 91       	ld	r30, X
 312:	e2 27       	eor	r30, r18
 314:	ec 93       	st	X, r30
	
	SREG = oldSREG;
 316:	8f bf       	out	0x3f, r24	; 63
 318:	08 95       	ret

0000031a <tone>:
}


//Generate frequency (in hertz) and duration (in milliseconds)
void tone(uint8_t _pin, unsigned int frequency, unsigned long duration)
{
 31a:	8f 92       	push	r8
 31c:	9f 92       	push	r9
 31e:	af 92       	push	r10
 320:	bf 92       	push	r11
 322:	cf 92       	push	r12
 324:	df 92       	push	r13
 326:	ef 92       	push	r14
 328:	ff 92       	push	r15
 32a:	0f 93       	push	r16
 32c:	1f 93       	push	r17
 32e:	cf 93       	push	r28
 330:	8b 01       	movw	r16, r22
 332:	49 01       	movw	r8, r18
 334:	5a 01       	movw	r10, r20
	uint8_t prescalarbits = 0b001; // No Prescaling
	long toggle_count = 0;
	uint32_t ocr = 0;
	int8_t _timer;
	sei();
 336:	78 94       	sei
{
	int8_t _timer = -1;
	
	// if we're already using the pin, the timer should be configured.
	for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
		if (tone_pins[i] == _pin) {
 338:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 33c:	89 13       	cpse	r24, r25
 33e:	07 c3       	rjmp	.+1550   	; 0x94e <__LOCK_REGION_LENGTH__+0x54e>
			return pgm_read_byte(tone_pin_to_timer_PGM + i);
 340:	e2 ee       	ldi	r30, 0xE2	; 226
 342:	f1 e0       	ldi	r31, 0x01	; 1
 344:	c4 91       	lpm	r28, Z
 346:	f4 c0       	rjmp	.+488    	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
	}
	  
	// search for an unused timer.
	for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
		if (tone_pins[i] == 255) {
			tone_pins[i] = _pin;
 348:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
			_timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
 34c:	e2 ee       	ldi	r30, 0xE2	; 226
 34e:	f1 e0       	ldi	r31, 0x01	; 1
 350:	c4 91       	lpm	r28, Z
			break;
		}
	}
	
	//Found timer
	if (_timer != -1)
 352:	cf 3f       	cpi	r28, 0xFF	; 255
 354:	09 f4       	brne	.+2      	; 0x358 <tone+0x3e>
 356:	40 c3       	rjmp	.+1664   	; 0x9d8 <__LOCK_REGION_LENGTH__+0x5d8>
	{
		// Set timer specific stuff
		// All timers in CTC mode
		// 8 bit timers will require changing prescalar values,
		// whereas 16 bit timers are set to either clk/1 or clk/64 prescalar
		switch(_timer)
 358:	c2 30       	cpi	r28, 0x02	; 2
 35a:	09 f4       	brne	.+2      	; 0x35e <tone+0x44>
 35c:	56 c0       	rjmp	.+172    	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 35e:	28 f4       	brcc	.+10     	; 0x36a <tone+0x50>
 360:	cc 23       	and	r28, r28
 362:	61 f0       	breq	.+24     	; 0x37c <tone+0x62>
 364:	c1 30       	cpi	r28, 0x01	; 1
 366:	69 f1       	breq	.+90     	; 0x3c2 <tone+0xa8>
 368:	e3 c0       	rjmp	.+454    	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
 36a:	c4 30       	cpi	r28, 0x04	; 4
 36c:	09 f4       	brne	.+2      	; 0x370 <tone+0x56>
 36e:	98 c0       	rjmp	.+304    	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
 370:	08 f4       	brcc	.+2      	; 0x374 <tone+0x5a>
 372:	72 c0       	rjmp	.+228    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 374:	c5 30       	cpi	r28, 0x05	; 5
 376:	09 f4       	brne	.+2      	; 0x37a <tone+0x60>
 378:	b7 c0       	rjmp	.+366    	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
 37a:	da c0       	rjmp	.+436    	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
		{
			//TIMER 0 - 8 bit timer
			case 0:
				TCCR0A = 0;
 37c:	14 bc       	out	0x24, r1	; 36
				TCCR0B = 0;
 37e:	15 bc       	out	0x25, r1	; 37
				bitWrite(TCCR0A, WGM01, 1); // set CTC mode
 380:	94 b5       	in	r25, 0x24	; 36
 382:	92 60       	ori	r25, 0x02	; 2
 384:	94 bd       	out	0x24, r25	; 36
				bitWrite(TCCR0B, CS00, 1);  // No prescaling
 386:	95 b5       	in	r25, 0x25	; 37
 388:	91 60       	ori	r25, 0x01	; 1
 38a:	95 bd       	out	0x25, r25	; 37
				timer0_pin_port = portOutputRegister(pinToPort(_pin));
 38c:	28 2f       	mov	r18, r24
 38e:	30 e0       	ldi	r19, 0x00	; 0
 390:	f9 01       	movw	r30, r18
 392:	e7 5b       	subi	r30, 0xB7	; 183
 394:	fe 4f       	sbci	r31, 0xFE	; 254
 396:	e4 91       	lpm	r30, Z
 398:	f0 e0       	ldi	r31, 0x00	; 0
 39a:	ee 0f       	add	r30, r30
 39c:	ff 1f       	adc	r31, r31
 39e:	e2 55       	subi	r30, 0x52	; 82
 3a0:	fe 4f       	sbci	r31, 0xFE	; 254
 3a2:	45 91       	lpm	r20, Z+
 3a4:	54 91       	lpm	r21, Z
 3a6:	50 93 3b 02 	sts	0x023B, r21	; 0x80023b <timer0_pin_port+0x1>
 3aa:	40 93 3a 02 	sts	0x023A, r20	; 0x80023a <timer0_pin_port>
				timer0_pin_mask = pinToBitMask(_pin);
 3ae:	f9 01       	movw	r30, r18
 3b0:	ec 51       	subi	r30, 0x1C	; 28
 3b2:	ff 4f       	sbci	r31, 0xFF	; 255
 3b4:	24 91       	lpm	r18, Z
 3b6:	20 93 22 02 	sts	0x0222, r18	; 0x800222 <__data_end>
	_timer = toneBegin(_pin);
	
	if (_timer >= 0)
	{
		//1. set the pin as OUTPUT
		pinMode(_pin, OUTPUT);
 3ba:	61 e0       	ldi	r22, 0x01	; 1
 3bc:	33 df       	rcall	.-410    	; 0x224 <pinMode>
				timer5_pin_mask = pinToBitMask(_pin);
			break;
		}
	}
	
	return _timer;	
 3be:	c0 e0       	ldi	r28, 0x00	; 0
 3c0:	8e c2       	rjmp	.+1308   	; 0x8de <__LOCK_REGION_LENGTH__+0x4de>
				timer0_pin_port = portOutputRegister(pinToPort(_pin));
				timer0_pin_mask = pinToBitMask(_pin);
			break;			
			//TIMER 1 - 16 bit timer
			case 1:
				TCCR1A = 0;
 3c2:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
				TCCR1B = 0;
 3c6:	e1 e8       	ldi	r30, 0x81	; 129
 3c8:	f0 e0       	ldi	r31, 0x00	; 0
 3ca:	10 82       	st	Z, r1
				bitWrite(TCCR1B, WGM12, 1); // Set CTC mode
 3cc:	90 81       	ld	r25, Z
 3ce:	98 60       	ori	r25, 0x08	; 8
 3d0:	90 83       	st	Z, r25
				bitWrite(TCCR1B, CS10, 1) ; // No prescaling
 3d2:	90 81       	ld	r25, Z
 3d4:	91 60       	ori	r25, 0x01	; 1
 3d6:	90 83       	st	Z, r25
				timer1_pin_port = portOutputRegister(pinToPort(_pin));
 3d8:	28 2f       	mov	r18, r24
 3da:	30 e0       	ldi	r19, 0x00	; 0
 3dc:	f9 01       	movw	r30, r18
 3de:	e7 5b       	subi	r30, 0xB7	; 183
 3e0:	fe 4f       	sbci	r31, 0xFE	; 254
 3e2:	e4 91       	lpm	r30, Z
 3e4:	f0 e0       	ldi	r31, 0x00	; 0
 3e6:	ee 0f       	add	r30, r30
 3e8:	ff 1f       	adc	r31, r31
 3ea:	e2 55       	subi	r30, 0x52	; 82
 3ec:	fe 4f       	sbci	r31, 0xFE	; 254
 3ee:	45 91       	lpm	r20, Z+
 3f0:	54 91       	lpm	r21, Z
 3f2:	50 93 42 02 	sts	0x0242, r21	; 0x800242 <timer1_pin_port+0x1>
 3f6:	40 93 41 02 	sts	0x0241, r20	; 0x800241 <timer1_pin_port>
				timer1_pin_mask = pinToBitMask(_pin);
 3fa:	f9 01       	movw	r30, r18
 3fc:	ec 51       	subi	r30, 0x1C	; 28
 3fe:	ff 4f       	sbci	r31, 0xFF	; 255
 400:	24 91       	lpm	r18, Z
 402:	20 93 40 02 	sts	0x0240, r18	; 0x800240 <timer1_pin_mask>
				timer5_pin_mask = pinToBitMask(_pin);
			break;
		}
	}
	
	return _timer;	
 406:	c1 e0       	ldi	r28, 0x01	; 1
 408:	e4 c2       	rjmp	.+1480   	; 0x9d2 <__LOCK_REGION_LENGTH__+0x5d2>
				timer1_pin_port = portOutputRegister(pinToPort(_pin));
				timer1_pin_mask = pinToBitMask(_pin);
			break;			
			//TIMER 2 - 8 bit timer
			case 2:
				TCCR2A = 0;
 40a:	a0 eb       	ldi	r26, 0xB0	; 176
 40c:	b0 e0       	ldi	r27, 0x00	; 0
 40e:	1c 92       	st	X, r1
				TCCR2B = 0;
 410:	e1 eb       	ldi	r30, 0xB1	; 177
 412:	f0 e0       	ldi	r31, 0x00	; 0
 414:	10 82       	st	Z, r1
				bitWrite(TCCR2A, WGM21, 1); //Set CTC mode
 416:	9c 91       	ld	r25, X
 418:	92 60       	ori	r25, 0x02	; 2
 41a:	9c 93       	st	X, r25
				bitWrite(TCCR2B, CS20, 1); // No prescaling
 41c:	90 81       	ld	r25, Z
 41e:	91 60       	ori	r25, 0x01	; 1
 420:	90 83       	st	Z, r25
				timer2_pin_port = portOutputRegister(pinToPort(_pin));
 422:	28 2f       	mov	r18, r24
 424:	30 e0       	ldi	r19, 0x00	; 0
 426:	f9 01       	movw	r30, r18
 428:	e7 5b       	subi	r30, 0xB7	; 183
 42a:	fe 4f       	sbci	r31, 0xFE	; 254
 42c:	e4 91       	lpm	r30, Z
 42e:	f0 e0       	ldi	r31, 0x00	; 0
 430:	ee 0f       	add	r30, r30
 432:	ff 1f       	adc	r31, r31
 434:	e2 55       	subi	r30, 0x52	; 82
 436:	fe 4f       	sbci	r31, 0xFE	; 254
 438:	45 91       	lpm	r20, Z+
 43a:	54 91       	lpm	r21, Z
 43c:	50 93 29 02 	sts	0x0229, r21	; 0x800229 <timer2_pin_port+0x1>
 440:	40 93 28 02 	sts	0x0228, r20	; 0x800228 <timer2_pin_port>
				timer2_pin_mask = pinToBitMask(_pin);
 444:	f9 01       	movw	r30, r18
 446:	ec 51       	subi	r30, 0x1C	; 28
 448:	ff 4f       	sbci	r31, 0xFF	; 255
 44a:	24 91       	lpm	r18, Z
 44c:	20 93 35 02 	sts	0x0235, r18	; 0x800235 <timer2_pin_mask>
	_timer = toneBegin(_pin);
	
	if (_timer >= 0)
	{
		//1. set the pin as OUTPUT
		pinMode(_pin, OUTPUT);
 450:	61 e0       	ldi	r22, 0x01	; 1
 452:	e8 de       	rcall	.-560    	; 0x224 <pinMode>
				timer5_pin_mask = pinToBitMask(_pin);
			break;
		}
	}
	
	return _timer;	
 454:	c2 e0       	ldi	r28, 0x02	; 2
 456:	0a c2       	rjmp	.+1044   	; 0x86c <__LOCK_REGION_LENGTH__+0x46c>
				timer2_pin_port = portOutputRegister(pinToPort(_pin));
				timer2_pin_mask = pinToBitMask(_pin);
			break;			
			//TIMER 3 - 16 bit timer
			case 3:
				TCCR3A = 0;
 458:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
				TCCR3B = 0;
 45c:	e1 e9       	ldi	r30, 0x91	; 145
 45e:	f0 e0       	ldi	r31, 0x00	; 0
 460:	10 82       	st	Z, r1
				bitWrite(TCCR3B, WGM32, 1); //CTC Mode
 462:	90 81       	ld	r25, Z
 464:	98 60       	ori	r25, 0x08	; 8
 466:	90 83       	st	Z, r25
				bitWrite(TCCR3B, CS30, 1);	//No prescaling
 468:	90 81       	ld	r25, Z
 46a:	91 60       	ori	r25, 0x01	; 1
 46c:	90 83       	st	Z, r25
				timer3_pin_port = portOutputRegister(pinToPort(_pin));
 46e:	28 2f       	mov	r18, r24
 470:	30 e0       	ldi	r19, 0x00	; 0
 472:	f9 01       	movw	r30, r18
 474:	e7 5b       	subi	r30, 0xB7	; 183
 476:	fe 4f       	sbci	r31, 0xFE	; 254
 478:	e4 91       	lpm	r30, Z
 47a:	f0 e0       	ldi	r31, 0x00	; 0
 47c:	ee 0f       	add	r30, r30
 47e:	ff 1f       	adc	r31, r31
 480:	e2 55       	subi	r30, 0x52	; 82
 482:	fe 4f       	sbci	r31, 0xFE	; 254
 484:	45 91       	lpm	r20, Z+
 486:	54 91       	lpm	r21, Z
 488:	50 93 2c 02 	sts	0x022C, r21	; 0x80022c <timer3_pin_port+0x1>
 48c:	40 93 2b 02 	sts	0x022B, r20	; 0x80022b <timer3_pin_port>
				timer3_pin_mask = pinToBitMask(_pin);
 490:	f9 01       	movw	r30, r18
 492:	ec 51       	subi	r30, 0x1C	; 28
 494:	ff 4f       	sbci	r31, 0xFF	; 255
 496:	24 91       	lpm	r18, Z
 498:	20 93 23 02 	sts	0x0223, r18	; 0x800223 <timer3_pin_mask>
				timer5_pin_mask = pinToBitMask(_pin);
			break;
		}
	}
	
	return _timer;	
 49c:	c3 e0       	ldi	r28, 0x03	; 3
 49e:	99 c2       	rjmp	.+1330   	; 0x9d2 <__LOCK_REGION_LENGTH__+0x5d2>
				timer3_pin_port = portOutputRegister(pinToPort(_pin));
				timer3_pin_mask = pinToBitMask(_pin);
			break;		
			//TIMER 4 - 16 bit timer
			case 4:
				TCCR4A = 0;
 4a0:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
				TCCR4B = 0;
 4a4:	e1 ea       	ldi	r30, 0xA1	; 161
 4a6:	f0 e0       	ldi	r31, 0x00	; 0
 4a8:	10 82       	st	Z, r1
				bitWrite(TCCR4B, WGM42, 1); //CTC Mode
 4aa:	90 81       	ld	r25, Z
 4ac:	98 60       	ori	r25, 0x08	; 8
 4ae:	90 83       	st	Z, r25
				bitWrite(TCCR4B, CS40, 1);  //No prescaling
 4b0:	90 81       	ld	r25, Z
 4b2:	91 60       	ori	r25, 0x01	; 1
 4b4:	90 83       	st	Z, r25
				timer4_pin_port = portOutputRegister(pinToPort(_pin));
 4b6:	28 2f       	mov	r18, r24
 4b8:	30 e0       	ldi	r19, 0x00	; 0
 4ba:	f9 01       	movw	r30, r18
 4bc:	e7 5b       	subi	r30, 0xB7	; 183
 4be:	fe 4f       	sbci	r31, 0xFE	; 254
 4c0:	e4 91       	lpm	r30, Z
 4c2:	f0 e0       	ldi	r31, 0x00	; 0
 4c4:	ee 0f       	add	r30, r30
 4c6:	ff 1f       	adc	r31, r31
 4c8:	e2 55       	subi	r30, 0x52	; 82
 4ca:	fe 4f       	sbci	r31, 0xFE	; 254
 4cc:	45 91       	lpm	r20, Z+
 4ce:	54 91       	lpm	r21, Z
 4d0:	50 93 39 02 	sts	0x0239, r21	; 0x800239 <timer4_pin_port+0x1>
 4d4:	40 93 38 02 	sts	0x0238, r20	; 0x800238 <timer4_pin_port>
				timer4_pin_mask = pinToBitMask(_pin);
 4d8:	f9 01       	movw	r30, r18
 4da:	ec 51       	subi	r30, 0x1C	; 28
 4dc:	ff 4f       	sbci	r31, 0xFF	; 255
 4de:	24 91       	lpm	r18, Z
 4e0:	20 93 2a 02 	sts	0x022A, r18	; 0x80022a <timer4_pin_mask>
				timer5_pin_mask = pinToBitMask(_pin);
			break;
		}
	}
	
	return _timer;	
 4e4:	c4 e0       	ldi	r28, 0x04	; 4
 4e6:	75 c2       	rjmp	.+1258   	; 0x9d2 <__LOCK_REGION_LENGTH__+0x5d2>
				timer4_pin_port = portOutputRegister(pinToPort(_pin));
				timer4_pin_mask = pinToBitMask(_pin);
			break;	
			//TIMER 5 - 16 bit timer
			case 5:
				TCCR5A = 0;
 4e8:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
				TCCR5B = 0;
 4ec:	e1 e2       	ldi	r30, 0x21	; 33
 4ee:	f1 e0       	ldi	r31, 0x01	; 1
 4f0:	10 82       	st	Z, r1
				bitWrite(TCCR5B, WGM52, 1);
 4f2:	90 81       	ld	r25, Z
 4f4:	98 60       	ori	r25, 0x08	; 8
 4f6:	90 83       	st	Z, r25
				bitWrite(TCCR5B, CS50, 1);
 4f8:	90 81       	ld	r25, Z
 4fa:	91 60       	ori	r25, 0x01	; 1
 4fc:	90 83       	st	Z, r25
				timer5_pin_port = portOutputRegister(pinToPort(_pin));
 4fe:	28 2f       	mov	r18, r24
 500:	30 e0       	ldi	r19, 0x00	; 0
 502:	f9 01       	movw	r30, r18
 504:	e7 5b       	subi	r30, 0xB7	; 183
 506:	fe 4f       	sbci	r31, 0xFE	; 254
 508:	e4 91       	lpm	r30, Z
 50a:	f0 e0       	ldi	r31, 0x00	; 0
 50c:	ee 0f       	add	r30, r30
 50e:	ff 1f       	adc	r31, r31
 510:	e2 55       	subi	r30, 0x52	; 82
 512:	fe 4f       	sbci	r31, 0xFE	; 254
 514:	45 91       	lpm	r20, Z+
 516:	54 91       	lpm	r21, Z
 518:	50 93 37 02 	sts	0x0237, r21	; 0x800237 <timer5_pin_port+0x1>
 51c:	40 93 36 02 	sts	0x0236, r20	; 0x800236 <timer5_pin_port>
				timer5_pin_mask = pinToBitMask(_pin);
 520:	f9 01       	movw	r30, r18
 522:	ec 51       	subi	r30, 0x1C	; 28
 524:	ff 4f       	sbci	r31, 0xFF	; 255
 526:	24 91       	lpm	r18, Z
 528:	20 93 47 02 	sts	0x0247, r18	; 0x800247 <timer5_pin_mask>
			break;
		}
	}
	
	return _timer;	
 52c:	c5 e0       	ldi	r28, 0x05	; 5
 52e:	51 c2       	rjmp	.+1186   	; 0x9d2 <__LOCK_REGION_LENGTH__+0x5d2>
	int8_t _timer;
	sei();
	
	_timer = toneBegin(_pin);
	
	if (_timer >= 0)
 530:	cc 23       	and	r28, r28
 532:	0c f4       	brge	.+2      	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
	{
		//1. set the pin as OUTPUT
		pinMode(_pin, OUTPUT);
 534:	51 c2       	rjmp	.+1186   	; 0x9d8 <__LOCK_REGION_LENGTH__+0x5d8>
 536:	61 e0       	ldi	r22, 0x01	; 1
 538:	75 de       	rcall	.-790    	; 0x224 <pinMode>
		
		//2. if we are using an 8 bit timer, scan through prescalers to find the best fit
		if (_timer == 0 || _timer == 2)
 53a:	cc 23       	and	r28, r28
 53c:	09 f4       	brne	.+2      	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
 53e:	cf c1       	rjmp	.+926    	; 0x8de <__LOCK_REGION_LENGTH__+0x4de>
 540:	c2 30       	cpi	r28, 0x02	; 2
 542:	09 f0       	breq	.+2      	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
 544:	77 c0       	rjmp	.+238    	; 0x634 <__LOCK_REGION_LENGTH__+0x234>
 546:	92 c1       	rjmp	.+804    	; 0x86c <__LOCK_REGION_LENGTH__+0x46c>
				ocr = (F_CPU / (frequency * 2 * 8)) - 1;
				prescalarbits = 0b010; // clk/8 prescaler : For both timers
				
				if (_timer == 2 && ocr > 255)
				{
					ocr = (F_CPU / frequency / 2 / 32) - 1;
 548:	68 01       	movw	r12, r16
 54a:	e1 2c       	mov	r14, r1
 54c:	f1 2c       	mov	r15, r1
 54e:	60 e9       	ldi	r22, 0x90	; 144
 550:	70 ed       	ldi	r23, 0xD0	; 208
 552:	83 e0       	ldi	r24, 0x03	; 3
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	a7 01       	movw	r20, r14
 558:	96 01       	movw	r18, r12
 55a:	86 d4       	rcall	.+2316   	; 0xe68 <__udivmodsi4>
 55c:	69 01       	movw	r12, r18
 55e:	7a 01       	movw	r14, r20
 560:	81 e0       	ldi	r24, 0x01	; 1
 562:	c8 1a       	sub	r12, r24
 564:	d1 08       	sbc	r13, r1
 566:	e1 08       	sbc	r14, r1
 568:	f1 08       	sbc	r15, r1
					prescalarbits = 0b011; // clk/32
				}
					
				if(ocr > 255)
 56a:	9f ef       	ldi	r25, 0xFF	; 255
 56c:	c9 16       	cp	r12, r25
 56e:	d1 04       	cpc	r13, r1
 570:	e1 04       	cpc	r14, r1
 572:	f1 04       	cpc	r15, r1
 574:	11 f0       	breq	.+4      	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
 576:	08 f0       	brcs	.+2      	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
 578:	cc c1       	rjmp	.+920    	; 0x912 <__LOCK_REGION_LENGTH__+0x512>
				prescalarbits = 0b010; // clk/8 prescaler : For both timers
				
				if (_timer == 2 && ocr > 255)
				{
					ocr = (F_CPU / frequency / 2 / 32) - 1;
					prescalarbits = 0b011; // clk/32
 57a:	83 e0       	ldi	r24, 0x03	; 3
 57c:	54 c0       	rjmp	.+168    	; 0x626 <__LOCK_REGION_LENGTH__+0x226>
				}
					
				if(ocr > 255)
				{
					ocr = (F_CPU / (frequency * 2 * 64)) - 1;
 57e:	98 01       	movw	r18, r16
 580:	36 95       	lsr	r19
 582:	32 2f       	mov	r19, r18
 584:	22 27       	eor	r18, r18
 586:	37 95       	ror	r19
 588:	27 95       	ror	r18
 58a:	40 e0       	ldi	r20, 0x00	; 0
 58c:	50 e0       	ldi	r21, 0x00	; 0
 58e:	60 e0       	ldi	r22, 0x00	; 0
 590:	74 e2       	ldi	r23, 0x24	; 36
 592:	84 ef       	ldi	r24, 0xF4	; 244
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	68 d4       	rcall	.+2256   	; 0xe68 <__udivmodsi4>
 598:	69 01       	movw	r12, r18
 59a:	7a 01       	movw	r14, r20
 59c:	81 e0       	ldi	r24, 0x01	; 1
 59e:	c8 1a       	sub	r12, r24
 5a0:	d1 08       	sbc	r13, r1
 5a2:	e1 08       	sbc	r14, r1
 5a4:	f1 08       	sbc	r15, r1
					prescalarbits = _timer == 0 ? 0b011 : 0b100; // clk/32 for timer 1: clk/64 for timer 2
 5a6:	83 e0       	ldi	r24, 0x03	; 3
 5a8:	11 c0       	rjmp	.+34     	; 0x5cc <__LOCK_REGION_LENGTH__+0x1cc>
					
					if (_timer == 2 && ocr > 255)
					{
						ocr = (F_CPU / (frequency * 2 * 128)) - 1;
 5aa:	30 2f       	mov	r19, r16
 5ac:	22 27       	eor	r18, r18
 5ae:	40 e0       	ldi	r20, 0x00	; 0
 5b0:	50 e0       	ldi	r21, 0x00	; 0
 5b2:	60 e0       	ldi	r22, 0x00	; 0
 5b4:	74 e2       	ldi	r23, 0x24	; 36
 5b6:	84 ef       	ldi	r24, 0xF4	; 244
 5b8:	90 e0       	ldi	r25, 0x00	; 0
 5ba:	56 d4       	rcall	.+2220   	; 0xe68 <__udivmodsi4>
 5bc:	69 01       	movw	r12, r18
 5be:	7a 01       	movw	r14, r20
 5c0:	91 e0       	ldi	r25, 0x01	; 1
 5c2:	c9 1a       	sub	r12, r25
 5c4:	d1 08       	sbc	r13, r1
 5c6:	e1 08       	sbc	r14, r1
 5c8:	f1 08       	sbc	r15, r1
						prescalarbits = 0b101; //clk/128
 5ca:	85 e0       	ldi	r24, 0x05	; 5
					}

					if (ocr > 255)
 5cc:	9f ef       	ldi	r25, 0xFF	; 255
 5ce:	c9 16       	cp	r12, r25
 5d0:	d1 04       	cpc	r13, r1
 5d2:	e1 04       	cpc	r14, r1
 5d4:	f1 04       	cpc	r15, r1
 5d6:	b9 f0       	breq	.+46     	; 0x606 <__LOCK_REGION_LENGTH__+0x206>
 5d8:	b0 f0       	brcs	.+44     	; 0x606 <__LOCK_REGION_LENGTH__+0x206>
					{
						ocr = (F_CPU / (frequency * 2 * 256))- 1;
 5da:	98 01       	movw	r18, r16
 5dc:	32 2f       	mov	r19, r18
 5de:	22 27       	eor	r18, r18
 5e0:	33 0f       	add	r19, r19
 5e2:	40 e0       	ldi	r20, 0x00	; 0
 5e4:	50 e0       	ldi	r21, 0x00	; 0
 5e6:	60 e0       	ldi	r22, 0x00	; 0
 5e8:	74 e2       	ldi	r23, 0x24	; 36
 5ea:	84 ef       	ldi	r24, 0xF4	; 244
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	3c d4       	rcall	.+2168   	; 0xe68 <__udivmodsi4>
 5f0:	69 01       	movw	r12, r18
 5f2:	7a 01       	movw	r14, r20
 5f4:	81 e0       	ldi	r24, 0x01	; 1
 5f6:	c8 1a       	sub	r12, r24
 5f8:	d1 08       	sbc	r13, r1
 5fa:	e1 08       	sbc	r14, r1
 5fc:	f1 08       	sbc	r15, r1
						prescalarbits = _timer == 0 ? 0b100 : 0b110;  // clk/64 for timer 1: clk/256 for timer 2
 5fe:	cc 23       	and	r28, r28
 600:	09 f4       	brne	.+2      	; 0x604 <__LOCK_REGION_LENGTH__+0x204>
 602:	bf c1       	rjmp	.+894    	; 0x982 <__LOCK_REGION_LENGTH__+0x582>
 604:	dd c1       	rjmp	.+954    	; 0x9c0 <__LOCK_REGION_LENGTH__+0x5c0>
			}
				
			
			//2(b) Set the prescaler for 8 bit timers
			      //TIMER 0
			if (_timer == 0)
 606:	c1 11       	cpse	r28, r1
 608:	0e c0       	rjmp	.+28     	; 0x626 <__LOCK_REGION_LENGTH__+0x226>
			{
				TCCR0B = (TCCR0B & 0b11111000) | prescalarbits;
 60a:	95 b5       	in	r25, 0x25	; 37
 60c:	98 7f       	andi	r25, 0xF8	; 248
 60e:	89 2b       	or	r24, r25
 610:	85 bd       	out	0x25, r24	; 37
				TCCR5B = (TCCR5B & 0b11111000) | prescalarbits;
			}
		}
		
		//4. Calculate the toggle count
		if (duration > 0)
 612:	81 14       	cp	r8, r1
 614:	91 04       	cpc	r9, r1
 616:	a1 04       	cpc	r10, r1
 618:	b1 04       	cpc	r11, r1
 61a:	09 f0       	breq	.+2      	; 0x61e <__LOCK_REGION_LENGTH__+0x21e>
 61c:	82 c0       	rjmp	.+260    	; 0x722 <__LOCK_REGION_LENGTH__+0x322>
		{
			toggle_count = (2 * frequency * duration)/ 1000;
		}else{
			toggle_count = -1;
 61e:	2f ef       	ldi	r18, 0xFF	; 255
 620:	3f ef       	ldi	r19, 0xFF	; 255
 622:	a9 01       	movw	r20, r18
 624:	9d c0       	rjmp	.+314    	; 0x760 <__LOCK_REGION_LENGTH__+0x360>
			{
				TCCR0B = (TCCR0B & 0b11111000) | prescalarbits;
			}
			else   //TIMER 2
			{
				TCCR2B = (TCCR2B & 0b11111000) | prescalarbits;
 626:	e1 eb       	ldi	r30, 0xB1	; 177
 628:	f0 e0       	ldi	r31, 0x00	; 0
 62a:	90 81       	ld	r25, Z
 62c:	98 7f       	andi	r25, 0xF8	; 248
 62e:	89 2b       	or	r24, r25
 630:	80 83       	st	Z, r24
 632:	72 c0       	rjmp	.+228    	; 0x718 <__LOCK_REGION_LENGTH__+0x318>
			}
			
		}else{
			//3. Prescaling for 16 bit timers
			// two choices for the 16 bit timers: clk/1 or clk/64
			ocr = (F_CPU / (frequency * 2)) - 1;
 634:	98 01       	movw	r18, r16
 636:	22 0f       	add	r18, r18
 638:	33 1f       	adc	r19, r19
 63a:	40 e0       	ldi	r20, 0x00	; 0
 63c:	50 e0       	ldi	r21, 0x00	; 0
 63e:	60 e0       	ldi	r22, 0x00	; 0
 640:	74 e2       	ldi	r23, 0x24	; 36
 642:	84 ef       	ldi	r24, 0xF4	; 244
 644:	90 e0       	ldi	r25, 0x00	; 0
 646:	10 d4       	rcall	.+2080   	; 0xe68 <__udivmodsi4>
 648:	69 01       	movw	r12, r18
 64a:	7a 01       	movw	r14, r20
 64c:	91 e0       	ldi	r25, 0x01	; 1
 64e:	c9 1a       	sub	r12, r25
 650:	d1 08       	sbc	r13, r1
 652:	e1 08       	sbc	r14, r1
 654:	f1 08       	sbc	r15, r1
			
			prescalarbits = 0b001; //clk1
			if(ocr > 0xffff) //>65535
 656:	c1 14       	cp	r12, r1
 658:	d1 04       	cpc	r13, r1
 65a:	81 e0       	ldi	r24, 0x01	; 1
 65c:	e8 06       	cpc	r14, r24
 65e:	f1 04       	cpc	r15, r1
 660:	b0 f0       	brcs	.+44     	; 0x68e <__LOCK_REGION_LENGTH__+0x28e>
			{
				ocr = (F_CPU / (frequency * 2 * 64 ))- 1;
 662:	98 01       	movw	r18, r16
 664:	36 95       	lsr	r19
 666:	32 2f       	mov	r19, r18
 668:	22 27       	eor	r18, r18
 66a:	37 95       	ror	r19
 66c:	27 95       	ror	r18
 66e:	40 e0       	ldi	r20, 0x00	; 0
 670:	50 e0       	ldi	r21, 0x00	; 0
 672:	60 e0       	ldi	r22, 0x00	; 0
 674:	74 e2       	ldi	r23, 0x24	; 36
 676:	84 ef       	ldi	r24, 0xF4	; 244
 678:	90 e0       	ldi	r25, 0x00	; 0
 67a:	f6 d3       	rcall	.+2028   	; 0xe68 <__udivmodsi4>
 67c:	69 01       	movw	r12, r18
 67e:	7a 01       	movw	r14, r20
 680:	91 e0       	ldi	r25, 0x01	; 1
 682:	c9 1a       	sub	r12, r25
 684:	d1 08       	sbc	r13, r1
 686:	e1 08       	sbc	r14, r1
 688:	f1 08       	sbc	r15, r1
				prescalarbits = 0b011; //clk/64
 68a:	83 e0       	ldi	r24, 0x03	; 3
 68c:	01 c0       	rjmp	.+2      	; 0x690 <__LOCK_REGION_LENGTH__+0x290>
		}else{
			//3. Prescaling for 16 bit timers
			// two choices for the 16 bit timers: clk/1 or clk/64
			ocr = (F_CPU / (frequency * 2)) - 1;
			
			prescalarbits = 0b001; //clk1
 68e:	81 e0       	ldi	r24, 0x01	; 1
				ocr = (F_CPU / (frequency * 2 * 64 ))- 1;
				prescalarbits = 0b011; //clk/64
			}
			
			//3(b) Set the prescaler for 16 bit timers
			if (_timer == 1)
 690:	c1 30       	cpi	r28, 0x01	; 1
 692:	79 f4       	brne	.+30     	; 0x6b2 <__LOCK_REGION_LENGTH__+0x2b2>
			{
				TCCR1B = (TCCR1B & 0b11111000) | prescalarbits;
 694:	e1 e8       	ldi	r30, 0x81	; 129
 696:	f0 e0       	ldi	r31, 0x00	; 0
 698:	90 81       	ld	r25, Z
 69a:	98 7f       	andi	r25, 0xF8	; 248
 69c:	89 2b       	or	r24, r25
 69e:	80 83       	st	Z, r24
				TCCR5B = (TCCR5B & 0b11111000) | prescalarbits;
			}
		}
		
		//4. Calculate the toggle count
		if (duration > 0)
 6a0:	81 14       	cp	r8, r1
 6a2:	91 04       	cpc	r9, r1
 6a4:	a1 04       	cpc	r10, r1
 6a6:	b1 04       	cpc	r11, r1
 6a8:	e1 f5       	brne	.+120    	; 0x722 <__LOCK_REGION_LENGTH__+0x322>
		{
			toggle_count = (2 * frequency * duration)/ 1000;
		}else{
			toggle_count = -1;
 6aa:	2f ef       	ldi	r18, 0xFF	; 255
 6ac:	3f ef       	ldi	r19, 0xFF	; 255
 6ae:	a9 01       	movw	r20, r18
 6b0:	66 c0       	rjmp	.+204    	; 0x77e <__LOCK_REGION_LENGTH__+0x37e>
			//3(b) Set the prescaler for 16 bit timers
			if (_timer == 1)
			{
				TCCR1B = (TCCR1B & 0b11111000) | prescalarbits;
			}
			else if (_timer == 3)
 6b2:	c3 30       	cpi	r28, 0x03	; 3
 6b4:	79 f4       	brne	.+30     	; 0x6d4 <__LOCK_REGION_LENGTH__+0x2d4>
			{
				TCCR3B = (TCCR3B & 0b11111000) | prescalarbits;
 6b6:	e1 e9       	ldi	r30, 0x91	; 145
 6b8:	f0 e0       	ldi	r31, 0x00	; 0
 6ba:	90 81       	ld	r25, Z
 6bc:	98 7f       	andi	r25, 0xF8	; 248
 6be:	89 2b       	or	r24, r25
 6c0:	80 83       	st	Z, r24
				TCCR5B = (TCCR5B & 0b11111000) | prescalarbits;
			}
		}
		
		//4. Calculate the toggle count
		if (duration > 0)
 6c2:	81 14       	cp	r8, r1
 6c4:	91 04       	cpc	r9, r1
 6c6:	a1 04       	cpc	r10, r1
 6c8:	b1 04       	cpc	r11, r1
 6ca:	59 f5       	brne	.+86     	; 0x722 <__LOCK_REGION_LENGTH__+0x322>
		{
			toggle_count = (2 * frequency * duration)/ 1000;
		}else{
			toggle_count = -1;
 6cc:	2f ef       	ldi	r18, 0xFF	; 255
 6ce:	3f ef       	ldi	r19, 0xFF	; 255
 6d0:	a9 01       	movw	r20, r18
 6d2:	77 c0       	rjmp	.+238    	; 0x7c2 <__LOCK_REGION_LENGTH__+0x3c2>
			}
			else if (_timer == 3)
			{
				TCCR3B = (TCCR3B & 0b11111000) | prescalarbits;
			}
			else if (_timer == 4)
 6d4:	c4 30       	cpi	r28, 0x04	; 4
 6d6:	79 f4       	brne	.+30     	; 0x6f6 <__LOCK_REGION_LENGTH__+0x2f6>
			{
				TCCR4B = (TCCR4B & 0b11111000) | prescalarbits;
 6d8:	e1 ea       	ldi	r30, 0xA1	; 161
 6da:	f0 e0       	ldi	r31, 0x00	; 0
 6dc:	90 81       	ld	r25, Z
 6de:	98 7f       	andi	r25, 0xF8	; 248
 6e0:	89 2b       	or	r24, r25
 6e2:	80 83       	st	Z, r24
				TCCR5B = (TCCR5B & 0b11111000) | prescalarbits;
			}
		}
		
		//4. Calculate the toggle count
		if (duration > 0)
 6e4:	81 14       	cp	r8, r1
 6e6:	91 04       	cpc	r9, r1
 6e8:	a1 04       	cpc	r10, r1
 6ea:	b1 04       	cpc	r11, r1
 6ec:	d1 f4       	brne	.+52     	; 0x722 <__LOCK_REGION_LENGTH__+0x322>
		{
			toggle_count = (2 * frequency * duration)/ 1000;
		}else{
			toggle_count = -1;
 6ee:	2f ef       	ldi	r18, 0xFF	; 255
 6f0:	3f ef       	ldi	r19, 0xFF	; 255
 6f2:	a9 01       	movw	r20, r18
 6f4:	78 c0       	rjmp	.+240    	; 0x7e6 <__LOCK_REGION_LENGTH__+0x3e6>
			}
			else if (_timer == 4)
			{
				TCCR4B = (TCCR4B & 0b11111000) | prescalarbits;
			}
			else if (_timer == 5)
 6f6:	c5 30       	cpi	r28, 0x05	; 5
 6f8:	79 f4       	brne	.+30     	; 0x718 <__LOCK_REGION_LENGTH__+0x318>
			{
				TCCR5B = (TCCR5B & 0b11111000) | prescalarbits;
 6fa:	e1 e2       	ldi	r30, 0x21	; 33
 6fc:	f1 e0       	ldi	r31, 0x01	; 1
 6fe:	90 81       	ld	r25, Z
 700:	98 7f       	andi	r25, 0xF8	; 248
 702:	89 2b       	or	r24, r25
 704:	80 83       	st	Z, r24
			}
		}
		
		//4. Calculate the toggle count
		if (duration > 0)
 706:	81 14       	cp	r8, r1
 708:	91 04       	cpc	r9, r1
 70a:	a1 04       	cpc	r10, r1
 70c:	b1 04       	cpc	r11, r1
 70e:	49 f4       	brne	.+18     	; 0x722 <__LOCK_REGION_LENGTH__+0x322>
		{
			toggle_count = (2 * frequency * duration)/ 1000;
		}else{
			toggle_count = -1;
 710:	2f ef       	ldi	r18, 0xFF	; 255
 712:	3f ef       	ldi	r19, 0xFF	; 255
 714:	a9 01       	movw	r20, r18
 716:	79 c0       	rjmp	.+242    	; 0x80a <__LOCK_REGION_LENGTH__+0x40a>
				TCCR5B = (TCCR5B & 0b11111000) | prescalarbits;
			}
		}
		
		//4. Calculate the toggle count
		if (duration > 0)
 718:	81 14       	cp	r8, r1
 71a:	91 04       	cpc	r9, r1
 71c:	a1 04       	cpc	r10, r1
 71e:	b1 04       	cpc	r11, r1
		{
			toggle_count = (2 * frequency * duration)/ 1000;
 720:	61 f0       	breq	.+24     	; 0x73a <__LOCK_REGION_LENGTH__+0x33a>
 722:	d8 01       	movw	r26, r16
 724:	aa 0f       	add	r26, r26
 726:	bb 1f       	adc	r27, r27
 728:	a5 01       	movw	r20, r10
 72a:	94 01       	movw	r18, r8
 72c:	bf d3       	rcall	.+1918   	; 0xeac <__muluhisi3>
 72e:	28 ee       	ldi	r18, 0xE8	; 232
 730:	33 e0       	ldi	r19, 0x03	; 3
 732:	40 e0       	ldi	r20, 0x00	; 0
 734:	50 e0       	ldi	r21, 0x00	; 0
 736:	98 d3       	rcall	.+1840   	; 0xe68 <__udivmodsi4>
 738:	03 c0       	rjmp	.+6      	; 0x740 <__LOCK_REGION_LENGTH__+0x340>
		}else{
			toggle_count = -1;
 73a:	2f ef       	ldi	r18, 0xFF	; 255
 73c:	3f ef       	ldi	r19, 0xFF	; 255
 73e:	a9 01       	movw	r20, r18
		}
		
		//5.Set the OCR for the given timer
		//Set the toggle count and then turn on the interrupts
		switch(_timer)
 740:	c2 30       	cpi	r28, 0x02	; 2
 742:	79 f1       	breq	.+94     	; 0x7a2 <__LOCK_REGION_LENGTH__+0x3a2>
 744:	2c f4       	brge	.+10     	; 0x750 <__LOCK_REGION_LENGTH__+0x350>
 746:	cc 23       	and	r28, r28
 748:	59 f0       	breq	.+22     	; 0x760 <__LOCK_REGION_LENGTH__+0x360>
 74a:	c1 30       	cpi	r28, 0x01	; 1
 74c:	c1 f0       	breq	.+48     	; 0x77e <__LOCK_REGION_LENGTH__+0x37e>
 74e:	44 c1       	rjmp	.+648    	; 0x9d8 <__LOCK_REGION_LENGTH__+0x5d8>
 750:	c4 30       	cpi	r28, 0x04	; 4
 752:	09 f4       	brne	.+2      	; 0x756 <__LOCK_REGION_LENGTH__+0x356>
 754:	48 c0       	rjmp	.+144    	; 0x7e6 <__LOCK_REGION_LENGTH__+0x3e6>
 756:	ac f1       	brlt	.+106    	; 0x7c2 <__LOCK_REGION_LENGTH__+0x3c2>
 758:	c5 30       	cpi	r28, 0x05	; 5
 75a:	09 f4       	brne	.+2      	; 0x75e <__LOCK_REGION_LENGTH__+0x35e>
 75c:	56 c0       	rjmp	.+172    	; 0x80a <__LOCK_REGION_LENGTH__+0x40a>
 75e:	3c c1       	rjmp	.+632    	; 0x9d8 <__LOCK_REGION_LENGTH__+0x5d8>
		{
			case 0:
				OCR0A = ocr;
 760:	c7 bc       	out	0x27, r12	; 39
				timer0_toggle_count = toggle_count;
 762:	20 93 43 02 	sts	0x0243, r18	; 0x800243 <timer0_toggle_count>
 766:	30 93 44 02 	sts	0x0244, r19	; 0x800244 <timer0_toggle_count+0x1>
 76a:	40 93 45 02 	sts	0x0245, r20	; 0x800245 <timer0_toggle_count+0x2>
 76e:	50 93 46 02 	sts	0x0246, r21	; 0x800246 <timer0_toggle_count+0x3>
				bitWrite(TIMSK0, OCIE0A, 1); //turn on interrupt
 772:	ee e6       	ldi	r30, 0x6E	; 110
 774:	f0 e0       	ldi	r31, 0x00	; 0
 776:	80 81       	ld	r24, Z
 778:	82 60       	ori	r24, 0x02	; 2
 77a:	80 83       	st	Z, r24
			break;
 77c:	2d c1       	rjmp	.+602    	; 0x9d8 <__LOCK_REGION_LENGTH__+0x5d8>
			
			case 1:
				OCR1A = ocr;
 77e:	d0 92 89 00 	sts	0x0089, r13	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 782:	c0 92 88 00 	sts	0x0088, r12	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
				timer1_toggle_count = toggle_count;
 786:	20 93 3c 02 	sts	0x023C, r18	; 0x80023c <timer1_toggle_count>
 78a:	30 93 3d 02 	sts	0x023D, r19	; 0x80023d <timer1_toggle_count+0x1>
 78e:	40 93 3e 02 	sts	0x023E, r20	; 0x80023e <timer1_toggle_count+0x2>
 792:	50 93 3f 02 	sts	0x023F, r21	; 0x80023f <timer1_toggle_count+0x3>
				bitWrite(TIMSK1, OCIE1A, 1);
 796:	ef e6       	ldi	r30, 0x6F	; 111
 798:	f0 e0       	ldi	r31, 0x00	; 0
 79a:	80 81       	ld	r24, Z
 79c:	82 60       	ori	r24, 0x02	; 2
 79e:	80 83       	st	Z, r24
			break;
 7a0:	1b c1       	rjmp	.+566    	; 0x9d8 <__LOCK_REGION_LENGTH__+0x5d8>
			
			case 2:
				OCR2A = ocr;
 7a2:	c0 92 b3 00 	sts	0x00B3, r12	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
				timer2_toggle_count = toggle_count;
 7a6:	20 93 48 02 	sts	0x0248, r18	; 0x800248 <timer2_toggle_count>
 7aa:	30 93 49 02 	sts	0x0249, r19	; 0x800249 <timer2_toggle_count+0x1>
 7ae:	40 93 4a 02 	sts	0x024A, r20	; 0x80024a <timer2_toggle_count+0x2>
 7b2:	50 93 4b 02 	sts	0x024B, r21	; 0x80024b <timer2_toggle_count+0x3>
				bitWrite(TIMSK2, OCIE2A, 1);
 7b6:	e0 e7       	ldi	r30, 0x70	; 112
 7b8:	f0 e0       	ldi	r31, 0x00	; 0
 7ba:	80 81       	ld	r24, Z
 7bc:	82 60       	ori	r24, 0x02	; 2
 7be:	80 83       	st	Z, r24
			break;
 7c0:	0b c1       	rjmp	.+534    	; 0x9d8 <__LOCK_REGION_LENGTH__+0x5d8>
			
			case 3:
				OCR3A = ocr;
 7c2:	d0 92 99 00 	sts	0x0099, r13	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
 7c6:	c0 92 98 00 	sts	0x0098, r12	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
				timer3_toggle_count = toggle_count;
 7ca:	20 93 31 02 	sts	0x0231, r18	; 0x800231 <timer3_toggle_count>
 7ce:	30 93 32 02 	sts	0x0232, r19	; 0x800232 <timer3_toggle_count+0x1>
 7d2:	40 93 33 02 	sts	0x0233, r20	; 0x800233 <timer3_toggle_count+0x2>
 7d6:	50 93 34 02 	sts	0x0234, r21	; 0x800234 <timer3_toggle_count+0x3>
				//bitWrite(TIMSK3, OCIE3A, 1);
				TIMSK3 |= 1<<OCIE3A;
 7da:	e1 e7       	ldi	r30, 0x71	; 113
 7dc:	f0 e0       	ldi	r31, 0x00	; 0
 7de:	80 81       	ld	r24, Z
 7e0:	82 60       	ori	r24, 0x02	; 2
 7e2:	80 83       	st	Z, r24
			break;
 7e4:	f9 c0       	rjmp	.+498    	; 0x9d8 <__LOCK_REGION_LENGTH__+0x5d8>
			
			case 4:
				OCR4A = ocr;
 7e6:	d0 92 a9 00 	sts	0x00A9, r13	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
 7ea:	c0 92 a8 00 	sts	0x00A8, r12	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
				timer4_toggle_count = toggle_count;
 7ee:	20 93 2d 02 	sts	0x022D, r18	; 0x80022d <timer4_toggle_count>
 7f2:	30 93 2e 02 	sts	0x022E, r19	; 0x80022e <timer4_toggle_count+0x1>
 7f6:	40 93 2f 02 	sts	0x022F, r20	; 0x80022f <timer4_toggle_count+0x2>
 7fa:	50 93 30 02 	sts	0x0230, r21	; 0x800230 <timer4_toggle_count+0x3>
				bitWrite(TIMSK4, OCIE4A, 1);
 7fe:	e2 e7       	ldi	r30, 0x72	; 114
 800:	f0 e0       	ldi	r31, 0x00	; 0
 802:	80 81       	ld	r24, Z
 804:	82 60       	ori	r24, 0x02	; 2
 806:	80 83       	st	Z, r24
			break;
 808:	e7 c0       	rjmp	.+462    	; 0x9d8 <__LOCK_REGION_LENGTH__+0x5d8>
			
			case 5:
				OCR5A = ocr;
 80a:	d0 92 29 01 	sts	0x0129, r13	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
 80e:	c0 92 28 01 	sts	0x0128, r12	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
				timer5_toggle_count = toggle_count;
 812:	20 93 24 02 	sts	0x0224, r18	; 0x800224 <timer5_toggle_count>
 816:	30 93 25 02 	sts	0x0225, r19	; 0x800225 <timer5_toggle_count+0x1>
 81a:	40 93 26 02 	sts	0x0226, r20	; 0x800226 <timer5_toggle_count+0x2>
 81e:	50 93 27 02 	sts	0x0227, r21	; 0x800227 <timer5_toggle_count+0x3>
				bitWrite(TIMSK5, OCIE5A, 1);
 822:	e3 e7       	ldi	r30, 0x73	; 115
 824:	f0 e0       	ldi	r31, 0x00	; 0
 826:	80 81       	ld	r24, Z
 828:	82 60       	ori	r24, 0x02	; 2
 82a:	80 83       	st	Z, r24
			break;
		}		
	}
}
 82c:	d5 c0       	rjmp	.+426    	; 0x9d8 <__LOCK_REGION_LENGTH__+0x5d8>
			ocr = (F_CPU / (frequency * 2)) - 1;
			prescalarbits = 0b001; // clk/1 prescaler (No prescaling) : For both timers
			
			if (ocr > 255) // above prescaler failed
			{
				ocr = (F_CPU / (frequency * 2 * 8)) - 1;
 82e:	98 01       	movw	r18, r16
 830:	22 95       	swap	r18
 832:	32 95       	swap	r19
 834:	30 7f       	andi	r19, 0xF0	; 240
 836:	32 27       	eor	r19, r18
 838:	20 7f       	andi	r18, 0xF0	; 240
 83a:	32 27       	eor	r19, r18
 83c:	40 e0       	ldi	r20, 0x00	; 0
 83e:	50 e0       	ldi	r21, 0x00	; 0
 840:	60 e0       	ldi	r22, 0x00	; 0
 842:	74 e2       	ldi	r23, 0x24	; 36
 844:	84 ef       	ldi	r24, 0xF4	; 244
 846:	90 e0       	ldi	r25, 0x00	; 0
 848:	0f d3       	rcall	.+1566   	; 0xe68 <__udivmodsi4>
 84a:	69 01       	movw	r12, r18
 84c:	7a 01       	movw	r14, r20
 84e:	81 e0       	ldi	r24, 0x01	; 1
 850:	c8 1a       	sub	r12, r24
 852:	d1 08       	sbc	r13, r1
 854:	e1 08       	sbc	r14, r1
 856:	f1 08       	sbc	r15, r1
				prescalarbits = 0b010; // clk/8 prescaler : For both timers
				
				if (_timer == 2 && ocr > 255)
 858:	9f ef       	ldi	r25, 0xFF	; 255
 85a:	c9 16       	cp	r12, r25
 85c:	d1 04       	cpc	r13, r1
 85e:	e1 04       	cpc	r14, r1
 860:	f1 04       	cpc	r15, r1
 862:	11 f0       	breq	.+4      	; 0x868 <__LOCK_REGION_LENGTH__+0x468>
 864:	08 f0       	brcs	.+2      	; 0x868 <__LOCK_REGION_LENGTH__+0x468>
			prescalarbits = 0b001; // clk/1 prescaler (No prescaling) : For both timers
			
			if (ocr > 255) // above prescaler failed
			{
				ocr = (F_CPU / (frequency * 2 * 8)) - 1;
				prescalarbits = 0b010; // clk/8 prescaler : For both timers
 866:	70 ce       	rjmp	.-800    	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
 868:	82 e0       	ldi	r24, 0x02	; 2
		pinMode(_pin, OUTPUT);
		
		//2. if we are using an 8 bit timer, scan through prescalers to find the best fit
		if (_timer == 0 || _timer == 2)
		{
			ocr = (F_CPU / (frequency * 2)) - 1;
 86a:	dd ce       	rjmp	.-582    	; 0x626 <__LOCK_REGION_LENGTH__+0x226>
 86c:	98 01       	movw	r18, r16
 86e:	22 0f       	add	r18, r18
 870:	33 1f       	adc	r19, r19
 872:	40 e0       	ldi	r20, 0x00	; 0
 874:	50 e0       	ldi	r21, 0x00	; 0
 876:	60 e0       	ldi	r22, 0x00	; 0
 878:	74 e2       	ldi	r23, 0x24	; 36
 87a:	84 ef       	ldi	r24, 0xF4	; 244
 87c:	90 e0       	ldi	r25, 0x00	; 0
 87e:	f4 d2       	rcall	.+1512   	; 0xe68 <__udivmodsi4>
 880:	69 01       	movw	r12, r18
 882:	7a 01       	movw	r14, r20
 884:	81 e0       	ldi	r24, 0x01	; 1
 886:	c8 1a       	sub	r12, r24
 888:	d1 08       	sbc	r13, r1
 88a:	e1 08       	sbc	r14, r1
 88c:	f1 08       	sbc	r15, r1
			prescalarbits = 0b001; // clk/1 prescaler (No prescaling) : For both timers
			
			if (ocr > 255) // above prescaler failed
 88e:	9f ef       	ldi	r25, 0xFF	; 255
 890:	c9 16       	cp	r12, r25
 892:	d1 04       	cpc	r13, r1
 894:	e1 04       	cpc	r14, r1
 896:	f1 04       	cpc	r15, r1
 898:	09 f0       	breq	.+2      	; 0x89c <__LOCK_REGION_LENGTH__+0x49c>
 89a:	48 f6       	brcc	.-110    	; 0x82e <__LOCK_REGION_LENGTH__+0x42e>
		
		//2. if we are using an 8 bit timer, scan through prescalers to find the best fit
		if (_timer == 0 || _timer == 2)
		{
			ocr = (F_CPU / (frequency * 2)) - 1;
			prescalarbits = 0b001; // clk/1 prescaler (No prescaling) : For both timers
 89c:	81 e0       	ldi	r24, 0x01	; 1
 89e:	c3 ce       	rjmp	.-634    	; 0x626 <__LOCK_REGION_LENGTH__+0x226>
			
			if (ocr > 255) // above prescaler failed
			{
				ocr = (F_CPU / (frequency * 2 * 8)) - 1;
 8a0:	98 01       	movw	r18, r16
 8a2:	22 95       	swap	r18
 8a4:	32 95       	swap	r19
 8a6:	30 7f       	andi	r19, 0xF0	; 240
 8a8:	32 27       	eor	r19, r18
 8aa:	20 7f       	andi	r18, 0xF0	; 240
 8ac:	32 27       	eor	r19, r18
 8ae:	40 e0       	ldi	r20, 0x00	; 0
 8b0:	50 e0       	ldi	r21, 0x00	; 0
 8b2:	60 e0       	ldi	r22, 0x00	; 0
 8b4:	74 e2       	ldi	r23, 0x24	; 36
 8b6:	84 ef       	ldi	r24, 0xF4	; 244
 8b8:	90 e0       	ldi	r25, 0x00	; 0
 8ba:	d6 d2       	rcall	.+1452   	; 0xe68 <__udivmodsi4>
 8bc:	69 01       	movw	r12, r18
 8be:	7a 01       	movw	r14, r20
 8c0:	81 e0       	ldi	r24, 0x01	; 1
 8c2:	c8 1a       	sub	r12, r24
 8c4:	d1 08       	sbc	r13, r1
 8c6:	e1 08       	sbc	r14, r1
 8c8:	f1 08       	sbc	r15, r1
				{
					ocr = (F_CPU / frequency / 2 / 32) - 1;
					prescalarbits = 0b011; // clk/32
				}
					
				if(ocr > 255)
 8ca:	9f ef       	ldi	r25, 0xFF	; 255
 8cc:	c9 16       	cp	r12, r25
 8ce:	d1 04       	cpc	r13, r1
 8d0:	e1 04       	cpc	r14, r1
 8d2:	f1 04       	cpc	r15, r1
 8d4:	11 f0       	breq	.+4      	; 0x8da <__LOCK_REGION_LENGTH__+0x4da>
 8d6:	08 f0       	brcs	.+2      	; 0x8da <__LOCK_REGION_LENGTH__+0x4da>
			prescalarbits = 0b001; // clk/1 prescaler (No prescaling) : For both timers
			
			if (ocr > 255) // above prescaler failed
			{
				ocr = (F_CPU / (frequency * 2 * 8)) - 1;
				prescalarbits = 0b010; // clk/8 prescaler : For both timers
 8d8:	52 ce       	rjmp	.-860    	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
 8da:	82 e0       	ldi	r24, 0x02	; 2
		pinMode(_pin, OUTPUT);
		
		//2. if we are using an 8 bit timer, scan through prescalers to find the best fit
		if (_timer == 0 || _timer == 2)
		{
			ocr = (F_CPU / (frequency * 2)) - 1;
 8dc:	96 ce       	rjmp	.-724    	; 0x60a <__LOCK_REGION_LENGTH__+0x20a>
 8de:	98 01       	movw	r18, r16
 8e0:	22 0f       	add	r18, r18
 8e2:	33 1f       	adc	r19, r19
 8e4:	40 e0       	ldi	r20, 0x00	; 0
 8e6:	50 e0       	ldi	r21, 0x00	; 0
 8e8:	60 e0       	ldi	r22, 0x00	; 0
 8ea:	74 e2       	ldi	r23, 0x24	; 36
 8ec:	84 ef       	ldi	r24, 0xF4	; 244
 8ee:	90 e0       	ldi	r25, 0x00	; 0
 8f0:	bb d2       	rcall	.+1398   	; 0xe68 <__udivmodsi4>
 8f2:	69 01       	movw	r12, r18
 8f4:	7a 01       	movw	r14, r20
 8f6:	81 e0       	ldi	r24, 0x01	; 1
 8f8:	c8 1a       	sub	r12, r24
 8fa:	d1 08       	sbc	r13, r1
 8fc:	e1 08       	sbc	r14, r1
 8fe:	f1 08       	sbc	r15, r1
			prescalarbits = 0b001; // clk/1 prescaler (No prescaling) : For both timers
			
			if (ocr > 255) // above prescaler failed
 900:	9f ef       	ldi	r25, 0xFF	; 255
 902:	c9 16       	cp	r12, r25
 904:	d1 04       	cpc	r13, r1
 906:	e1 04       	cpc	r14, r1
 908:	f1 04       	cpc	r15, r1
 90a:	09 f0       	breq	.+2      	; 0x90e <__LOCK_REGION_LENGTH__+0x50e>
		
		//2. if we are using an 8 bit timer, scan through prescalers to find the best fit
		if (_timer == 0 || _timer == 2)
		{
			ocr = (F_CPU / (frequency * 2)) - 1;
			prescalarbits = 0b001; // clk/1 prescaler (No prescaling) : For both timers
 90c:	48 f6       	brcc	.-110    	; 0x8a0 <__LOCK_REGION_LENGTH__+0x4a0>
 90e:	81 e0       	ldi	r24, 0x01	; 1
					prescalarbits = 0b011; // clk/32
				}
					
				if(ocr > 255)
				{
					ocr = (F_CPU / (frequency * 2 * 64)) - 1;
 910:	7c ce       	rjmp	.-776    	; 0x60a <__LOCK_REGION_LENGTH__+0x20a>
 912:	98 01       	movw	r18, r16
 914:	36 95       	lsr	r19
 916:	32 2f       	mov	r19, r18
 918:	22 27       	eor	r18, r18
 91a:	37 95       	ror	r19
 91c:	27 95       	ror	r18
 91e:	40 e0       	ldi	r20, 0x00	; 0
 920:	50 e0       	ldi	r21, 0x00	; 0
 922:	60 e0       	ldi	r22, 0x00	; 0
 924:	74 e2       	ldi	r23, 0x24	; 36
 926:	84 ef       	ldi	r24, 0xF4	; 244
 928:	90 e0       	ldi	r25, 0x00	; 0
 92a:	9e d2       	rcall	.+1340   	; 0xe68 <__udivmodsi4>
 92c:	69 01       	movw	r12, r18
 92e:	7a 01       	movw	r14, r20
 930:	81 e0       	ldi	r24, 0x01	; 1
 932:	c8 1a       	sub	r12, r24
 934:	d1 08       	sbc	r13, r1
 936:	e1 08       	sbc	r14, r1
 938:	f1 08       	sbc	r15, r1
					prescalarbits = _timer == 0 ? 0b011 : 0b100; // clk/32 for timer 1: clk/64 for timer 2
					
					if (_timer == 2 && ocr > 255)
 93a:	9f ef       	ldi	r25, 0xFF	; 255
 93c:	c9 16       	cp	r12, r25
 93e:	d1 04       	cpc	r13, r1
 940:	e1 04       	cpc	r14, r1
 942:	f1 04       	cpc	r15, r1
 944:	11 f0       	breq	.+4      	; 0x94a <__LOCK_REGION_LENGTH__+0x54a>
 946:	08 f0       	brcs	.+2      	; 0x94a <__LOCK_REGION_LENGTH__+0x54a>
 948:	30 ce       	rjmp	.-928    	; 0x5aa <__LOCK_REGION_LENGTH__+0x1aa>
 94a:	84 e0       	ldi	r24, 0x04	; 4
 94c:	6c ce       	rjmp	.-808    	; 0x626 <__LOCK_REGION_LENGTH__+0x226>
		}
	}
	  
	// search for an unused timer.
	for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
		if (tone_pins[i] == 255) {
 94e:	9f 3f       	cpi	r25, 0xFF	; 255
 950:	09 f0       	breq	.+2      	; 0x954 <__LOCK_REGION_LENGTH__+0x554>
 952:	42 c0       	rjmp	.+132    	; 0x9d8 <__LOCK_REGION_LENGTH__+0x5d8>
						ocr = (F_CPU / (frequency * 2 * 256))- 1;
						prescalarbits = _timer == 0 ? 0b100 : 0b110;  // clk/64 for timer 1: clk/256 for timer 2
						if (ocr > 255)
						{
							// can't do any better than /1024
							ocr = (F_CPU / (frequency * 2 * 1024)) - 1;
 954:	f9 cc       	rjmp	.-1550   	; 0x348 <tone+0x2e>
 956:	98 01       	movw	r18, r16
 958:	32 2f       	mov	r19, r18
 95a:	22 27       	eor	r18, r18
 95c:	33 0f       	add	r19, r19
 95e:	33 0f       	add	r19, r19
 960:	33 0f       	add	r19, r19
 962:	40 e0       	ldi	r20, 0x00	; 0
 964:	50 e0       	ldi	r21, 0x00	; 0
 966:	60 e0       	ldi	r22, 0x00	; 0
 968:	74 e2       	ldi	r23, 0x24	; 36
 96a:	84 ef       	ldi	r24, 0xF4	; 244
 96c:	90 e0       	ldi	r25, 0x00	; 0
 96e:	7c d2       	rcall	.+1272   	; 0xe68 <__udivmodsi4>
 970:	69 01       	movw	r12, r18
 972:	7a 01       	movw	r14, r20
 974:	81 e0       	ldi	r24, 0x01	; 1
 976:	c8 1a       	sub	r12, r24
 978:	d1 08       	sbc	r13, r1
 97a:	e1 08       	sbc	r14, r1
 97c:	f1 08       	sbc	r15, r1
							prescalarbits = _timer == 0 ? 0b101 : 0b111; // clk/128 for timer 1: clk/1024 for timer 2
 97e:	85 e0       	ldi	r24, 0x05	; 5
 980:	44 ce       	rjmp	.-888    	; 0x60a <__LOCK_REGION_LENGTH__+0x20a>

					if (ocr > 255)
					{
						ocr = (F_CPU / (frequency * 2 * 256))- 1;
						prescalarbits = _timer == 0 ? 0b100 : 0b110;  // clk/64 for timer 1: clk/256 for timer 2
						if (ocr > 255)
 982:	9f ef       	ldi	r25, 0xFF	; 255
 984:	c9 16       	cp	r12, r25
 986:	d1 04       	cpc	r13, r1
 988:	e1 04       	cpc	r14, r1
 98a:	f1 04       	cpc	r15, r1
 98c:	09 f0       	breq	.+2      	; 0x990 <__LOCK_REGION_LENGTH__+0x590>
					}

					if (ocr > 255)
					{
						ocr = (F_CPU / (frequency * 2 * 256))- 1;
						prescalarbits = _timer == 0 ? 0b100 : 0b110;  // clk/64 for timer 1: clk/256 for timer 2
 98e:	18 f7       	brcc	.-58     	; 0x956 <__LOCK_REGION_LENGTH__+0x556>
 990:	84 e0       	ldi	r24, 0x04	; 4
						if (ocr > 255)
						{
							// can't do any better than /1024
							ocr = (F_CPU / (frequency * 2 * 1024)) - 1;
 992:	39 ce       	rjmp	.-910    	; 0x606 <__LOCK_REGION_LENGTH__+0x206>
 994:	98 01       	movw	r18, r16
 996:	32 2f       	mov	r19, r18
 998:	22 27       	eor	r18, r18
 99a:	33 0f       	add	r19, r19
 99c:	33 0f       	add	r19, r19
 99e:	33 0f       	add	r19, r19
 9a0:	40 e0       	ldi	r20, 0x00	; 0
 9a2:	50 e0       	ldi	r21, 0x00	; 0
 9a4:	60 e0       	ldi	r22, 0x00	; 0
 9a6:	74 e2       	ldi	r23, 0x24	; 36
 9a8:	84 ef       	ldi	r24, 0xF4	; 244
 9aa:	90 e0       	ldi	r25, 0x00	; 0
 9ac:	5d d2       	rcall	.+1210   	; 0xe68 <__udivmodsi4>
 9ae:	69 01       	movw	r12, r18
 9b0:	7a 01       	movw	r14, r20
 9b2:	81 e0       	ldi	r24, 0x01	; 1
 9b4:	c8 1a       	sub	r12, r24
 9b6:	d1 08       	sbc	r13, r1
 9b8:	e1 08       	sbc	r14, r1
							prescalarbits = _timer == 0 ? 0b101 : 0b111; // clk/128 for timer 1: clk/1024 for timer 2
 9ba:	f1 08       	sbc	r15, r1
 9bc:	87 e0       	ldi	r24, 0x07	; 7

					if (ocr > 255)
					{
						ocr = (F_CPU / (frequency * 2 * 256))- 1;
						prescalarbits = _timer == 0 ? 0b100 : 0b110;  // clk/64 for timer 1: clk/256 for timer 2
						if (ocr > 255)
 9be:	33 ce       	rjmp	.-922    	; 0x626 <__LOCK_REGION_LENGTH__+0x226>
 9c0:	9f ef       	ldi	r25, 0xFF	; 255
 9c2:	c9 16       	cp	r12, r25
 9c4:	d1 04       	cpc	r13, r1
 9c6:	e1 04       	cpc	r14, r1
 9c8:	f1 04       	cpc	r15, r1
 9ca:	09 f0       	breq	.+2      	; 0x9ce <__LOCK_REGION_LENGTH__+0x5ce>
					}

					if (ocr > 255)
					{
						ocr = (F_CPU / (frequency * 2 * 256))- 1;
						prescalarbits = _timer == 0 ? 0b100 : 0b110;  // clk/64 for timer 1: clk/256 for timer 2
 9cc:	18 f7       	brcc	.-58     	; 0x994 <__LOCK_REGION_LENGTH__+0x594>
 9ce:	86 e0       	ldi	r24, 0x06	; 6
	_timer = toneBegin(_pin);
	
	if (_timer >= 0)
	{
		//1. set the pin as OUTPUT
		pinMode(_pin, OUTPUT);
 9d0:	1a ce       	rjmp	.-972    	; 0x606 <__LOCK_REGION_LENGTH__+0x206>
 9d2:	61 e0       	ldi	r22, 0x01	; 1
 9d4:	27 dc       	rcall	.-1970   	; 0x224 <pinMode>
 9d6:	2e ce       	rjmp	.-932    	; 0x634 <__LOCK_REGION_LENGTH__+0x234>
				timer5_toggle_count = toggle_count;
				bitWrite(TIMSK5, OCIE5A, 1);
			break;
		}		
	}
}
 9d8:	cf 91       	pop	r28
 9da:	1f 91       	pop	r17
 9dc:	0f 91       	pop	r16
 9de:	ff 90       	pop	r15
 9e0:	ef 90       	pop	r14
 9e2:	df 90       	pop	r13
 9e4:	cf 90       	pop	r12
 9e6:	bf 90       	pop	r11
 9e8:	af 90       	pop	r10
 9ea:	9f 90       	pop	r9
 9ec:	8f 90       	pop	r8
 9ee:	08 95       	ret

000009f0 <disableTimer>:
This function only works properly for timer 2 (the only one we use currently).  
for the others, it should end the tone, but won't restore proper PWM functionality for the timer. TODO
*/
void disableTimer(uint8_t _timer)
{
	switch(_timer)
 9f0:	82 30       	cpi	r24, 0x02	; 2
 9f2:	a9 f0       	breq	.+42     	; 0xa1e <disableTimer+0x2e>
 9f4:	28 f4       	brcc	.+10     	; 0xa00 <disableTimer+0x10>
 9f6:	88 23       	and	r24, r24
 9f8:	49 f0       	breq	.+18     	; 0xa0c <disableTimer+0x1c>
 9fa:	81 30       	cpi	r24, 0x01	; 1
 9fc:	51 f0       	breq	.+20     	; 0xa12 <disableTimer+0x22>
 9fe:	08 95       	ret
 a00:	84 30       	cpi	r24, 0x04	; 4
 a02:	21 f1       	breq	.+72     	; 0xa4c <disableTimer+0x5c>
 a04:	e8 f0       	brcs	.+58     	; 0xa40 <disableTimer+0x50>
 a06:	85 30       	cpi	r24, 0x05	; 5
 a08:	39 f1       	breq	.+78     	; 0xa58 <disableTimer+0x68>
 a0a:	08 95       	ret
	{
		case 0:
		TIMSK0 = 0;
 a0c:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
		break;
 a10:	08 95       	ret
		case 1:
			bitWrite(TIMSK1, OCIE1A, 0);
 a12:	ef e6       	ldi	r30, 0x6F	; 111
 a14:	f0 e0       	ldi	r31, 0x00	; 0
 a16:	80 81       	ld	r24, Z
 a18:	8d 7f       	andi	r24, 0xFD	; 253
 a1a:	80 83       	st	Z, r24
		break;
 a1c:	08 95       	ret
		case 2:
			bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
 a1e:	e0 e7       	ldi	r30, 0x70	; 112
 a20:	f0 e0       	ldi	r31, 0x00	; 0
 a22:	80 81       	ld	r24, Z
 a24:	8d 7f       	andi	r24, 0xFD	; 253
 a26:	80 83       	st	Z, r24
			TCCR2A = (1 << WGM20);		 // restore normal  PWM mode
 a28:	81 e0       	ldi	r24, 0x01	; 1
 a2a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
			TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22); //clk/64 prescaler
 a2e:	e1 eb       	ldi	r30, 0xB1	; 177
 a30:	f0 e0       	ldi	r31, 0x00	; 0
 a32:	80 81       	ld	r24, Z
 a34:	88 7f       	andi	r24, 0xF8	; 248
 a36:	84 60       	ori	r24, 0x04	; 4
 a38:	80 83       	st	Z, r24
			OCR2A = 0;
 a3a:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
		break;
 a3e:	08 95       	ret
		case 3:
			bitWrite(TIMSK3, OCIE3A, 0);
 a40:	e1 e7       	ldi	r30, 0x71	; 113
 a42:	f0 e0       	ldi	r31, 0x00	; 0
 a44:	80 81       	ld	r24, Z
 a46:	8d 7f       	andi	r24, 0xFD	; 253
 a48:	80 83       	st	Z, r24
		break;
 a4a:	08 95       	ret
		case 4:
			bitWrite(TIMSK4, OCIE4A, 0);
 a4c:	e2 e7       	ldi	r30, 0x72	; 114
 a4e:	f0 e0       	ldi	r31, 0x00	; 0
 a50:	80 81       	ld	r24, Z
 a52:	8d 7f       	andi	r24, 0xFD	; 253
 a54:	80 83       	st	Z, r24
		break;
 a56:	08 95       	ret
		case 5:
			bitWrite(TIMSK5, OCIE5A, 0);
 a58:	e3 e7       	ldi	r30, 0x73	; 115
 a5a:	f0 e0       	ldi	r31, 0x00	; 0
 a5c:	80 81       	ld	r24, Z
 a5e:	8d 7f       	andi	r24, 0xFD	; 253
 a60:	80 83       	st	Z, r24
 a62:	08 95       	ret

00000a64 <noTone>:
	}
}


void noTone(uint8_t _pin)
{
 a64:	cf 93       	push	r28
 a66:	c8 2f       	mov	r28, r24
	int8_t _timer = -1;
	  
	for (int i = 0; i < AVAILABLE_TONE_PINS; i++)
	{
		if (tone_pins[i] == _pin) {
 a68:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 a6c:	c8 13       	cpse	r28, r24
 a6e:	07 c0       	rjmp	.+14     	; 0xa7e <noTone+0x1a>
			_timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
 a70:	e2 ee       	ldi	r30, 0xE2	; 226
 a72:	f1 e0       	ldi	r31, 0x01	; 1
 a74:	84 91       	lpm	r24, Z
			tone_pins[i] = 255;
 a76:	9f ef       	ldi	r25, 0xFF	; 255
 a78:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <__DATA_REGION_ORIGIN__>
			break;
 a7c:	01 c0       	rjmp	.+2      	; 0xa80 <noTone+0x1c>
}


void noTone(uint8_t _pin)
{
	int8_t _timer = -1;
 a7e:	8f ef       	ldi	r24, 0xFF	; 255
			tone_pins[i] = 255;
			break;
		}
	}
	  
	disableTimer(_timer);
 a80:	b7 df       	rcall	.-146    	; 0x9f0 <disableTimer>
	digitalWrite(_pin, 0);
 a82:	60 e0       	ldi	r22, 0x00	; 0
 a84:	8c 2f       	mov	r24, r28
 a86:	0d dc       	rcall	.-2022   	; 0x2a2 <digitalWrite>
}
 a88:	cf 91       	pop	r28
 a8a:	08 95       	ret

00000a8c <__vector_32>:
}
#endif

#ifdef USE_TIMER3
ISR(TIMER3_COMPA_vect)
{
 a8c:	1f 92       	push	r1
 a8e:	0f 92       	push	r0
 a90:	0f b6       	in	r0, 0x3f	; 63
 a92:	0f 92       	push	r0
 a94:	11 24       	eor	r1, r1
 a96:	0b b6       	in	r0, 0x3b	; 59
 a98:	0f 92       	push	r0
 a9a:	2f 93       	push	r18
 a9c:	3f 93       	push	r19
 a9e:	4f 93       	push	r20
 aa0:	5f 93       	push	r21
 aa2:	6f 93       	push	r22
 aa4:	7f 93       	push	r23
 aa6:	8f 93       	push	r24
 aa8:	9f 93       	push	r25
 aaa:	af 93       	push	r26
 aac:	bf 93       	push	r27
 aae:	ef 93       	push	r30
 ab0:	ff 93       	push	r31
	if (timer3_toggle_count != 0)
 ab2:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <timer3_toggle_count>
 ab6:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <timer3_toggle_count+0x1>
 aba:	a0 91 33 02 	lds	r26, 0x0233	; 0x800233 <timer3_toggle_count+0x2>
 abe:	b0 91 34 02 	lds	r27, 0x0234	; 0x800234 <timer3_toggle_count+0x3>
 ac2:	89 2b       	or	r24, r25
 ac4:	8a 2b       	or	r24, r26
 ac6:	8b 2b       	or	r24, r27
 ac8:	51 f1       	breq	.+84     	; 0xb1e <__vector_32+0x92>
	{
		// toggle the pin
		*timer3_pin_port ^= timer3_pin_mask;
 aca:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <timer3_pin_mask>
 ace:	e0 91 2b 02 	lds	r30, 0x022B	; 0x80022b <timer3_pin_port>
 ad2:	f0 91 2c 02 	lds	r31, 0x022C	; 0x80022c <timer3_pin_port+0x1>
 ad6:	80 81       	ld	r24, Z
 ad8:	89 27       	eor	r24, r25
 ada:	80 83       	st	Z, r24
		
		if (timer3_toggle_count > 0)
 adc:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <timer3_toggle_count>
 ae0:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <timer3_toggle_count+0x1>
 ae4:	a0 91 33 02 	lds	r26, 0x0233	; 0x800233 <timer3_toggle_count+0x2>
 ae8:	b0 91 34 02 	lds	r27, 0x0234	; 0x800234 <timer3_toggle_count+0x3>
 aec:	18 16       	cp	r1, r24
 aee:	19 06       	cpc	r1, r25
 af0:	1a 06       	cpc	r1, r26
 af2:	1b 06       	cpc	r1, r27
 af4:	04 f5       	brge	.+64     	; 0xb36 <__vector_32+0xaa>
			timer3_toggle_count--;
 af6:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <timer3_toggle_count>
 afa:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <timer3_toggle_count+0x1>
 afe:	a0 91 33 02 	lds	r26, 0x0233	; 0x800233 <timer3_toggle_count+0x2>
 b02:	b0 91 34 02 	lds	r27, 0x0234	; 0x800234 <timer3_toggle_count+0x3>
 b06:	01 97       	sbiw	r24, 0x01	; 1
 b08:	a1 09       	sbc	r26, r1
 b0a:	b1 09       	sbc	r27, r1
 b0c:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <timer3_toggle_count>
 b10:	90 93 32 02 	sts	0x0232, r25	; 0x800232 <timer3_toggle_count+0x1>
 b14:	a0 93 33 02 	sts	0x0233, r26	; 0x800233 <timer3_toggle_count+0x2>
 b18:	b0 93 34 02 	sts	0x0234, r27	; 0x800234 <timer3_toggle_count+0x3>
 b1c:	0c c0       	rjmp	.+24     	; 0xb36 <__vector_32+0xaa>
	}
	else
	{
		disableTimer(3);
 b1e:	83 e0       	ldi	r24, 0x03	; 3
 b20:	67 df       	rcall	.-306    	; 0x9f0 <disableTimer>
		
		*timer3_pin_port &= ~(timer3_pin_mask);  // keep pin low after stop
 b22:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <timer3_pin_mask>
 b26:	e0 91 2b 02 	lds	r30, 0x022B	; 0x80022b <timer3_pin_port>
 b2a:	f0 91 2c 02 	lds	r31, 0x022C	; 0x80022c <timer3_pin_port+0x1>
 b2e:	90 81       	ld	r25, Z
 b30:	80 95       	com	r24
 b32:	89 23       	and	r24, r25
 b34:	80 83       	st	Z, r24
	}
}
 b36:	ff 91       	pop	r31
 b38:	ef 91       	pop	r30
 b3a:	bf 91       	pop	r27
 b3c:	af 91       	pop	r26
 b3e:	9f 91       	pop	r25
 b40:	8f 91       	pop	r24
 b42:	7f 91       	pop	r23
 b44:	6f 91       	pop	r22
 b46:	5f 91       	pop	r21
 b48:	4f 91       	pop	r20
 b4a:	3f 91       	pop	r19
 b4c:	2f 91       	pop	r18
 b4e:	0f 90       	pop	r0
 b50:	0b be       	out	0x3b, r0	; 59
 b52:	0f 90       	pop	r0
 b54:	0f be       	out	0x3f, r0	; 63
 b56:	0f 90       	pop	r0
 b58:	1f 90       	pop	r1
 b5a:	18 95       	reti

00000b5c <delay_ms>:
#include <util/delay.h>
#include "drivers/tk2560.h"
#include "drivers/pitches.h"

void delay_ms(uint16_t count) {
	while(count--) {
 b5c:	00 97       	sbiw	r24, 0x00	; 0
 b5e:	41 f0       	breq	.+16     	; 0xb70 <delay_ms+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 b60:	ef e9       	ldi	r30, 0x9F	; 159
 b62:	ff e0       	ldi	r31, 0x0F	; 15
 b64:	31 97       	sbiw	r30, 0x01	; 1
 b66:	f1 f7       	brne	.-4      	; 0xb64 <delay_ms+0x8>
 b68:	00 c0       	rjmp	.+0      	; 0xb6a <delay_ms+0xe>
 b6a:	00 00       	nop
 b6c:	01 97       	sbiw	r24, 0x01	; 1
 b6e:	c1 f7       	brne	.-16     	; 0xb60 <delay_ms+0x4>
 b70:	08 95       	ret

00000b72 <main>:
};

int main(void)
{
    /* Replace with your application code */
	pinMode(Pin_PK0, OUTPUT);
 b72:	61 e0       	ldi	r22, 0x01	; 1
 b74:	89 e5       	ldi	r24, 0x59	; 89
 b76:	56 db       	rcall	.-2388   	; 0x224 <pinMode>
	pinMode(Pin_PK3, OUTPUT);
 b78:	61 e0       	ldi	r22, 0x01	; 1
 b7a:	86 e5       	ldi	r24, 0x56	; 86
 b7c:	53 db       	rcall	.-2394   	; 0x224 <pinMode>
	pinMode(Pin_PJ2, INPUT);
 b7e:	60 e0       	ldi	r22, 0x00	; 0
 b80:	81 e4       	ldi	r24, 0x41	; 65
 b82:	50 db       	rcall	.-2400   	; 0x224 <pinMode>
 b84:	c1 e0       	ldi	r28, 0x01	; 1
 b86:	d2 e0       	ldi	r29, 0x02	; 2
 b88:	01 e1       	ldi	r16, 0x11	; 17
 b8a:	12 e0       	ldi	r17, 0x02	; 2
 b8c:	0f 2e       	mov	r0, r31
 b8e:	f1 e1       	ldi	r31, 0x11	; 17
 b90:	cf 2e       	mov	r12, r31
 b92:	f2 e0       	ldi	r31, 0x02	; 2
 b94:	df 2e       	mov	r13, r31
 b96:	f0 2d       	mov	r31, r0
	
	for (int thisNote = 0; thisNote < 8; thisNote++) {
		// to calculate the note duration, take one second divided by the note type.
		//e.g. quarter note = 1000 / 4, eighth note = 1000/8, etc.

		int noteDuration = 1000 / noteDurations[thisNote];
 b98:	0f 2e       	mov	r0, r31
 b9a:	f8 ee       	ldi	r31, 0xE8	; 232
 b9c:	ef 2e       	mov	r14, r31
 b9e:	f3 e0       	ldi	r31, 0x03	; 3
 ba0:	ff 2e       	mov	r15, r31
 ba2:	f0 2d       	mov	r31, r0
 ba4:	69 91       	ld	r22, Y+
 ba6:	79 91       	ld	r23, Y+
 ba8:	c7 01       	movw	r24, r14
 baa:	4b d1       	rcall	.+662    	; 0xe42 <__divmodhi4>
 bac:	cb 01       	movw	r24, r22
		tone(Pin_PE3, melody[thisNote], noteDuration);
 bae:	f8 01       	movw	r30, r16
 bb0:	61 91       	ld	r22, Z+
 bb2:	71 91       	ld	r23, Z+
 bb4:	8f 01       	movw	r16, r30
 bb6:	4c 01       	movw	r8, r24
 bb8:	99 0f       	add	r25, r25
 bba:	aa 08       	sbc	r10, r10
 bbc:	bb 08       	sbc	r11, r11
 bbe:	a5 01       	movw	r20, r10
 bc0:	94 01       	movw	r18, r8
 bc2:	85 e0       	ldi	r24, 0x05	; 5
		// to distinguish the notes, set a minimum time between them.
		// the note's duration + 30% seems to work well:
		int pauseBetweenNotes = noteDuration * 1.30;
		delay_ms(pauseBetweenNotes);
 bc4:	aa db       	rcall	.-2220   	; 0x31a <tone>
 bc6:	c5 01       	movw	r24, r10
 bc8:	b4 01       	movw	r22, r8
 bca:	4c d0       	rcall	.+152    	; 0xc64 <__floatsisf>
 bcc:	26 e6       	ldi	r18, 0x66	; 102
 bce:	36 e6       	ldi	r19, 0x66	; 102
 bd0:	46 ea       	ldi	r20, 0xA6	; 166
 bd2:	5f e3       	ldi	r21, 0x3F	; 63
 bd4:	ab d0       	rcall	.+342    	; 0xd2c <__mulsf3>
 bd6:	13 d0       	rcall	.+38     	; 0xbfe <__fixsfsi>
 bd8:	cb 01       	movw	r24, r22
		
		// stop the tone playing:
		noTone(Pin_PE3);
 bda:	c0 df       	rcall	.-128    	; 0xb5c <delay_ms>
 bdc:	85 e0       	ldi	r24, 0x05	; 5
 bde:	42 df       	rcall	.-380    	; 0xa64 <noTone>
    /* Replace with your application code */
	pinMode(Pin_PK0, OUTPUT);
	pinMode(Pin_PK3, OUTPUT);
	pinMode(Pin_PJ2, INPUT);
	
	for (int thisNote = 0; thisNote < 8; thisNote++) {
 be0:	cc 15       	cp	r28, r12
 be2:	dd 05       	cpc	r29, r13
 be4:	f9 f6       	brne	.-66     	; 0xba4 <main+0x32>
 be6:	ff ef       	ldi	r31, 0xFF	; 255
 be8:	23 ed       	ldi	r18, 0xD3	; 211
 bea:	80 e3       	ldi	r24, 0x30	; 48
 bec:	f1 50       	subi	r31, 0x01	; 1
 bee:	20 40       	sbci	r18, 0x00	; 0
 bf0:	80 40       	sbci	r24, 0x00	; 0
 bf2:	e1 f7       	brne	.-8      	; 0xbec <main+0x7a>
 bf4:	00 c0       	rjmp	.+0      	; 0xbf6 <main+0x84>
			togglePin(Pin_PK0);
		}
		*/
		
		_delay_ms(1000);
		togglePin(Pin_PK3);
 bf6:	00 00       	nop
 bf8:	86 e5       	ldi	r24, 0x56	; 86
 bfa:	75 db       	rcall	.-2326   	; 0x2e6 <togglePin>
 bfc:	f4 cf       	rjmp	.-24     	; 0xbe6 <main+0x74>

00000bfe <__fixsfsi>:
 bfe:	04 d0       	rcall	.+8      	; 0xc08 <__fixunssfsi>
 c00:	68 94       	set
 c02:	b1 11       	cpse	r27, r1
 c04:	8d c0       	rjmp	.+282    	; 0xd20 <__fp_szero>
 c06:	08 95       	ret

00000c08 <__fixunssfsi>:
 c08:	70 d0       	rcall	.+224    	; 0xcea <__fp_splitA>
 c0a:	88 f0       	brcs	.+34     	; 0xc2e <__fixunssfsi+0x26>
 c0c:	9f 57       	subi	r25, 0x7F	; 127
 c0e:	90 f0       	brcs	.+36     	; 0xc34 <__fixunssfsi+0x2c>
 c10:	b9 2f       	mov	r27, r25
 c12:	99 27       	eor	r25, r25
 c14:	b7 51       	subi	r27, 0x17	; 23
 c16:	a0 f0       	brcs	.+40     	; 0xc40 <__fixunssfsi+0x38>
 c18:	d1 f0       	breq	.+52     	; 0xc4e <__fixunssfsi+0x46>
 c1a:	66 0f       	add	r22, r22
 c1c:	77 1f       	adc	r23, r23
 c1e:	88 1f       	adc	r24, r24
 c20:	99 1f       	adc	r25, r25
 c22:	1a f0       	brmi	.+6      	; 0xc2a <__fixunssfsi+0x22>
 c24:	ba 95       	dec	r27
 c26:	c9 f7       	brne	.-14     	; 0xc1a <__fixunssfsi+0x12>
 c28:	12 c0       	rjmp	.+36     	; 0xc4e <__fixunssfsi+0x46>
 c2a:	b1 30       	cpi	r27, 0x01	; 1
 c2c:	81 f0       	breq	.+32     	; 0xc4e <__fixunssfsi+0x46>
 c2e:	77 d0       	rcall	.+238    	; 0xd1e <__fp_zero>
 c30:	b1 e0       	ldi	r27, 0x01	; 1
 c32:	08 95       	ret
 c34:	74 c0       	rjmp	.+232    	; 0xd1e <__fp_zero>
 c36:	67 2f       	mov	r22, r23
 c38:	78 2f       	mov	r23, r24
 c3a:	88 27       	eor	r24, r24
 c3c:	b8 5f       	subi	r27, 0xF8	; 248
 c3e:	39 f0       	breq	.+14     	; 0xc4e <__fixunssfsi+0x46>
 c40:	b9 3f       	cpi	r27, 0xF9	; 249
 c42:	cc f3       	brlt	.-14     	; 0xc36 <__fixunssfsi+0x2e>
 c44:	86 95       	lsr	r24
 c46:	77 95       	ror	r23
 c48:	67 95       	ror	r22
 c4a:	b3 95       	inc	r27
 c4c:	d9 f7       	brne	.-10     	; 0xc44 <__fixunssfsi+0x3c>
 c4e:	3e f4       	brtc	.+14     	; 0xc5e <__fixunssfsi+0x56>
 c50:	90 95       	com	r25
 c52:	80 95       	com	r24
 c54:	70 95       	com	r23
 c56:	61 95       	neg	r22
 c58:	7f 4f       	sbci	r23, 0xFF	; 255
 c5a:	8f 4f       	sbci	r24, 0xFF	; 255
 c5c:	9f 4f       	sbci	r25, 0xFF	; 255
 c5e:	08 95       	ret

00000c60 <__floatunsisf>:
 c60:	e8 94       	clt
 c62:	09 c0       	rjmp	.+18     	; 0xc76 <__floatsisf+0x12>

00000c64 <__floatsisf>:
 c64:	97 fb       	bst	r25, 7
 c66:	3e f4       	brtc	.+14     	; 0xc76 <__floatsisf+0x12>
 c68:	90 95       	com	r25
 c6a:	80 95       	com	r24
 c6c:	70 95       	com	r23
 c6e:	61 95       	neg	r22
 c70:	7f 4f       	sbci	r23, 0xFF	; 255
 c72:	8f 4f       	sbci	r24, 0xFF	; 255
 c74:	9f 4f       	sbci	r25, 0xFF	; 255
 c76:	99 23       	and	r25, r25
 c78:	a9 f0       	breq	.+42     	; 0xca4 <__floatsisf+0x40>
 c7a:	f9 2f       	mov	r31, r25
 c7c:	96 e9       	ldi	r25, 0x96	; 150
 c7e:	bb 27       	eor	r27, r27
 c80:	93 95       	inc	r25
 c82:	f6 95       	lsr	r31
 c84:	87 95       	ror	r24
 c86:	77 95       	ror	r23
 c88:	67 95       	ror	r22
 c8a:	b7 95       	ror	r27
 c8c:	f1 11       	cpse	r31, r1
 c8e:	f8 cf       	rjmp	.-16     	; 0xc80 <__floatsisf+0x1c>
 c90:	fa f4       	brpl	.+62     	; 0xcd0 <__floatsisf+0x6c>
 c92:	bb 0f       	add	r27, r27
 c94:	11 f4       	brne	.+4      	; 0xc9a <__floatsisf+0x36>
 c96:	60 ff       	sbrs	r22, 0
 c98:	1b c0       	rjmp	.+54     	; 0xcd0 <__floatsisf+0x6c>
 c9a:	6f 5f       	subi	r22, 0xFF	; 255
 c9c:	7f 4f       	sbci	r23, 0xFF	; 255
 c9e:	8f 4f       	sbci	r24, 0xFF	; 255
 ca0:	9f 4f       	sbci	r25, 0xFF	; 255
 ca2:	16 c0       	rjmp	.+44     	; 0xcd0 <__floatsisf+0x6c>
 ca4:	88 23       	and	r24, r24
 ca6:	11 f0       	breq	.+4      	; 0xcac <__floatsisf+0x48>
 ca8:	96 e9       	ldi	r25, 0x96	; 150
 caa:	11 c0       	rjmp	.+34     	; 0xcce <__floatsisf+0x6a>
 cac:	77 23       	and	r23, r23
 cae:	21 f0       	breq	.+8      	; 0xcb8 <__floatsisf+0x54>
 cb0:	9e e8       	ldi	r25, 0x8E	; 142
 cb2:	87 2f       	mov	r24, r23
 cb4:	76 2f       	mov	r23, r22
 cb6:	05 c0       	rjmp	.+10     	; 0xcc2 <__floatsisf+0x5e>
 cb8:	66 23       	and	r22, r22
 cba:	71 f0       	breq	.+28     	; 0xcd8 <__floatsisf+0x74>
 cbc:	96 e8       	ldi	r25, 0x86	; 134
 cbe:	86 2f       	mov	r24, r22
 cc0:	70 e0       	ldi	r23, 0x00	; 0
 cc2:	60 e0       	ldi	r22, 0x00	; 0
 cc4:	2a f0       	brmi	.+10     	; 0xcd0 <__floatsisf+0x6c>
 cc6:	9a 95       	dec	r25
 cc8:	66 0f       	add	r22, r22
 cca:	77 1f       	adc	r23, r23
 ccc:	88 1f       	adc	r24, r24
 cce:	da f7       	brpl	.-10     	; 0xcc6 <__floatsisf+0x62>
 cd0:	88 0f       	add	r24, r24
 cd2:	96 95       	lsr	r25
 cd4:	87 95       	ror	r24
 cd6:	97 f9       	bld	r25, 7
 cd8:	08 95       	ret

00000cda <__fp_split3>:
 cda:	57 fd       	sbrc	r21, 7
 cdc:	90 58       	subi	r25, 0x80	; 128
 cde:	44 0f       	add	r20, r20
 ce0:	55 1f       	adc	r21, r21
 ce2:	59 f0       	breq	.+22     	; 0xcfa <__fp_splitA+0x10>
 ce4:	5f 3f       	cpi	r21, 0xFF	; 255
 ce6:	71 f0       	breq	.+28     	; 0xd04 <__fp_splitA+0x1a>
 ce8:	47 95       	ror	r20

00000cea <__fp_splitA>:
 cea:	88 0f       	add	r24, r24
 cec:	97 fb       	bst	r25, 7
 cee:	99 1f       	adc	r25, r25
 cf0:	61 f0       	breq	.+24     	; 0xd0a <__fp_splitA+0x20>
 cf2:	9f 3f       	cpi	r25, 0xFF	; 255
 cf4:	79 f0       	breq	.+30     	; 0xd14 <__fp_splitA+0x2a>
 cf6:	87 95       	ror	r24
 cf8:	08 95       	ret
 cfa:	12 16       	cp	r1, r18
 cfc:	13 06       	cpc	r1, r19
 cfe:	14 06       	cpc	r1, r20
 d00:	55 1f       	adc	r21, r21
 d02:	f2 cf       	rjmp	.-28     	; 0xce8 <__fp_split3+0xe>
 d04:	46 95       	lsr	r20
 d06:	f1 df       	rcall	.-30     	; 0xcea <__fp_splitA>
 d08:	08 c0       	rjmp	.+16     	; 0xd1a <__fp_splitA+0x30>
 d0a:	16 16       	cp	r1, r22
 d0c:	17 06       	cpc	r1, r23
 d0e:	18 06       	cpc	r1, r24
 d10:	99 1f       	adc	r25, r25
 d12:	f1 cf       	rjmp	.-30     	; 0xcf6 <__fp_splitA+0xc>
 d14:	86 95       	lsr	r24
 d16:	71 05       	cpc	r23, r1
 d18:	61 05       	cpc	r22, r1
 d1a:	08 94       	sec
 d1c:	08 95       	ret

00000d1e <__fp_zero>:
 d1e:	e8 94       	clt

00000d20 <__fp_szero>:
 d20:	bb 27       	eor	r27, r27
 d22:	66 27       	eor	r22, r22
 d24:	77 27       	eor	r23, r23
 d26:	cb 01       	movw	r24, r22
 d28:	97 f9       	bld	r25, 7
 d2a:	08 95       	ret

00000d2c <__mulsf3>:
 d2c:	0b d0       	rcall	.+22     	; 0xd44 <__mulsf3x>
 d2e:	78 c0       	rjmp	.+240    	; 0xe20 <__fp_round>
 d30:	69 d0       	rcall	.+210    	; 0xe04 <__fp_pscA>
 d32:	28 f0       	brcs	.+10     	; 0xd3e <__mulsf3+0x12>
 d34:	6e d0       	rcall	.+220    	; 0xe12 <__fp_pscB>
 d36:	18 f0       	brcs	.+6      	; 0xd3e <__mulsf3+0x12>
 d38:	95 23       	and	r25, r21
 d3a:	09 f0       	breq	.+2      	; 0xd3e <__mulsf3+0x12>
 d3c:	5a c0       	rjmp	.+180    	; 0xdf2 <__fp_inf>
 d3e:	5f c0       	rjmp	.+190    	; 0xdfe <__fp_nan>
 d40:	11 24       	eor	r1, r1
 d42:	ee cf       	rjmp	.-36     	; 0xd20 <__fp_szero>

00000d44 <__mulsf3x>:
 d44:	ca df       	rcall	.-108    	; 0xcda <__fp_split3>
 d46:	a0 f3       	brcs	.-24     	; 0xd30 <__mulsf3+0x4>

00000d48 <__mulsf3_pse>:
 d48:	95 9f       	mul	r25, r21
 d4a:	d1 f3       	breq	.-12     	; 0xd40 <__mulsf3+0x14>
 d4c:	95 0f       	add	r25, r21
 d4e:	50 e0       	ldi	r21, 0x00	; 0
 d50:	55 1f       	adc	r21, r21
 d52:	62 9f       	mul	r22, r18
 d54:	f0 01       	movw	r30, r0
 d56:	72 9f       	mul	r23, r18
 d58:	bb 27       	eor	r27, r27
 d5a:	f0 0d       	add	r31, r0
 d5c:	b1 1d       	adc	r27, r1
 d5e:	63 9f       	mul	r22, r19
 d60:	aa 27       	eor	r26, r26
 d62:	f0 0d       	add	r31, r0
 d64:	b1 1d       	adc	r27, r1
 d66:	aa 1f       	adc	r26, r26
 d68:	64 9f       	mul	r22, r20
 d6a:	66 27       	eor	r22, r22
 d6c:	b0 0d       	add	r27, r0
 d6e:	a1 1d       	adc	r26, r1
 d70:	66 1f       	adc	r22, r22
 d72:	82 9f       	mul	r24, r18
 d74:	22 27       	eor	r18, r18
 d76:	b0 0d       	add	r27, r0
 d78:	a1 1d       	adc	r26, r1
 d7a:	62 1f       	adc	r22, r18
 d7c:	73 9f       	mul	r23, r19
 d7e:	b0 0d       	add	r27, r0
 d80:	a1 1d       	adc	r26, r1
 d82:	62 1f       	adc	r22, r18
 d84:	83 9f       	mul	r24, r19
 d86:	a0 0d       	add	r26, r0
 d88:	61 1d       	adc	r22, r1
 d8a:	22 1f       	adc	r18, r18
 d8c:	74 9f       	mul	r23, r20
 d8e:	33 27       	eor	r19, r19
 d90:	a0 0d       	add	r26, r0
 d92:	61 1d       	adc	r22, r1
 d94:	23 1f       	adc	r18, r19
 d96:	84 9f       	mul	r24, r20
 d98:	60 0d       	add	r22, r0
 d9a:	21 1d       	adc	r18, r1
 d9c:	82 2f       	mov	r24, r18
 d9e:	76 2f       	mov	r23, r22
 da0:	6a 2f       	mov	r22, r26
 da2:	11 24       	eor	r1, r1
 da4:	9f 57       	subi	r25, 0x7F	; 127
 da6:	50 40       	sbci	r21, 0x00	; 0
 da8:	8a f0       	brmi	.+34     	; 0xdcc <__mulsf3_pse+0x84>
 daa:	e1 f0       	breq	.+56     	; 0xde4 <__mulsf3_pse+0x9c>
 dac:	88 23       	and	r24, r24
 dae:	4a f0       	brmi	.+18     	; 0xdc2 <__mulsf3_pse+0x7a>
 db0:	ee 0f       	add	r30, r30
 db2:	ff 1f       	adc	r31, r31
 db4:	bb 1f       	adc	r27, r27
 db6:	66 1f       	adc	r22, r22
 db8:	77 1f       	adc	r23, r23
 dba:	88 1f       	adc	r24, r24
 dbc:	91 50       	subi	r25, 0x01	; 1
 dbe:	50 40       	sbci	r21, 0x00	; 0
 dc0:	a9 f7       	brne	.-22     	; 0xdac <__mulsf3_pse+0x64>
 dc2:	9e 3f       	cpi	r25, 0xFE	; 254
 dc4:	51 05       	cpc	r21, r1
 dc6:	70 f0       	brcs	.+28     	; 0xde4 <__mulsf3_pse+0x9c>
 dc8:	14 c0       	rjmp	.+40     	; 0xdf2 <__fp_inf>
 dca:	aa cf       	rjmp	.-172    	; 0xd20 <__fp_szero>
 dcc:	5f 3f       	cpi	r21, 0xFF	; 255
 dce:	ec f3       	brlt	.-6      	; 0xdca <__mulsf3_pse+0x82>
 dd0:	98 3e       	cpi	r25, 0xE8	; 232
 dd2:	dc f3       	brlt	.-10     	; 0xdca <__mulsf3_pse+0x82>
 dd4:	86 95       	lsr	r24
 dd6:	77 95       	ror	r23
 dd8:	67 95       	ror	r22
 dda:	b7 95       	ror	r27
 ddc:	f7 95       	ror	r31
 dde:	e7 95       	ror	r30
 de0:	9f 5f       	subi	r25, 0xFF	; 255
 de2:	c1 f7       	brne	.-16     	; 0xdd4 <__mulsf3_pse+0x8c>
 de4:	fe 2b       	or	r31, r30
 de6:	88 0f       	add	r24, r24
 de8:	91 1d       	adc	r25, r1
 dea:	96 95       	lsr	r25
 dec:	87 95       	ror	r24
 dee:	97 f9       	bld	r25, 7
 df0:	08 95       	ret

00000df2 <__fp_inf>:
 df2:	97 f9       	bld	r25, 7
 df4:	9f 67       	ori	r25, 0x7F	; 127
 df6:	80 e8       	ldi	r24, 0x80	; 128
 df8:	70 e0       	ldi	r23, 0x00	; 0
 dfa:	60 e0       	ldi	r22, 0x00	; 0
 dfc:	08 95       	ret

00000dfe <__fp_nan>:
 dfe:	9f ef       	ldi	r25, 0xFF	; 255
 e00:	80 ec       	ldi	r24, 0xC0	; 192
 e02:	08 95       	ret

00000e04 <__fp_pscA>:
 e04:	00 24       	eor	r0, r0
 e06:	0a 94       	dec	r0
 e08:	16 16       	cp	r1, r22
 e0a:	17 06       	cpc	r1, r23
 e0c:	18 06       	cpc	r1, r24
 e0e:	09 06       	cpc	r0, r25
 e10:	08 95       	ret

00000e12 <__fp_pscB>:
 e12:	00 24       	eor	r0, r0
 e14:	0a 94       	dec	r0
 e16:	12 16       	cp	r1, r18
 e18:	13 06       	cpc	r1, r19
 e1a:	14 06       	cpc	r1, r20
 e1c:	05 06       	cpc	r0, r21
 e1e:	08 95       	ret

00000e20 <__fp_round>:
 e20:	09 2e       	mov	r0, r25
 e22:	03 94       	inc	r0
 e24:	00 0c       	add	r0, r0
 e26:	11 f4       	brne	.+4      	; 0xe2c <__fp_round+0xc>
 e28:	88 23       	and	r24, r24
 e2a:	52 f0       	brmi	.+20     	; 0xe40 <__fp_round+0x20>
 e2c:	bb 0f       	add	r27, r27
 e2e:	40 f4       	brcc	.+16     	; 0xe40 <__fp_round+0x20>
 e30:	bf 2b       	or	r27, r31
 e32:	11 f4       	brne	.+4      	; 0xe38 <__fp_round+0x18>
 e34:	60 ff       	sbrs	r22, 0
 e36:	04 c0       	rjmp	.+8      	; 0xe40 <__fp_round+0x20>
 e38:	6f 5f       	subi	r22, 0xFF	; 255
 e3a:	7f 4f       	sbci	r23, 0xFF	; 255
 e3c:	8f 4f       	sbci	r24, 0xFF	; 255
 e3e:	9f 4f       	sbci	r25, 0xFF	; 255
 e40:	08 95       	ret

00000e42 <__divmodhi4>:
 e42:	97 fb       	bst	r25, 7
 e44:	07 2e       	mov	r0, r23
 e46:	16 f4       	brtc	.+4      	; 0xe4c <__divmodhi4+0xa>
 e48:	00 94       	com	r0
 e4a:	06 d0       	rcall	.+12     	; 0xe58 <__divmodhi4_neg1>
 e4c:	77 fd       	sbrc	r23, 7
 e4e:	08 d0       	rcall	.+16     	; 0xe60 <__divmodhi4_neg2>
 e50:	37 d0       	rcall	.+110    	; 0xec0 <__udivmodhi4>
 e52:	07 fc       	sbrc	r0, 7
 e54:	05 d0       	rcall	.+10     	; 0xe60 <__divmodhi4_neg2>
 e56:	3e f4       	brtc	.+14     	; 0xe66 <__divmodhi4_exit>

00000e58 <__divmodhi4_neg1>:
 e58:	90 95       	com	r25
 e5a:	81 95       	neg	r24
 e5c:	9f 4f       	sbci	r25, 0xFF	; 255
 e5e:	08 95       	ret

00000e60 <__divmodhi4_neg2>:
 e60:	70 95       	com	r23
 e62:	61 95       	neg	r22
 e64:	7f 4f       	sbci	r23, 0xFF	; 255

00000e66 <__divmodhi4_exit>:
 e66:	08 95       	ret

00000e68 <__udivmodsi4>:
 e68:	a1 e2       	ldi	r26, 0x21	; 33
 e6a:	1a 2e       	mov	r1, r26
 e6c:	aa 1b       	sub	r26, r26
 e6e:	bb 1b       	sub	r27, r27
 e70:	fd 01       	movw	r30, r26
 e72:	0d c0       	rjmp	.+26     	; 0xe8e <__udivmodsi4_ep>

00000e74 <__udivmodsi4_loop>:
 e74:	aa 1f       	adc	r26, r26
 e76:	bb 1f       	adc	r27, r27
 e78:	ee 1f       	adc	r30, r30
 e7a:	ff 1f       	adc	r31, r31
 e7c:	a2 17       	cp	r26, r18
 e7e:	b3 07       	cpc	r27, r19
 e80:	e4 07       	cpc	r30, r20
 e82:	f5 07       	cpc	r31, r21
 e84:	20 f0       	brcs	.+8      	; 0xe8e <__udivmodsi4_ep>
 e86:	a2 1b       	sub	r26, r18
 e88:	b3 0b       	sbc	r27, r19
 e8a:	e4 0b       	sbc	r30, r20
 e8c:	f5 0b       	sbc	r31, r21

00000e8e <__udivmodsi4_ep>:
 e8e:	66 1f       	adc	r22, r22
 e90:	77 1f       	adc	r23, r23
 e92:	88 1f       	adc	r24, r24
 e94:	99 1f       	adc	r25, r25
 e96:	1a 94       	dec	r1
 e98:	69 f7       	brne	.-38     	; 0xe74 <__udivmodsi4_loop>
 e9a:	60 95       	com	r22
 e9c:	70 95       	com	r23
 e9e:	80 95       	com	r24
 ea0:	90 95       	com	r25
 ea2:	9b 01       	movw	r18, r22
 ea4:	ac 01       	movw	r20, r24
 ea6:	bd 01       	movw	r22, r26
 ea8:	cf 01       	movw	r24, r30
 eaa:	08 95       	ret

00000eac <__muluhisi3>:
 eac:	1d d0       	rcall	.+58     	; 0xee8 <__umulhisi3>
 eae:	a5 9f       	mul	r26, r21
 eb0:	90 0d       	add	r25, r0
 eb2:	b4 9f       	mul	r27, r20
 eb4:	90 0d       	add	r25, r0
 eb6:	a4 9f       	mul	r26, r20
 eb8:	80 0d       	add	r24, r0
 eba:	91 1d       	adc	r25, r1
 ebc:	11 24       	eor	r1, r1
 ebe:	08 95       	ret

00000ec0 <__udivmodhi4>:
 ec0:	aa 1b       	sub	r26, r26
 ec2:	bb 1b       	sub	r27, r27
 ec4:	51 e1       	ldi	r21, 0x11	; 17
 ec6:	07 c0       	rjmp	.+14     	; 0xed6 <__udivmodhi4_ep>

00000ec8 <__udivmodhi4_loop>:
 ec8:	aa 1f       	adc	r26, r26
 eca:	bb 1f       	adc	r27, r27
 ecc:	a6 17       	cp	r26, r22
 ece:	b7 07       	cpc	r27, r23
 ed0:	10 f0       	brcs	.+4      	; 0xed6 <__udivmodhi4_ep>
 ed2:	a6 1b       	sub	r26, r22
 ed4:	b7 0b       	sbc	r27, r23

00000ed6 <__udivmodhi4_ep>:
 ed6:	88 1f       	adc	r24, r24
 ed8:	99 1f       	adc	r25, r25
 eda:	5a 95       	dec	r21
 edc:	a9 f7       	brne	.-22     	; 0xec8 <__udivmodhi4_loop>
 ede:	80 95       	com	r24
 ee0:	90 95       	com	r25
 ee2:	bc 01       	movw	r22, r24
 ee4:	cd 01       	movw	r24, r26
 ee6:	08 95       	ret

00000ee8 <__umulhisi3>:
 ee8:	a2 9f       	mul	r26, r18
 eea:	b0 01       	movw	r22, r0
 eec:	b3 9f       	mul	r27, r19
 eee:	c0 01       	movw	r24, r0
 ef0:	a3 9f       	mul	r26, r19
 ef2:	70 0d       	add	r23, r0
 ef4:	81 1d       	adc	r24, r1
 ef6:	11 24       	eor	r1, r1
 ef8:	91 1d       	adc	r25, r1
 efa:	b2 9f       	mul	r27, r18
 efc:	70 0d       	add	r23, r0
 efe:	81 1d       	adc	r24, r1
 f00:	11 24       	eor	r1, r1
 f02:	91 1d       	adc	r25, r1
 f04:	08 95       	ret

00000f06 <_exit>:
 f06:	f8 94       	cli

00000f08 <__stop_program>:
 f08:	ff cf       	rjmp	.-2      	; 0xf08 <__stop_program>
