
TK2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800200  00000b14  00000ba8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b14  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002a  00800202  00800202  00000baa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000baa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bdc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001dfa  00000000  00000000  00000cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010aa  00000000  00000000  00002abe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ac0  00000000  00000000  00003b68  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000017c  00000000  00000000  00004628  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000082d  00000000  00000000  000047a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f32  00000000  00000000  00004fd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00005f03  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	f1 c0       	rjmp	.+482    	; 0x1e4 <__ctors_end>
   2:	00 00       	nop
   4:	0e c1       	rjmp	.+540    	; 0x222 <__bad_interrupt>
   6:	00 00       	nop
   8:	0c c1       	rjmp	.+536    	; 0x222 <__bad_interrupt>
   a:	00 00       	nop
   c:	0a c1       	rjmp	.+532    	; 0x222 <__bad_interrupt>
   e:	00 00       	nop
  10:	08 c1       	rjmp	.+528    	; 0x222 <__bad_interrupt>
  12:	00 00       	nop
  14:	06 c1       	rjmp	.+524    	; 0x222 <__bad_interrupt>
  16:	00 00       	nop
  18:	04 c1       	rjmp	.+520    	; 0x222 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	02 c1       	rjmp	.+516    	; 0x222 <__bad_interrupt>
  1e:	00 00       	nop
  20:	00 c1       	rjmp	.+512    	; 0x222 <__bad_interrupt>
  22:	00 00       	nop
  24:	fe c0       	rjmp	.+508    	; 0x222 <__bad_interrupt>
  26:	00 00       	nop
  28:	fc c0       	rjmp	.+504    	; 0x222 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	fa c0       	rjmp	.+500    	; 0x222 <__bad_interrupt>
  2e:	00 00       	nop
  30:	f8 c0       	rjmp	.+496    	; 0x222 <__bad_interrupt>
  32:	00 00       	nop
  34:	f6 c0       	rjmp	.+492    	; 0x222 <__bad_interrupt>
  36:	00 00       	nop
  38:	f4 c0       	rjmp	.+488    	; 0x222 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	f2 c0       	rjmp	.+484    	; 0x222 <__bad_interrupt>
  3e:	00 00       	nop
  40:	f0 c0       	rjmp	.+480    	; 0x222 <__bad_interrupt>
  42:	00 00       	nop
  44:	ee c0       	rjmp	.+476    	; 0x222 <__bad_interrupt>
  46:	00 00       	nop
  48:	ec c0       	rjmp	.+472    	; 0x222 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	ea c0       	rjmp	.+468    	; 0x222 <__bad_interrupt>
  4e:	00 00       	nop
  50:	e8 c0       	rjmp	.+464    	; 0x222 <__bad_interrupt>
  52:	00 00       	nop
  54:	e6 c0       	rjmp	.+460    	; 0x222 <__bad_interrupt>
  56:	00 00       	nop
  58:	e4 c0       	rjmp	.+456    	; 0x222 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	e2 c0       	rjmp	.+452    	; 0x222 <__bad_interrupt>
  5e:	00 00       	nop
  60:	e0 c0       	rjmp	.+448    	; 0x222 <__bad_interrupt>
  62:	00 00       	nop
  64:	de c0       	rjmp	.+444    	; 0x222 <__bad_interrupt>
  66:	00 00       	nop
  68:	dc c0       	rjmp	.+440    	; 0x222 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	da c0       	rjmp	.+436    	; 0x222 <__bad_interrupt>
  6e:	00 00       	nop
  70:	d8 c0       	rjmp	.+432    	; 0x222 <__bad_interrupt>
  72:	00 00       	nop
  74:	d6 c0       	rjmp	.+428    	; 0x222 <__bad_interrupt>
  76:	00 00       	nop
  78:	d4 c0       	rjmp	.+424    	; 0x222 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	d2 c0       	rjmp	.+420    	; 0x222 <__bad_interrupt>
  7e:	00 00       	nop
  80:	83 c4       	rjmp	.+2310   	; 0x988 <__vector_32>
  82:	00 00       	nop
  84:	ce c0       	rjmp	.+412    	; 0x222 <__bad_interrupt>
  86:	00 00       	nop
  88:	cc c0       	rjmp	.+408    	; 0x222 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	ca c0       	rjmp	.+404    	; 0x222 <__bad_interrupt>
  8e:	00 00       	nop
  90:	c8 c0       	rjmp	.+400    	; 0x222 <__bad_interrupt>
  92:	00 00       	nop
  94:	c6 c0       	rjmp	.+396    	; 0x222 <__bad_interrupt>
  96:	00 00       	nop
  98:	c4 c0       	rjmp	.+392    	; 0x222 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	c2 c0       	rjmp	.+388    	; 0x222 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	c0 c0       	rjmp	.+384    	; 0x222 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	be c0       	rjmp	.+380    	; 0x222 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	bc c0       	rjmp	.+376    	; 0x222 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	ba c0       	rjmp	.+372    	; 0x222 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	b8 c0       	rjmp	.+368    	; 0x222 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	b6 c0       	rjmp	.+364    	; 0x222 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	b4 c0       	rjmp	.+360    	; 0x222 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	b2 c0       	rjmp	.+356    	; 0x222 <__bad_interrupt>
  be:	00 00       	nop
  c0:	b0 c0       	rjmp	.+352    	; 0x222 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	ae c0       	rjmp	.+348    	; 0x222 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	ac c0       	rjmp	.+344    	; 0x222 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	aa c0       	rjmp	.+340    	; 0x222 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	a8 c0       	rjmp	.+336    	; 0x222 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	a6 c0       	rjmp	.+332    	; 0x222 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	a4 c0       	rjmp	.+328    	; 0x222 <__bad_interrupt>
  da:	00 00       	nop
  dc:	a2 c0       	rjmp	.+324    	; 0x222 <__bad_interrupt>
  de:	00 00       	nop
  e0:	a0 c0       	rjmp	.+320    	; 0x222 <__bad_interrupt>
	...

000000e4 <__trampolines_end>:
  e4:	00 20       	and	r0, r0
  e6:	01 02       	muls	r16, r17
  e8:	04 08       	sbc	r0, r4
  ea:	10 20       	and	r1, r0
  ec:	40 80       	ld	r4, Z
  ee:	00 00       	nop
  f0:	01 02       	muls	r16, r17
  f2:	04 08       	sbc	r0, r4
  f4:	10 20       	and	r1, r0
  f6:	40 01       	movw	r8, r0
  f8:	02 04       	cpc	r0, r2
  fa:	08 10       	cpse	r0, r8
  fc:	20 40       	sbci	r18, 0x00	; 0
  fe:	80 80       	ld	r8, Z
 100:	08 10       	cpse	r0, r8
 102:	00 00       	nop
 104:	00 00       	nop
 106:	00 01       	movw	r0, r0
 108:	02 04       	cpc	r0, r2
 10a:	08 10       	cpse	r0, r8
 10c:	20 40       	sbci	r18, 0x00	; 0
 10e:	80 01       	movw	r16, r0
 110:	02 04       	cpc	r0, r2
 112:	08 10       	cpse	r0, r8
 114:	20 40       	sbci	r18, 0x00	; 0
 116:	80 01       	movw	r16, r0
 118:	02 01       	movw	r0, r4
 11a:	02 04       	cpc	r0, r2
 11c:	08 10       	cpse	r0, r8
 11e:	20 40       	sbci	r18, 0x00	; 0
 120:	80 00       	.word	0x0080	; ????
 122:	00 01       	movw	r0, r0
 124:	02 04       	cpc	r0, r2
 126:	08 10       	cpse	r0, r8
 128:	20 40       	sbci	r18, 0x00	; 0
 12a:	04 80       	ldd	r0, Z+4	; 0x04
 12c:	40 20       	and	r4, r0
 12e:	10 08       	sbc	r1, r0
 130:	04 02       	muls	r16, r20
 132:	01 80       	ldd	r0, Z+1	; 0x01
 134:	00 00       	nop
 136:	80 40       	sbci	r24, 0x00	; 0
 138:	20 10       	cpse	r2, r0
 13a:	08 04       	cpc	r0, r8
 13c:	02 01       	movw	r0, r4
 13e:	80 40       	sbci	r24, 0x00	; 0
 140:	20 10       	cpse	r2, r0
 142:	08 04       	cpc	r0, r8
 144:	02 01       	movw	r0, r4
 146:	00 00       	nop
	...

00000149 <pin_to_port_PGM>:
 149:	00 07 05 05 05 05 05 05 05 05 00 00 08 08 08 08     ................
 159:	08 08 08 02 02 02 02 02 02 02 02 08 07 07 00 00     ................
 169:	00 00 00 0c 0c 0c 0c 0c 0c 0c 0c 04 04 04 04 04     ................
 179:	04 04 04 07 07 03 03 03 03 03 03 03 03 00 00 0a     ................
 189:	0a 0a 0a 0a 0a 0a 07 01 01 01 01 01 01 01 01 0a     ................
 199:	00 00 0b 0b 0b 0b 0b 0b 0b 0b 06 06 06 06 06 06     ................
 1a9:	06 06 00 00 00                                      .....

000001ae <port_to_output_PGM>:
 1ae:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
 1be:	02 01 00 00 05 01 08 01 0b 01                       ..........

000001c8 <port_to_ddr_PGM>:
 1c8:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
 1d8:	01 01 00 00 04 01 07 01 0a 01                       ..........

000001e2 <tone_pin_to_timer_PGM>:
 1e2:	03 00                                               ..

000001e4 <__ctors_end>:
 1e4:	11 24       	eor	r1, r1
 1e6:	1f be       	out	0x3f, r1	; 63
 1e8:	cf ef       	ldi	r28, 0xFF	; 255
 1ea:	d1 e2       	ldi	r29, 0x21	; 33
 1ec:	de bf       	out	0x3e, r29	; 62
 1ee:	cd bf       	out	0x3d, r28	; 61
 1f0:	00 e0       	ldi	r16, 0x00	; 0
 1f2:	0c bf       	out	0x3c, r16	; 60

000001f4 <__do_copy_data>:
 1f4:	12 e0       	ldi	r17, 0x02	; 2
 1f6:	a0 e0       	ldi	r26, 0x00	; 0
 1f8:	b2 e0       	ldi	r27, 0x02	; 2
 1fa:	e4 e1       	ldi	r30, 0x14	; 20
 1fc:	fb e0       	ldi	r31, 0x0B	; 11
 1fe:	00 e0       	ldi	r16, 0x00	; 0
 200:	0b bf       	out	0x3b, r16	; 59
 202:	02 c0       	rjmp	.+4      	; 0x208 <__do_copy_data+0x14>
 204:	07 90       	elpm	r0, Z+
 206:	0d 92       	st	X+, r0
 208:	a2 30       	cpi	r26, 0x02	; 2
 20a:	b1 07       	cpc	r27, r17
 20c:	d9 f7       	brne	.-10     	; 0x204 <__do_copy_data+0x10>

0000020e <__do_clear_bss>:
 20e:	22 e0       	ldi	r18, 0x02	; 2
 210:	a2 e0       	ldi	r26, 0x02	; 2
 212:	b2 e0       	ldi	r27, 0x02	; 2
 214:	01 c0       	rjmp	.+2      	; 0x218 <.do_clear_bss_start>

00000216 <.do_clear_bss_loop>:
 216:	1d 92       	st	X+, r1

00000218 <.do_clear_bss_start>:
 218:	ac 32       	cpi	r26, 0x2C	; 44
 21a:	b2 07       	cpc	r27, r18
 21c:	e1 f7       	brne	.-8      	; 0x216 <.do_clear_bss_loop>
 21e:	1c d4       	rcall	.+2104   	; 0xa58 <main>
 220:	77 c4       	rjmp	.+2286   	; 0xb10 <_exit>

00000222 <__bad_interrupt>:
 222:	ee ce       	rjmp	.-548    	; 0x0 <__vectors>

00000224 <pinMode>:
 */ 
#include "gpio.h"


void pinMode(uint8_t pin, uint8_t mode)
{
 224:	cf 93       	push	r28
 226:	df 93       	push	r29
	uint8_t bit = pinToBitMask(pin);
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	fc 01       	movw	r30, r24
 22c:	ec 51       	subi	r30, 0x1C	; 28
 22e:	ff 4f       	sbci	r31, 0xFF	; 255
 230:	24 91       	lpm	r18, Z
	uint8_t port = pinToPort(pin);
 232:	fc 01       	movw	r30, r24
 234:	e7 5b       	subi	r30, 0xB7	; 183
 236:	fe 4f       	sbci	r31, 0xFE	; 254
 238:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;
	
	if (port == NOT_A_PIN) return;
 23a:	88 23       	and	r24, r24
 23c:	79 f1       	breq	.+94     	; 0x29c <pinMode+0x78>
	
	reg = portDDRRegister(port);
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	88 0f       	add	r24, r24
 242:	99 1f       	adc	r25, r25
 244:	fc 01       	movw	r30, r24
 246:	e8 53       	subi	r30, 0x38	; 56
 248:	fe 4f       	sbci	r31, 0xFE	; 254
 24a:	a5 91       	lpm	r26, Z+
 24c:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
 24e:	fc 01       	movw	r30, r24
 250:	e2 55       	subi	r30, 0x52	; 82
 252:	fe 4f       	sbci	r31, 0xFE	; 254
 254:	c5 91       	lpm	r28, Z+
 256:	d4 91       	lpm	r29, Z
	
	if (mode == INPUT)
 258:	61 11       	cpse	r22, r1
 25a:	0c c0       	rjmp	.+24     	; 0x274 <pinMode+0x50>
	{
		uint8_t oldSREG = SREG;
 25c:	9f b7       	in	r25, 0x3f	; 63
		cli();
 25e:	f8 94       	cli
		*reg &= ~bit;
 260:	8c 91       	ld	r24, X
 262:	e2 2f       	mov	r30, r18
 264:	e0 95       	com	r30
 266:	8e 23       	and	r24, r30
 268:	8c 93       	st	X, r24
		*out &= ~bit;
 26a:	28 81       	ld	r18, Y
 26c:	e2 23       	and	r30, r18
 26e:	e8 83       	st	Y, r30
		SREG = oldSREG;
 270:	9f bf       	out	0x3f, r25	; 63
 272:	14 c0       	rjmp	.+40     	; 0x29c <pinMode+0x78>
	}else if(mode == INPUT_PULLUP)
 274:	62 30       	cpi	r22, 0x02	; 2
 276:	61 f4       	brne	.+24     	; 0x290 <pinMode+0x6c>
	{
		uint8_t oldSREG = SREG;
 278:	9f b7       	in	r25, 0x3f	; 63
		cli();
 27a:	f8 94       	cli
		*reg &= ~bit;
 27c:	8c 91       	ld	r24, X
 27e:	32 2f       	mov	r19, r18
 280:	30 95       	com	r19
 282:	83 23       	and	r24, r19
 284:	8c 93       	st	X, r24
		*out |= bit;
 286:	e8 81       	ld	r30, Y
 288:	e2 2b       	or	r30, r18
 28a:	e8 83       	st	Y, r30
		SREG = oldSREG;
 28c:	9f bf       	out	0x3f, r25	; 63
 28e:	06 c0       	rjmp	.+12     	; 0x29c <pinMode+0x78>
	}else{
		//output
		uint8_t oldSREG = SREG;
 290:	8f b7       	in	r24, 0x3f	; 63
		cli();
 292:	f8 94       	cli
		*reg |= bit;
 294:	ec 91       	ld	r30, X
 296:	e2 2b       	or	r30, r18
 298:	ec 93       	st	X, r30
		SREG = oldSREG;
 29a:	8f bf       	out	0x3f, r24	; 63
	}
		
}
 29c:	df 91       	pop	r29
 29e:	cf 91       	pop	r28
 2a0:	08 95       	ret

000002a2 <digitalWrite>:

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t bit = pinToBitMask(pin);
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	fc 01       	movw	r30, r24
 2a6:	ec 51       	subi	r30, 0x1C	; 28
 2a8:	ff 4f       	sbci	r31, 0xFF	; 255
 2aa:	24 91       	lpm	r18, Z
	uint8_t port = pinToPort(pin);
 2ac:	fc 01       	movw	r30, r24
 2ae:	e7 5b       	subi	r30, 0xB7	; 183
 2b0:	fe 4f       	sbci	r31, 0xFE	; 254
 2b2:	84 91       	lpm	r24, Z
	volatile uint8_t *out;
	
	if (port == NOT_A_PIN) return;
 2b4:	88 23       	and	r24, r24
 2b6:	b1 f0       	breq	.+44     	; 0x2e4 <digitalWrite+0x42>
	
	out = portOutputRegister(port);
 2b8:	e8 2f       	mov	r30, r24
 2ba:	f0 e0       	ldi	r31, 0x00	; 0
 2bc:	ee 0f       	add	r30, r30
 2be:	ff 1f       	adc	r31, r31
 2c0:	e2 55       	subi	r30, 0x52	; 82
 2c2:	fe 4f       	sbci	r31, 0xFE	; 254
 2c4:	a5 91       	lpm	r26, Z+
 2c6:	b4 91       	lpm	r27, Z
	
	uint8_t oldSREG = SREG;
 2c8:	8f b7       	in	r24, 0x3f	; 63
	cli();
 2ca:	f8 94       	cli
	
	if (val == LOW) {
 2cc:	61 11       	cpse	r22, r1
 2ce:	06 c0       	rjmp	.+12     	; 0x2dc <digitalWrite+0x3a>
		*out &= ~bit;
 2d0:	9c 91       	ld	r25, X
 2d2:	e2 2f       	mov	r30, r18
 2d4:	e0 95       	com	r30
 2d6:	e9 23       	and	r30, r25
 2d8:	ec 93       	st	X, r30
 2da:	03 c0       	rjmp	.+6      	; 0x2e2 <digitalWrite+0x40>
	} else {
		*out |= bit;
 2dc:	ec 91       	ld	r30, X
 2de:	e2 2b       	or	r30, r18
 2e0:	ec 93       	st	X, r30
	}
	
	SREG = oldSREG;
 2e2:	8f bf       	out	0x3f, r24	; 63
 2e4:	08 95       	ret

000002e6 <tone>:
}


//Generate frequency (in hertz) and duration (in milliseconds)
void tone(uint8_t _pin, unsigned int frequency, unsigned long duration)
{
 2e6:	4f 92       	push	r4
 2e8:	5f 92       	push	r5
 2ea:	6f 92       	push	r6
 2ec:	7f 92       	push	r7
 2ee:	8f 92       	push	r8
 2f0:	9f 92       	push	r9
 2f2:	af 92       	push	r10
 2f4:	bf 92       	push	r11
 2f6:	cf 92       	push	r12
 2f8:	df 92       	push	r13
 2fa:	ef 92       	push	r14
 2fc:	ff 92       	push	r15
 2fe:	1f 93       	push	r17
 300:	cf 93       	push	r28
 302:	df 93       	push	r29
 304:	00 d0       	rcall	.+0      	; 0x306 <tone+0x20>
 306:	00 d0       	rcall	.+0      	; 0x308 <tone+0x22>
 308:	cd b7       	in	r28, 0x3d	; 61
 30a:	de b7       	in	r29, 0x3e	; 62
 30c:	7e 83       	std	Y+6, r23	; 0x06
 30e:	6d 83       	std	Y+5, r22	; 0x05
 310:	49 01       	movw	r8, r18
 312:	5a 01       	movw	r10, r20
{
	int8_t _timer = -1;
	
	// if we're already using the pin, the timer should be configured.
	for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
		if (tone_pins[i] == _pin) {
 314:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 318:	89 13       	cpse	r24, r25
 31a:	92 c2       	rjmp	.+1316   	; 0x840 <__LOCK_REGION_LENGTH__+0x440>
			return pgm_read_byte(tone_pin_to_timer_PGM + i);
 31c:	e2 ee       	ldi	r30, 0xE2	; 226
 31e:	f1 e0       	ldi	r31, 0x01	; 1
 320:	14 91       	lpm	r17, Z
 322:	f0 c0       	rjmp	.+480    	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
	}
	  
	// search for an unused timer.
	for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
		if (tone_pins[i] == 255) {
			tone_pins[i] = _pin;
 324:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
			_timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
 328:	e2 ee       	ldi	r30, 0xE2	; 226
 32a:	f1 e0       	ldi	r31, 0x01	; 1
 32c:	14 91       	lpm	r17, Z
			break;
		}
	}
	
	//Found timer
	if (_timer != -1)
 32e:	1f 3f       	cpi	r17, 0xFF	; 255
 330:	09 f4       	brne	.+2      	; 0x334 <tone+0x4e>
 332:	c6 c2       	rjmp	.+1420   	; 0x8c0 <__LOCK_REGION_LENGTH__+0x4c0>
	{
		// Set timer specific stuff
		// All timers in CTC mode
		// 8 bit timers will require changing prescalar values,
		// whereas 16 bit timers are set to either ck/1 or ck/64 prescalar
		switch(_timer)
 334:	12 30       	cpi	r17, 0x02	; 2
 336:	09 f4       	brne	.+2      	; 0x33a <tone+0x54>
 338:	54 c0       	rjmp	.+168    	; 0x3e2 <tone+0xfc>
 33a:	28 f4       	brcc	.+10     	; 0x346 <tone+0x60>
 33c:	11 23       	and	r17, r17
 33e:	61 f0       	breq	.+24     	; 0x358 <tone+0x72>
 340:	11 30       	cpi	r17, 0x01	; 1
 342:	59 f1       	breq	.+86     	; 0x39a <tone+0xb4>
 344:	df c0       	rjmp	.+446    	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
 346:	14 30       	cpi	r17, 0x04	; 4
 348:	09 f4       	brne	.+2      	; 0x34c <tone+0x66>
 34a:	94 c0       	rjmp	.+296    	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 34c:	08 f4       	brcc	.+2      	; 0x350 <tone+0x6a>
 34e:	6e c0       	rjmp	.+220    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 350:	15 30       	cpi	r17, 0x05	; 5
 352:	09 f4       	brne	.+2      	; 0x356 <tone+0x70>
 354:	b3 c0       	rjmp	.+358    	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
 356:	d6 c0       	rjmp	.+428    	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
		{
			//TIMER 0 - 8 bit timer
			case 0:
				TCCR0A = 0;
 358:	14 bc       	out	0x24, r1	; 36
				TCCR0B = 0;
 35a:	15 bc       	out	0x25, r1	; 37
				bitWrite(TCCR0A, WGM01, 1); // set CTC mode
 35c:	94 b5       	in	r25, 0x24	; 36
 35e:	92 60       	ori	r25, 0x02	; 2
 360:	94 bd       	out	0x24, r25	; 36
				bitWrite(TCCR0B, CS00, 1);  // No prescaling
 362:	95 b5       	in	r25, 0x25	; 37
 364:	91 60       	ori	r25, 0x01	; 1
 366:	95 bd       	out	0x25, r25	; 37
				timer0_pin_port = portOutputRegister(pinToPort(_pin));
 368:	28 2f       	mov	r18, r24
 36a:	30 e0       	ldi	r19, 0x00	; 0
 36c:	f9 01       	movw	r30, r18
 36e:	e7 5b       	subi	r30, 0xB7	; 183
 370:	fe 4f       	sbci	r31, 0xFE	; 254
 372:	e4 91       	lpm	r30, Z
 374:	f0 e0       	ldi	r31, 0x00	; 0
 376:	ee 0f       	add	r30, r30
 378:	ff 1f       	adc	r31, r31
 37a:	e2 55       	subi	r30, 0x52	; 82
 37c:	fe 4f       	sbci	r31, 0xFE	; 254
 37e:	45 91       	lpm	r20, Z+
 380:	54 91       	lpm	r21, Z
 382:	50 93 1b 02 	sts	0x021B, r21	; 0x80021b <timer0_pin_port+0x1>
 386:	40 93 1a 02 	sts	0x021A, r20	; 0x80021a <timer0_pin_port>
				timer0_pin_mask = pinToBitMask(_pin);
 38a:	f9 01       	movw	r30, r18
 38c:	ec 51       	subi	r30, 0x1C	; 28
 38e:	ff 4f       	sbci	r31, 0xFF	; 255
 390:	24 91       	lpm	r18, Z
 392:	20 93 02 02 	sts	0x0202, r18	; 0x800202 <__data_end>
				timer5_pin_mask = pinToBitMask(_pin);
			break;
		}
	}
	
	return _timer;	
 396:	10 e0       	ldi	r17, 0x00	; 0
 398:	90 c2       	rjmp	.+1312   	; 0x8ba <__LOCK_REGION_LENGTH__+0x4ba>
				timer0_pin_port = portOutputRegister(pinToPort(_pin));
				timer0_pin_mask = pinToBitMask(_pin);
			break;			
			//TIMER 1 - 16 bit timer
			case 1:
				TCCR1A = 0;
 39a:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
				TCCR1B = 0;
 39e:	e1 e8       	ldi	r30, 0x81	; 129
 3a0:	f0 e0       	ldi	r31, 0x00	; 0
 3a2:	10 82       	st	Z, r1
				bitWrite(TCCR1B, WGM12, 1); // Set CTC mode
 3a4:	90 81       	ld	r25, Z
 3a6:	98 60       	ori	r25, 0x08	; 8
 3a8:	90 83       	st	Z, r25
				bitWrite(TCCR1B, CS10, 1) ; // No prescaling
 3aa:	90 81       	ld	r25, Z
 3ac:	91 60       	ori	r25, 0x01	; 1
 3ae:	90 83       	st	Z, r25
				timer1_pin_port = portOutputRegister(pinToPort(_pin));
 3b0:	28 2f       	mov	r18, r24
 3b2:	30 e0       	ldi	r19, 0x00	; 0
 3b4:	f9 01       	movw	r30, r18
 3b6:	e7 5b       	subi	r30, 0xB7	; 183
 3b8:	fe 4f       	sbci	r31, 0xFE	; 254
 3ba:	e4 91       	lpm	r30, Z
 3bc:	f0 e0       	ldi	r31, 0x00	; 0
 3be:	ee 0f       	add	r30, r30
 3c0:	ff 1f       	adc	r31, r31
 3c2:	e2 55       	subi	r30, 0x52	; 82
 3c4:	fe 4f       	sbci	r31, 0xFE	; 254
 3c6:	45 91       	lpm	r20, Z+
 3c8:	54 91       	lpm	r21, Z
 3ca:	50 93 22 02 	sts	0x0222, r21	; 0x800222 <timer1_pin_port+0x1>
 3ce:	40 93 21 02 	sts	0x0221, r20	; 0x800221 <timer1_pin_port>
				timer1_pin_mask = pinToBitMask(_pin);
 3d2:	f9 01       	movw	r30, r18
 3d4:	ec 51       	subi	r30, 0x1C	; 28
 3d6:	ff 4f       	sbci	r31, 0xFF	; 255
 3d8:	24 91       	lpm	r18, Z
 3da:	20 93 20 02 	sts	0x0220, r18	; 0x800220 <timer1_pin_mask>
				timer5_pin_mask = pinToBitMask(_pin);
			break;
		}
	}
	
	return _timer;	
 3de:	11 e0       	ldi	r17, 0x01	; 1
 3e0:	69 c2       	rjmp	.+1234   	; 0x8b4 <__LOCK_REGION_LENGTH__+0x4b4>
				timer1_pin_port = portOutputRegister(pinToPort(_pin));
				timer1_pin_mask = pinToBitMask(_pin);
			break;			
			//TIMER 2 - 8 bit timer
			case 2:
				TCCR2A = 0;
 3e2:	a0 eb       	ldi	r26, 0xB0	; 176
 3e4:	b0 e0       	ldi	r27, 0x00	; 0
 3e6:	1c 92       	st	X, r1
				TCCR2B = 0;
 3e8:	e1 eb       	ldi	r30, 0xB1	; 177
 3ea:	f0 e0       	ldi	r31, 0x00	; 0
 3ec:	10 82       	st	Z, r1
				bitWrite(TCCR2A, WGM21, 1); //Set CTC mode
 3ee:	9c 91       	ld	r25, X
 3f0:	92 60       	ori	r25, 0x02	; 2
 3f2:	9c 93       	st	X, r25
				bitWrite(TCCR2B, CS20, 1); // No prescaling
 3f4:	90 81       	ld	r25, Z
 3f6:	91 60       	ori	r25, 0x01	; 1
 3f8:	90 83       	st	Z, r25
				timer2_pin_port = portOutputRegister(pinToPort(_pin));
 3fa:	28 2f       	mov	r18, r24
 3fc:	30 e0       	ldi	r19, 0x00	; 0
 3fe:	f9 01       	movw	r30, r18
 400:	e7 5b       	subi	r30, 0xB7	; 183
 402:	fe 4f       	sbci	r31, 0xFE	; 254
 404:	e4 91       	lpm	r30, Z
 406:	f0 e0       	ldi	r31, 0x00	; 0
 408:	ee 0f       	add	r30, r30
 40a:	ff 1f       	adc	r31, r31
 40c:	e2 55       	subi	r30, 0x52	; 82
 40e:	fe 4f       	sbci	r31, 0xFE	; 254
 410:	45 91       	lpm	r20, Z+
 412:	54 91       	lpm	r21, Z
 414:	50 93 09 02 	sts	0x0209, r21	; 0x800209 <timer2_pin_port+0x1>
 418:	40 93 08 02 	sts	0x0208, r20	; 0x800208 <timer2_pin_port>
				timer2_pin_mask = pinToBitMask(_pin);
 41c:	f9 01       	movw	r30, r18
 41e:	ec 51       	subi	r30, 0x1C	; 28
 420:	ff 4f       	sbci	r31, 0xFF	; 255
 422:	24 91       	lpm	r18, Z
 424:	20 93 15 02 	sts	0x0215, r18	; 0x800215 <timer2_pin_mask>
				timer5_pin_mask = pinToBitMask(_pin);
			break;
		}
	}
	
	return _timer;	
 428:	12 e0       	ldi	r17, 0x02	; 2
 42a:	47 c2       	rjmp	.+1166   	; 0x8ba <__LOCK_REGION_LENGTH__+0x4ba>
				timer2_pin_port = portOutputRegister(pinToPort(_pin));
				timer2_pin_mask = pinToBitMask(_pin);
			break;			
			//TIMER 3 - 16 bit timer
			case 3:
				TCCR3A = 0;
 42c:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
				TCCR3B = 0;
 430:	e1 e9       	ldi	r30, 0x91	; 145
 432:	f0 e0       	ldi	r31, 0x00	; 0
 434:	10 82       	st	Z, r1
				bitWrite(TCCR3B, WGM32, 1); //CTC Mode
 436:	90 81       	ld	r25, Z
 438:	98 60       	ori	r25, 0x08	; 8
 43a:	90 83       	st	Z, r25
				bitWrite(TCCR3B, CS30, 1);	//No prescaling
 43c:	90 81       	ld	r25, Z
 43e:	91 60       	ori	r25, 0x01	; 1
 440:	90 83       	st	Z, r25
				timer3_pin_port = portOutputRegister(pinToPort(_pin));
 442:	28 2f       	mov	r18, r24
 444:	30 e0       	ldi	r19, 0x00	; 0
 446:	f9 01       	movw	r30, r18
 448:	e7 5b       	subi	r30, 0xB7	; 183
 44a:	fe 4f       	sbci	r31, 0xFE	; 254
 44c:	e4 91       	lpm	r30, Z
 44e:	f0 e0       	ldi	r31, 0x00	; 0
 450:	ee 0f       	add	r30, r30
 452:	ff 1f       	adc	r31, r31
 454:	e2 55       	subi	r30, 0x52	; 82
 456:	fe 4f       	sbci	r31, 0xFE	; 254
 458:	45 91       	lpm	r20, Z+
 45a:	54 91       	lpm	r21, Z
 45c:	50 93 0c 02 	sts	0x020C, r21	; 0x80020c <timer3_pin_port+0x1>
 460:	40 93 0b 02 	sts	0x020B, r20	; 0x80020b <timer3_pin_port>
				timer3_pin_mask = pinToBitMask(_pin);
 464:	f9 01       	movw	r30, r18
 466:	ec 51       	subi	r30, 0x1C	; 28
 468:	ff 4f       	sbci	r31, 0xFF	; 255
 46a:	24 91       	lpm	r18, Z
 46c:	20 93 03 02 	sts	0x0203, r18	; 0x800203 <timer3_pin_mask>
				timer5_pin_mask = pinToBitMask(_pin);
			break;
		}
	}
	
	return _timer;	
 470:	13 e0       	ldi	r17, 0x03	; 3
 472:	20 c2       	rjmp	.+1088   	; 0x8b4 <__LOCK_REGION_LENGTH__+0x4b4>
				timer3_pin_port = portOutputRegister(pinToPort(_pin));
				timer3_pin_mask = pinToBitMask(_pin);
			break;		
			//TIMER 4 - 16 bit timer
			case 4:
				TCCR4A = 0;
 474:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
				TCCR4B = 0;
 478:	e1 ea       	ldi	r30, 0xA1	; 161
 47a:	f0 e0       	ldi	r31, 0x00	; 0
 47c:	10 82       	st	Z, r1
				bitWrite(TCCR4B, WGM42, 1); //CTC Mode
 47e:	90 81       	ld	r25, Z
 480:	98 60       	ori	r25, 0x08	; 8
 482:	90 83       	st	Z, r25
				bitWrite(TCCR4B, CS40, 1);  //No prescaling
 484:	90 81       	ld	r25, Z
 486:	91 60       	ori	r25, 0x01	; 1
 488:	90 83       	st	Z, r25
				timer4_pin_port = portOutputRegister(pinToPort(_pin));
 48a:	28 2f       	mov	r18, r24
 48c:	30 e0       	ldi	r19, 0x00	; 0
 48e:	f9 01       	movw	r30, r18
 490:	e7 5b       	subi	r30, 0xB7	; 183
 492:	fe 4f       	sbci	r31, 0xFE	; 254
 494:	e4 91       	lpm	r30, Z
 496:	f0 e0       	ldi	r31, 0x00	; 0
 498:	ee 0f       	add	r30, r30
 49a:	ff 1f       	adc	r31, r31
 49c:	e2 55       	subi	r30, 0x52	; 82
 49e:	fe 4f       	sbci	r31, 0xFE	; 254
 4a0:	45 91       	lpm	r20, Z+
 4a2:	54 91       	lpm	r21, Z
 4a4:	50 93 19 02 	sts	0x0219, r21	; 0x800219 <timer4_pin_port+0x1>
 4a8:	40 93 18 02 	sts	0x0218, r20	; 0x800218 <timer4_pin_port>
				timer4_pin_mask = pinToBitMask(_pin);
 4ac:	f9 01       	movw	r30, r18
 4ae:	ec 51       	subi	r30, 0x1C	; 28
 4b0:	ff 4f       	sbci	r31, 0xFF	; 255
 4b2:	24 91       	lpm	r18, Z
 4b4:	20 93 0a 02 	sts	0x020A, r18	; 0x80020a <timer4_pin_mask>
				timer5_pin_mask = pinToBitMask(_pin);
			break;
		}
	}
	
	return _timer;	
 4b8:	14 e0       	ldi	r17, 0x04	; 4
 4ba:	fc c1       	rjmp	.+1016   	; 0x8b4 <__LOCK_REGION_LENGTH__+0x4b4>
				timer4_pin_port = portOutputRegister(pinToPort(_pin));
				timer4_pin_mask = pinToBitMask(_pin);
			break;	
			//TIMER 5 - 16 bit timer
			case 5:
				TCCR5A = 0;
 4bc:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
				TCCR5B = 0;
 4c0:	e1 e2       	ldi	r30, 0x21	; 33
 4c2:	f1 e0       	ldi	r31, 0x01	; 1
 4c4:	10 82       	st	Z, r1
				bitWrite(TCCR5B, WGM52, 1);
 4c6:	90 81       	ld	r25, Z
 4c8:	98 60       	ori	r25, 0x08	; 8
 4ca:	90 83       	st	Z, r25
				bitWrite(TCCR5B, CS50, 1);
 4cc:	90 81       	ld	r25, Z
 4ce:	91 60       	ori	r25, 0x01	; 1
 4d0:	90 83       	st	Z, r25
				timer5_pin_port = portOutputRegister(pinToPort(_pin));
 4d2:	28 2f       	mov	r18, r24
 4d4:	30 e0       	ldi	r19, 0x00	; 0
 4d6:	f9 01       	movw	r30, r18
 4d8:	e7 5b       	subi	r30, 0xB7	; 183
 4da:	fe 4f       	sbci	r31, 0xFE	; 254
 4dc:	e4 91       	lpm	r30, Z
 4de:	f0 e0       	ldi	r31, 0x00	; 0
 4e0:	ee 0f       	add	r30, r30
 4e2:	ff 1f       	adc	r31, r31
 4e4:	e2 55       	subi	r30, 0x52	; 82
 4e6:	fe 4f       	sbci	r31, 0xFE	; 254
 4e8:	45 91       	lpm	r20, Z+
 4ea:	54 91       	lpm	r21, Z
 4ec:	50 93 17 02 	sts	0x0217, r21	; 0x800217 <timer5_pin_port+0x1>
 4f0:	40 93 16 02 	sts	0x0216, r20	; 0x800216 <timer5_pin_port>
				timer5_pin_mask = pinToBitMask(_pin);
 4f4:	f9 01       	movw	r30, r18
 4f6:	ec 51       	subi	r30, 0x1C	; 28
 4f8:	ff 4f       	sbci	r31, 0xFF	; 255
 4fa:	24 91       	lpm	r18, Z
 4fc:	20 93 27 02 	sts	0x0227, r18	; 0x800227 <timer5_pin_mask>
			break;
		}
	}
	
	return _timer;	
 500:	15 e0       	ldi	r17, 0x05	; 5
 502:	d8 c1       	rjmp	.+944    	; 0x8b4 <__LOCK_REGION_LENGTH__+0x4b4>
	uint32_t ocr = 0;
	int8_t _timer;
	
	_timer = toneBegin(_pin);
	
	if (_timer >= 0)
 504:	11 23       	and	r17, r17
 506:	0c f4       	brge	.+2      	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
 508:	db c1       	rjmp	.+950    	; 0x8c0 <__LOCK_REGION_LENGTH__+0x4c0>
	{
		//1. set the pin as OUTPUT
		pinMode(_pin, OUTPUT);
 50a:	61 e0       	ldi	r22, 0x01	; 1
 50c:	8b de       	rcall	.-746    	; 0x224 <pinMode>
		
		//2. if we are using an 8 bit timer, scan through prescalers to find the best fit
		if (_timer == 0 || _timer == 2)
 50e:	81 2f       	mov	r24, r17
 510:	8d 7f       	andi	r24, 0xFD	; 253
 512:	09 f0       	breq	.+2      	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
 514:	98 c0       	rjmp	.+304    	; 0x646 <__LOCK_REGION_LENGTH__+0x246>
		{
			ocr = F_CPU / frequency / 2 - 1;
 516:	ad 81       	ldd	r26, Y+5	; 0x05
 518:	be 81       	ldd	r27, Y+6	; 0x06
 51a:	cd 01       	movw	r24, r26
 51c:	a0 e0       	ldi	r26, 0x00	; 0
 51e:	b0 e0       	ldi	r27, 0x00	; 0
 520:	89 83       	std	Y+1, r24	; 0x01
 522:	9a 83       	std	Y+2, r25	; 0x02
 524:	ab 83       	std	Y+3, r26	; 0x03
 526:	bc 83       	std	Y+4, r27	; 0x04
 528:	60 e2       	ldi	r22, 0x20	; 32
 52a:	71 ea       	ldi	r23, 0xA1	; 161
 52c:	87 e0       	ldi	r24, 0x07	; 7
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	29 81       	ldd	r18, Y+1	; 0x01
 532:	3a 81       	ldd	r19, Y+2	; 0x02
 534:	4b 81       	ldd	r20, Y+3	; 0x03
 536:	5c 81       	ldd	r21, Y+4	; 0x04
 538:	b0 d2       	rcall	.+1376   	; 0xa9a <__udivmodsi4>
 53a:	29 01       	movw	r4, r18
 53c:	3a 01       	movw	r6, r20
 53e:	69 01       	movw	r12, r18
 540:	7a 01       	movw	r14, r20
 542:	b1 e0       	ldi	r27, 0x01	; 1
 544:	cb 1a       	sub	r12, r27
 546:	d1 08       	sbc	r13, r1
 548:	e1 08       	sbc	r14, r1
 54a:	f1 08       	sbc	r15, r1
			prescalarbits = 0b001; // clk/1 prescaler (No prescaling) : For both timers
			
			if (ocr > 255) // above prescaler failed
 54c:	2f ef       	ldi	r18, 0xFF	; 255
 54e:	c2 16       	cp	r12, r18
 550:	d1 04       	cpc	r13, r1
 552:	e1 04       	cpc	r14, r1
 554:	f1 04       	cpc	r15, r1
 556:	09 f0       	breq	.+2      	; 0x55a <__LOCK_REGION_LENGTH__+0x15a>
 558:	08 f4       	brcc	.+2      	; 0x55c <__LOCK_REGION_LENGTH__+0x15c>
 55a:	5a c0       	rjmp	.+180    	; 0x610 <__LOCK_REGION_LENGTH__+0x210>
			{
				ocr = F_CPU / frequency / 2 / 8 - 1;
 55c:	64 e2       	ldi	r22, 0x24	; 36
 55e:	74 ef       	ldi	r23, 0xF4	; 244
 560:	80 e0       	ldi	r24, 0x00	; 0
 562:	90 e0       	ldi	r25, 0x00	; 0
 564:	29 81       	ldd	r18, Y+1	; 0x01
 566:	3a 81       	ldd	r19, Y+2	; 0x02
 568:	4b 81       	ldd	r20, Y+3	; 0x03
 56a:	5c 81       	ldd	r21, Y+4	; 0x04
 56c:	96 d2       	rcall	.+1324   	; 0xa9a <__udivmodsi4>
 56e:	69 01       	movw	r12, r18
 570:	7a 01       	movw	r14, r20
 572:	81 e0       	ldi	r24, 0x01	; 1
 574:	c8 1a       	sub	r12, r24
 576:	d1 08       	sbc	r13, r1
 578:	e1 08       	sbc	r14, r1
 57a:	f1 08       	sbc	r15, r1
				prescalarbits = 0b010; // clk/8 prescaler : For both timers
			}
			
			if(ocr > 255)
 57c:	9f ef       	ldi	r25, 0xFF	; 255
 57e:	c9 16       	cp	r12, r25
 580:	d1 04       	cpc	r13, r1
 582:	e1 04       	cpc	r14, r1
 584:	f1 04       	cpc	r15, r1
 586:	09 f0       	breq	.+2      	; 0x58a <__LOCK_REGION_LENGTH__+0x18a>
 588:	08 f4       	brcc	.+2      	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
 58a:	44 c0       	rjmp	.+136    	; 0x614 <__LOCK_REGION_LENGTH__+0x214>
			{
				ocr = F_CPU / frequency / 2 / 64 - 1;
 58c:	73 01       	movw	r14, r6
 58e:	62 01       	movw	r12, r4
 590:	68 94       	set
 592:	15 f8       	bld	r1, 5
 594:	f6 94       	lsr	r15
 596:	e7 94       	ror	r14
 598:	d7 94       	ror	r13
 59a:	c7 94       	ror	r12
 59c:	16 94       	lsr	r1
 59e:	d1 f7       	brne	.-12     	; 0x594 <__LOCK_REGION_LENGTH__+0x194>
 5a0:	a1 e0       	ldi	r26, 0x01	; 1
 5a2:	ca 1a       	sub	r12, r26
 5a4:	d1 08       	sbc	r13, r1
 5a6:	e1 08       	sbc	r14, r1
 5a8:	f1 08       	sbc	r15, r1
				prescalarbits = _timer == 0 ? 0b011 : 0b100; // clk/32 for timer 1: clk/64 for timer 2
 5aa:	11 23       	and	r17, r17
 5ac:	d1 f0       	breq	.+52     	; 0x5e2 <__LOCK_REGION_LENGTH__+0x1e2>

				if (_timer == 2 && ocr > 255)
 5ae:	12 30       	cpi	r17, 0x02	; 2
 5b0:	d1 f4       	brne	.+52     	; 0x5e6 <__LOCK_REGION_LENGTH__+0x1e6>
 5b2:	bf ef       	ldi	r27, 0xFF	; 255
 5b4:	cb 16       	cp	r12, r27
 5b6:	d1 04       	cpc	r13, r1
 5b8:	e1 04       	cpc	r14, r1
 5ba:	f1 04       	cpc	r15, r1
 5bc:	e1 f1       	breq	.+120    	; 0x636 <__LOCK_REGION_LENGTH__+0x236>
 5be:	d8 f1       	brcs	.+118    	; 0x636 <__LOCK_REGION_LENGTH__+0x236>
				{
					ocr = F_CPU / frequency / 2 / 128 - 1;
 5c0:	73 01       	movw	r14, r6
 5c2:	62 01       	movw	r12, r4
 5c4:	68 94       	set
 5c6:	16 f8       	bld	r1, 6
 5c8:	f6 94       	lsr	r15
 5ca:	e7 94       	ror	r14
 5cc:	d7 94       	ror	r13
 5ce:	c7 94       	ror	r12
 5d0:	16 94       	lsr	r1
 5d2:	d1 f7       	brne	.-12     	; 0x5c8 <__LOCK_REGION_LENGTH__+0x1c8>
 5d4:	21 e0       	ldi	r18, 0x01	; 1
 5d6:	c2 1a       	sub	r12, r18
 5d8:	d1 08       	sbc	r13, r1
 5da:	e1 08       	sbc	r14, r1
 5dc:	f1 08       	sbc	r15, r1
					prescalarbits = 0b101; // clk/128
 5de:	85 e0       	ldi	r24, 0x05	; 5
 5e0:	03 c0       	rjmp	.+6      	; 0x5e8 <__LOCK_REGION_LENGTH__+0x1e8>
			}
			
			if(ocr > 255)
			{
				ocr = F_CPU / frequency / 2 / 64 - 1;
				prescalarbits = _timer == 0 ? 0b011 : 0b100; // clk/32 for timer 1: clk/64 for timer 2
 5e2:	83 e0       	ldi	r24, 0x03	; 3
 5e4:	01 c0       	rjmp	.+2      	; 0x5e8 <__LOCK_REGION_LENGTH__+0x1e8>
 5e6:	84 e0       	ldi	r24, 0x04	; 4
				{
					ocr = F_CPU / frequency / 2 / 128 - 1;
					prescalarbits = 0b101; // clk/128
				}

				if (ocr > 255)
 5e8:	9f ef       	ldi	r25, 0xFF	; 255
 5ea:	c9 16       	cp	r12, r25
 5ec:	d1 04       	cpc	r13, r1
 5ee:	e1 04       	cpc	r14, r1
 5f0:	f1 04       	cpc	r15, r1
 5f2:	89 f0       	breq	.+34     	; 0x616 <__LOCK_REGION_LENGTH__+0x216>
 5f4:	80 f0       	brcs	.+32     	; 0x616 <__LOCK_REGION_LENGTH__+0x216>
				{
					ocr = F_CPU / frequency / 2 / 256 - 1;
 5f6:	ff 24       	eor	r15, r15
 5f8:	e7 2c       	mov	r14, r7
 5fa:	d6 2c       	mov	r13, r6
 5fc:	c5 2c       	mov	r12, r5
 5fe:	a1 e0       	ldi	r26, 0x01	; 1
 600:	ca 1a       	sub	r12, r26
 602:	d1 08       	sbc	r13, r1
 604:	e1 08       	sbc	r14, r1
 606:	f1 08       	sbc	r15, r1
					prescalarbits = _timer == 0 ? 0b100 : 0b110;  // clk/64 for timer 1: clk/256 for timer 2
 608:	11 23       	and	r17, r17
 60a:	09 f4       	brne	.+2      	; 0x60e <__LOCK_REGION_LENGTH__+0x20e>
 60c:	2f c1       	rjmp	.+606    	; 0x86c <__LOCK_REGION_LENGTH__+0x46c>
 60e:	49 c1       	rjmp	.+658    	; 0x8a2 <__LOCK_REGION_LENGTH__+0x4a2>
		
		//2. if we are using an 8 bit timer, scan through prescalers to find the best fit
		if (_timer == 0 || _timer == 2)
		{
			ocr = F_CPU / frequency / 2 - 1;
			prescalarbits = 0b001; // clk/1 prescaler (No prescaling) : For both timers
 610:	81 e0       	ldi	r24, 0x01	; 1
 612:	01 c0       	rjmp	.+2      	; 0x616 <__LOCK_REGION_LENGTH__+0x216>
			
			if (ocr > 255) // above prescaler failed
			{
				ocr = F_CPU / frequency / 2 / 8 - 1;
				prescalarbits = 0b010; // clk/8 prescaler : For both timers
 614:	82 e0       	ldi	r24, 0x02	; 2
				}				
			}
			
			//2(b) Set the prescaler for 8 bit timers
			      //TIMER 0
			if (_timer == 0)
 616:	11 11       	cpse	r17, r1
 618:	0f c0       	rjmp	.+30     	; 0x638 <__LOCK_REGION_LENGTH__+0x238>
			{
				TCCR0B = (TCCR0B & 0b11111000) | prescalarbits;
 61a:	95 b5       	in	r25, 0x25	; 37
 61c:	98 7f       	andi	r25, 0xF8	; 248
 61e:	89 2b       	or	r24, r25
 620:	85 bd       	out	0x25, r24	; 37
				TCCR5B = (TCCR5B & 0b11111000) | prescalarbits;
			}
		}
		
		//4. Calculate the toggle count
		if (duration > 0)
 622:	81 14       	cp	r8, r1
 624:	91 04       	cpc	r9, r1
 626:	a1 04       	cpc	r10, r1
 628:	b1 04       	cpc	r11, r1
 62a:	09 f0       	breq	.+2      	; 0x62e <__LOCK_REGION_LENGTH__+0x22e>
 62c:	82 c0       	rjmp	.+260    	; 0x732 <__LOCK_REGION_LENGTH__+0x332>
		{
			toggle_count = 2 * frequency * duration / 1000;
		}else{
			toggle_count = -1;
 62e:	2f ef       	ldi	r18, 0xFF	; 255
 630:	3f ef       	ldi	r19, 0xFF	; 255
 632:	a9 01       	movw	r20, r18
 634:	9e c0       	rjmp	.+316    	; 0x772 <__LOCK_REGION_LENGTH__+0x372>
			}
			
			if(ocr > 255)
			{
				ocr = F_CPU / frequency / 2 / 64 - 1;
				prescalarbits = _timer == 0 ? 0b011 : 0b100; // clk/32 for timer 1: clk/64 for timer 2
 636:	84 e0       	ldi	r24, 0x04	; 4
			{
				TCCR0B = (TCCR0B & 0b11111000) | prescalarbits;
			}
			else   //TIMER 2
			{
				TCCR2B = (TCCR2B & 0b11111000) | prescalarbits;
 638:	e1 eb       	ldi	r30, 0xB1	; 177
 63a:	f0 e0       	ldi	r31, 0x00	; 0
 63c:	90 81       	ld	r25, Z
 63e:	98 7f       	andi	r25, 0xF8	; 248
 640:	89 2b       	or	r24, r25
 642:	80 83       	st	Z, r24
 644:	71 c0       	rjmp	.+226    	; 0x728 <__LOCK_REGION_LENGTH__+0x328>
			}
			
		}else{
			//3. Prescaling for 16 bit timers
			// two choices for the 16 bit timers: clk/1 or clk/64
			ocr = F_CPU / frequency / 2 - 1;
 646:	8d 81       	ldd	r24, Y+5	; 0x05
 648:	9e 81       	ldd	r25, Y+6	; 0x06
 64a:	6c 01       	movw	r12, r24
 64c:	e1 2c       	mov	r14, r1
 64e:	f1 2c       	mov	r15, r1
 650:	60 e2       	ldi	r22, 0x20	; 32
 652:	71 ea       	ldi	r23, 0xA1	; 161
 654:	87 e0       	ldi	r24, 0x07	; 7
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	a7 01       	movw	r20, r14
 65a:	96 01       	movw	r18, r12
 65c:	1e d2       	rcall	.+1084   	; 0xa9a <__udivmodsi4>
 65e:	69 01       	movw	r12, r18
 660:	7a 01       	movw	r14, r20
 662:	91 e0       	ldi	r25, 0x01	; 1
 664:	c9 1a       	sub	r12, r25
 666:	d1 08       	sbc	r13, r1
 668:	e1 08       	sbc	r14, r1
 66a:	f1 08       	sbc	r15, r1
			
			prescalarbits = 0b001; //clk1
			if(ocr > 0xffff)//>65535
 66c:	c1 14       	cp	r12, r1
 66e:	d1 04       	cpc	r13, r1
 670:	a1 e0       	ldi	r26, 0x01	; 1
 672:	ea 06       	cpc	r14, r26
 674:	f1 04       	cpc	r15, r1
 676:	98 f0       	brcs	.+38     	; 0x69e <__LOCK_REGION_LENGTH__+0x29e>
			{
				ocr = F_CPU / frequency / 2 / 64 - 1;
 678:	da 01       	movw	r26, r20
 67a:	c9 01       	movw	r24, r18
 67c:	68 94       	set
 67e:	15 f8       	bld	r1, 5
 680:	b6 95       	lsr	r27
 682:	a7 95       	ror	r26
 684:	97 95       	ror	r25
 686:	87 95       	ror	r24
 688:	16 94       	lsr	r1
 68a:	d1 f7       	brne	.-12     	; 0x680 <__LOCK_REGION_LENGTH__+0x280>
 68c:	6c 01       	movw	r12, r24
 68e:	7d 01       	movw	r14, r26
 690:	21 e0       	ldi	r18, 0x01	; 1
 692:	c2 1a       	sub	r12, r18
 694:	d1 08       	sbc	r13, r1
 696:	e1 08       	sbc	r14, r1
 698:	f1 08       	sbc	r15, r1
				prescalarbits = 0b011; //clk/64
 69a:	83 e0       	ldi	r24, 0x03	; 3
 69c:	01 c0       	rjmp	.+2      	; 0x6a0 <__LOCK_REGION_LENGTH__+0x2a0>
		}else{
			//3. Prescaling for 16 bit timers
			// two choices for the 16 bit timers: clk/1 or clk/64
			ocr = F_CPU / frequency / 2 - 1;
			
			prescalarbits = 0b001; //clk1
 69e:	81 e0       	ldi	r24, 0x01	; 1
				ocr = F_CPU / frequency / 2 / 64 - 1;
				prescalarbits = 0b011; //clk/64
			}
			
			//3(b) Set the prescaler for 16 bit timers
			if (_timer == 1)
 6a0:	11 30       	cpi	r17, 0x01	; 1
 6a2:	79 f4       	brne	.+30     	; 0x6c2 <__LOCK_REGION_LENGTH__+0x2c2>
			{
				TCCR1B = (TCCR1B & 0b11111000) | prescalarbits;
 6a4:	e1 e8       	ldi	r30, 0x81	; 129
 6a6:	f0 e0       	ldi	r31, 0x00	; 0
 6a8:	90 81       	ld	r25, Z
 6aa:	98 7f       	andi	r25, 0xF8	; 248
 6ac:	89 2b       	or	r24, r25
 6ae:	80 83       	st	Z, r24
				TCCR5B = (TCCR5B & 0b11111000) | prescalarbits;
			}
		}
		
		//4. Calculate the toggle count
		if (duration > 0)
 6b0:	81 14       	cp	r8, r1
 6b2:	91 04       	cpc	r9, r1
 6b4:	a1 04       	cpc	r10, r1
 6b6:	b1 04       	cpc	r11, r1
 6b8:	e1 f5       	brne	.+120    	; 0x732 <__LOCK_REGION_LENGTH__+0x332>
		{
			toggle_count = 2 * frequency * duration / 1000;
		}else{
			toggle_count = -1;
 6ba:	2f ef       	ldi	r18, 0xFF	; 255
 6bc:	3f ef       	ldi	r19, 0xFF	; 255
 6be:	a9 01       	movw	r20, r18
 6c0:	67 c0       	rjmp	.+206    	; 0x790 <__LOCK_REGION_LENGTH__+0x390>
			//3(b) Set the prescaler for 16 bit timers
			if (_timer == 1)
			{
				TCCR1B = (TCCR1B & 0b11111000) | prescalarbits;
			}
			else if (_timer == 3)
 6c2:	13 30       	cpi	r17, 0x03	; 3
 6c4:	79 f4       	brne	.+30     	; 0x6e4 <__LOCK_REGION_LENGTH__+0x2e4>
			{
				TCCR3B = (TCCR3B & 0b11111000) | prescalarbits;
 6c6:	e1 e9       	ldi	r30, 0x91	; 145
 6c8:	f0 e0       	ldi	r31, 0x00	; 0
 6ca:	90 81       	ld	r25, Z
 6cc:	98 7f       	andi	r25, 0xF8	; 248
 6ce:	89 2b       	or	r24, r25
 6d0:	80 83       	st	Z, r24
				TCCR5B = (TCCR5B & 0b11111000) | prescalarbits;
			}
		}
		
		//4. Calculate the toggle count
		if (duration > 0)
 6d2:	81 14       	cp	r8, r1
 6d4:	91 04       	cpc	r9, r1
 6d6:	a1 04       	cpc	r10, r1
 6d8:	b1 04       	cpc	r11, r1
 6da:	59 f5       	brne	.+86     	; 0x732 <__LOCK_REGION_LENGTH__+0x332>
		{
			toggle_count = 2 * frequency * duration / 1000;
		}else{
			toggle_count = -1;
 6dc:	2f ef       	ldi	r18, 0xFF	; 255
 6de:	3f ef       	ldi	r19, 0xFF	; 255
 6e0:	a9 01       	movw	r20, r18
 6e2:	78 c0       	rjmp	.+240    	; 0x7d4 <__LOCK_REGION_LENGTH__+0x3d4>
			}
			else if (_timer == 3)
			{
				TCCR3B = (TCCR3B & 0b11111000) | prescalarbits;
			}
			else if (_timer == 4)
 6e4:	14 30       	cpi	r17, 0x04	; 4
 6e6:	79 f4       	brne	.+30     	; 0x706 <__LOCK_REGION_LENGTH__+0x306>
			{
				TCCR4B = (TCCR4B & 0b11111000) | prescalarbits;
 6e8:	e1 ea       	ldi	r30, 0xA1	; 161
 6ea:	f0 e0       	ldi	r31, 0x00	; 0
 6ec:	90 81       	ld	r25, Z
 6ee:	98 7f       	andi	r25, 0xF8	; 248
 6f0:	89 2b       	or	r24, r25
 6f2:	80 83       	st	Z, r24
				TCCR5B = (TCCR5B & 0b11111000) | prescalarbits;
			}
		}
		
		//4. Calculate the toggle count
		if (duration > 0)
 6f4:	81 14       	cp	r8, r1
 6f6:	91 04       	cpc	r9, r1
 6f8:	a1 04       	cpc	r10, r1
 6fa:	b1 04       	cpc	r11, r1
 6fc:	d1 f4       	brne	.+52     	; 0x732 <__LOCK_REGION_LENGTH__+0x332>
		{
			toggle_count = 2 * frequency * duration / 1000;
		}else{
			toggle_count = -1;
 6fe:	2f ef       	ldi	r18, 0xFF	; 255
 700:	3f ef       	ldi	r19, 0xFF	; 255
 702:	a9 01       	movw	r20, r18
 704:	79 c0       	rjmp	.+242    	; 0x7f8 <__LOCK_REGION_LENGTH__+0x3f8>
			}
			else if (_timer == 4)
			{
				TCCR4B = (TCCR4B & 0b11111000) | prescalarbits;
			}
			else if (_timer == 5)
 706:	15 30       	cpi	r17, 0x05	; 5
 708:	79 f4       	brne	.+30     	; 0x728 <__LOCK_REGION_LENGTH__+0x328>
			{
				TCCR5B = (TCCR5B & 0b11111000) | prescalarbits;
 70a:	e1 e2       	ldi	r30, 0x21	; 33
 70c:	f1 e0       	ldi	r31, 0x01	; 1
 70e:	90 81       	ld	r25, Z
 710:	98 7f       	andi	r25, 0xF8	; 248
 712:	89 2b       	or	r24, r25
 714:	80 83       	st	Z, r24
			}
		}
		
		//4. Calculate the toggle count
		if (duration > 0)
 716:	81 14       	cp	r8, r1
 718:	91 04       	cpc	r9, r1
 71a:	a1 04       	cpc	r10, r1
 71c:	b1 04       	cpc	r11, r1
 71e:	49 f4       	brne	.+18     	; 0x732 <__LOCK_REGION_LENGTH__+0x332>
		{
			toggle_count = 2 * frequency * duration / 1000;
		}else{
			toggle_count = -1;
 720:	2f ef       	ldi	r18, 0xFF	; 255
 722:	3f ef       	ldi	r19, 0xFF	; 255
 724:	a9 01       	movw	r20, r18
 726:	7a c0       	rjmp	.+244    	; 0x81c <__LOCK_REGION_LENGTH__+0x41c>
				TCCR5B = (TCCR5B & 0b11111000) | prescalarbits;
			}
		}
		
		//4. Calculate the toggle count
		if (duration > 0)
 728:	81 14       	cp	r8, r1
 72a:	91 04       	cpc	r9, r1
 72c:	a1 04       	cpc	r10, r1
 72e:	b1 04       	cpc	r11, r1
 730:	69 f0       	breq	.+26     	; 0x74c <__LOCK_REGION_LENGTH__+0x34c>
		{
			toggle_count = 2 * frequency * duration / 1000;
 732:	ad 81       	ldd	r26, Y+5	; 0x05
 734:	be 81       	ldd	r27, Y+6	; 0x06
 736:	aa 0f       	add	r26, r26
 738:	bb 1f       	adc	r27, r27
 73a:	a5 01       	movw	r20, r10
 73c:	94 01       	movw	r18, r8
 73e:	cf d1       	rcall	.+926    	; 0xade <__muluhisi3>
 740:	28 ee       	ldi	r18, 0xE8	; 232
 742:	33 e0       	ldi	r19, 0x03	; 3
 744:	40 e0       	ldi	r20, 0x00	; 0
 746:	50 e0       	ldi	r21, 0x00	; 0
 748:	a8 d1       	rcall	.+848    	; 0xa9a <__udivmodsi4>
 74a:	03 c0       	rjmp	.+6      	; 0x752 <__LOCK_REGION_LENGTH__+0x352>
		}else{
			toggle_count = -1;
 74c:	2f ef       	ldi	r18, 0xFF	; 255
 74e:	3f ef       	ldi	r19, 0xFF	; 255
 750:	a9 01       	movw	r20, r18
		}
		
		//5.Set the OCR for the given timer
		//Set the toggle count and then turn on the interrupts
		switch(_timer)
 752:	12 30       	cpi	r17, 0x02	; 2
 754:	79 f1       	breq	.+94     	; 0x7b4 <__LOCK_REGION_LENGTH__+0x3b4>
 756:	2c f4       	brge	.+10     	; 0x762 <__LOCK_REGION_LENGTH__+0x362>
 758:	11 23       	and	r17, r17
 75a:	59 f0       	breq	.+22     	; 0x772 <__LOCK_REGION_LENGTH__+0x372>
 75c:	11 30       	cpi	r17, 0x01	; 1
 75e:	c1 f0       	breq	.+48     	; 0x790 <__LOCK_REGION_LENGTH__+0x390>
 760:	af c0       	rjmp	.+350    	; 0x8c0 <__LOCK_REGION_LENGTH__+0x4c0>
 762:	14 30       	cpi	r17, 0x04	; 4
 764:	09 f4       	brne	.+2      	; 0x768 <__LOCK_REGION_LENGTH__+0x368>
 766:	48 c0       	rjmp	.+144    	; 0x7f8 <__LOCK_REGION_LENGTH__+0x3f8>
 768:	ac f1       	brlt	.+106    	; 0x7d4 <__LOCK_REGION_LENGTH__+0x3d4>
 76a:	15 30       	cpi	r17, 0x05	; 5
 76c:	09 f4       	brne	.+2      	; 0x770 <__LOCK_REGION_LENGTH__+0x370>
 76e:	56 c0       	rjmp	.+172    	; 0x81c <__LOCK_REGION_LENGTH__+0x41c>
 770:	a7 c0       	rjmp	.+334    	; 0x8c0 <__LOCK_REGION_LENGTH__+0x4c0>
		{
			case 0:
				OCR0A = ocr;
 772:	c7 bc       	out	0x27, r12	; 39
				timer0_toggle_count = toggle_count;
 774:	20 93 23 02 	sts	0x0223, r18	; 0x800223 <timer0_toggle_count>
 778:	30 93 24 02 	sts	0x0224, r19	; 0x800224 <timer0_toggle_count+0x1>
 77c:	40 93 25 02 	sts	0x0225, r20	; 0x800225 <timer0_toggle_count+0x2>
 780:	50 93 26 02 	sts	0x0226, r21	; 0x800226 <timer0_toggle_count+0x3>
				bitWrite(TIMSK0, OCIE0A, 1); //turn on interrupt
 784:	ee e6       	ldi	r30, 0x6E	; 110
 786:	f0 e0       	ldi	r31, 0x00	; 0
 788:	80 81       	ld	r24, Z
 78a:	82 60       	ori	r24, 0x02	; 2
 78c:	80 83       	st	Z, r24
			break;
 78e:	98 c0       	rjmp	.+304    	; 0x8c0 <__LOCK_REGION_LENGTH__+0x4c0>
			
			case 1:
				OCR1A = ocr;
 790:	d0 92 89 00 	sts	0x0089, r13	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 794:	c0 92 88 00 	sts	0x0088, r12	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
				timer1_toggle_count = toggle_count;
 798:	20 93 1c 02 	sts	0x021C, r18	; 0x80021c <timer1_toggle_count>
 79c:	30 93 1d 02 	sts	0x021D, r19	; 0x80021d <timer1_toggle_count+0x1>
 7a0:	40 93 1e 02 	sts	0x021E, r20	; 0x80021e <timer1_toggle_count+0x2>
 7a4:	50 93 1f 02 	sts	0x021F, r21	; 0x80021f <timer1_toggle_count+0x3>
				bitWrite(TIMSK1, OCIE1A, 1);
 7a8:	ef e6       	ldi	r30, 0x6F	; 111
 7aa:	f0 e0       	ldi	r31, 0x00	; 0
 7ac:	80 81       	ld	r24, Z
 7ae:	82 60       	ori	r24, 0x02	; 2
 7b0:	80 83       	st	Z, r24
			break;
 7b2:	86 c0       	rjmp	.+268    	; 0x8c0 <__LOCK_REGION_LENGTH__+0x4c0>
			
			case 2:
				OCR2A = ocr;
 7b4:	c0 92 b3 00 	sts	0x00B3, r12	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
				timer2_toggle_count = toggle_count;
 7b8:	20 93 28 02 	sts	0x0228, r18	; 0x800228 <timer2_toggle_count>
 7bc:	30 93 29 02 	sts	0x0229, r19	; 0x800229 <timer2_toggle_count+0x1>
 7c0:	40 93 2a 02 	sts	0x022A, r20	; 0x80022a <timer2_toggle_count+0x2>
 7c4:	50 93 2b 02 	sts	0x022B, r21	; 0x80022b <timer2_toggle_count+0x3>
				bitWrite(TIMSK2, OCIE2A, 1);
 7c8:	e0 e7       	ldi	r30, 0x70	; 112
 7ca:	f0 e0       	ldi	r31, 0x00	; 0
 7cc:	80 81       	ld	r24, Z
 7ce:	82 60       	ori	r24, 0x02	; 2
 7d0:	80 83       	st	Z, r24
			break;
 7d2:	76 c0       	rjmp	.+236    	; 0x8c0 <__LOCK_REGION_LENGTH__+0x4c0>
			
			case 3:
				OCR3A = ocr;
 7d4:	d0 92 99 00 	sts	0x0099, r13	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
 7d8:	c0 92 98 00 	sts	0x0098, r12	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
				timer3_toggle_count = toggle_count;
 7dc:	20 93 11 02 	sts	0x0211, r18	; 0x800211 <timer3_toggle_count>
 7e0:	30 93 12 02 	sts	0x0212, r19	; 0x800212 <timer3_toggle_count+0x1>
 7e4:	40 93 13 02 	sts	0x0213, r20	; 0x800213 <timer3_toggle_count+0x2>
 7e8:	50 93 14 02 	sts	0x0214, r21	; 0x800214 <timer3_toggle_count+0x3>
				bitWrite(TIMSK3, OCIE3A, 1);
 7ec:	e1 e7       	ldi	r30, 0x71	; 113
 7ee:	f0 e0       	ldi	r31, 0x00	; 0
 7f0:	80 81       	ld	r24, Z
 7f2:	82 60       	ori	r24, 0x02	; 2
 7f4:	80 83       	st	Z, r24
			break;
 7f6:	64 c0       	rjmp	.+200    	; 0x8c0 <__LOCK_REGION_LENGTH__+0x4c0>
			
			case 4:
				OCR4A = ocr;
 7f8:	d0 92 a9 00 	sts	0x00A9, r13	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
 7fc:	c0 92 a8 00 	sts	0x00A8, r12	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
				timer4_toggle_count = toggle_count;
 800:	20 93 0d 02 	sts	0x020D, r18	; 0x80020d <timer4_toggle_count>
 804:	30 93 0e 02 	sts	0x020E, r19	; 0x80020e <timer4_toggle_count+0x1>
 808:	40 93 0f 02 	sts	0x020F, r20	; 0x80020f <timer4_toggle_count+0x2>
 80c:	50 93 10 02 	sts	0x0210, r21	; 0x800210 <timer4_toggle_count+0x3>
				bitWrite(TIMSK4, OCIE4A, 1);
 810:	e2 e7       	ldi	r30, 0x72	; 114
 812:	f0 e0       	ldi	r31, 0x00	; 0
 814:	80 81       	ld	r24, Z
 816:	82 60       	ori	r24, 0x02	; 2
 818:	80 83       	st	Z, r24
			break;
 81a:	52 c0       	rjmp	.+164    	; 0x8c0 <__LOCK_REGION_LENGTH__+0x4c0>
			
			case 5:
				OCR5A = ocr;
 81c:	d0 92 29 01 	sts	0x0129, r13	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
 820:	c0 92 28 01 	sts	0x0128, r12	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
				timer5_toggle_count = toggle_count;
 824:	20 93 04 02 	sts	0x0204, r18	; 0x800204 <timer5_toggle_count>
 828:	30 93 05 02 	sts	0x0205, r19	; 0x800205 <timer5_toggle_count+0x1>
 82c:	40 93 06 02 	sts	0x0206, r20	; 0x800206 <timer5_toggle_count+0x2>
 830:	50 93 07 02 	sts	0x0207, r21	; 0x800207 <timer5_toggle_count+0x3>
				bitWrite(TIMSK5, OCIE5A, 1);
 834:	e3 e7       	ldi	r30, 0x73	; 115
 836:	f0 e0       	ldi	r31, 0x00	; 0
 838:	80 81       	ld	r24, Z
 83a:	82 60       	ori	r24, 0x02	; 2
 83c:	80 83       	st	Z, r24
			break;
		}		

	}
	
}
 83e:	40 c0       	rjmp	.+128    	; 0x8c0 <__LOCK_REGION_LENGTH__+0x4c0>
		}
	}
	  
	// search for an unused timer.
	for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
		if (tone_pins[i] == 255) {
 840:	9f 3f       	cpi	r25, 0xFF	; 255
 842:	09 f0       	breq	.+2      	; 0x846 <__LOCK_REGION_LENGTH__+0x446>
 844:	3d c0       	rjmp	.+122    	; 0x8c0 <__LOCK_REGION_LENGTH__+0x4c0>
 846:	6e cd       	rjmp	.-1316   	; 0x324 <tone+0x3e>
					ocr = F_CPU / frequency / 2 / 256 - 1;
					prescalarbits = _timer == 0 ? 0b100 : 0b110;  // clk/64 for timer 1: clk/256 for timer 2
					if (ocr > 255)
					{
						// can't do any better than /1024
						ocr = F_CPU / frequency / 2 / 1024 - 1;
 848:	73 01       	movw	r14, r6
 84a:	62 01       	movw	r12, r4
 84c:	0b 2e       	mov	r0, r27
 84e:	ba e0       	ldi	r27, 0x0A	; 10
 850:	f6 94       	lsr	r15
 852:	e7 94       	ror	r14
 854:	d7 94       	ror	r13
 856:	c7 94       	ror	r12
 858:	ba 95       	dec	r27
 85a:	d1 f7       	brne	.-12     	; 0x850 <__LOCK_REGION_LENGTH__+0x450>
 85c:	b0 2d       	mov	r27, r0
 85e:	81 e0       	ldi	r24, 0x01	; 1
 860:	c8 1a       	sub	r12, r24
 862:	d1 08       	sbc	r13, r1
 864:	e1 08       	sbc	r14, r1
 866:	f1 08       	sbc	r15, r1
						prescalarbits = _timer == 0 ? 0b101 : 0b111; // clk/128 for timer 1: clk/1024 for timer 2
 868:	85 e0       	ldi	r24, 0x05	; 5
 86a:	d7 ce       	rjmp	.-594    	; 0x61a <__LOCK_REGION_LENGTH__+0x21a>

				if (ocr > 255)
				{
					ocr = F_CPU / frequency / 2 / 256 - 1;
					prescalarbits = _timer == 0 ? 0b100 : 0b110;  // clk/64 for timer 1: clk/256 for timer 2
					if (ocr > 255)
 86c:	9f ef       	ldi	r25, 0xFF	; 255
 86e:	c9 16       	cp	r12, r25
 870:	d1 04       	cpc	r13, r1
 872:	e1 04       	cpc	r14, r1
 874:	f1 04       	cpc	r15, r1
 876:	09 f0       	breq	.+2      	; 0x87a <__LOCK_REGION_LENGTH__+0x47a>
 878:	38 f7       	brcc	.-50     	; 0x848 <__LOCK_REGION_LENGTH__+0x448>
				}

				if (ocr > 255)
				{
					ocr = F_CPU / frequency / 2 / 256 - 1;
					prescalarbits = _timer == 0 ? 0b100 : 0b110;  // clk/64 for timer 1: clk/256 for timer 2
 87a:	84 e0       	ldi	r24, 0x04	; 4
 87c:	cc ce       	rjmp	.-616    	; 0x616 <__LOCK_REGION_LENGTH__+0x216>
					if (ocr > 255)
					{
						// can't do any better than /1024
						ocr = F_CPU / frequency / 2 / 1024 - 1;
 87e:	73 01       	movw	r14, r6
 880:	62 01       	movw	r12, r4
 882:	0b 2e       	mov	r0, r27
 884:	ba e0       	ldi	r27, 0x0A	; 10
 886:	f6 94       	lsr	r15
 888:	e7 94       	ror	r14
 88a:	d7 94       	ror	r13
 88c:	c7 94       	ror	r12
 88e:	ba 95       	dec	r27
 890:	d1 f7       	brne	.-12     	; 0x886 <__LOCK_REGION_LENGTH__+0x486>
 892:	b0 2d       	mov	r27, r0
 894:	a1 e0       	ldi	r26, 0x01	; 1
 896:	ca 1a       	sub	r12, r26
 898:	d1 08       	sbc	r13, r1
 89a:	e1 08       	sbc	r14, r1
 89c:	f1 08       	sbc	r15, r1
						prescalarbits = _timer == 0 ? 0b101 : 0b111; // clk/128 for timer 1: clk/1024 for timer 2
 89e:	87 e0       	ldi	r24, 0x07	; 7
 8a0:	cb ce       	rjmp	.-618    	; 0x638 <__LOCK_REGION_LENGTH__+0x238>

				if (ocr > 255)
				{
					ocr = F_CPU / frequency / 2 / 256 - 1;
					prescalarbits = _timer == 0 ? 0b100 : 0b110;  // clk/64 for timer 1: clk/256 for timer 2
					if (ocr > 255)
 8a2:	bf ef       	ldi	r27, 0xFF	; 255
 8a4:	cb 16       	cp	r12, r27
 8a6:	d1 04       	cpc	r13, r1
 8a8:	e1 04       	cpc	r14, r1
 8aa:	f1 04       	cpc	r15, r1
 8ac:	09 f0       	breq	.+2      	; 0x8b0 <__LOCK_REGION_LENGTH__+0x4b0>
				}

				if (ocr > 255)
				{
					ocr = F_CPU / frequency / 2 / 256 - 1;
					prescalarbits = _timer == 0 ? 0b100 : 0b110;  // clk/64 for timer 1: clk/256 for timer 2
 8ae:	38 f7       	brcc	.-50     	; 0x87e <__LOCK_REGION_LENGTH__+0x47e>
	_timer = toneBegin(_pin);
	
	if (_timer >= 0)
	{
		//1. set the pin as OUTPUT
		pinMode(_pin, OUTPUT);
 8b0:	86 e0       	ldi	r24, 0x06	; 6
 8b2:	b1 ce       	rjmp	.-670    	; 0x616 <__LOCK_REGION_LENGTH__+0x216>
 8b4:	61 e0       	ldi	r22, 0x01	; 1
 8b6:	b6 dc       	rcall	.-1684   	; 0x224 <pinMode>
 8b8:	c6 ce       	rjmp	.-628    	; 0x646 <__LOCK_REGION_LENGTH__+0x246>
 8ba:	61 e0       	ldi	r22, 0x01	; 1
 8bc:	b3 dc       	rcall	.-1690   	; 0x224 <pinMode>
 8be:	2b ce       	rjmp	.-938    	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
			break;
		}		

	}
	
}
 8c0:	26 96       	adiw	r28, 0x06	; 6
 8c2:	0f b6       	in	r0, 0x3f	; 63
 8c4:	f8 94       	cli
 8c6:	de bf       	out	0x3e, r29	; 62
 8c8:	0f be       	out	0x3f, r0	; 63
 8ca:	cd bf       	out	0x3d, r28	; 61
 8cc:	df 91       	pop	r29
 8ce:	cf 91       	pop	r28
 8d0:	1f 91       	pop	r17
 8d2:	ff 90       	pop	r15
 8d4:	ef 90       	pop	r14
 8d6:	df 90       	pop	r13
 8d8:	cf 90       	pop	r12
 8da:	bf 90       	pop	r11
 8dc:	af 90       	pop	r10
 8de:	9f 90       	pop	r9
 8e0:	8f 90       	pop	r8
 8e2:	7f 90       	pop	r7
 8e4:	6f 90       	pop	r6
 8e6:	5f 90       	pop	r5
 8e8:	4f 90       	pop	r4
 8ea:	08 95       	ret

000008ec <disableTimer>:
This function only works properly for timer 2 (the only one we use currently).  
for the others, it should end the tone, but won't restore proper PWM functionality for the timer. TODO
*/
void disableTimer(uint8_t _timer)
{
	switch(_timer)
 8ec:	82 30       	cpi	r24, 0x02	; 2
 8ee:	a9 f0       	breq	.+42     	; 0x91a <disableTimer+0x2e>
 8f0:	28 f4       	brcc	.+10     	; 0x8fc <disableTimer+0x10>
 8f2:	88 23       	and	r24, r24
 8f4:	49 f0       	breq	.+18     	; 0x908 <disableTimer+0x1c>
 8f6:	81 30       	cpi	r24, 0x01	; 1
 8f8:	51 f0       	breq	.+20     	; 0x90e <disableTimer+0x22>
 8fa:	08 95       	ret
 8fc:	84 30       	cpi	r24, 0x04	; 4
 8fe:	21 f1       	breq	.+72     	; 0x948 <disableTimer+0x5c>
 900:	e8 f0       	brcs	.+58     	; 0x93c <disableTimer+0x50>
 902:	85 30       	cpi	r24, 0x05	; 5
 904:	39 f1       	breq	.+78     	; 0x954 <disableTimer+0x68>
 906:	08 95       	ret
	{
		case 0:
		TIMSK0 = 0;
 908:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
		break;
 90c:	08 95       	ret
		case 1:
			bitWrite(TIMSK1, OCIE1A, 0);
 90e:	ef e6       	ldi	r30, 0x6F	; 111
 910:	f0 e0       	ldi	r31, 0x00	; 0
 912:	80 81       	ld	r24, Z
 914:	8d 7f       	andi	r24, 0xFD	; 253
 916:	80 83       	st	Z, r24
		break;
 918:	08 95       	ret
		case 2:
			bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
 91a:	e0 e7       	ldi	r30, 0x70	; 112
 91c:	f0 e0       	ldi	r31, 0x00	; 0
 91e:	80 81       	ld	r24, Z
 920:	8d 7f       	andi	r24, 0xFD	; 253
 922:	80 83       	st	Z, r24
			TCCR2A = (1 << WGM20);		 // restore normal  PWM mode
 924:	81 e0       	ldi	r24, 0x01	; 1
 926:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
			TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22); //clk/64 prescaler
 92a:	e1 eb       	ldi	r30, 0xB1	; 177
 92c:	f0 e0       	ldi	r31, 0x00	; 0
 92e:	80 81       	ld	r24, Z
 930:	88 7f       	andi	r24, 0xF8	; 248
 932:	84 60       	ori	r24, 0x04	; 4
 934:	80 83       	st	Z, r24
			OCR2A = 0;
 936:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
		break;
 93a:	08 95       	ret
		case 3:
			bitWrite(TIMSK3, OCIE3A, 0);
 93c:	e1 e7       	ldi	r30, 0x71	; 113
 93e:	f0 e0       	ldi	r31, 0x00	; 0
 940:	80 81       	ld	r24, Z
 942:	8d 7f       	andi	r24, 0xFD	; 253
 944:	80 83       	st	Z, r24
		break;
 946:	08 95       	ret
		case 4:
			bitWrite(TIMSK4, OCIE4A, 0);
 948:	e2 e7       	ldi	r30, 0x72	; 114
 94a:	f0 e0       	ldi	r31, 0x00	; 0
 94c:	80 81       	ld	r24, Z
 94e:	8d 7f       	andi	r24, 0xFD	; 253
 950:	80 83       	st	Z, r24
		break;
 952:	08 95       	ret
		case 5:
			bitWrite(TIMSK5, OCIE5A, 0);
 954:	e3 e7       	ldi	r30, 0x73	; 115
 956:	f0 e0       	ldi	r31, 0x00	; 0
 958:	80 81       	ld	r24, Z
 95a:	8d 7f       	andi	r24, 0xFD	; 253
 95c:	80 83       	st	Z, r24
 95e:	08 95       	ret

00000960 <noTone>:
	}
}


void noTone(uint8_t _pin)
{
 960:	cf 93       	push	r28
 962:	c8 2f       	mov	r28, r24
	int8_t _timer = -1;
	  
	for (int i = 0; i < AVAILABLE_TONE_PINS; i++)
	{
		if (tone_pins[i] == _pin) {
 964:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 968:	c8 13       	cpse	r28, r24
 96a:	07 c0       	rjmp	.+14     	; 0x97a <noTone+0x1a>
			_timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
 96c:	e2 ee       	ldi	r30, 0xE2	; 226
 96e:	f1 e0       	ldi	r31, 0x01	; 1
 970:	84 91       	lpm	r24, Z
			tone_pins[i] = 255;
 972:	9f ef       	ldi	r25, 0xFF	; 255
 974:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <__DATA_REGION_ORIGIN__>
			break;
 978:	01 c0       	rjmp	.+2      	; 0x97c <noTone+0x1c>
}


void noTone(uint8_t _pin)
{
	int8_t _timer = -1;
 97a:	8f ef       	ldi	r24, 0xFF	; 255
			tone_pins[i] = 255;
			break;
		}
	}
	  
	disableTimer(_timer);
 97c:	b7 df       	rcall	.-146    	; 0x8ec <disableTimer>
	digitalWrite(_pin, 0);
 97e:	60 e0       	ldi	r22, 0x00	; 0
 980:	8c 2f       	mov	r24, r28
 982:	8f dc       	rcall	.-1762   	; 0x2a2 <digitalWrite>
}
 984:	cf 91       	pop	r28
 986:	08 95       	ret

00000988 <__vector_32>:
}
#endif

#ifdef USE_TIMER3
ISR(TIMER3_COMPA_vect)
{
 988:	1f 92       	push	r1
 98a:	0f 92       	push	r0
 98c:	0f b6       	in	r0, 0x3f	; 63
 98e:	0f 92       	push	r0
 990:	11 24       	eor	r1, r1
 992:	0b b6       	in	r0, 0x3b	; 59
 994:	0f 92       	push	r0
 996:	2f 93       	push	r18
 998:	3f 93       	push	r19
 99a:	4f 93       	push	r20
 99c:	5f 93       	push	r21
 99e:	6f 93       	push	r22
 9a0:	7f 93       	push	r23
 9a2:	8f 93       	push	r24
 9a4:	9f 93       	push	r25
 9a6:	af 93       	push	r26
 9a8:	bf 93       	push	r27
 9aa:	ef 93       	push	r30
 9ac:	ff 93       	push	r31
	if (timer3_toggle_count != 0)
 9ae:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <timer3_toggle_count>
 9b2:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <timer3_toggle_count+0x1>
 9b6:	a0 91 13 02 	lds	r26, 0x0213	; 0x800213 <timer3_toggle_count+0x2>
 9ba:	b0 91 14 02 	lds	r27, 0x0214	; 0x800214 <timer3_toggle_count+0x3>
 9be:	89 2b       	or	r24, r25
 9c0:	8a 2b       	or	r24, r26
 9c2:	8b 2b       	or	r24, r27
 9c4:	51 f1       	breq	.+84     	; 0xa1a <__vector_32+0x92>
	{
		// toggle the pin
		*timer3_pin_port ^= timer3_pin_mask;
 9c6:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <timer3_pin_mask>
 9ca:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <timer3_pin_port>
 9ce:	f0 91 0c 02 	lds	r31, 0x020C	; 0x80020c <timer3_pin_port+0x1>
 9d2:	80 81       	ld	r24, Z
 9d4:	89 27       	eor	r24, r25
 9d6:	80 83       	st	Z, r24

		if (timer3_toggle_count > 0)
 9d8:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <timer3_toggle_count>
 9dc:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <timer3_toggle_count+0x1>
 9e0:	a0 91 13 02 	lds	r26, 0x0213	; 0x800213 <timer3_toggle_count+0x2>
 9e4:	b0 91 14 02 	lds	r27, 0x0214	; 0x800214 <timer3_toggle_count+0x3>
 9e8:	18 16       	cp	r1, r24
 9ea:	19 06       	cpc	r1, r25
 9ec:	1a 06       	cpc	r1, r26
 9ee:	1b 06       	cpc	r1, r27
 9f0:	04 f5       	brge	.+64     	; 0xa32 <__vector_32+0xaa>
			timer3_toggle_count--;
 9f2:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <timer3_toggle_count>
 9f6:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <timer3_toggle_count+0x1>
 9fa:	a0 91 13 02 	lds	r26, 0x0213	; 0x800213 <timer3_toggle_count+0x2>
 9fe:	b0 91 14 02 	lds	r27, 0x0214	; 0x800214 <timer3_toggle_count+0x3>
 a02:	01 97       	sbiw	r24, 0x01	; 1
 a04:	a1 09       	sbc	r26, r1
 a06:	b1 09       	sbc	r27, r1
 a08:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <timer3_toggle_count>
 a0c:	90 93 12 02 	sts	0x0212, r25	; 0x800212 <timer3_toggle_count+0x1>
 a10:	a0 93 13 02 	sts	0x0213, r26	; 0x800213 <timer3_toggle_count+0x2>
 a14:	b0 93 14 02 	sts	0x0214, r27	; 0x800214 <timer3_toggle_count+0x3>
 a18:	0c c0       	rjmp	.+24     	; 0xa32 <__vector_32+0xaa>
	}
	else
	{
		disableTimer(3);
 a1a:	83 e0       	ldi	r24, 0x03	; 3
 a1c:	67 df       	rcall	.-306    	; 0x8ec <disableTimer>
		*timer3_pin_port &= ~(timer3_pin_mask);  // keep pin low after stop
 a1e:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <timer3_pin_mask>
 a22:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <timer3_pin_port>
 a26:	f0 91 0c 02 	lds	r31, 0x020C	; 0x80020c <timer3_pin_port+0x1>
 a2a:	90 81       	ld	r25, Z
 a2c:	80 95       	com	r24
 a2e:	89 23       	and	r24, r25
 a30:	80 83       	st	Z, r24
	}
}
 a32:	ff 91       	pop	r31
 a34:	ef 91       	pop	r30
 a36:	bf 91       	pop	r27
 a38:	af 91       	pop	r26
 a3a:	9f 91       	pop	r25
 a3c:	8f 91       	pop	r24
 a3e:	7f 91       	pop	r23
 a40:	6f 91       	pop	r22
 a42:	5f 91       	pop	r21
 a44:	4f 91       	pop	r20
 a46:	3f 91       	pop	r19
 a48:	2f 91       	pop	r18
 a4a:	0f 90       	pop	r0
 a4c:	0b be       	out	0x3b, r0	; 59
 a4e:	0f 90       	pop	r0
 a50:	0f be       	out	0x3f, r0	; 63
 a52:	0f 90       	pop	r0
 a54:	1f 90       	pop	r1
 a56:	18 95       	reti

00000a58 <main>:
};

int main(void)
{
    /* Replace with your application code */
	pinMode(Pin_PK0, OUTPUT);
 a58:	61 e0       	ldi	r22, 0x01	; 1
 a5a:	89 e5       	ldi	r24, 0x59	; 89
 a5c:	e3 db       	rcall	.-2106   	; 0x224 <pinMode>
	pinMode(Pin_PK3, OUTPUT);
 a5e:	61 e0       	ldi	r22, 0x01	; 1
 a60:	86 e5       	ldi	r24, 0x56	; 86
 a62:	e0 db       	rcall	.-2112   	; 0x224 <pinMode>
	pinMode(Pin_PJ2, INPUT);
 a64:	60 e0       	ldi	r22, 0x00	; 0
 a66:	81 e4       	ldi	r24, 0x41	; 65
 a68:	dd db       	rcall	.-2118   	; 0x224 <pinMode>
 a6a:	c8 e0       	ldi	r28, 0x08	; 8
 a6c:	d0 e0       	ldi	r29, 0x00	; 0
// 		noTone(Pin_PE3);
// 
// 	}
	  for(int i=0; i<8; i++)
	  {
		  tone(Pin_PE3,432, 300);
 a6e:	2c e2       	ldi	r18, 0x2C	; 44
 a70:	31 e0       	ldi	r19, 0x01	; 1
 a72:	40 e0       	ldi	r20, 0x00	; 0
 a74:	50 e0       	ldi	r21, 0x00	; 0
 a76:	60 eb       	ldi	r22, 0xB0	; 176
 a78:	71 e0       	ldi	r23, 0x01	; 1
 a7a:	85 e0       	ldi	r24, 0x05	; 5
 a7c:	34 dc       	rcall	.-1944   	; 0x2e6 <tone>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 a7e:	2f e6       	ldi	r18, 0x6F	; 111
 a80:	81 e1       	ldi	r24, 0x11	; 17
 a82:	91 e0       	ldi	r25, 0x01	; 1
 a84:	21 50       	subi	r18, 0x01	; 1
 a86:	80 40       	sbci	r24, 0x00	; 0
 a88:	90 40       	sbci	r25, 0x00	; 0
 a8a:	e1 f7       	brne	.-8      	; 0xa84 <main+0x2c>
 a8c:	00 c0       	rjmp	.+0      	; 0xa8e <main+0x36>
		  _delay_ms(350);
		  noTone(Pin_PE3);
 a8e:	00 00       	nop
 a90:	85 e0       	ldi	r24, 0x05	; 5
 a92:	66 df       	rcall	.-308    	; 0x960 <noTone>
 a94:	21 97       	sbiw	r28, 0x01	; 1
// 		
// 		// stop the tone playing:
// 		noTone(Pin_PE3);
// 
// 	}
	  for(int i=0; i<8; i++)
 a96:	59 f7       	brne	.-42     	; 0xa6e <main+0x16>
 a98:	ff cf       	rjmp	.-2      	; 0xa98 <main+0x40>

00000a9a <__udivmodsi4>:
 a9a:	a1 e2       	ldi	r26, 0x21	; 33
 a9c:	1a 2e       	mov	r1, r26
 a9e:	aa 1b       	sub	r26, r26
 aa0:	bb 1b       	sub	r27, r27
 aa2:	fd 01       	movw	r30, r26
 aa4:	0d c0       	rjmp	.+26     	; 0xac0 <__udivmodsi4_ep>

00000aa6 <__udivmodsi4_loop>:
 aa6:	aa 1f       	adc	r26, r26
 aa8:	bb 1f       	adc	r27, r27
 aaa:	ee 1f       	adc	r30, r30
 aac:	ff 1f       	adc	r31, r31
 aae:	a2 17       	cp	r26, r18
 ab0:	b3 07       	cpc	r27, r19
 ab2:	e4 07       	cpc	r30, r20
 ab4:	f5 07       	cpc	r31, r21
 ab6:	20 f0       	brcs	.+8      	; 0xac0 <__udivmodsi4_ep>
 ab8:	a2 1b       	sub	r26, r18
 aba:	b3 0b       	sbc	r27, r19
 abc:	e4 0b       	sbc	r30, r20
 abe:	f5 0b       	sbc	r31, r21

00000ac0 <__udivmodsi4_ep>:
 ac0:	66 1f       	adc	r22, r22
 ac2:	77 1f       	adc	r23, r23
 ac4:	88 1f       	adc	r24, r24
 ac6:	99 1f       	adc	r25, r25
 ac8:	1a 94       	dec	r1
 aca:	69 f7       	brne	.-38     	; 0xaa6 <__udivmodsi4_loop>
 acc:	60 95       	com	r22
 ace:	70 95       	com	r23
 ad0:	80 95       	com	r24
 ad2:	90 95       	com	r25
 ad4:	9b 01       	movw	r18, r22
 ad6:	ac 01       	movw	r20, r24
 ad8:	bd 01       	movw	r22, r26
 ada:	cf 01       	movw	r24, r30
 adc:	08 95       	ret

00000ade <__muluhisi3>:
 ade:	09 d0       	rcall	.+18     	; 0xaf2 <__umulhisi3>
 ae0:	a5 9f       	mul	r26, r21
 ae2:	90 0d       	add	r25, r0
 ae4:	b4 9f       	mul	r27, r20
 ae6:	90 0d       	add	r25, r0
 ae8:	a4 9f       	mul	r26, r20
 aea:	80 0d       	add	r24, r0
 aec:	91 1d       	adc	r25, r1
 aee:	11 24       	eor	r1, r1
 af0:	08 95       	ret

00000af2 <__umulhisi3>:
 af2:	a2 9f       	mul	r26, r18
 af4:	b0 01       	movw	r22, r0
 af6:	b3 9f       	mul	r27, r19
 af8:	c0 01       	movw	r24, r0
 afa:	a3 9f       	mul	r26, r19
 afc:	70 0d       	add	r23, r0
 afe:	81 1d       	adc	r24, r1
 b00:	11 24       	eor	r1, r1
 b02:	91 1d       	adc	r25, r1
 b04:	b2 9f       	mul	r27, r18
 b06:	70 0d       	add	r23, r0
 b08:	81 1d       	adc	r24, r1
 b0a:	11 24       	eor	r1, r1
 b0c:	91 1d       	adc	r25, r1
 b0e:	08 95       	ret

00000b10 <_exit>:
 b10:	f8 94       	cli

00000b12 <__stop_program>:
 b12:	ff cf       	rjmp	.-2      	; 0xb12 <__stop_program>
