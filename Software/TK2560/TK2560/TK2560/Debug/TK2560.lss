
TK2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000340  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ec  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000370  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  000003b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000013ec  00000000  00000000  00000420  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000e0a  00000000  00000000  0000180c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005d1  00000000  00000000  00002616  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  00002be8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000650  00000000  00000000  00002c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000039d  00000000  00000000  000032bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00003659  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	df c0       	rjmp	.+446    	; 0x1c0 <__ctors_end>
   2:	00 00       	nop
   4:	e7 c0       	rjmp	.+462    	; 0x1d4 <__bad_interrupt>
   6:	00 00       	nop
   8:	e5 c0       	rjmp	.+458    	; 0x1d4 <__bad_interrupt>
   a:	00 00       	nop
   c:	e3 c0       	rjmp	.+454    	; 0x1d4 <__bad_interrupt>
   e:	00 00       	nop
  10:	e1 c0       	rjmp	.+450    	; 0x1d4 <__bad_interrupt>
  12:	00 00       	nop
  14:	df c0       	rjmp	.+446    	; 0x1d4 <__bad_interrupt>
  16:	00 00       	nop
  18:	dd c0       	rjmp	.+442    	; 0x1d4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	db c0       	rjmp	.+438    	; 0x1d4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	d9 c0       	rjmp	.+434    	; 0x1d4 <__bad_interrupt>
  22:	00 00       	nop
  24:	d7 c0       	rjmp	.+430    	; 0x1d4 <__bad_interrupt>
  26:	00 00       	nop
  28:	d5 c0       	rjmp	.+426    	; 0x1d4 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	d3 c0       	rjmp	.+422    	; 0x1d4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	d1 c0       	rjmp	.+418    	; 0x1d4 <__bad_interrupt>
  32:	00 00       	nop
  34:	cf c0       	rjmp	.+414    	; 0x1d4 <__bad_interrupt>
  36:	00 00       	nop
  38:	cd c0       	rjmp	.+410    	; 0x1d4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	cb c0       	rjmp	.+406    	; 0x1d4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	c9 c0       	rjmp	.+402    	; 0x1d4 <__bad_interrupt>
  42:	00 00       	nop
  44:	c7 c0       	rjmp	.+398    	; 0x1d4 <__bad_interrupt>
  46:	00 00       	nop
  48:	c5 c0       	rjmp	.+394    	; 0x1d4 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	c3 c0       	rjmp	.+390    	; 0x1d4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	c1 c0       	rjmp	.+386    	; 0x1d4 <__bad_interrupt>
  52:	00 00       	nop
  54:	bf c0       	rjmp	.+382    	; 0x1d4 <__bad_interrupt>
  56:	00 00       	nop
  58:	bd c0       	rjmp	.+378    	; 0x1d4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	bb c0       	rjmp	.+374    	; 0x1d4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	b9 c0       	rjmp	.+370    	; 0x1d4 <__bad_interrupt>
  62:	00 00       	nop
  64:	b7 c0       	rjmp	.+366    	; 0x1d4 <__bad_interrupt>
  66:	00 00       	nop
  68:	b5 c0       	rjmp	.+362    	; 0x1d4 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	b3 c0       	rjmp	.+358    	; 0x1d4 <__bad_interrupt>
  6e:	00 00       	nop
  70:	b1 c0       	rjmp	.+354    	; 0x1d4 <__bad_interrupt>
  72:	00 00       	nop
  74:	af c0       	rjmp	.+350    	; 0x1d4 <__bad_interrupt>
  76:	00 00       	nop
  78:	ad c0       	rjmp	.+346    	; 0x1d4 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	ab c0       	rjmp	.+342    	; 0x1d4 <__bad_interrupt>
  7e:	00 00       	nop
  80:	a9 c0       	rjmp	.+338    	; 0x1d4 <__bad_interrupt>
  82:	00 00       	nop
  84:	a7 c0       	rjmp	.+334    	; 0x1d4 <__bad_interrupt>
  86:	00 00       	nop
  88:	a5 c0       	rjmp	.+330    	; 0x1d4 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	a3 c0       	rjmp	.+326    	; 0x1d4 <__bad_interrupt>
  8e:	00 00       	nop
  90:	a1 c0       	rjmp	.+322    	; 0x1d4 <__bad_interrupt>
  92:	00 00       	nop
  94:	9f c0       	rjmp	.+318    	; 0x1d4 <__bad_interrupt>
  96:	00 00       	nop
  98:	9d c0       	rjmp	.+314    	; 0x1d4 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	9b c0       	rjmp	.+310    	; 0x1d4 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	99 c0       	rjmp	.+306    	; 0x1d4 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	97 c0       	rjmp	.+302    	; 0x1d4 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	95 c0       	rjmp	.+298    	; 0x1d4 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	93 c0       	rjmp	.+294    	; 0x1d4 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	91 c0       	rjmp	.+290    	; 0x1d4 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	8f c0       	rjmp	.+286    	; 0x1d4 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	8d c0       	rjmp	.+282    	; 0x1d4 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	8b c0       	rjmp	.+278    	; 0x1d4 <__bad_interrupt>
  be:	00 00       	nop
  c0:	89 c0       	rjmp	.+274    	; 0x1d4 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	87 c0       	rjmp	.+270    	; 0x1d4 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	85 c0       	rjmp	.+266    	; 0x1d4 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	83 c0       	rjmp	.+262    	; 0x1d4 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	81 c0       	rjmp	.+258    	; 0x1d4 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	7f c0       	rjmp	.+254    	; 0x1d4 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	7d c0       	rjmp	.+250    	; 0x1d4 <__bad_interrupt>
  da:	00 00       	nop
  dc:	7b c0       	rjmp	.+246    	; 0x1d4 <__bad_interrupt>
  de:	00 00       	nop
  e0:	79 c0       	rjmp	.+242    	; 0x1d4 <__bad_interrupt>
	...

000000e4 <__trampolines_end>:
  e4:	01 02       	muls	r16, r17
  e6:	10 20       	and	r1, r0
  e8:	20 08       	sbc	r2, r0
  ea:	08 10       	cpse	r0, r8
  ec:	20 40       	sbci	r18, 0x00	; 0
  ee:	10 20       	and	r1, r0
  f0:	40 80       	ld	r4, Z
  f2:	02 01       	movw	r0, r4
  f4:	02 01       	movw	r0, r4
  f6:	08 04       	cpc	r0, r8
  f8:	02 01       	movw	r0, r4
  fa:	01 02       	muls	r16, r17
  fc:	04 08       	sbc	r0, r4
  fe:	10 20       	and	r1, r0
 100:	40 80       	ld	r4, Z
 102:	80 40       	sbci	r24, 0x00	; 0
 104:	20 10       	cpse	r2, r0
 106:	08 04       	cpc	r0, r8
 108:	02 01       	movw	r0, r4
 10a:	80 04       	cpc	r8, r0
 10c:	02 01       	movw	r0, r4
 10e:	80 40       	sbci	r24, 0x00	; 0
 110:	20 10       	cpse	r2, r0
 112:	08 04       	cpc	r0, r8
 114:	02 01       	movw	r0, r4
 116:	08 04       	cpc	r0, r8
 118:	02 01       	movw	r0, r4
 11a:	01 02       	muls	r16, r17
 11c:	04 08       	sbc	r0, r4
 11e:	10 20       	and	r1, r0
 120:	40 80       	ld	r4, Z
 122:	01 02       	muls	r16, r17
 124:	04 08       	sbc	r0, r4
 126:	10 20       	and	r1, r0
 128:	40 80       	ld	r4, Z
 12a:	04 05       	Address 0x0000012a is out of bounds.
.word	0xffff	; ????

0000012b <pin_to_port_PGM>:
 12b:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
 13b:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
 14b:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
 15b:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
 16b:	0b 0b 0b 0b 0b 0b 0a                                .......

00000172 <port_to_input_PGM>:
 172:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
 182:	00 01 00 00 03 01 06 01 09 01                       ..........

0000018c <port_to_output_PGM>:
 18c:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
 19c:	02 01 00 00 05 01 08 01 0b 01                       ..........

000001a6 <port_to_ddr_PGM>:
 1a6:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
 1b6:	01 01 00 00 04 01 07 01 0a 01                       ..........

000001c0 <__ctors_end>:
 1c0:	11 24       	eor	r1, r1
 1c2:	1f be       	out	0x3f, r1	; 63
 1c4:	cf ef       	ldi	r28, 0xFF	; 255
 1c6:	d1 e2       	ldi	r29, 0x21	; 33
 1c8:	de bf       	out	0x3e, r29	; 62
 1ca:	cd bf       	out	0x3d, r28	; 61
 1cc:	00 e0       	ldi	r16, 0x00	; 0
 1ce:	0c bf       	out	0x3c, r16	; 60
 1d0:	78 d0       	rcall	.+240    	; 0x2c2 <main>
 1d2:	8a c0       	rjmp	.+276    	; 0x2e8 <_exit>

000001d4 <__bad_interrupt>:
 1d4:	15 cf       	rjmp	.-470    	; 0x0 <__vectors>

000001d6 <pinMode>:
		*out &= ~bit;
	} else {
		*out |= bit;
	}
	
	SREG = oldSREG;
 1d6:	cf 93       	push	r28
 1d8:	df 93       	push	r29
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	fc 01       	movw	r30, r24
 1de:	ec 51       	subi	r30, 0x1C	; 28
 1e0:	ff 4f       	sbci	r31, 0xFF	; 255
 1e2:	24 91       	lpm	r18, Z
 1e4:	fc 01       	movw	r30, r24
 1e6:	e5 5d       	subi	r30, 0xD5	; 213
 1e8:	fe 4f       	sbci	r31, 0xFE	; 254
 1ea:	84 91       	lpm	r24, Z
 1ec:	88 23       	and	r24, r24
 1ee:	79 f1       	breq	.+94     	; 0x24e <pinMode+0x78>
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	88 0f       	add	r24, r24
 1f4:	99 1f       	adc	r25, r25
 1f6:	fc 01       	movw	r30, r24
 1f8:	ea 55       	subi	r30, 0x5A	; 90
 1fa:	fe 4f       	sbci	r31, 0xFE	; 254
 1fc:	a5 91       	lpm	r26, Z+
 1fe:	b4 91       	lpm	r27, Z
 200:	fc 01       	movw	r30, r24
 202:	e4 57       	subi	r30, 0x74	; 116
 204:	fe 4f       	sbci	r31, 0xFE	; 254
 206:	c5 91       	lpm	r28, Z+
 208:	d4 91       	lpm	r29, Z
 20a:	61 11       	cpse	r22, r1
 20c:	0c c0       	rjmp	.+24     	; 0x226 <pinMode+0x50>
 20e:	9f b7       	in	r25, 0x3f	; 63
 210:	f8 94       	cli
 212:	8c 91       	ld	r24, X
 214:	e2 2f       	mov	r30, r18
 216:	e0 95       	com	r30
 218:	8e 23       	and	r24, r30
 21a:	8c 93       	st	X, r24
 21c:	28 81       	ld	r18, Y
 21e:	e2 23       	and	r30, r18
 220:	e8 83       	st	Y, r30
 222:	9f bf       	out	0x3f, r25	; 63
 224:	14 c0       	rjmp	.+40     	; 0x24e <pinMode+0x78>
 226:	62 30       	cpi	r22, 0x02	; 2
 228:	61 f4       	brne	.+24     	; 0x242 <pinMode+0x6c>
 22a:	9f b7       	in	r25, 0x3f	; 63
 22c:	f8 94       	cli
 22e:	8c 91       	ld	r24, X
 230:	32 2f       	mov	r19, r18
 232:	30 95       	com	r19
 234:	83 23       	and	r24, r19
 236:	8c 93       	st	X, r24
 238:	e8 81       	ld	r30, Y
 23a:	e2 2b       	or	r30, r18
 23c:	e8 83       	st	Y, r30
 23e:	9f bf       	out	0x3f, r25	; 63
 240:	06 c0       	rjmp	.+12     	; 0x24e <pinMode+0x78>
 242:	8f b7       	in	r24, 0x3f	; 63
 244:	f8 94       	cli
 246:	ec 91       	ld	r30, X
 248:	e2 2b       	or	r30, r18
 24a:	ec 93       	st	X, r30
 24c:	8f bf       	out	0x3f, r24	; 63
 24e:	df 91       	pop	r29
 250:	cf 91       	pop	r28
 252:	08 95       	ret

00000254 <togglePin>:
	
}

void togglePin(uint8_t pin)
{
	uint8_t bit = pinToBitMask(pin);
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	fc 01       	movw	r30, r24
 258:	ec 51       	subi	r30, 0x1C	; 28
 25a:	ff 4f       	sbci	r31, 0xFF	; 255
 25c:	24 91       	lpm	r18, Z
	uint8_t port = pinToPort(pin);
 25e:	fc 01       	movw	r30, r24
 260:	e5 5d       	subi	r30, 0xD5	; 213
 262:	fe 4f       	sbci	r31, 0xFE	; 254
 264:	84 91       	lpm	r24, Z
	volatile uint8_t *out;
	
	if (port == NOT_A_PIN) return;
 266:	88 23       	and	r24, r24
 268:	71 f0       	breq	.+28     	; 0x286 <togglePin+0x32>
	
	out = portOutputRegister(port);
 26a:	e8 2f       	mov	r30, r24
 26c:	f0 e0       	ldi	r31, 0x00	; 0
 26e:	ee 0f       	add	r30, r30
 270:	ff 1f       	adc	r31, r31
 272:	e4 57       	subi	r30, 0x74	; 116
 274:	fe 4f       	sbci	r31, 0xFE	; 254
 276:	a5 91       	lpm	r26, Z+
 278:	b4 91       	lpm	r27, Z
	
	uint8_t oldSREG = SREG;
 27a:	8f b7       	in	r24, 0x3f	; 63
	cli();
 27c:	f8 94       	cli
	
	//toggle
	*out ^= bit;
 27e:	ec 91       	ld	r30, X
 280:	e2 27       	eor	r30, r18
 282:	ec 93       	st	X, r30
	
	SREG = oldSREG;
 284:	8f bf       	out	0x3f, r24	; 63
 286:	08 95       	ret

00000288 <digitalRead>:
}

int  digitalRead(uint8_t pin)
{
	uint8_t bit = pinToBitMask(pin);
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	fc 01       	movw	r30, r24
 28c:	ec 51       	subi	r30, 0x1C	; 28
 28e:	ff 4f       	sbci	r31, 0xFF	; 255
 290:	24 91       	lpm	r18, Z
	uint8_t port = pinToPort(pin);
 292:	fc 01       	movw	r30, r24
 294:	e5 5d       	subi	r30, 0xD5	; 213
 296:	fe 4f       	sbci	r31, 0xFE	; 254
 298:	84 91       	lpm	r24, Z
	
	if (port == NOT_A_PIN) return LOW;
 29a:	88 23       	and	r24, r24
 29c:	79 f0       	breq	.+30     	; 0x2bc <digitalRead+0x34>
	
	if (*portInputRegister(port) & bit) return HIGH;
 29e:	e8 2f       	mov	r30, r24
 2a0:	f0 e0       	ldi	r31, 0x00	; 0
 2a2:	ee 0f       	add	r30, r30
 2a4:	ff 1f       	adc	r31, r31
 2a6:	ee 58       	subi	r30, 0x8E	; 142
 2a8:	fe 4f       	sbci	r31, 0xFE	; 254
 2aa:	a5 91       	lpm	r26, Z+
 2ac:	b4 91       	lpm	r27, Z
 2ae:	ec 91       	ld	r30, X
int  digitalRead(uint8_t pin)
{
	uint8_t bit = pinToBitMask(pin);
	uint8_t port = pinToPort(pin);
	
	if (port == NOT_A_PIN) return LOW;
 2b0:	e2 23       	and	r30, r18
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	21 f4       	brne	.+8      	; 0x2c0 <digitalRead+0x38>
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	08 95       	ret
 2bc:	80 e0       	ldi	r24, 0x00	; 0
 2be:	90 e0       	ldi	r25, 0x00	; 0
	
	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;	
}
 2c0:	08 95       	ret

000002c2 <main>:


int main(void)
{
    /* Replace with your application code */
	pinMode(Pin_PK0, OUTPUT);
 2c2:	61 e0       	ldi	r22, 0x01	; 1
 2c4:	8e e3       	ldi	r24, 0x3E	; 62
 2c6:	87 df       	rcall	.-242    	; 0x1d6 <pinMode>
	pinMode(Pin_PJ2, INPUT);
 2c8:	60 e0       	ldi	r22, 0x00	; 0
 2ca:	86 e4       	ldi	r24, 0x46	; 70
 2cc:	84 df       	rcall	.-248    	; 0x1d6 <pinMode>
	
    while (1) 
    {
		if (digitalRead(Pin_PJ2))
 2ce:	86 e4       	ldi	r24, 0x46	; 70
 2d0:	db df       	rcall	.-74     	; 0x288 <digitalRead>
 2d2:	89 2b       	or	r24, r25
 2d4:	e1 f3       	breq	.-8      	; 0x2ce <main+0xc>
 2d6:	8b e5       	ldi	r24, 0x5B	; 91
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2d8:	94 e4       	ldi	r25, 0x44	; 68
 2da:	01 97       	sbiw	r24, 0x01	; 1
 2dc:	f1 f7       	brne	.-4      	; 0x2da <main+0x18>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <main+0x1e>
 2e0:	00 00       	nop
		{
			_delay_ms(70);
			togglePin(Pin_PK0);
 2e2:	8e e3       	ldi	r24, 0x3E	; 62
 2e4:	b7 df       	rcall	.-146    	; 0x254 <togglePin>
 2e6:	f3 cf       	rjmp	.-26     	; 0x2ce <main+0xc>

000002e8 <_exit>:
 2e8:	f8 94       	cli

000002ea <__stop_program>:
 2ea:	ff cf       	rjmp	.-2      	; 0x2ea <__stop_program>
