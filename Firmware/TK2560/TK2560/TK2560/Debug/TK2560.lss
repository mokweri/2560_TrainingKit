
TK2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000044  00800200  000025c0  00002654  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000025c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000297  00800244  00800244  00002698  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002698  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000026c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000006c0  00000000  00000000  00002708  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000794f  00000000  00000000  00002dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000025e7  00000000  00000000  0000a717  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004024  00000000  00000000  0000ccfe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000158c  00000000  00000000  00010d24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001a81  00000000  00000000  000122b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000056be  00000000  00000000  00013d31  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000638  00000000  00000000  000193ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	06 c2       	rjmp	.+1036   	; 0x40e <__ctors_end>
       2:	00 00       	nop
       4:	3c c7       	rjmp	.+3704   	; 0xe7e <__vector_1>
       6:	00 00       	nop
       8:	65 c7       	rjmp	.+3786   	; 0xed4 <__vector_2>
       a:	00 00       	nop
       c:	8e c7       	rjmp	.+3868   	; 0xf2a <__vector_3>
       e:	00 00       	nop
      10:	b7 c7       	rjmp	.+3950   	; 0xf80 <__vector_4>
      12:	00 00       	nop
      14:	e0 c7       	rjmp	.+4032   	; 0xfd6 <__vector_5>
      16:	00 00       	nop
      18:	0c 94 16 08 	jmp	0x102c	; 0x102c <__vector_6>
      1c:	0c 94 41 08 	jmp	0x1082	; 0x1082 <__vector_7>
      20:	0c 94 6c 08 	jmp	0x10d8	; 0x10d8 <__vector_8>
      24:	0c 94 e6 09 	jmp	0x13cc	; 0x13cc <__vector_9>
      28:	0c 94 5e 0a 	jmp	0x14bc	; 0x14bc <__vector_10>
      2c:	0c 94 db 0a 	jmp	0x15b6	; 0x15b6 <__vector_11>
      30:	0f c2       	rjmp	.+1054   	; 0x450 <__bad_interrupt>
      32:	00 00       	nop
      34:	0d c2       	rjmp	.+1050   	; 0x450 <__bad_interrupt>
      36:	00 00       	nop
      38:	0b c2       	rjmp	.+1046   	; 0x450 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	09 c2       	rjmp	.+1042   	; 0x450 <__bad_interrupt>
      3e:	00 00       	nop
      40:	07 c2       	rjmp	.+1038   	; 0x450 <__bad_interrupt>
      42:	00 00       	nop
      44:	05 c2       	rjmp	.+1034   	; 0x450 <__bad_interrupt>
      46:	00 00       	nop
      48:	03 c2       	rjmp	.+1030   	; 0x450 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	01 c2       	rjmp	.+1026   	; 0x450 <__bad_interrupt>
      4e:	00 00       	nop
      50:	ff c1       	rjmp	.+1022   	; 0x450 <__bad_interrupt>
      52:	00 00       	nop
      54:	fd c1       	rjmp	.+1018   	; 0x450 <__bad_interrupt>
      56:	00 00       	nop
      58:	fb c1       	rjmp	.+1014   	; 0x450 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 9b 0d 	jmp	0x1b36	; 0x1b36 <__vector_23>
      60:	0c 94 ba 0c 	jmp	0x1974	; 0x1974 <__vector_24>
      64:	40 c6       	rjmp	.+3200   	; 0xce6 <__vector_25>
      66:	00 00       	nop
      68:	65 c6       	rjmp	.+3274   	; 0xd34 <__vector_26>
      6a:	00 00       	nop
      6c:	f1 c1       	rjmp	.+994    	; 0x450 <__bad_interrupt>
      6e:	00 00       	nop
      70:	ef c1       	rjmp	.+990    	; 0x450 <__bad_interrupt>
      72:	00 00       	nop
      74:	ed c1       	rjmp	.+986    	; 0x450 <__bad_interrupt>
      76:	00 00       	nop
      78:	eb c1       	rjmp	.+982    	; 0x450 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e9 c1       	rjmp	.+978    	; 0x450 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 1f 0e 	jmp	0x1c3e	; 0x1c3e <__vector_32>
      84:	e5 c1       	rjmp	.+970    	; 0x450 <__bad_interrupt>
      86:	00 00       	nop
      88:	e3 c1       	rjmp	.+966    	; 0x450 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e1 c1       	rjmp	.+962    	; 0x450 <__bad_interrupt>
      8e:	00 00       	nop
      90:	df c1       	rjmp	.+958    	; 0x450 <__bad_interrupt>
      92:	00 00       	nop
      94:	dd c1       	rjmp	.+954    	; 0x450 <__bad_interrupt>
      96:	00 00       	nop
      98:	db c1       	rjmp	.+950    	; 0x450 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 09 11 	jmp	0x2212	; 0x2212 <__vector_39>
      a0:	d7 c1       	rjmp	.+942    	; 0x450 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d5 c1       	rjmp	.+938    	; 0x450 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	d3 c1       	rjmp	.+934    	; 0x450 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	d1 c1       	rjmp	.+930    	; 0x450 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	cf c1       	rjmp	.+926    	; 0x450 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	cd c1       	rjmp	.+922    	; 0x450 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	cb c1       	rjmp	.+918    	; 0x450 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	c9 c1       	rjmp	.+914    	; 0x450 <__bad_interrupt>
      be:	00 00       	nop
      c0:	c7 c1       	rjmp	.+910    	; 0x450 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	c5 c1       	rjmp	.+906    	; 0x450 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	c3 c1       	rjmp	.+902    	; 0x450 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 6c 0c 	jmp	0x18d8	; 0x18d8 <__vector_51>
      d0:	0c 94 93 0c 	jmp	0x1926	; 0x1926 <__vector_52>
      d4:	bd c1       	rjmp	.+890    	; 0x450 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	bb c1       	rjmp	.+886    	; 0x450 <__bad_interrupt>
      da:	00 00       	nop
      dc:	b9 c1       	rjmp	.+882    	; 0x450 <__bad_interrupt>
      de:	00 00       	nop
      e0:	b7 c1       	rjmp	.+878    	; 0x450 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	d9 06       	cpc	r13, r25
      e6:	e1 06       	cpc	r14, r17
      e8:	ed 06       	cpc	r14, r29
      ea:	fb 06       	cpc	r15, r27
      ec:	0c 07       	cpc	r16, r28
      ee:	14 07       	cpc	r17, r20
      f0:	20 07       	cpc	r18, r16
      f2:	2e 07       	cpc	r18, r30
      f4:	8a 0b       	sbc	r24, r26
      f6:	8f 0b       	sbc	r24, r31
      f8:	94 0b       	sbc	r25, r20
      fa:	9e 0b       	sbc	r25, r30
      fc:	a8 0b       	sbc	r26, r24
      fe:	1c 0c       	add	r1, r12
     100:	b2 0b       	sbc	r27, r18
     102:	ba 0b       	sbc	r27, r26
     104:	c2 0b       	sbc	r28, r18
     106:	cc 0b       	sbc	r28, r28
     108:	d6 0b       	sbc	r29, r22
     10a:	e0 0b       	sbc	r30, r16
     10c:	ea 0b       	sbc	r30, r26
     10e:	f4 0b       	sbc	r31, r20
     110:	1c 0c       	add	r1, r12
     112:	fe 0b       	sbc	r31, r30
     114:	08 0c       	add	r0, r8
     116:	12 0c       	add	r1, r2
     118:	0f 12       	cpse	r0, r31
     11a:	12 12       	cpse	r1, r18
     11c:	12 12       	cpse	r1, r18
     11e:	12 12       	cpse	r1, r18
     120:	12 12       	cpse	r1, r18
     122:	12 12       	cpse	r1, r18
     124:	12 12       	cpse	r1, r18
     126:	12 12       	cpse	r1, r18
     128:	2a 11       	cpse	r18, r10
     12a:	12 12       	cpse	r1, r18
     12c:	12 12       	cpse	r1, r18
     12e:	12 12       	cpse	r1, r18
     130:	12 12       	cpse	r1, r18
     132:	12 12       	cpse	r1, r18
     134:	12 12       	cpse	r1, r18
     136:	12 12       	cpse	r1, r18
     138:	2a 11       	cpse	r18, r10
     13a:	12 12       	cpse	r1, r18
     13c:	12 12       	cpse	r1, r18
     13e:	12 12       	cpse	r1, r18
     140:	12 12       	cpse	r1, r18
     142:	12 12       	cpse	r1, r18
     144:	12 12       	cpse	r1, r18
     146:	12 12       	cpse	r1, r18
     148:	32 11       	cpse	r19, r2
     14a:	12 12       	cpse	r1, r18
     14c:	12 12       	cpse	r1, r18
     14e:	12 12       	cpse	r1, r18
     150:	12 12       	cpse	r1, r18
     152:	12 12       	cpse	r1, r18
     154:	12 12       	cpse	r1, r18
     156:	12 12       	cpse	r1, r18
     158:	57 11       	cpse	r21, r7
     15a:	12 12       	cpse	r1, r18
     15c:	12 12       	cpse	r1, r18
     15e:	12 12       	cpse	r1, r18
     160:	12 12       	cpse	r1, r18
     162:	12 12       	cpse	r1, r18
     164:	12 12       	cpse	r1, r18
     166:	12 12       	cpse	r1, r18
     168:	32 11       	cpse	r19, r2
     16a:	12 12       	cpse	r1, r18
     16c:	12 12       	cpse	r1, r18
     16e:	12 12       	cpse	r1, r18
     170:	12 12       	cpse	r1, r18
     172:	12 12       	cpse	r1, r18
     174:	12 12       	cpse	r1, r18
     176:	12 12       	cpse	r1, r18
     178:	5c 11       	cpse	r21, r12
     17a:	12 12       	cpse	r1, r18
     17c:	12 12       	cpse	r1, r18
     17e:	12 12       	cpse	r1, r18
     180:	12 12       	cpse	r1, r18
     182:	12 12       	cpse	r1, r18
     184:	12 12       	cpse	r1, r18
     186:	12 12       	cpse	r1, r18
     188:	61 11       	cpse	r22, r1
     18a:	12 12       	cpse	r1, r18
     18c:	12 12       	cpse	r1, r18
     18e:	12 12       	cpse	r1, r18
     190:	12 12       	cpse	r1, r18
     192:	12 12       	cpse	r1, r18
     194:	12 12       	cpse	r1, r18
     196:	12 12       	cpse	r1, r18
     198:	72 11       	cpse	r23, r2
     19a:	12 12       	cpse	r1, r18
     19c:	12 12       	cpse	r1, r18
     19e:	12 12       	cpse	r1, r18
     1a0:	12 12       	cpse	r1, r18
     1a2:	12 12       	cpse	r1, r18
     1a4:	12 12       	cpse	r1, r18
     1a6:	12 12       	cpse	r1, r18
     1a8:	9b 11       	cpse	r25, r11
     1aa:	12 12       	cpse	r1, r18
     1ac:	12 12       	cpse	r1, r18
     1ae:	12 12       	cpse	r1, r18
     1b0:	12 12       	cpse	r1, r18
     1b2:	12 12       	cpse	r1, r18
     1b4:	12 12       	cpse	r1, r18
     1b6:	12 12       	cpse	r1, r18
     1b8:	66 11       	cpse	r22, r6
     1ba:	12 12       	cpse	r1, r18
     1bc:	12 12       	cpse	r1, r18
     1be:	12 12       	cpse	r1, r18
     1c0:	12 12       	cpse	r1, r18
     1c2:	12 12       	cpse	r1, r18
     1c4:	12 12       	cpse	r1, r18
     1c6:	12 12       	cpse	r1, r18
     1c8:	80 11       	cpse	r24, r0
     1ca:	12 12       	cpse	r1, r18
     1cc:	12 12       	cpse	r1, r18
     1ce:	12 12       	cpse	r1, r18
     1d0:	12 12       	cpse	r1, r18
     1d2:	12 12       	cpse	r1, r18
     1d4:	12 12       	cpse	r1, r18
     1d6:	12 12       	cpse	r1, r18
     1d8:	9d 11       	cpse	r25, r13
     1da:	12 12       	cpse	r1, r18
     1dc:	12 12       	cpse	r1, r18
     1de:	12 12       	cpse	r1, r18
     1e0:	12 12       	cpse	r1, r18
     1e2:	12 12       	cpse	r1, r18
     1e4:	12 12       	cpse	r1, r18
     1e6:	12 12       	cpse	r1, r18
     1e8:	9d 11       	cpse	r25, r13
     1ea:	12 12       	cpse	r1, r18
     1ec:	12 12       	cpse	r1, r18
     1ee:	12 12       	cpse	r1, r18
     1f0:	12 12       	cpse	r1, r18
     1f2:	12 12       	cpse	r1, r18
     1f4:	12 12       	cpse	r1, r18
     1f6:	12 12       	cpse	r1, r18
     1f8:	9d 11       	cpse	r25, r13
     1fa:	12 12       	cpse	r1, r18
     1fc:	12 12       	cpse	r1, r18
     1fe:	12 12       	cpse	r1, r18
     200:	12 12       	cpse	r1, r18
     202:	12 12       	cpse	r1, r18
     204:	12 12       	cpse	r1, r18
     206:	12 12       	cpse	r1, r18
     208:	9d 11       	cpse	r25, r13
     20a:	12 12       	cpse	r1, r18
     20c:	12 12       	cpse	r1, r18
     20e:	12 12       	cpse	r1, r18
     210:	12 12       	cpse	r1, r18
     212:	12 12       	cpse	r1, r18
     214:	12 12       	cpse	r1, r18
     216:	12 12       	cpse	r1, r18
     218:	a6 11       	cpse	r26, r6
     21a:	12 12       	cpse	r1, r18
     21c:	12 12       	cpse	r1, r18
     21e:	12 12       	cpse	r1, r18
     220:	12 12       	cpse	r1, r18
     222:	12 12       	cpse	r1, r18
     224:	12 12       	cpse	r1, r18
     226:	12 12       	cpse	r1, r18
     228:	d6 11       	cpse	r29, r6
     22a:	12 12       	cpse	r1, r18
     22c:	12 12       	cpse	r1, r18
     22e:	12 12       	cpse	r1, r18
     230:	12 12       	cpse	r1, r18
     232:	12 12       	cpse	r1, r18
     234:	12 12       	cpse	r1, r18
     236:	12 12       	cpse	r1, r18
     238:	a6 11       	cpse	r26, r6
     23a:	12 12       	cpse	r1, r18
     23c:	12 12       	cpse	r1, r18
     23e:	12 12       	cpse	r1, r18
     240:	12 12       	cpse	r1, r18
     242:	12 12       	cpse	r1, r18
     244:	12 12       	cpse	r1, r18
     246:	12 12       	cpse	r1, r18
     248:	d6 11       	cpse	r29, r6
     24a:	12 12       	cpse	r1, r18
     24c:	12 12       	cpse	r1, r18
     24e:	12 12       	cpse	r1, r18
     250:	12 12       	cpse	r1, r18
     252:	12 12       	cpse	r1, r18
     254:	12 12       	cpse	r1, r18
     256:	12 12       	cpse	r1, r18
     258:	be 11       	cpse	r27, r14
     25a:	12 12       	cpse	r1, r18
     25c:	12 12       	cpse	r1, r18
     25e:	12 12       	cpse	r1, r18
     260:	12 12       	cpse	r1, r18
     262:	12 12       	cpse	r1, r18
     264:	12 12       	cpse	r1, r18
     266:	12 12       	cpse	r1, r18
     268:	da 11       	cpse	r29, r10
     26a:	12 12       	cpse	r1, r18
     26c:	12 12       	cpse	r1, r18
     26e:	12 12       	cpse	r1, r18
     270:	12 12       	cpse	r1, r18
     272:	12 12       	cpse	r1, r18
     274:	12 12       	cpse	r1, r18
     276:	12 12       	cpse	r1, r18
     278:	da 11       	cpse	r29, r10
     27a:	12 12       	cpse	r1, r18
     27c:	12 12       	cpse	r1, r18
     27e:	12 12       	cpse	r1, r18
     280:	12 12       	cpse	r1, r18
     282:	12 12       	cpse	r1, r18
     284:	12 12       	cpse	r1, r18
     286:	12 12       	cpse	r1, r18
     288:	ef 11       	cpse	r30, r15
     28a:	12 12       	cpse	r1, r18
     28c:	12 12       	cpse	r1, r18
     28e:	12 12       	cpse	r1, r18
     290:	12 12       	cpse	r1, r18
     292:	12 12       	cpse	r1, r18
     294:	12 12       	cpse	r1, r18
     296:	12 12       	cpse	r1, r18
     298:	09 12       	cpse	r0, r25
     29a:	12 12       	cpse	r1, r18
     29c:	12 12       	cpse	r1, r18
     29e:	12 12       	cpse	r1, r18
     2a0:	12 12       	cpse	r1, r18
     2a2:	12 12       	cpse	r1, r18
     2a4:	12 12       	cpse	r1, r18
     2a6:	12 12       	cpse	r1, r18
     2a8:	09 12       	cpse	r0, r25

000002aa <__trampolines_end>:
     2aa:	00 02       	muls	r16, r16
     2ac:	00 00       	nop
     2ae:	00 09       	sbc	r16, r0
     2b0:	0a 0b       	sbc	r16, r26
     2b2:	00 00       	nop
     2b4:	00 00       	nop
     2b6:	00 00       	nop
     2b8:	00 0c       	add	r0, r0
     2ba:	0d 0e       	add	r0, r29
     2bc:	08 00       	.word	0x0008	; ????
     2be:	00 00       	nop
     2c0:	00 07       	cpc	r16, r16
     2c2:	03 04       	cpc	r0, r3
     2c4:	01 00       	.word	0x0001	; ????
	...
     2ce:	00 00       	nop
     2d0:	10 11       	cpse	r17, r0
     2d2:	12 00       	.word	0x0012	; ????
	...

0000030f <pin_to_bit_mask_PGM>:
     30f:	00 20 01 02 04 08 10 20 40 80 00 00 01 02 04 08     . ..... @.......
     31f:	10 20 40 01 02 04 08 10 20 40 80 80 08 10 00 00     . @..... @......
     32f:	00 00 00 01 02 04 08 10 20 40 80 01 02 04 08 10     ........ @......
     33f:	20 40 80 01 02 01 02 04 08 10 20 40 80 00 00 01      @........ @....
     34f:	02 04 08 10 20 40 04 80 40 20 10 08 04 02 01 80     .... @..@ ......
     35f:	00 00 80 40 20 10 08 04 02 01 80 40 20 10 08 04     ...@ ......@ ...
     36f:	02 01 00 00 00                                      .....

00000374 <pin_to_port_PGM>:
     374:	00 07 05 05 05 05 05 05 05 05 00 00 08 08 08 08     ................
     384:	08 08 08 02 02 02 02 02 02 02 02 08 07 07 00 00     ................
     394:	00 00 00 0c 0c 0c 0c 0c 0c 0c 0c 04 04 04 04 04     ................
     3a4:	04 04 04 07 07 03 03 03 03 03 03 03 03 00 00 0a     ................
     3b4:	0a 0a 0a 0a 0a 0a 07 01 01 01 01 01 01 01 01 0a     ................
     3c4:	00 00 0b 0b 0b 0b 0b 0b 0b 0b 06 06 06 06 06 06     ................
     3d4:	06 06 00 00 00                                      .....

000003d9 <port_to_output_PGM>:
     3d9:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     3e9:	02 01 00 00 05 01 08 01 0b 01                       ..........

000003f3 <port_to_ddr_PGM>:
     3f3:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     403:	01 01 00 00 04 01 07 01 0a 01 00                    ...........

0000040e <__ctors_end>:
     40e:	11 24       	eor	r1, r1
     410:	1f be       	out	0x3f, r1	; 63
     412:	cf ef       	ldi	r28, 0xFF	; 255
     414:	d1 e2       	ldi	r29, 0x21	; 33
     416:	de bf       	out	0x3e, r29	; 62
     418:	cd bf       	out	0x3d, r28	; 61
     41a:	00 e0       	ldi	r16, 0x00	; 0
     41c:	0c bf       	out	0x3c, r16	; 60

0000041e <__do_copy_data>:
     41e:	12 e0       	ldi	r17, 0x02	; 2
     420:	a0 e0       	ldi	r26, 0x00	; 0
     422:	b2 e0       	ldi	r27, 0x02	; 2
     424:	e0 ec       	ldi	r30, 0xC0	; 192
     426:	f5 e2       	ldi	r31, 0x25	; 37
     428:	00 e0       	ldi	r16, 0x00	; 0
     42a:	0b bf       	out	0x3b, r16	; 59
     42c:	02 c0       	rjmp	.+4      	; 0x432 <__do_copy_data+0x14>
     42e:	07 90       	elpm	r0, Z+
     430:	0d 92       	st	X+, r0
     432:	a4 34       	cpi	r26, 0x44	; 68
     434:	b1 07       	cpc	r27, r17
     436:	d9 f7       	brne	.-10     	; 0x42e <__do_copy_data+0x10>

00000438 <__do_clear_bss>:
     438:	24 e0       	ldi	r18, 0x04	; 4
     43a:	a4 e4       	ldi	r26, 0x44	; 68
     43c:	b2 e0       	ldi	r27, 0x02	; 2
     43e:	01 c0       	rjmp	.+2      	; 0x442 <.do_clear_bss_start>

00000440 <.do_clear_bss_loop>:
     440:	1d 92       	st	X+, r1

00000442 <.do_clear_bss_start>:
     442:	ab 3d       	cpi	r26, 0xDB	; 219
     444:	b2 07       	cpc	r27, r18
     446:	e1 f7       	brne	.-8      	; 0x440 <.do_clear_bss_loop>
     448:	0e 94 3c 12 	call	0x2478	; 0x2478 <main>
     44c:	0c 94 de 12 	jmp	0x25bc	; 0x25bc <_exit>

00000450 <__bad_interrupt>:
     450:	d7 cd       	rjmp	.-1106   	; 0x0 <__vectors>

00000452 <pulseEnable>:
	location &= 0x7; // we only have 8 locations 0-7
	command(LCD_SETCGRAMADDR | (location << 3));
	for (int i=0; i<8; i++) {
		write(charmap[i]);
	}
}
     452:	15 98       	cbi	0x02, 5	; 2
     454:	85 e0       	ldi	r24, 0x05	; 5
     456:	8a 95       	dec	r24
     458:	f1 f7       	brne	.-4      	; 0x456 <pulseEnable+0x4>
     45a:	00 00       	nop
     45c:	15 9a       	sbi	0x02, 5	; 2
     45e:	95 e0       	ldi	r25, 0x05	; 5
     460:	9a 95       	dec	r25
     462:	f1 f7       	brne	.-4      	; 0x460 <pulseEnable+0xe>
     464:	00 00       	nop
     466:	15 98       	cbi	0x02, 5	; 2
     468:	8f e8       	ldi	r24, 0x8F	; 143
     46a:	91 e0       	ldi	r25, 0x01	; 1
     46c:	01 97       	sbiw	r24, 0x01	; 1
     46e:	f1 f7       	brne	.-4      	; 0x46c <pulseEnable+0x1a>
     470:	00 c0       	rjmp	.+0      	; 0x472 <pulseEnable+0x20>
     472:	00 00       	nop
     474:	08 95       	ret

00000476 <write4bits>:
     476:	cf 93       	push	r28
     478:	df 93       	push	r29
     47a:	e6 e5       	ldi	r30, 0x56	; 86
     47c:	f3 e0       	ldi	r31, 0x03	; 3
     47e:	20 e0       	ldi	r18, 0x00	; 0
     480:	30 e0       	ldi	r19, 0x00	; 0
     482:	a8 2f       	mov	r26, r24
     484:	b0 e0       	ldi	r27, 0x00	; 0
     486:	c1 e0       	ldi	r28, 0x01	; 1
     488:	d0 e0       	ldi	r29, 0x00	; 0
     48a:	ad 01       	movw	r20, r26
     48c:	02 2e       	mov	r0, r18
     48e:	02 c0       	rjmp	.+4      	; 0x494 <write4bits+0x1e>
     490:	55 95       	asr	r21
     492:	47 95       	ror	r20
     494:	0a 94       	dec	r0
     496:	e2 f7       	brpl	.-8      	; 0x490 <write4bits+0x1a>
     498:	40 ff       	sbrs	r20, 0
     49a:	0b c0       	rjmp	.+22     	; 0x4b2 <write4bits+0x3c>
     49c:	82 b1       	in	r24, 0x02	; 2
     49e:	ae 01       	movw	r20, r28
     4a0:	00 80       	ld	r0, Z
     4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <write4bits+0x32>
     4a4:	44 0f       	add	r20, r20
     4a6:	55 1f       	adc	r21, r21
     4a8:	0a 94       	dec	r0
     4aa:	e2 f7       	brpl	.-8      	; 0x4a4 <write4bits+0x2e>
     4ac:	48 2b       	or	r20, r24
     4ae:	42 b9       	out	0x02, r20	; 2
     4b0:	0c c0       	rjmp	.+24     	; 0x4ca <write4bits+0x54>
     4b2:	42 b1       	in	r20, 0x02	; 2
     4b4:	be 01       	movw	r22, r28
     4b6:	00 80       	ld	r0, Z
     4b8:	02 c0       	rjmp	.+4      	; 0x4be <write4bits+0x48>
     4ba:	66 0f       	add	r22, r22
     4bc:	77 1f       	adc	r23, r23
     4be:	0a 94       	dec	r0
     4c0:	e2 f7       	brpl	.-8      	; 0x4ba <write4bits+0x44>
     4c2:	96 2f       	mov	r25, r22
     4c4:	90 95       	com	r25
     4c6:	94 23       	and	r25, r20
     4c8:	92 b9       	out	0x02, r25	; 2
     4ca:	2f 5f       	subi	r18, 0xFF	; 255
     4cc:	3f 4f       	sbci	r19, 0xFF	; 255
     4ce:	31 96       	adiw	r30, 0x01	; 1
     4d0:	24 30       	cpi	r18, 0x04	; 4
     4d2:	31 05       	cpc	r19, r1
     4d4:	d1 f6       	brne	.-76     	; 0x48a <write4bits+0x14>
     4d6:	bd df       	rcall	.-134    	; 0x452 <pulseEnable>
     4d8:	df 91       	pop	r29
     4da:	cf 91       	pop	r28
     4dc:	08 95       	ret

000004de <write8bits>:
     4de:	86 95       	lsr	r24
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	e6 e5       	ldi	r30, 0x56	; 86
     4e4:	f3 e0       	ldi	r31, 0x03	; 3
     4e6:	6e e5       	ldi	r22, 0x5E	; 94
     4e8:	73 e0       	ldi	r23, 0x03	; 3
     4ea:	a1 e0       	ldi	r26, 0x01	; 1
     4ec:	b0 e0       	ldi	r27, 0x00	; 0
     4ee:	88 23       	and	r24, r24
     4f0:	59 f0       	breq	.+22     	; 0x508 <write8bits+0x2a>
     4f2:	92 b1       	in	r25, 0x02	; 2
     4f4:	9d 01       	movw	r18, r26
     4f6:	00 80       	ld	r0, Z
     4f8:	02 c0       	rjmp	.+4      	; 0x4fe <write8bits+0x20>
     4fa:	22 0f       	add	r18, r18
     4fc:	33 1f       	adc	r19, r19
     4fe:	0a 94       	dec	r0
     500:	e2 f7       	brpl	.-8      	; 0x4fa <write8bits+0x1c>
     502:	29 2b       	or	r18, r25
     504:	22 b9       	out	0x02, r18	; 2
     506:	0c c0       	rjmp	.+24     	; 0x520 <write8bits+0x42>
     508:	22 b1       	in	r18, 0x02	; 2
     50a:	ad 01       	movw	r20, r26
     50c:	00 80       	ld	r0, Z
     50e:	02 c0       	rjmp	.+4      	; 0x514 <write8bits+0x36>
     510:	44 0f       	add	r20, r20
     512:	55 1f       	adc	r21, r21
     514:	0a 94       	dec	r0
     516:	e2 f7       	brpl	.-8      	; 0x510 <write8bits+0x32>
     518:	94 2f       	mov	r25, r20
     51a:	90 95       	com	r25
     51c:	92 23       	and	r25, r18
     51e:	92 b9       	out	0x02, r25	; 2
     520:	31 96       	adiw	r30, 0x01	; 1
     522:	e6 17       	cp	r30, r22
     524:	f7 07       	cpc	r31, r23
     526:	19 f7       	brne	.-58     	; 0x4ee <write8bits+0x10>
     528:	94 cf       	rjmp	.-216    	; 0x452 <pulseEnable>
     52a:	08 95       	ret

0000052c <send>:
     52c:	cf 93       	push	r28
     52e:	c8 2f       	mov	r28, r24
     530:	66 23       	and	r22, r22
     532:	11 f0       	breq	.+4      	; 0x538 <send+0xc>
     534:	17 9a       	sbi	0x02, 7	; 2
     536:	01 c0       	rjmp	.+2      	; 0x53a <send+0xe>
     538:	17 98       	cbi	0x02, 7	; 2
     53a:	16 98       	cbi	0x02, 6	; 2
     53c:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <_displayfunction>
     540:	84 ff       	sbrs	r24, 4
     542:	03 c0       	rjmp	.+6      	; 0x54a <send+0x1e>
     544:	8c 2f       	mov	r24, r28
     546:	cb df       	rcall	.-106    	; 0x4de <write8bits>
     548:	06 c0       	rjmp	.+12     	; 0x556 <send+0x2a>
     54a:	8c 2f       	mov	r24, r28
     54c:	82 95       	swap	r24
     54e:	8f 70       	andi	r24, 0x0F	; 15
     550:	92 df       	rcall	.-220    	; 0x476 <write4bits>
     552:	8c 2f       	mov	r24, r28
     554:	90 df       	rcall	.-224    	; 0x476 <write4bits>
     556:	cf 91       	pop	r28
     558:	08 95       	ret

0000055a <command>:
     55a:	60 e0       	ldi	r22, 0x00	; 0
     55c:	e7 cf       	rjmp	.-50     	; 0x52c <send>
     55e:	08 95       	ret

00000560 <lcd_clear>:
     560:	81 e0       	ldi	r24, 0x01	; 1
     562:	fb df       	rcall	.-10     	; 0x55a <command>
     564:	8f e3       	ldi	r24, 0x3F	; 63
     566:	9f e1       	ldi	r25, 0x1F	; 31
     568:	01 97       	sbiw	r24, 0x01	; 1
     56a:	f1 f7       	brne	.-4      	; 0x568 <lcd_clear+0x8>
     56c:	00 c0       	rjmp	.+0      	; 0x56e <lcd_clear+0xe>
     56e:	00 00       	nop
     570:	08 95       	ret

00000572 <lcd_setCursor>:
     572:	e0 e5       	ldi	r30, 0x50	; 80
     574:	f3 e0       	ldi	r31, 0x03	; 3
     576:	10 82       	st	Z, r1
     578:	90 e4       	ldi	r25, 0x40	; 64
     57a:	91 83       	std	Z+1, r25	; 0x01
     57c:	94 e1       	ldi	r25, 0x14	; 20
     57e:	92 83       	std	Z+2, r25	; 0x02
     580:	94 e5       	ldi	r25, 0x54	; 84
     582:	93 83       	std	Z+3, r25	; 0x03
     584:	64 30       	cpi	r22, 0x04	; 4
     586:	08 f0       	brcs	.+2      	; 0x58a <lcd_setCursor+0x18>
     588:	63 e0       	ldi	r22, 0x03	; 3
     58a:	90 91 55 03 	lds	r25, 0x0355	; 0x800355 <_numlines>
     58e:	69 17       	cp	r22, r25
     590:	10 f0       	brcs	.+4      	; 0x596 <lcd_setCursor+0x24>
     592:	6f ef       	ldi	r22, 0xFF	; 255
     594:	69 0f       	add	r22, r25
     596:	e6 2f       	mov	r30, r22
     598:	f0 e0       	ldi	r31, 0x00	; 0
     59a:	e0 5b       	subi	r30, 0xB0	; 176
     59c:	fc 4f       	sbci	r31, 0xFC	; 252
     59e:	90 81       	ld	r25, Z
     5a0:	89 0f       	add	r24, r25
     5a2:	80 68       	ori	r24, 0x80	; 128
     5a4:	da cf       	rjmp	.-76     	; 0x55a <command>
     5a6:	08 95       	ret

000005a8 <lcd_display_on>:
     5a8:	80 91 54 03 	lds	r24, 0x0354	; 0x800354 <_displaycontrol>
     5ac:	98 2f       	mov	r25, r24
     5ae:	94 60       	ori	r25, 0x04	; 4
     5b0:	90 93 54 03 	sts	0x0354, r25	; 0x800354 <_displaycontrol>
     5b4:	8c 60       	ori	r24, 0x0C	; 12
     5b6:	d1 cf       	rjmp	.-94     	; 0x55a <command>
     5b8:	08 95       	ret

000005ba <lcd_init>:
     5ba:	cf 93       	push	r28
     5bc:	e6 e5       	ldi	r30, 0x56	; 86
     5be:	f3 e0       	ldi	r31, 0x03	; 3
     5c0:	83 e0       	ldi	r24, 0x03	; 3
     5c2:	80 83       	st	Z, r24
     5c4:	82 e0       	ldi	r24, 0x02	; 2
     5c6:	81 83       	std	Z+1, r24	; 0x01
     5c8:	91 e0       	ldi	r25, 0x01	; 1
     5ca:	92 83       	std	Z+2, r25	; 0x02
     5cc:	13 82       	std	Z+3, r1	; 0x03
     5ce:	14 82       	std	Z+4, r1	; 0x04
     5d0:	15 82       	std	Z+5, r1	; 0x05
     5d2:	16 82       	std	Z+6, r1	; 0x06
     5d4:	17 82       	std	Z+7, r1	; 0x07
     5d6:	98 e0       	ldi	r25, 0x08	; 8
     5d8:	90 93 5f 03 	sts	0x035F, r25	; 0x80035f <_displayfunction>
     5dc:	80 93 55 03 	sts	0x0355, r24	; 0x800355 <_numlines>
     5e0:	0f 9a       	sbi	0x01, 7	; 1
     5e2:	0e 9a       	sbi	0x01, 6	; 1
     5e4:	0d 9a       	sbi	0x01, 5	; 1
     5e6:	0c 9a       	sbi	0x01, 4	; 1
     5e8:	14 9a       	sbi	0x02, 4	; 2
     5ea:	20 e0       	ldi	r18, 0x00	; 0
     5ec:	30 e0       	ldi	r19, 0x00	; 0
     5ee:	c8 e0       	ldi	r28, 0x08	; 8
     5f0:	b0 e0       	ldi	r27, 0x00	; 0
     5f2:	a4 e0       	ldi	r26, 0x04	; 4
     5f4:	50 e0       	ldi	r21, 0x00	; 0
     5f6:	61 e0       	ldi	r22, 0x01	; 1
     5f8:	70 e0       	ldi	r23, 0x00	; 0
     5fa:	0c c0       	rjmp	.+24     	; 0x614 <lcd_init+0x5a>
     5fc:	41 b1       	in	r20, 0x01	; 1
     5fe:	cb 01       	movw	r24, r22
     600:	01 90       	ld	r0, Z+
     602:	02 c0       	rjmp	.+4      	; 0x608 <lcd_init+0x4e>
     604:	88 0f       	add	r24, r24
     606:	99 1f       	adc	r25, r25
     608:	0a 94       	dec	r0
     60a:	e2 f7       	brpl	.-8      	; 0x604 <lcd_init+0x4a>
     60c:	84 2b       	or	r24, r20
     60e:	81 b9       	out	0x01, r24	; 1
     610:	2f 5f       	subi	r18, 0xFF	; 255
     612:	3f 4f       	sbci	r19, 0xFF	; 255
     614:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <_displayfunction>
     618:	84 fd       	sbrc	r24, 4
     61a:	03 c0       	rjmp	.+6      	; 0x622 <lcd_init+0x68>
     61c:	8a 2f       	mov	r24, r26
     61e:	95 2f       	mov	r25, r21
     620:	02 c0       	rjmp	.+4      	; 0x626 <lcd_init+0x6c>
     622:	8c 2f       	mov	r24, r28
     624:	9b 2f       	mov	r25, r27
     626:	28 17       	cp	r18, r24
     628:	39 07       	cpc	r19, r25
     62a:	44 f3       	brlt	.-48     	; 0x5fc <lcd_init+0x42>
     62c:	2f ef       	ldi	r18, 0xFF	; 255
     62e:	80 e7       	ldi	r24, 0x70	; 112
     630:	92 e0       	ldi	r25, 0x02	; 2
     632:	21 50       	subi	r18, 0x01	; 1
     634:	80 40       	sbci	r24, 0x00	; 0
     636:	90 40       	sbci	r25, 0x00	; 0
     638:	e1 f7       	brne	.-8      	; 0x632 <lcd_init+0x78>
     63a:	00 c0       	rjmp	.+0      	; 0x63c <lcd_init+0x82>
     63c:	00 00       	nop
     63e:	17 98       	cbi	0x02, 7	; 2
     640:	15 98       	cbi	0x02, 5	; 2
     642:	16 98       	cbi	0x02, 6	; 2
     644:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <_displayfunction>
     648:	84 fd       	sbrc	r24, 4
     64a:	1b c0       	rjmp	.+54     	; 0x682 <lcd_init+0xc8>
     64c:	83 e0       	ldi	r24, 0x03	; 3
     64e:	13 df       	rcall	.-474    	; 0x476 <write4bits>
     650:	8f e4       	ldi	r24, 0x4F	; 79
     652:	96 e4       	ldi	r25, 0x46	; 70
     654:	01 97       	sbiw	r24, 0x01	; 1
     656:	f1 f7       	brne	.-4      	; 0x654 <lcd_init+0x9a>
     658:	00 c0       	rjmp	.+0      	; 0x65a <lcd_init+0xa0>
     65a:	00 00       	nop
     65c:	83 e0       	ldi	r24, 0x03	; 3
     65e:	0b df       	rcall	.-490    	; 0x476 <write4bits>
     660:	8f e4       	ldi	r24, 0x4F	; 79
     662:	96 e4       	ldi	r25, 0x46	; 70
     664:	01 97       	sbiw	r24, 0x01	; 1
     666:	f1 f7       	brne	.-4      	; 0x664 <lcd_init+0xaa>
     668:	00 c0       	rjmp	.+0      	; 0x66a <lcd_init+0xb0>
     66a:	00 00       	nop
     66c:	83 e0       	ldi	r24, 0x03	; 3
     66e:	03 df       	rcall	.-506    	; 0x476 <write4bits>
     670:	87 e5       	ldi	r24, 0x57	; 87
     672:	92 e0       	ldi	r25, 0x02	; 2
     674:	01 97       	sbiw	r24, 0x01	; 1
     676:	f1 f7       	brne	.-4      	; 0x674 <lcd_init+0xba>
     678:	00 c0       	rjmp	.+0      	; 0x67a <lcd_init+0xc0>
     67a:	00 00       	nop
     67c:	82 e0       	ldi	r24, 0x02	; 2
     67e:	fb de       	rcall	.-522    	; 0x476 <write4bits>
     680:	16 c0       	rjmp	.+44     	; 0x6ae <lcd_init+0xf4>
     682:	80 62       	ori	r24, 0x20	; 32
     684:	6a df       	rcall	.-300    	; 0x55a <command>
     686:	8f e4       	ldi	r24, 0x4F	; 79
     688:	96 e4       	ldi	r25, 0x46	; 70
     68a:	01 97       	sbiw	r24, 0x01	; 1
     68c:	f1 f7       	brne	.-4      	; 0x68a <lcd_init+0xd0>
     68e:	00 c0       	rjmp	.+0      	; 0x690 <lcd_init+0xd6>
     690:	00 00       	nop
     692:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <_displayfunction>
     696:	80 62       	ori	r24, 0x20	; 32
     698:	60 df       	rcall	.-320    	; 0x55a <command>
     69a:	87 e5       	ldi	r24, 0x57	; 87
     69c:	92 e0       	ldi	r25, 0x02	; 2
     69e:	01 97       	sbiw	r24, 0x01	; 1
     6a0:	f1 f7       	brne	.-4      	; 0x69e <lcd_init+0xe4>
     6a2:	00 c0       	rjmp	.+0      	; 0x6a4 <lcd_init+0xea>
     6a4:	00 00       	nop
     6a6:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <_displayfunction>
     6aa:	80 62       	ori	r24, 0x20	; 32
     6ac:	56 df       	rcall	.-340    	; 0x55a <command>
     6ae:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <_displayfunction>
     6b2:	80 62       	ori	r24, 0x20	; 32
     6b4:	52 df       	rcall	.-348    	; 0x55a <command>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	80 93 54 03 	sts	0x0354, r24	; 0x800354 <_displaycontrol>
     6bc:	75 df       	rcall	.-278    	; 0x5a8 <lcd_display_on>
     6be:	50 df       	rcall	.-352    	; 0x560 <lcd_clear>
     6c0:	82 e0       	ldi	r24, 0x02	; 2
     6c2:	80 93 5e 03 	sts	0x035E, r24	; 0x80035e <_displaymode>
     6c6:	86 e0       	ldi	r24, 0x06	; 6
     6c8:	48 df       	rcall	.-368    	; 0x55a <command>
     6ca:	cf 91       	pop	r28
     6cc:	08 95       	ret

000006ce <write>:
     6ce:	61 e0       	ldi	r22, 0x01	; 1
     6d0:	2d df       	rcall	.-422    	; 0x52c <send>
     6d2:	81 e0       	ldi	r24, 0x01	; 1
     6d4:	08 95       	ret

000006d6 <lcd_puts>:
	}
	pulseEnable();
}

//------Print------------
void lcd_puts(char *string) {
     6d6:	cf 93       	push	r28
     6d8:	df 93       	push	r29
     6da:	ec 01       	movw	r28, r24
	for (char *it = string; *it; it++) {
     6dc:	88 81       	ld	r24, Y
     6de:	88 23       	and	r24, r24
     6e0:	29 f0       	breq	.+10     	; 0x6ec <lcd_puts+0x16>
     6e2:	21 96       	adiw	r28, 0x01	; 1
		write(*it);
     6e4:	f4 df       	rcall	.-24     	; 0x6ce <write>
	pulseEnable();
}

//------Print------------
void lcd_puts(char *string) {
	for (char *it = string; *it; it++) {
     6e6:	89 91       	ld	r24, Y+
     6e8:	81 11       	cpse	r24, r1
     6ea:	fc cf       	rjmp	.-8      	; 0x6e4 <lcd_puts+0xe>
		write(*it);
	}
}
     6ec:	df 91       	pop	r29
     6ee:	cf 91       	pop	r28
     6f0:	08 95       	ret

000006f2 <LCD_PrintString>:

void LCD_PrintString(char *string, uint8_t x, uint8_t y)
{
     6f2:	cf 93       	push	r28
     6f4:	df 93       	push	r29
     6f6:	ec 01       	movw	r28, r24
     6f8:	86 2f       	mov	r24, r22
	lcd_setCursor(x,y);
     6fa:	64 2f       	mov	r22, r20
     6fc:	3a df       	rcall	.-396    	; 0x572 <lcd_setCursor>
	lcd_puts(string);
     6fe:	ce 01       	movw	r24, r28
     700:	ea df       	rcall	.-44     	; 0x6d6 <lcd_puts>
}
     702:	df 91       	pop	r29
     704:	cf 91       	pop	r28
     706:	08 95       	ret

00000708 <DS1307Read>:

result=DS1307Write(0x02,temp);

return result;

}
     708:	ef 92       	push	r14
     70a:	ff 92       	push	r15
     70c:	0f 93       	push	r16
     70e:	cf 93       	push	r28
     710:	df 93       	push	r29
     712:	1f 92       	push	r1
     714:	cd b7       	in	r28, 0x3d	; 61
     716:	de b7       	in	r29, 0x3e	; 62
     718:	89 83       	std	Y+1, r24	; 0x01
     71a:	7b 01       	movw	r14, r22
     71c:	00 e0       	ldi	r16, 0x00	; 0
     71e:	21 e0       	ldi	r18, 0x01	; 1
     720:	41 e0       	ldi	r20, 0x01	; 1
     722:	be 01       	movw	r22, r28
     724:	6f 5f       	subi	r22, 0xFF	; 255
     726:	7f 4f       	sbci	r23, 0xFF	; 255
     728:	88 e6       	ldi	r24, 0x68	; 104
     72a:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <twi_writeTo>
     72e:	81 11       	cpse	r24, r1
     730:	0b c0       	rjmp	.+22     	; 0x748 <DS1307Read+0x40>
     732:	21 e0       	ldi	r18, 0x01	; 1
     734:	41 e0       	ldi	r20, 0x01	; 1
     736:	b7 01       	movw	r22, r14
     738:	88 e6       	ldi	r24, 0x68	; 104
     73a:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <twi_readFrom>
     73e:	91 e0       	ldi	r25, 0x01	; 1
     740:	81 11       	cpse	r24, r1
     742:	03 c0       	rjmp	.+6      	; 0x74a <DS1307Read+0x42>
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	01 c0       	rjmp	.+2      	; 0x74a <DS1307Read+0x42>
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	89 2f       	mov	r24, r25
     74c:	0f 90       	pop	r0
     74e:	df 91       	pop	r29
     750:	cf 91       	pop	r28
     752:	0f 91       	pop	r16
     754:	ff 90       	pop	r15
     756:	ef 90       	pop	r14
     758:	08 95       	ret

0000075a <DS1307Write>:
     75a:	0f 93       	push	r16
     75c:	cf 93       	push	r28
     75e:	df 93       	push	r29
     760:	1f 92       	push	r1
     762:	1f 92       	push	r1
     764:	cd b7       	in	r28, 0x3d	; 61
     766:	de b7       	in	r29, 0x3e	; 62
     768:	89 83       	std	Y+1, r24	; 0x01
     76a:	6a 83       	std	Y+2, r22	; 0x02
     76c:	00 e0       	ldi	r16, 0x00	; 0
     76e:	21 e0       	ldi	r18, 0x01	; 1
     770:	41 e0       	ldi	r20, 0x01	; 1
     772:	be 01       	movw	r22, r28
     774:	6f 5f       	subi	r22, 0xFF	; 255
     776:	7f 4f       	sbci	r23, 0xFF	; 255
     778:	88 e6       	ldi	r24, 0x68	; 104
     77a:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <twi_writeTo>
     77e:	81 11       	cpse	r24, r1
     780:	0e c0       	rjmp	.+28     	; 0x79e <DS1307Write+0x44>
     782:	01 e0       	ldi	r16, 0x01	; 1
     784:	21 e0       	ldi	r18, 0x01	; 1
     786:	41 e0       	ldi	r20, 0x01	; 1
     788:	be 01       	movw	r22, r28
     78a:	6e 5f       	subi	r22, 0xFE	; 254
     78c:	7f 4f       	sbci	r23, 0xFF	; 255
     78e:	88 e6       	ldi	r24, 0x68	; 104
     790:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <twi_writeTo>
     794:	91 e0       	ldi	r25, 0x01	; 1
     796:	88 23       	and	r24, r24
     798:	19 f0       	breq	.+6      	; 0x7a0 <DS1307Write+0x46>
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	01 c0       	rjmp	.+2      	; 0x7a0 <DS1307Write+0x46>
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	89 2f       	mov	r24, r25
     7a2:	0f 90       	pop	r0
     7a4:	0f 90       	pop	r0
     7a6:	df 91       	pop	r29
     7a8:	cf 91       	pop	r28
     7aa:	0f 91       	pop	r16
     7ac:	08 95       	ret

000007ae <ClockInit>:
     7ae:	cf 93       	push	r28
     7b0:	df 93       	push	r29
     7b2:	1f 92       	push	r1
     7b4:	cd b7       	in	r28, 0x3d	; 61
     7b6:	de b7       	in	r29, 0x3e	; 62
     7b8:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <twi_init>
     7bc:	be 01       	movw	r22, r28
     7be:	6f 5f       	subi	r22, 0xFF	; 255
     7c0:	7f 4f       	sbci	r23, 0xFF	; 255
     7c2:	80 e0       	ldi	r24, 0x00	; 0
     7c4:	a1 df       	rcall	.-190    	; 0x708 <DS1307Read>
     7c6:	98 2f       	mov	r25, r24
     7c8:	88 23       	and	r24, r24
     7ca:	f1 f0       	breq	.+60     	; 0x808 <ClockInit+0x5a>
     7cc:	41 e0       	ldi	r20, 0x01	; 1
     7ce:	62 e0       	ldi	r22, 0x02	; 2
     7d0:	80 e1       	ldi	r24, 0x10	; 16
     7d2:	92 e0       	ldi	r25, 0x02	; 2
     7d4:	8e df       	rcall	.-228    	; 0x6f2 <LCD_PrintString>
     7d6:	69 81       	ldd	r22, Y+1	; 0x01
     7d8:	6f 77       	andi	r22, 0x7F	; 127
     7da:	69 83       	std	Y+1, r22	; 0x01
     7dc:	80 e0       	ldi	r24, 0x00	; 0
     7de:	bd df       	rcall	.-134    	; 0x75a <DS1307Write>
     7e0:	98 2f       	mov	r25, r24
     7e2:	88 23       	and	r24, r24
     7e4:	89 f0       	breq	.+34     	; 0x808 <ClockInit+0x5a>
     7e6:	be 01       	movw	r22, r28
     7e8:	6f 5f       	subi	r22, 0xFF	; 255
     7ea:	7f 4f       	sbci	r23, 0xFF	; 255
     7ec:	82 e0       	ldi	r24, 0x02	; 2
     7ee:	8c df       	rcall	.-232    	; 0x708 <DS1307Read>
     7f0:	98 2f       	mov	r25, r24
     7f2:	88 23       	and	r24, r24
     7f4:	49 f0       	breq	.+18     	; 0x808 <ClockInit+0x5a>
     7f6:	69 81       	ldd	r22, Y+1	; 0x01
     7f8:	60 64       	ori	r22, 0x40	; 64
     7fa:	69 83       	std	Y+1, r22	; 0x01
     7fc:	82 e0       	ldi	r24, 0x02	; 2
     7fe:	ad df       	rcall	.-166    	; 0x75a <DS1307Write>
     800:	91 e0       	ldi	r25, 0x01	; 1
     802:	81 11       	cpse	r24, r1
     804:	01 c0       	rjmp	.+2      	; 0x808 <ClockInit+0x5a>
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	89 2f       	mov	r24, r25
     80a:	0f 90       	pop	r0
     80c:	df 91       	pop	r29
     80e:	cf 91       	pop	r28
     810:	08 95       	ret

00000812 <GetTimeString>:
char time[12];			//The string must be at least 12bytes long
GetTimeString(time);	//Now the string time contains the current time
****************************************/

uint8_t GetTimeString(char *Time)
{
     812:	0f 93       	push	r16
     814:	1f 93       	push	r17
     816:	cf 93       	push	r28
     818:	df 93       	push	r29
     81a:	1f 92       	push	r1
     81c:	cd b7       	in	r28, 0x3d	; 61
     81e:	de b7       	in	r29, 0x3e	; 62
     820:	8c 01       	movw	r16, r24
uint8_t data;

if(!DS1307Read(0x00,&data))
     822:	be 01       	movw	r22, r28
     824:	6f 5f       	subi	r22, 0xFF	; 255
     826:	7f 4f       	sbci	r23, 0xFF	; 255
     828:	80 e0       	ldi	r24, 0x00	; 0
     82a:	6e df       	rcall	.-292    	; 0x708 <DS1307Read>
     82c:	88 23       	and	r24, r24
     82e:	09 f4       	brne	.+2      	; 0x832 <GetTimeString+0x20>
     830:	42 c0       	rjmp	.+132    	; 0x8b6 <GetTimeString+0xa4>
{
//I/O Error
return 0;
}

Time[11]='\0';
     832:	f8 01       	movw	r30, r16
     834:	13 86       	std	Z+11, r1	; 0x0b
Time[10]='M';
     836:	8d e4       	ldi	r24, 0x4D	; 77
     838:	82 87       	std	Z+10, r24	; 0x0a
Time[8]=' ';
     83a:	80 e2       	ldi	r24, 0x20	; 32
     83c:	80 87       	std	Z+8, r24	; 0x08

Time[7]=48+(data & 0b00001111);
     83e:	89 81       	ldd	r24, Y+1	; 0x01
     840:	98 2f       	mov	r25, r24
     842:	9f 70       	andi	r25, 0x0F	; 15
     844:	90 5d       	subi	r25, 0xD0	; 208
     846:	97 83       	std	Z+7, r25	; 0x07
Time[6]=48+((data & 0b01110000)>>4);
     848:	80 77       	andi	r24, 0x70	; 112
     84a:	82 95       	swap	r24
     84c:	8f 70       	andi	r24, 0x0F	; 15
     84e:	80 5d       	subi	r24, 0xD0	; 208
     850:	86 83       	std	Z+6, r24	; 0x06
Time[5]=':';
     852:	8a e3       	ldi	r24, 0x3A	; 58
     854:	85 83       	std	Z+5, r24	; 0x05

if(!DS1307Read(0x01,&data))
     856:	be 01       	movw	r22, r28
     858:	6f 5f       	subi	r22, 0xFF	; 255
     85a:	7f 4f       	sbci	r23, 0xFF	; 255
     85c:	81 e0       	ldi	r24, 0x01	; 1
     85e:	54 df       	rcall	.-344    	; 0x708 <DS1307Read>
     860:	88 23       	and	r24, r24
     862:	49 f1       	breq	.+82     	; 0x8b6 <GetTimeString+0xa4>
{
//I/O Error
return 0;
}

Time[4]=48+(data & 0b00001111);
     864:	89 81       	ldd	r24, Y+1	; 0x01
     866:	98 2f       	mov	r25, r24
     868:	9f 70       	andi	r25, 0x0F	; 15
     86a:	90 5d       	subi	r25, 0xD0	; 208
     86c:	f8 01       	movw	r30, r16
     86e:	94 83       	std	Z+4, r25	; 0x04
Time[3]=48+((data & 0b01110000)>>4);
     870:	80 77       	andi	r24, 0x70	; 112
     872:	82 95       	swap	r24
     874:	8f 70       	andi	r24, 0x0F	; 15
     876:	80 5d       	subi	r24, 0xD0	; 208
     878:	83 83       	std	Z+3, r24	; 0x03
Time[2]=':';
     87a:	8a e3       	ldi	r24, 0x3A	; 58
     87c:	82 83       	std	Z+2, r24	; 0x02

if(!DS1307Read(0x02,&data))
     87e:	be 01       	movw	r22, r28
     880:	6f 5f       	subi	r22, 0xFF	; 255
     882:	7f 4f       	sbci	r23, 0xFF	; 255
     884:	82 e0       	ldi	r24, 0x02	; 2
     886:	40 df       	rcall	.-384    	; 0x708 <DS1307Read>
     888:	88 23       	and	r24, r24
     88a:	a9 f0       	breq	.+42     	; 0x8b6 <GetTimeString+0xa4>
{
//I/O Error
return 0;
}

Time[1]=48+(data & 0b00001111);
     88c:	89 81       	ldd	r24, Y+1	; 0x01
     88e:	98 2f       	mov	r25, r24
     890:	9f 70       	andi	r25, 0x0F	; 15
     892:	90 5d       	subi	r25, 0xD0	; 208
     894:	f8 01       	movw	r30, r16
     896:	91 83       	std	Z+1, r25	; 0x01
Time[0]=48+((data & 0b00010000)>>4);
     898:	84 fb       	bst	r24, 4
     89a:	99 27       	eor	r25, r25
     89c:	90 f9       	bld	r25, 0
     89e:	90 5d       	subi	r25, 0xD0	; 208
     8a0:	90 83       	st	Z, r25

//AM/PM
if(data & 0b00100000)
     8a2:	85 ff       	sbrs	r24, 5
     8a4:	04 c0       	rjmp	.+8      	; 0x8ae <GetTimeString+0x9c>
{
Time[9]='P';
     8a6:	80 e5       	ldi	r24, 0x50	; 80
     8a8:	81 87       	std	Z+9, r24	; 0x09
else
{
Time[9]='A';
}

return 1;//Success
     8aa:	81 e0       	ldi	r24, 0x01	; 1
     8ac:	04 c0       	rjmp	.+8      	; 0x8b6 <GetTimeString+0xa4>
{
Time[9]='P';
}
else
{
Time[9]='A';
     8ae:	81 e4       	ldi	r24, 0x41	; 65
     8b0:	f8 01       	movw	r30, r16
     8b2:	81 87       	std	Z+9, r24	; 0x09
}

return 1;//Success
     8b4:	81 e0       	ldi	r24, 0x01	; 1

}
     8b6:	0f 90       	pop	r0
     8b8:	df 91       	pop	r29
     8ba:	cf 91       	pop	r28
     8bc:	1f 91       	pop	r17
     8be:	0f 91       	pop	r16
     8c0:	08 95       	ret

000008c2 <adc_init>:

void adc_init(void)
{
	// set ADC prescaler so we are inside the desired 50-200 KHz range.
#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
	bitSet(ADCSRA, ADPS2);
     8c2:	ea e7       	ldi	r30, 0x7A	; 122
     8c4:	f0 e0       	ldi	r31, 0x00	; 0
     8c6:	80 81       	ld	r24, Z
     8c8:	84 60       	ori	r24, 0x04	; 4
     8ca:	80 83       	st	Z, r24
	bitSet(ADCSRA, ADPS1);
     8cc:	80 81       	ld	r24, Z
     8ce:	82 60       	ori	r24, 0x02	; 2
     8d0:	80 83       	st	Z, r24
	bitSet(ADCSRA, ADPS0);
     8d2:	80 81       	ld	r24, Z
     8d4:	81 60       	ori	r24, 0x01	; 1
     8d6:	80 83       	st	Z, r24
	bitSet(ADCSRA, ADPS1);
	bitSet(ADCSRA, ADPS0);
#endif

	//Enable ADC conversions
	bitSet(ADCSRA, ADEN);
     8d8:	80 81       	ld	r24, Z
     8da:	80 68       	ori	r24, 0x80	; 128
     8dc:	80 83       	st	Z, r24
     8de:	08 95       	ret

000008e0 <pinMode>:
 */ 
#include "tk2560.h"


void pinMode(uint8_t pin, uint8_t mode)
{
     8e0:	cf 93       	push	r28
     8e2:	df 93       	push	r29
	uint8_t bit = pinToBitMask(pin);
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	fc 01       	movw	r30, r24
     8e8:	e1 5f       	subi	r30, 0xF1	; 241
     8ea:	fc 4f       	sbci	r31, 0xFC	; 252
     8ec:	24 91       	lpm	r18, Z
	uint8_t port = pinToPort(pin);
     8ee:	fc 01       	movw	r30, r24
     8f0:	ec 58       	subi	r30, 0x8C	; 140
     8f2:	fc 4f       	sbci	r31, 0xFC	; 252
     8f4:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;
	
	if (port == NOT_A_PIN) return;
     8f6:	88 23       	and	r24, r24
     8f8:	79 f1       	breq	.+94     	; 0x958 <pinMode+0x78>
	
	reg = portDDRRegister(port);
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	88 0f       	add	r24, r24
     8fe:	99 1f       	adc	r25, r25
     900:	fc 01       	movw	r30, r24
     902:	ed 50       	subi	r30, 0x0D	; 13
     904:	fc 4f       	sbci	r31, 0xFC	; 252
     906:	a5 91       	lpm	r26, Z+
     908:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
     90a:	fc 01       	movw	r30, r24
     90c:	e7 52       	subi	r30, 0x27	; 39
     90e:	fc 4f       	sbci	r31, 0xFC	; 252
     910:	c5 91       	lpm	r28, Z+
     912:	d4 91       	lpm	r29, Z
	
	if (mode == INPUT)
     914:	61 11       	cpse	r22, r1
     916:	0c c0       	rjmp	.+24     	; 0x930 <pinMode+0x50>
	{
		uint8_t oldSREG = SREG;
     918:	9f b7       	in	r25, 0x3f	; 63
		cli();
     91a:	f8 94       	cli
		*reg &= ~bit;
     91c:	8c 91       	ld	r24, X
     91e:	e2 2f       	mov	r30, r18
     920:	e0 95       	com	r30
     922:	8e 23       	and	r24, r30
     924:	8c 93       	st	X, r24
		*out &= ~bit;
     926:	28 81       	ld	r18, Y
     928:	e2 23       	and	r30, r18
     92a:	e8 83       	st	Y, r30
		SREG = oldSREG;
     92c:	9f bf       	out	0x3f, r25	; 63
     92e:	14 c0       	rjmp	.+40     	; 0x958 <pinMode+0x78>
	}else if(mode == INPUT_PULLUP)
     930:	62 30       	cpi	r22, 0x02	; 2
     932:	61 f4       	brne	.+24     	; 0x94c <pinMode+0x6c>
	{
		uint8_t oldSREG = SREG;
     934:	9f b7       	in	r25, 0x3f	; 63
		cli();
     936:	f8 94       	cli
		*reg &= ~bit;
     938:	8c 91       	ld	r24, X
     93a:	32 2f       	mov	r19, r18
     93c:	30 95       	com	r19
     93e:	83 23       	and	r24, r19
     940:	8c 93       	st	X, r24
		*out |= bit;
     942:	e8 81       	ld	r30, Y
     944:	e2 2b       	or	r30, r18
     946:	e8 83       	st	Y, r30
		SREG = oldSREG;
     948:	9f bf       	out	0x3f, r25	; 63
     94a:	06 c0       	rjmp	.+12     	; 0x958 <pinMode+0x78>
	}else{
		//output
		uint8_t oldSREG = SREG;
     94c:	8f b7       	in	r24, 0x3f	; 63
		cli();
     94e:	f8 94       	cli
		*reg |= bit;
     950:	ec 91       	ld	r30, X
     952:	e2 2b       	or	r30, r18
     954:	ec 93       	st	X, r30
		SREG = oldSREG;
     956:	8f bf       	out	0x3f, r24	; 63
	}
		
}
     958:	df 91       	pop	r29
     95a:	cf 91       	pop	r28
     95c:	08 95       	ret

0000095e <digitalWrite>:

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t bit = pinToBitMask(pin);
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	fc 01       	movw	r30, r24
     962:	e1 5f       	subi	r30, 0xF1	; 241
     964:	fc 4f       	sbci	r31, 0xFC	; 252
     966:	24 91       	lpm	r18, Z
	uint8_t port = pinToPort(pin);
     968:	fc 01       	movw	r30, r24
     96a:	ec 58       	subi	r30, 0x8C	; 140
     96c:	fc 4f       	sbci	r31, 0xFC	; 252
     96e:	84 91       	lpm	r24, Z
	volatile uint8_t *out;
	
	if (port == NOT_A_PIN) return;
     970:	88 23       	and	r24, r24
     972:	b1 f0       	breq	.+44     	; 0x9a0 <digitalWrite+0x42>
	
	out = portOutputRegister(port);
     974:	e8 2f       	mov	r30, r24
     976:	f0 e0       	ldi	r31, 0x00	; 0
     978:	ee 0f       	add	r30, r30
     97a:	ff 1f       	adc	r31, r31
     97c:	e7 52       	subi	r30, 0x27	; 39
     97e:	fc 4f       	sbci	r31, 0xFC	; 252
     980:	a5 91       	lpm	r26, Z+
     982:	b4 91       	lpm	r27, Z
	
	uint8_t oldSREG = SREG;
     984:	8f b7       	in	r24, 0x3f	; 63
	cli();
     986:	f8 94       	cli
	
	if (val == LOW) {
     988:	61 11       	cpse	r22, r1
     98a:	06 c0       	rjmp	.+12     	; 0x998 <digitalWrite+0x3a>
		*out &= ~bit;
     98c:	9c 91       	ld	r25, X
     98e:	e2 2f       	mov	r30, r18
     990:	e0 95       	com	r30
     992:	e9 23       	and	r30, r25
     994:	ec 93       	st	X, r30
     996:	03 c0       	rjmp	.+6      	; 0x99e <digitalWrite+0x40>
	} else {
		*out |= bit;
     998:	ec 91       	ld	r30, X
     99a:	e2 2b       	or	r30, r18
     99c:	ec 93       	st	X, r30
	}
	
	SREG = oldSREG;
     99e:	8f bf       	out	0x3f, r24	; 63
     9a0:	08 95       	ret

000009a2 <togglePin>:
	
}

void togglePin(uint8_t pin)
{
	uint8_t bit = pinToBitMask(pin);
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	fc 01       	movw	r30, r24
     9a6:	e1 5f       	subi	r30, 0xF1	; 241
     9a8:	fc 4f       	sbci	r31, 0xFC	; 252
     9aa:	24 91       	lpm	r18, Z
	uint8_t port = pinToPort(pin);
     9ac:	fc 01       	movw	r30, r24
     9ae:	ec 58       	subi	r30, 0x8C	; 140
     9b0:	fc 4f       	sbci	r31, 0xFC	; 252
     9b2:	84 91       	lpm	r24, Z
	volatile uint8_t *out;
	
	if (port == NOT_A_PIN) return;
     9b4:	88 23       	and	r24, r24
     9b6:	71 f0       	breq	.+28     	; 0x9d4 <togglePin+0x32>
	
	out = portOutputRegister(port);
     9b8:	e8 2f       	mov	r30, r24
     9ba:	f0 e0       	ldi	r31, 0x00	; 0
     9bc:	ee 0f       	add	r30, r30
     9be:	ff 1f       	adc	r31, r31
     9c0:	e7 52       	subi	r30, 0x27	; 39
     9c2:	fc 4f       	sbci	r31, 0xFC	; 252
     9c4:	a5 91       	lpm	r26, Z+
     9c6:	b4 91       	lpm	r27, Z
	
	uint8_t oldSREG = SREG;
     9c8:	8f b7       	in	r24, 0x3f	; 63
	cli();
     9ca:	f8 94       	cli
	
	//toggle
	*out ^= bit;
     9cc:	ec 91       	ld	r30, X
     9ce:	e2 27       	eor	r30, r18
     9d0:	ec 93       	st	X, r30
	
	SREG = oldSREG;
     9d2:	8f bf       	out	0x3f, r24	; 63
     9d4:	08 95       	ret

000009d6 <Serial0_begin>:
	bitClear(UCSR0B, TXEN0);
	bitClear(UCSR0B, RXCIE0); //Rx complete interrupt enable
	bitClear(UCSR0B, UDRIE0); //data register empty int -disable
	
	//clear any received data
	_rx_buffer0_head = _rx_buffer0_tail;	
     9d6:	cf 92       	push	r12
     9d8:	df 92       	push	r13
     9da:	ef 92       	push	r14
     9dc:	ff 92       	push	r15
     9de:	cf 93       	push	r28
     9e0:	6b 01       	movw	r12, r22
     9e2:	7c 01       	movw	r14, r24
     9e4:	c4 2f       	mov	r28, r20
     9e6:	10 92 ed 03 	sts	0x03ED, r1	; 0x8003ed <_rx_buffer0_head>
     9ea:	10 92 6a 03 	sts	0x036A, r1	; 0x80036a <_rx_buffer0_tail>
     9ee:	10 92 61 03 	sts	0x0361, r1	; 0x800361 <_tx_buffer0_head>
     9f2:	10 92 ac 03 	sts	0x03AC, r1	; 0x8003ac <_tx_buffer0_tail>
     9f6:	88 ee       	ldi	r24, 0xE8	; 232
     9f8:	93 e0       	ldi	r25, 0x03	; 3
     9fa:	a0 e0       	ldi	r26, 0x00	; 0
     9fc:	b0 e0       	ldi	r27, 0x00	; 0
     9fe:	80 93 7d 04 	sts	0x047D, r24	; 0x80047d <_timeout0>
     a02:	90 93 7e 04 	sts	0x047E, r25	; 0x80047e <_timeout0+0x1>
     a06:	a0 93 7f 04 	sts	0x047F, r26	; 0x80047f <_timeout0+0x2>
     a0a:	b0 93 80 04 	sts	0x0480, r27	; 0x800480 <_timeout0+0x3>
     a0e:	82 e0       	ldi	r24, 0x02	; 2
     a10:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
     a14:	c1 14       	cp	r12, r1
     a16:	81 ee       	ldi	r24, 0xE1	; 225
     a18:	d8 06       	cpc	r13, r24
     a1a:	e1 04       	cpc	r14, r1
     a1c:	f1 04       	cpc	r15, r1
     a1e:	b1 f0       	breq	.+44     	; 0xa4c <Serial0_begin+0x76>
     a20:	60 e0       	ldi	r22, 0x00	; 0
     a22:	79 e0       	ldi	r23, 0x09	; 9
     a24:	8d e3       	ldi	r24, 0x3D	; 61
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	a7 01       	movw	r20, r14
     a2a:	96 01       	movw	r18, r12
     a2c:	0e 94 b4 12 	call	0x2568	; 0x2568 <__udivmodsi4>
     a30:	da 01       	movw	r26, r20
     a32:	c9 01       	movw	r24, r18
     a34:	01 97       	sbiw	r24, 0x01	; 1
     a36:	a1 09       	sbc	r26, r1
     a38:	b1 09       	sbc	r27, r1
     a3a:	b6 95       	lsr	r27
     a3c:	a7 95       	ror	r26
     a3e:	97 95       	ror	r25
     a40:	87 95       	ror	r24
     a42:	9c 01       	movw	r18, r24
     a44:	21 15       	cp	r18, r1
     a46:	80 e1       	ldi	r24, 0x10	; 16
     a48:	38 07       	cpc	r19, r24
     a4a:	a0 f0       	brcs	.+40     	; 0xa74 <Serial0_begin+0x9e>
     a4c:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
     a50:	60 e8       	ldi	r22, 0x80	; 128
     a52:	74 e8       	ldi	r23, 0x84	; 132
     a54:	8e e1       	ldi	r24, 0x1E	; 30
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	a7 01       	movw	r20, r14
     a5a:	96 01       	movw	r18, r12
     a5c:	0e 94 b4 12 	call	0x2568	; 0x2568 <__udivmodsi4>
     a60:	da 01       	movw	r26, r20
     a62:	c9 01       	movw	r24, r18
     a64:	01 97       	sbiw	r24, 0x01	; 1
     a66:	a1 09       	sbc	r26, r1
     a68:	b1 09       	sbc	r27, r1
     a6a:	b6 95       	lsr	r27
     a6c:	a7 95       	ror	r26
     a6e:	97 95       	ror	r25
     a70:	87 95       	ror	r24
     a72:	9c 01       	movw	r18, r24
     a74:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
     a78:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
     a7c:	c0 93 c2 00 	sts	0x00C2, r28	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
     a80:	e1 ec       	ldi	r30, 0xC1	; 193
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	80 81       	ld	r24, Z
     a86:	80 61       	ori	r24, 0x10	; 16
     a88:	80 83       	st	Z, r24
     a8a:	80 81       	ld	r24, Z
     a8c:	88 60       	ori	r24, 0x08	; 8
     a8e:	80 83       	st	Z, r24
     a90:	80 81       	ld	r24, Z
     a92:	80 68       	ori	r24, 0x80	; 128
     a94:	80 83       	st	Z, r24
     a96:	80 81       	ld	r24, Z
     a98:	8f 7d       	andi	r24, 0xDF	; 223
     a9a:	80 83       	st	Z, r24
     a9c:	cf 91       	pop	r28
     a9e:	ff 90       	pop	r15
     aa0:	ef 90       	pop	r14
     aa2:	df 90       	pop	r13
     aa4:	cf 90       	pop	r12
     aa6:	08 95       	ret

00000aa8 <Serial0_available>:
     aa8:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <_rx_buffer0_head>
     aac:	20 91 6a 03 	lds	r18, 0x036A	; 0x80036a <_rx_buffer0_tail>
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	80 5c       	subi	r24, 0xC0	; 192
     ab4:	9f 4f       	sbci	r25, 0xFF	; 255
     ab6:	82 1b       	sub	r24, r18
     ab8:	91 09       	sbc	r25, r1
     aba:	8f 73       	andi	r24, 0x3F	; 63
     abc:	99 27       	eor	r25, r25
     abe:	08 95       	ret

00000ac0 <Serial0_read>:
     ac0:	90 91 ed 03 	lds	r25, 0x03ED	; 0x8003ed <_rx_buffer0_head>
     ac4:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <_rx_buffer0_tail>
     ac8:	98 17       	cp	r25, r24
     aca:	71 f0       	breq	.+28     	; 0xae8 <Serial0_read+0x28>
     acc:	e0 91 6a 03 	lds	r30, 0x036A	; 0x80036a <_rx_buffer0_tail>
     ad0:	f0 e0       	ldi	r31, 0x00	; 0
     ad2:	ed 5c       	subi	r30, 0xCD	; 205
     ad4:	fb 4f       	sbci	r31, 0xFB	; 251
     ad6:	80 81       	ld	r24, Z
     ad8:	90 91 6a 03 	lds	r25, 0x036A	; 0x80036a <_rx_buffer0_tail>
     adc:	9f 5f       	subi	r25, 0xFF	; 255
     ade:	9f 73       	andi	r25, 0x3F	; 63
     ae0:	90 93 6a 03 	sts	0x036A, r25	; 0x80036a <_rx_buffer0_tail>
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	08 95       	ret
     ae8:	8f ef       	ldi	r24, 0xFF	; 255
     aea:	9f ef       	ldi	r25, 0xFF	; 255
     aec:	08 95       	ret

00000aee <Serial0_timedRead>:
     aee:	0f 93       	push	r16
     af0:	1f 93       	push	r17
     af2:	b2 d7       	rcall	.+3940   	; 0x1a58 <millis>
     af4:	60 93 66 03 	sts	0x0366, r22	; 0x800366 <_startMillis0>
     af8:	70 93 67 03 	sts	0x0367, r23	; 0x800367 <_startMillis0+0x1>
     afc:	80 93 68 03 	sts	0x0368, r24	; 0x800368 <_startMillis0+0x2>
     b00:	90 93 69 03 	sts	0x0369, r25	; 0x800369 <_startMillis0+0x3>
     b04:	dd df       	rcall	.-70     	; 0xac0 <Serial0_read>
     b06:	99 23       	and	r25, r25
     b08:	f4 f4       	brge	.+60     	; 0xb46 <Serial0_timedRead+0x58>
     b0a:	a6 d7       	rcall	.+3916   	; 0x1a58 <millis>
     b0c:	00 91 66 03 	lds	r16, 0x0366	; 0x800366 <_startMillis0>
     b10:	10 91 67 03 	lds	r17, 0x0367	; 0x800367 <_startMillis0+0x1>
     b14:	20 91 68 03 	lds	r18, 0x0368	; 0x800368 <_startMillis0+0x2>
     b18:	30 91 69 03 	lds	r19, 0x0369	; 0x800369 <_startMillis0+0x3>
     b1c:	dc 01       	movw	r26, r24
     b1e:	cb 01       	movw	r24, r22
     b20:	80 1b       	sub	r24, r16
     b22:	91 0b       	sbc	r25, r17
     b24:	a2 0b       	sbc	r26, r18
     b26:	b3 0b       	sbc	r27, r19
     b28:	00 91 7d 04 	lds	r16, 0x047D	; 0x80047d <_timeout0>
     b2c:	10 91 7e 04 	lds	r17, 0x047E	; 0x80047e <_timeout0+0x1>
     b30:	20 91 7f 04 	lds	r18, 0x047F	; 0x80047f <_timeout0+0x2>
     b34:	30 91 80 04 	lds	r19, 0x0480	; 0x800480 <_timeout0+0x3>
     b38:	80 17       	cp	r24, r16
     b3a:	91 07       	cpc	r25, r17
     b3c:	a2 07       	cpc	r26, r18
     b3e:	b3 07       	cpc	r27, r19
     b40:	08 f3       	brcs	.-62     	; 0xb04 <Serial0_timedRead+0x16>
     b42:	8f ef       	ldi	r24, 0xFF	; 255
     b44:	9f ef       	ldi	r25, 0xFF	; 255
     b46:	1f 91       	pop	r17
     b48:	0f 91       	pop	r16
     b4a:	08 95       	ret

00000b4c <Serial0_readAllBytes>:
     b4c:	ef 92       	push	r14
     b4e:	ff 92       	push	r15
     b50:	0f 93       	push	r16
     b52:	1f 93       	push	r17
     b54:	cf 93       	push	r28
     b56:	df 93       	push	r29
     b58:	7b 01       	movw	r14, r22
     b5a:	67 2b       	or	r22, r23
     b5c:	81 f0       	breq	.+32     	; 0xb7e <Serial0_readAllBytes+0x32>
     b5e:	08 2f       	mov	r16, r24
     b60:	19 2f       	mov	r17, r25
     b62:	c0 e0       	ldi	r28, 0x00	; 0
     b64:	d0 e0       	ldi	r29, 0x00	; 0
     b66:	c3 df       	rcall	.-122    	; 0xaee <Serial0_timedRead>
     b68:	99 23       	and	r25, r25
     b6a:	44 f0       	brlt	.+16     	; 0xb7c <Serial0_readAllBytes+0x30>
     b6c:	f8 01       	movw	r30, r16
     b6e:	81 93       	st	Z+, r24
     b70:	8f 01       	movw	r16, r30
     b72:	21 96       	adiw	r28, 0x01	; 1
     b74:	ec 16       	cp	r14, r28
     b76:	fd 06       	cpc	r15, r29
     b78:	b1 f7       	brne	.-20     	; 0xb66 <Serial0_readAllBytes+0x1a>
     b7a:	01 c0       	rjmp	.+2      	; 0xb7e <Serial0_readAllBytes+0x32>
     b7c:	7e 01       	movw	r14, r28
     b7e:	c7 01       	movw	r24, r14
     b80:	df 91       	pop	r29
     b82:	cf 91       	pop	r28
     b84:	1f 91       	pop	r17
     b86:	0f 91       	pop	r16
     b88:	ff 90       	pop	r15
     b8a:	ef 90       	pop	r14
     b8c:	08 95       	ret

00000b8e <_tx0_udr_empty_irq>:
     b8e:	e0 91 ac 03 	lds	r30, 0x03AC	; 0x8003ac <_tx_buffer0_tail>
     b92:	f0 e0       	ldi	r31, 0x00	; 0
     b94:	e2 51       	subi	r30, 0x12	; 18
     b96:	fc 4f       	sbci	r31, 0xFC	; 252
     b98:	20 81       	ld	r18, Z
     b9a:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <_tx_buffer0_tail>
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	01 96       	adiw	r24, 0x01	; 1
     ba2:	8f 73       	andi	r24, 0x3F	; 63
     ba4:	90 78       	andi	r25, 0x80	; 128
     ba6:	99 23       	and	r25, r25
     ba8:	24 f4       	brge	.+8      	; 0xbb2 <_tx0_udr_empty_irq+0x24>
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	80 6c       	ori	r24, 0xC0	; 192
     bae:	9f 6f       	ori	r25, 0xFF	; 255
     bb0:	01 96       	adiw	r24, 0x01	; 1
     bb2:	80 93 ac 03 	sts	0x03AC, r24	; 0x8003ac <_tx_buffer0_tail>
     bb6:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     bba:	e0 ec       	ldi	r30, 0xC0	; 192
     bbc:	f0 e0       	ldi	r31, 0x00	; 0
     bbe:	80 81       	ld	r24, Z
     bc0:	83 70       	andi	r24, 0x03	; 3
     bc2:	80 64       	ori	r24, 0x40	; 64
     bc4:	80 83       	st	Z, r24
     bc6:	90 91 61 03 	lds	r25, 0x0361	; 0x800361 <_tx_buffer0_head>
     bca:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <_tx_buffer0_tail>
     bce:	98 13       	cpse	r25, r24
     bd0:	05 c0       	rjmp	.+10     	; 0xbdc <_tx0_udr_empty_irq+0x4e>
     bd2:	e1 ec       	ldi	r30, 0xC1	; 193
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	80 81       	ld	r24, Z
     bd8:	8f 7d       	andi	r24, 0xDF	; 223
     bda:	80 83       	st	Z, r24
     bdc:	08 95       	ret

00000bde <Serial0_write>:
     bde:	0f 93       	push	r16
     be0:	1f 93       	push	r17
     be2:	cf 93       	push	r28
     be4:	df 93       	push	r29
     be6:	20 91 61 03 	lds	r18, 0x0361	; 0x800361 <_tx_buffer0_head>
     bea:	90 91 ac 03 	lds	r25, 0x03AC	; 0x8003ac <_tx_buffer0_tail>
     bee:	29 13       	cpse	r18, r25
     bf0:	10 c0       	rjmp	.+32     	; 0xc12 <Serial0_write+0x34>
     bf2:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
     bf6:	95 ff       	sbrs	r25, 5
     bf8:	0c c0       	rjmp	.+24     	; 0xc12 <Serial0_write+0x34>
     bfa:	9f b7       	in	r25, 0x3f	; 63
     bfc:	f8 94       	cli
     bfe:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     c02:	e0 ec       	ldi	r30, 0xC0	; 192
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	80 81       	ld	r24, Z
     c08:	83 70       	andi	r24, 0x03	; 3
     c0a:	80 64       	ori	r24, 0x40	; 64
     c0c:	80 83       	st	Z, r24
     c0e:	9f bf       	out	0x3f, r25	; 63
     c10:	2f c0       	rjmp	.+94     	; 0xc70 <Serial0_write+0x92>
     c12:	20 91 61 03 	lds	r18, 0x0361	; 0x800361 <_tx_buffer0_head>
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	2f 5f       	subi	r18, 0xFF	; 255
     c1a:	3f 4f       	sbci	r19, 0xFF	; 255
     c1c:	2f 73       	andi	r18, 0x3F	; 63
     c1e:	30 78       	andi	r19, 0x80	; 128
     c20:	33 23       	and	r19, r19
     c22:	34 f4       	brge	.+12     	; 0xc30 <Serial0_write+0x52>
     c24:	21 50       	subi	r18, 0x01	; 1
     c26:	31 09       	sbc	r19, r1
     c28:	20 6c       	ori	r18, 0xC0	; 192
     c2a:	3f 6f       	ori	r19, 0xFF	; 255
     c2c:	2f 5f       	subi	r18, 0xFF	; 255
     c2e:	3f 4f       	sbci	r19, 0xFF	; 255
     c30:	d8 2f       	mov	r29, r24
     c32:	c2 2f       	mov	r28, r18
     c34:	00 ec       	ldi	r16, 0xC0	; 192
     c36:	10 e0       	ldi	r17, 0x00	; 0
     c38:	07 c0       	rjmp	.+14     	; 0xc48 <Serial0_write+0x6a>
     c3a:	0f b6       	in	r0, 0x3f	; 63
     c3c:	07 fc       	sbrc	r0, 7
     c3e:	04 c0       	rjmp	.+8      	; 0xc48 <Serial0_write+0x6a>
     c40:	f8 01       	movw	r30, r16
     c42:	80 81       	ld	r24, Z
     c44:	85 fd       	sbrc	r24, 5
     c46:	a3 df       	rcall	.-186    	; 0xb8e <_tx0_udr_empty_irq>
     c48:	90 91 ac 03 	lds	r25, 0x03AC	; 0x8003ac <_tx_buffer0_tail>
     c4c:	c9 17       	cp	r28, r25
     c4e:	a9 f3       	breq	.-22     	; 0xc3a <Serial0_write+0x5c>
     c50:	e0 91 61 03 	lds	r30, 0x0361	; 0x800361 <_tx_buffer0_head>
     c54:	f0 e0       	ldi	r31, 0x00	; 0
     c56:	e2 51       	subi	r30, 0x12	; 18
     c58:	fc 4f       	sbci	r31, 0xFC	; 252
     c5a:	d0 83       	st	Z, r29
     c5c:	9f b7       	in	r25, 0x3f	; 63
     c5e:	f8 94       	cli
     c60:	c0 93 61 03 	sts	0x0361, r28	; 0x800361 <_tx_buffer0_head>
     c64:	e1 ec       	ldi	r30, 0xC1	; 193
     c66:	f0 e0       	ldi	r31, 0x00	; 0
     c68:	80 81       	ld	r24, Z
     c6a:	80 62       	ori	r24, 0x20	; 32
     c6c:	80 83       	st	Z, r24
     c6e:	9f bf       	out	0x3f, r25	; 63
     c70:	81 e0       	ldi	r24, 0x01	; 1
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	df 91       	pop	r29
     c76:	cf 91       	pop	r28
     c78:	1f 91       	pop	r17
     c7a:	0f 91       	pop	r16
     c7c:	08 95       	ret

00000c7e <Serial0_print>:
     c7e:	0f 93       	push	r16
     c80:	1f 93       	push	r17
     c82:	cf 93       	push	r28
     c84:	df 93       	push	r29
     c86:	ec 01       	movw	r28, r24
     c88:	88 81       	ld	r24, Y
     c8a:	88 23       	and	r24, r24
     c8c:	51 f0       	breq	.+20     	; 0xca2 <Serial0_print+0x24>
     c8e:	21 96       	adiw	r28, 0x01	; 1
     c90:	00 e0       	ldi	r16, 0x00	; 0
     c92:	10 e0       	ldi	r17, 0x00	; 0
     c94:	a4 df       	rcall	.-184    	; 0xbde <Serial0_write>
     c96:	0f 5f       	subi	r16, 0xFF	; 255
     c98:	1f 4f       	sbci	r17, 0xFF	; 255
     c9a:	89 91       	ld	r24, Y+
     c9c:	81 11       	cpse	r24, r1
     c9e:	fa cf       	rjmp	.-12     	; 0xc94 <Serial0_print+0x16>
     ca0:	02 c0       	rjmp	.+4      	; 0xca6 <Serial0_print+0x28>
     ca2:	00 e0       	ldi	r16, 0x00	; 0
     ca4:	10 e0       	ldi	r17, 0x00	; 0
     ca6:	c8 01       	movw	r24, r16
     ca8:	df 91       	pop	r29
     caa:	cf 91       	pop	r28
     cac:	1f 91       	pop	r17
     cae:	0f 91       	pop	r16
     cb0:	08 95       	ret

00000cb2 <_rx0_complete_irq>:
	}
}

void _rx0_complete_irq(void)
{
	if (bit_is_clear(UCSR0A, UPE0)){
     cb2:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
     cb6:	82 fd       	sbrc	r24, 2
     cb8:	13 c0       	rjmp	.+38     	; 0xce0 <_rx0_complete_irq+0x2e>
		// No Parity error, read byte and store it in the buffer if there is room
		unsigned char c = UDR0;
     cba:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
		rx_buffer_index_t i = (unsigned int)(_rx_buffer0_head + 1) % SERIAL_RX_BUFFER_SIZE;
     cbe:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <_rx_buffer0_head>
     cc2:	8f 5f       	subi	r24, 0xFF	; 255
     cc4:	8f 73       	andi	r24, 0x3F	; 63
		
		// if we should be storing the received character into the location just before the tail 
		// (meaning that the head would advance to the current location of the tail), we're about to overflow the buffer
		// and so we don't write the character or advance the head.
		if (i != _rx_buffer0_tail) {
     cc6:	90 91 6a 03 	lds	r25, 0x036A	; 0x80036a <_rx_buffer0_tail>
     cca:	89 17       	cp	r24, r25
     ccc:	59 f0       	breq	.+22     	; 0xce4 <_rx0_complete_irq+0x32>
			_rx_buffer0[_rx_buffer0_head] = c;
     cce:	e0 91 ed 03 	lds	r30, 0x03ED	; 0x8003ed <_rx_buffer0_head>
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	ed 5c       	subi	r30, 0xCD	; 205
     cd6:	fb 4f       	sbci	r31, 0xFB	; 251
     cd8:	20 83       	st	Z, r18
			_rx_buffer0_head = i;
     cda:	80 93 ed 03 	sts	0x03ED, r24	; 0x8003ed <_rx_buffer0_head>
     cde:	08 95       	ret
		}
	}else{
		// Parity error, read byte but discard it
		UDR0;
     ce0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     ce4:	08 95       	ret

00000ce6 <__vector_25>:
}

/************************************************************************/
/*					 ISRs                                                */
/************************************************************************/
ISR(USART0_RX_vect){
     ce6:	1f 92       	push	r1
     ce8:	0f 92       	push	r0
     cea:	0f b6       	in	r0, 0x3f	; 63
     cec:	0f 92       	push	r0
     cee:	11 24       	eor	r1, r1
     cf0:	0b b6       	in	r0, 0x3b	; 59
     cf2:	0f 92       	push	r0
     cf4:	2f 93       	push	r18
     cf6:	3f 93       	push	r19
     cf8:	4f 93       	push	r20
     cfa:	5f 93       	push	r21
     cfc:	6f 93       	push	r22
     cfe:	7f 93       	push	r23
     d00:	8f 93       	push	r24
     d02:	9f 93       	push	r25
     d04:	af 93       	push	r26
     d06:	bf 93       	push	r27
     d08:	ef 93       	push	r30
     d0a:	ff 93       	push	r31
	_rx0_complete_irq();
     d0c:	d2 df       	rcall	.-92     	; 0xcb2 <_rx0_complete_irq>
}
     d0e:	ff 91       	pop	r31
     d10:	ef 91       	pop	r30
     d12:	bf 91       	pop	r27
     d14:	af 91       	pop	r26
     d16:	9f 91       	pop	r25
     d18:	8f 91       	pop	r24
     d1a:	7f 91       	pop	r23
     d1c:	6f 91       	pop	r22
     d1e:	5f 91       	pop	r21
     d20:	4f 91       	pop	r20
     d22:	3f 91       	pop	r19
     d24:	2f 91       	pop	r18
     d26:	0f 90       	pop	r0
     d28:	0b be       	out	0x3b, r0	; 59
     d2a:	0f 90       	pop	r0
     d2c:	0f be       	out	0x3f, r0	; 63
     d2e:	0f 90       	pop	r0
     d30:	1f 90       	pop	r1
     d32:	18 95       	reti

00000d34 <__vector_26>:

ISR(USART0_UDRE_vect){
     d34:	1f 92       	push	r1
     d36:	0f 92       	push	r0
     d38:	0f b6       	in	r0, 0x3f	; 63
     d3a:	0f 92       	push	r0
     d3c:	11 24       	eor	r1, r1
     d3e:	0b b6       	in	r0, 0x3b	; 59
     d40:	0f 92       	push	r0
     d42:	2f 93       	push	r18
     d44:	3f 93       	push	r19
     d46:	4f 93       	push	r20
     d48:	5f 93       	push	r21
     d4a:	6f 93       	push	r22
     d4c:	7f 93       	push	r23
     d4e:	8f 93       	push	r24
     d50:	9f 93       	push	r25
     d52:	af 93       	push	r26
     d54:	bf 93       	push	r27
     d56:	ef 93       	push	r30
     d58:	ff 93       	push	r31
	_tx0_udr_empty_irq();
     d5a:	19 df       	rcall	.-462    	; 0xb8e <_tx0_udr_empty_irq>
     d5c:	ff 91       	pop	r31
     d5e:	ef 91       	pop	r30
     d60:	bf 91       	pop	r27
     d62:	af 91       	pop	r26
     d64:	9f 91       	pop	r25
     d66:	8f 91       	pop	r24
     d68:	7f 91       	pop	r23
     d6a:	6f 91       	pop	r22
     d6c:	5f 91       	pop	r21
     d6e:	4f 91       	pop	r20
     d70:	3f 91       	pop	r19
     d72:	2f 91       	pop	r18
     d74:	0f 90       	pop	r0
     d76:	0b be       	out	0x3b, r0	; 59
     d78:	0f 90       	pop	r0
     d7a:	0f be       	out	0x3f, r0	; 63
     d7c:	0f 90       	pop	r0
     d7e:	1f 90       	pop	r1
     d80:	18 95       	reti

00000d82 <nothing>:
			break;
			case 7:
				EIMSK &= ~(1<<INT7);
			break;
		}
		intFunc[interruptNum] = nothing;
     d82:	08 95       	ret

00000d84 <attachInterrupt>:
     d84:	88 30       	cpi	r24, 0x08	; 8
     d86:	08 f0       	brcs	.+2      	; 0xd8a <attachInterrupt+0x6>
     d88:	79 c0       	rjmp	.+242    	; 0xe7c <attachInterrupt+0xf8>
     d8a:	e8 2f       	mov	r30, r24
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	ee 0f       	add	r30, r30
     d90:	ff 1f       	adc	r31, r31
     d92:	e0 50       	subi	r30, 0x00	; 0
     d94:	fe 4f       	sbci	r31, 0xFE	; 254
     d96:	71 83       	std	Z+1, r23	; 0x01
     d98:	60 83       	st	Z, r22
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	88 30       	cpi	r24, 0x08	; 8
     d9e:	91 05       	cpc	r25, r1
     da0:	08 f0       	brcs	.+2      	; 0xda4 <attachInterrupt+0x20>
     da2:	6c c0       	rjmp	.+216    	; 0xe7c <attachInterrupt+0xf8>
     da4:	fc 01       	movw	r30, r24
     da6:	88 27       	eor	r24, r24
     da8:	ee 58       	subi	r30, 0x8E	; 142
     daa:	ff 4f       	sbci	r31, 0xFF	; 255
     dac:	8f 4f       	sbci	r24, 0xFF	; 255
     dae:	0c 94 d6 12 	jmp	0x25ac	; 0x25ac <__tablejump2__>
     db2:	e9 e6       	ldi	r30, 0x69	; 105
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	80 81       	ld	r24, Z
     db8:	8c 7f       	andi	r24, 0xFC	; 252
     dba:	48 2b       	or	r20, r24
     dbc:	40 83       	st	Z, r20
     dbe:	e8 9a       	sbi	0x1d, 0	; 29
     dc0:	08 95       	ret
     dc2:	e9 e6       	ldi	r30, 0x69	; 105
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	80 81       	ld	r24, Z
     dc8:	83 7f       	andi	r24, 0xF3	; 243
     dca:	44 0f       	add	r20, r20
     dcc:	55 1f       	adc	r21, r21
     dce:	44 0f       	add	r20, r20
     dd0:	55 1f       	adc	r21, r21
     dd2:	48 2b       	or	r20, r24
     dd4:	40 83       	st	Z, r20
     dd6:	e9 9a       	sbi	0x1d, 1	; 29
     dd8:	08 95       	ret
     dda:	e9 e6       	ldi	r30, 0x69	; 105
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	8f 7c       	andi	r24, 0xCF	; 207
     de2:	42 95       	swap	r20
     de4:	52 95       	swap	r21
     de6:	50 7f       	andi	r21, 0xF0	; 240
     de8:	54 27       	eor	r21, r20
     dea:	40 7f       	andi	r20, 0xF0	; 240
     dec:	54 27       	eor	r21, r20
     dee:	48 2b       	or	r20, r24
     df0:	40 83       	st	Z, r20
     df2:	ea 9a       	sbi	0x1d, 2	; 29
     df4:	08 95       	ret
     df6:	e9 e6       	ldi	r30, 0x69	; 105
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	80 81       	ld	r24, Z
     dfc:	8f 73       	andi	r24, 0x3F	; 63
     dfe:	00 24       	eor	r0, r0
     e00:	56 95       	lsr	r21
     e02:	47 95       	ror	r20
     e04:	07 94       	ror	r0
     e06:	56 95       	lsr	r21
     e08:	47 95       	ror	r20
     e0a:	07 94       	ror	r0
     e0c:	54 2f       	mov	r21, r20
     e0e:	40 2d       	mov	r20, r0
     e10:	48 2b       	or	r20, r24
     e12:	40 83       	st	Z, r20
     e14:	eb 9a       	sbi	0x1d, 3	; 29
     e16:	08 95       	ret
     e18:	ea e6       	ldi	r30, 0x6A	; 106
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	80 81       	ld	r24, Z
     e1e:	8c 7f       	andi	r24, 0xFC	; 252
     e20:	48 2b       	or	r20, r24
     e22:	40 83       	st	Z, r20
     e24:	ec 9a       	sbi	0x1d, 4	; 29
     e26:	08 95       	ret
     e28:	ea e6       	ldi	r30, 0x6A	; 106
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	80 81       	ld	r24, Z
     e2e:	83 7f       	andi	r24, 0xF3	; 243
     e30:	44 0f       	add	r20, r20
     e32:	55 1f       	adc	r21, r21
     e34:	44 0f       	add	r20, r20
     e36:	55 1f       	adc	r21, r21
     e38:	48 2b       	or	r20, r24
     e3a:	40 83       	st	Z, r20
     e3c:	ed 9a       	sbi	0x1d, 5	; 29
     e3e:	08 95       	ret
     e40:	ea e6       	ldi	r30, 0x6A	; 106
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	8f 7c       	andi	r24, 0xCF	; 207
     e48:	42 95       	swap	r20
     e4a:	52 95       	swap	r21
     e4c:	50 7f       	andi	r21, 0xF0	; 240
     e4e:	54 27       	eor	r21, r20
     e50:	40 7f       	andi	r20, 0xF0	; 240
     e52:	54 27       	eor	r21, r20
     e54:	48 2b       	or	r20, r24
     e56:	40 83       	st	Z, r20
     e58:	ee 9a       	sbi	0x1d, 6	; 29
     e5a:	08 95       	ret
     e5c:	ea e6       	ldi	r30, 0x6A	; 106
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	80 81       	ld	r24, Z
     e62:	8f 73       	andi	r24, 0x3F	; 63
     e64:	00 24       	eor	r0, r0
     e66:	56 95       	lsr	r21
     e68:	47 95       	ror	r20
     e6a:	07 94       	ror	r0
     e6c:	56 95       	lsr	r21
     e6e:	47 95       	ror	r20
     e70:	07 94       	ror	r0
     e72:	54 2f       	mov	r21, r20
     e74:	40 2d       	mov	r20, r0
     e76:	48 2b       	or	r20, r24
     e78:	40 83       	st	Z, r20
     e7a:	ef 9a       	sbi	0x1d, 7	; 29
     e7c:	08 95       	ret

00000e7e <__vector_1>:
#define IMPLEMENT_ISR(vect, interrupt) \
	ISR(vect) { \
		intFunc[interrupt](); \
	}
	
IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
     e7e:	1f 92       	push	r1
     e80:	0f 92       	push	r0
     e82:	0f b6       	in	r0, 0x3f	; 63
     e84:	0f 92       	push	r0
     e86:	11 24       	eor	r1, r1
     e88:	0b b6       	in	r0, 0x3b	; 59
     e8a:	0f 92       	push	r0
     e8c:	2f 93       	push	r18
     e8e:	3f 93       	push	r19
     e90:	4f 93       	push	r20
     e92:	5f 93       	push	r21
     e94:	6f 93       	push	r22
     e96:	7f 93       	push	r23
     e98:	8f 93       	push	r24
     e9a:	9f 93       	push	r25
     e9c:	af 93       	push	r26
     e9e:	bf 93       	push	r27
     ea0:	ef 93       	push	r30
     ea2:	ff 93       	push	r31
     ea4:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <__data_start>
     ea8:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <__data_start+0x1>
     eac:	19 95       	eicall
     eae:	ff 91       	pop	r31
     eb0:	ef 91       	pop	r30
     eb2:	bf 91       	pop	r27
     eb4:	af 91       	pop	r26
     eb6:	9f 91       	pop	r25
     eb8:	8f 91       	pop	r24
     eba:	7f 91       	pop	r23
     ebc:	6f 91       	pop	r22
     ebe:	5f 91       	pop	r21
     ec0:	4f 91       	pop	r20
     ec2:	3f 91       	pop	r19
     ec4:	2f 91       	pop	r18
     ec6:	0f 90       	pop	r0
     ec8:	0b be       	out	0x3b, r0	; 59
     eca:	0f 90       	pop	r0
     ecc:	0f be       	out	0x3f, r0	; 63
     ece:	0f 90       	pop	r0
     ed0:	1f 90       	pop	r1
     ed2:	18 95       	reti

00000ed4 <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
     ed4:	1f 92       	push	r1
     ed6:	0f 92       	push	r0
     ed8:	0f b6       	in	r0, 0x3f	; 63
     eda:	0f 92       	push	r0
     edc:	11 24       	eor	r1, r1
     ede:	0b b6       	in	r0, 0x3b	; 59
     ee0:	0f 92       	push	r0
     ee2:	2f 93       	push	r18
     ee4:	3f 93       	push	r19
     ee6:	4f 93       	push	r20
     ee8:	5f 93       	push	r21
     eea:	6f 93       	push	r22
     eec:	7f 93       	push	r23
     eee:	8f 93       	push	r24
     ef0:	9f 93       	push	r25
     ef2:	af 93       	push	r26
     ef4:	bf 93       	push	r27
     ef6:	ef 93       	push	r30
     ef8:	ff 93       	push	r31
     efa:	e0 91 02 02 	lds	r30, 0x0202	; 0x800202 <__data_start+0x2>
     efe:	f0 91 03 02 	lds	r31, 0x0203	; 0x800203 <__data_start+0x3>
     f02:	19 95       	eicall
     f04:	ff 91       	pop	r31
     f06:	ef 91       	pop	r30
     f08:	bf 91       	pop	r27
     f0a:	af 91       	pop	r26
     f0c:	9f 91       	pop	r25
     f0e:	8f 91       	pop	r24
     f10:	7f 91       	pop	r23
     f12:	6f 91       	pop	r22
     f14:	5f 91       	pop	r21
     f16:	4f 91       	pop	r20
     f18:	3f 91       	pop	r19
     f1a:	2f 91       	pop	r18
     f1c:	0f 90       	pop	r0
     f1e:	0b be       	out	0x3b, r0	; 59
     f20:	0f 90       	pop	r0
     f22:	0f be       	out	0x3f, r0	; 63
     f24:	0f 90       	pop	r0
     f26:	1f 90       	pop	r1
     f28:	18 95       	reti

00000f2a <__vector_3>:
IMPLEMENT_ISR(INT2_vect, EXTERNAL_INT_2)
     f2a:	1f 92       	push	r1
     f2c:	0f 92       	push	r0
     f2e:	0f b6       	in	r0, 0x3f	; 63
     f30:	0f 92       	push	r0
     f32:	11 24       	eor	r1, r1
     f34:	0b b6       	in	r0, 0x3b	; 59
     f36:	0f 92       	push	r0
     f38:	2f 93       	push	r18
     f3a:	3f 93       	push	r19
     f3c:	4f 93       	push	r20
     f3e:	5f 93       	push	r21
     f40:	6f 93       	push	r22
     f42:	7f 93       	push	r23
     f44:	8f 93       	push	r24
     f46:	9f 93       	push	r25
     f48:	af 93       	push	r26
     f4a:	bf 93       	push	r27
     f4c:	ef 93       	push	r30
     f4e:	ff 93       	push	r31
     f50:	e0 91 04 02 	lds	r30, 0x0204	; 0x800204 <__data_start+0x4>
     f54:	f0 91 05 02 	lds	r31, 0x0205	; 0x800205 <__data_start+0x5>
     f58:	19 95       	eicall
     f5a:	ff 91       	pop	r31
     f5c:	ef 91       	pop	r30
     f5e:	bf 91       	pop	r27
     f60:	af 91       	pop	r26
     f62:	9f 91       	pop	r25
     f64:	8f 91       	pop	r24
     f66:	7f 91       	pop	r23
     f68:	6f 91       	pop	r22
     f6a:	5f 91       	pop	r21
     f6c:	4f 91       	pop	r20
     f6e:	3f 91       	pop	r19
     f70:	2f 91       	pop	r18
     f72:	0f 90       	pop	r0
     f74:	0b be       	out	0x3b, r0	; 59
     f76:	0f 90       	pop	r0
     f78:	0f be       	out	0x3f, r0	; 63
     f7a:	0f 90       	pop	r0
     f7c:	1f 90       	pop	r1
     f7e:	18 95       	reti

00000f80 <__vector_4>:
IMPLEMENT_ISR(INT3_vect, EXTERNAL_INT_3)
     f80:	1f 92       	push	r1
     f82:	0f 92       	push	r0
     f84:	0f b6       	in	r0, 0x3f	; 63
     f86:	0f 92       	push	r0
     f88:	11 24       	eor	r1, r1
     f8a:	0b b6       	in	r0, 0x3b	; 59
     f8c:	0f 92       	push	r0
     f8e:	2f 93       	push	r18
     f90:	3f 93       	push	r19
     f92:	4f 93       	push	r20
     f94:	5f 93       	push	r21
     f96:	6f 93       	push	r22
     f98:	7f 93       	push	r23
     f9a:	8f 93       	push	r24
     f9c:	9f 93       	push	r25
     f9e:	af 93       	push	r26
     fa0:	bf 93       	push	r27
     fa2:	ef 93       	push	r30
     fa4:	ff 93       	push	r31
     fa6:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <__data_start+0x6>
     faa:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <__data_start+0x7>
     fae:	19 95       	eicall
     fb0:	ff 91       	pop	r31
     fb2:	ef 91       	pop	r30
     fb4:	bf 91       	pop	r27
     fb6:	af 91       	pop	r26
     fb8:	9f 91       	pop	r25
     fba:	8f 91       	pop	r24
     fbc:	7f 91       	pop	r23
     fbe:	6f 91       	pop	r22
     fc0:	5f 91       	pop	r21
     fc2:	4f 91       	pop	r20
     fc4:	3f 91       	pop	r19
     fc6:	2f 91       	pop	r18
     fc8:	0f 90       	pop	r0
     fca:	0b be       	out	0x3b, r0	; 59
     fcc:	0f 90       	pop	r0
     fce:	0f be       	out	0x3f, r0	; 63
     fd0:	0f 90       	pop	r0
     fd2:	1f 90       	pop	r1
     fd4:	18 95       	reti

00000fd6 <__vector_5>:
IMPLEMENT_ISR(INT4_vect, EXTERNAL_INT_4)
     fd6:	1f 92       	push	r1
     fd8:	0f 92       	push	r0
     fda:	0f b6       	in	r0, 0x3f	; 63
     fdc:	0f 92       	push	r0
     fde:	11 24       	eor	r1, r1
     fe0:	0b b6       	in	r0, 0x3b	; 59
     fe2:	0f 92       	push	r0
     fe4:	2f 93       	push	r18
     fe6:	3f 93       	push	r19
     fe8:	4f 93       	push	r20
     fea:	5f 93       	push	r21
     fec:	6f 93       	push	r22
     fee:	7f 93       	push	r23
     ff0:	8f 93       	push	r24
     ff2:	9f 93       	push	r25
     ff4:	af 93       	push	r26
     ff6:	bf 93       	push	r27
     ff8:	ef 93       	push	r30
     ffa:	ff 93       	push	r31
     ffc:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <__data_start+0x8>
    1000:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <__data_start+0x9>
    1004:	19 95       	eicall
    1006:	ff 91       	pop	r31
    1008:	ef 91       	pop	r30
    100a:	bf 91       	pop	r27
    100c:	af 91       	pop	r26
    100e:	9f 91       	pop	r25
    1010:	8f 91       	pop	r24
    1012:	7f 91       	pop	r23
    1014:	6f 91       	pop	r22
    1016:	5f 91       	pop	r21
    1018:	4f 91       	pop	r20
    101a:	3f 91       	pop	r19
    101c:	2f 91       	pop	r18
    101e:	0f 90       	pop	r0
    1020:	0b be       	out	0x3b, r0	; 59
    1022:	0f 90       	pop	r0
    1024:	0f be       	out	0x3f, r0	; 63
    1026:	0f 90       	pop	r0
    1028:	1f 90       	pop	r1
    102a:	18 95       	reti

0000102c <__vector_6>:
IMPLEMENT_ISR(INT5_vect, EXTERNAL_INT_5)
    102c:	1f 92       	push	r1
    102e:	0f 92       	push	r0
    1030:	0f b6       	in	r0, 0x3f	; 63
    1032:	0f 92       	push	r0
    1034:	11 24       	eor	r1, r1
    1036:	0b b6       	in	r0, 0x3b	; 59
    1038:	0f 92       	push	r0
    103a:	2f 93       	push	r18
    103c:	3f 93       	push	r19
    103e:	4f 93       	push	r20
    1040:	5f 93       	push	r21
    1042:	6f 93       	push	r22
    1044:	7f 93       	push	r23
    1046:	8f 93       	push	r24
    1048:	9f 93       	push	r25
    104a:	af 93       	push	r26
    104c:	bf 93       	push	r27
    104e:	ef 93       	push	r30
    1050:	ff 93       	push	r31
    1052:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <__data_start+0xa>
    1056:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <__data_start+0xb>
    105a:	19 95       	eicall
    105c:	ff 91       	pop	r31
    105e:	ef 91       	pop	r30
    1060:	bf 91       	pop	r27
    1062:	af 91       	pop	r26
    1064:	9f 91       	pop	r25
    1066:	8f 91       	pop	r24
    1068:	7f 91       	pop	r23
    106a:	6f 91       	pop	r22
    106c:	5f 91       	pop	r21
    106e:	4f 91       	pop	r20
    1070:	3f 91       	pop	r19
    1072:	2f 91       	pop	r18
    1074:	0f 90       	pop	r0
    1076:	0b be       	out	0x3b, r0	; 59
    1078:	0f 90       	pop	r0
    107a:	0f be       	out	0x3f, r0	; 63
    107c:	0f 90       	pop	r0
    107e:	1f 90       	pop	r1
    1080:	18 95       	reti

00001082 <__vector_7>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
    1082:	1f 92       	push	r1
    1084:	0f 92       	push	r0
    1086:	0f b6       	in	r0, 0x3f	; 63
    1088:	0f 92       	push	r0
    108a:	11 24       	eor	r1, r1
    108c:	0b b6       	in	r0, 0x3b	; 59
    108e:	0f 92       	push	r0
    1090:	2f 93       	push	r18
    1092:	3f 93       	push	r19
    1094:	4f 93       	push	r20
    1096:	5f 93       	push	r21
    1098:	6f 93       	push	r22
    109a:	7f 93       	push	r23
    109c:	8f 93       	push	r24
    109e:	9f 93       	push	r25
    10a0:	af 93       	push	r26
    10a2:	bf 93       	push	r27
    10a4:	ef 93       	push	r30
    10a6:	ff 93       	push	r31
    10a8:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <__data_start+0xc>
    10ac:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <__data_start+0xd>
    10b0:	19 95       	eicall
    10b2:	ff 91       	pop	r31
    10b4:	ef 91       	pop	r30
    10b6:	bf 91       	pop	r27
    10b8:	af 91       	pop	r26
    10ba:	9f 91       	pop	r25
    10bc:	8f 91       	pop	r24
    10be:	7f 91       	pop	r23
    10c0:	6f 91       	pop	r22
    10c2:	5f 91       	pop	r21
    10c4:	4f 91       	pop	r20
    10c6:	3f 91       	pop	r19
    10c8:	2f 91       	pop	r18
    10ca:	0f 90       	pop	r0
    10cc:	0b be       	out	0x3b, r0	; 59
    10ce:	0f 90       	pop	r0
    10d0:	0f be       	out	0x3f, r0	; 63
    10d2:	0f 90       	pop	r0
    10d4:	1f 90       	pop	r1
    10d6:	18 95       	reti

000010d8 <__vector_8>:
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)
    10d8:	1f 92       	push	r1
    10da:	0f 92       	push	r0
    10dc:	0f b6       	in	r0, 0x3f	; 63
    10de:	0f 92       	push	r0
    10e0:	11 24       	eor	r1, r1
    10e2:	0b b6       	in	r0, 0x3b	; 59
    10e4:	0f 92       	push	r0
    10e6:	2f 93       	push	r18
    10e8:	3f 93       	push	r19
    10ea:	4f 93       	push	r20
    10ec:	5f 93       	push	r21
    10ee:	6f 93       	push	r22
    10f0:	7f 93       	push	r23
    10f2:	8f 93       	push	r24
    10f4:	9f 93       	push	r25
    10f6:	af 93       	push	r26
    10f8:	bf 93       	push	r27
    10fa:	ef 93       	push	r30
    10fc:	ff 93       	push	r31
    10fe:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <__data_start+0xe>
    1102:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <__data_start+0xf>
    1106:	19 95       	eicall
    1108:	ff 91       	pop	r31
    110a:	ef 91       	pop	r30
    110c:	bf 91       	pop	r27
    110e:	af 91       	pop	r26
    1110:	9f 91       	pop	r25
    1112:	8f 91       	pop	r24
    1114:	7f 91       	pop	r23
    1116:	6f 91       	pop	r22
    1118:	5f 91       	pop	r21
    111a:	4f 91       	pop	r20
    111c:	3f 91       	pop	r19
    111e:	2f 91       	pop	r18
    1120:	0f 90       	pop	r0
    1122:	0b be       	out	0x3b, r0	; 59
    1124:	0f 90       	pop	r0
    1126:	0f be       	out	0x3f, r0	; 63
    1128:	0f 90       	pop	r0
    112a:	1f 90       	pop	r1
    112c:	18 95       	reti

0000112e <enablePinChangeInterruptHelper>:
	// delete setting
	risingPorts[arrayPos] &= ~pcintMask;
	fallingPorts[arrayPos] &= ~pcintMask;

	// call the actual hardware disable function
	disablePinChangeInterruptHelper(pcintPort, pcintMask);
    112e:	98 2f       	mov	r25, r24
    1130:	81 30       	cpi	r24, 0x01	; 1
    1132:	59 f0       	breq	.+22     	; 0x114a <enablePinChangeInterruptHelper+0x1c>
    1134:	18 f0       	brcs	.+6      	; 0x113c <enablePinChangeInterruptHelper+0xe>
    1136:	82 30       	cpi	r24, 0x02	; 2
    1138:	a1 f0       	breq	.+40     	; 0x1162 <enablePinChangeInterruptHelper+0x34>
    113a:	1b c0       	rjmp	.+54     	; 0x1172 <enablePinChangeInterruptHelper+0x44>
    113c:	83 b1       	in	r24, 0x03	; 3
    113e:	e4 2f       	mov	r30, r20
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	e6 5b       	subi	r30, 0xB6	; 182
    1144:	fd 4f       	sbci	r31, 0xFD	; 253
    1146:	80 83       	st	Z, r24
    1148:	1a c0       	rjmp	.+52     	; 0x117e <enablePinChangeInterruptHelper+0x50>
    114a:	2c b1       	in	r18, 0x0c	; 12
    114c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
    1150:	e4 2f       	mov	r30, r20
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	e6 5b       	subi	r30, 0xB6	; 182
    1156:	fd 4f       	sbci	r31, 0xFD	; 253
    1158:	21 70       	andi	r18, 0x01	; 1
    115a:	88 0f       	add	r24, r24
    115c:	82 2b       	or	r24, r18
    115e:	80 83       	st	Z, r24
    1160:	14 c0       	rjmp	.+40     	; 0x118a <enablePinChangeInterruptHelper+0x5c>
    1162:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
    1166:	e4 2f       	mov	r30, r20
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	e6 5b       	subi	r30, 0xB6	; 182
    116c:	fd 4f       	sbci	r31, 0xFD	; 253
    116e:	80 83       	st	Z, r24
    1170:	12 c0       	rjmp	.+36     	; 0x1196 <enablePinChangeInterruptHelper+0x68>
    1172:	81 30       	cpi	r24, 0x01	; 1
    1174:	51 f0       	breq	.+20     	; 0x118a <enablePinChangeInterruptHelper+0x5c>
    1176:	18 f0       	brcs	.+6      	; 0x117e <enablePinChangeInterruptHelper+0x50>
    1178:	82 30       	cpi	r24, 0x02	; 2
    117a:	91 f4       	brne	.+36     	; 0x11a0 <enablePinChangeInterruptHelper+0x72>
    117c:	0c c0       	rjmp	.+24     	; 0x1196 <enablePinChangeInterruptHelper+0x68>
    117e:	eb e6       	ldi	r30, 0x6B	; 107
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	80 81       	ld	r24, Z
    1184:	68 2b       	or	r22, r24
    1186:	60 83       	st	Z, r22
    1188:	0b c0       	rjmp	.+22     	; 0x11a0 <enablePinChangeInterruptHelper+0x72>
    118a:	ec e6       	ldi	r30, 0x6C	; 108
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	68 2b       	or	r22, r24
    1192:	60 83       	st	Z, r22
    1194:	05 c0       	rjmp	.+10     	; 0x11a0 <enablePinChangeInterruptHelper+0x72>
    1196:	ed e6       	ldi	r30, 0x6D	; 109
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	68 2b       	or	r22, r24
    119e:	60 83       	st	Z, r22
    11a0:	e8 e6       	ldi	r30, 0x68	; 104
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	40 81       	ld	r20, Z
    11a6:	21 e0       	ldi	r18, 0x01	; 1
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	b9 01       	movw	r22, r18
    11ac:	02 c0       	rjmp	.+4      	; 0x11b2 <enablePinChangeInterruptHelper+0x84>
    11ae:	66 0f       	add	r22, r22
    11b0:	77 1f       	adc	r23, r23
    11b2:	9a 95       	dec	r25
    11b4:	e2 f7       	brpl	.-8      	; 0x11ae <enablePinChangeInterruptHelper+0x80>
    11b6:	cb 01       	movw	r24, r22
    11b8:	84 2b       	or	r24, r20
    11ba:	80 83       	st	Z, r24
    11bc:	08 95       	ret

000011be <attachPinChangeInterrupt>:
    11be:	98 2f       	mov	r25, r24
    11c0:	96 95       	lsr	r25
    11c2:	96 95       	lsr	r25
    11c4:	96 95       	lsr	r25
    11c6:	28 2f       	mov	r18, r24
    11c8:	27 70       	andi	r18, 0x07	; 7
    11ca:	78 94       	sei
    11cc:	91 11       	cpse	r25, r1
    11ce:	39 c0       	rjmp	.+114    	; 0x1242 <attachPinChangeInterrupt+0x84>
    11d0:	81 11       	cpse	r24, r1
    11d2:	05 c0       	rjmp	.+10     	; 0x11de <attachPinChangeInterrupt+0x20>
    11d4:	70 93 82 04 	sts	0x0482, r23	; 0x800482 <callbackPCINT0+0x1>
    11d8:	60 93 81 04 	sts	0x0481, r22	; 0x800481 <callbackPCINT0>
    11dc:	0e c0       	rjmp	.+28     	; 0x11fa <attachPinChangeInterrupt+0x3c>
    11de:	81 30       	cpi	r24, 0x01	; 1
    11e0:	29 f4       	brne	.+10     	; 0x11ec <attachPinChangeInterrupt+0x2e>
    11e2:	70 93 88 04 	sts	0x0488, r23	; 0x800488 <callbackPCINT1+0x1>
    11e6:	60 93 87 04 	sts	0x0487, r22	; 0x800487 <callbackPCINT1>
    11ea:	0e c0       	rjmp	.+28     	; 0x1208 <attachPinChangeInterrupt+0x4a>
    11ec:	82 30       	cpi	r24, 0x02	; 2
    11ee:	29 f4       	brne	.+10     	; 0x11fa <attachPinChangeInterrupt+0x3c>
    11f0:	70 93 9a 04 	sts	0x049A, r23	; 0x80049a <callbackPCINT2+0x1>
    11f4:	60 93 99 04 	sts	0x0499, r22	; 0x800499 <callbackPCINT2>
    11f8:	0e c0       	rjmp	.+28     	; 0x1216 <attachPinChangeInterrupt+0x58>
    11fa:	83 30       	cpi	r24, 0x03	; 3
    11fc:	29 f4       	brne	.+10     	; 0x1208 <attachPinChangeInterrupt+0x4a>
    11fe:	70 93 ac 04 	sts	0x04AC, r23	; 0x8004ac <callbackPCINT3+0x1>
    1202:	60 93 ab 04 	sts	0x04AB, r22	; 0x8004ab <callbackPCINT3>
    1206:	0e c0       	rjmp	.+28     	; 0x1224 <attachPinChangeInterrupt+0x66>
    1208:	84 30       	cpi	r24, 0x04	; 4
    120a:	29 f4       	brne	.+10     	; 0x1216 <attachPinChangeInterrupt+0x58>
    120c:	70 93 9c 04 	sts	0x049C, r23	; 0x80049c <callbackPCINT4+0x1>
    1210:	60 93 9b 04 	sts	0x049B, r22	; 0x80049b <callbackPCINT4>
    1214:	0e c0       	rjmp	.+28     	; 0x1232 <attachPinChangeInterrupt+0x74>
    1216:	85 30       	cpi	r24, 0x05	; 5
    1218:	29 f4       	brne	.+10     	; 0x1224 <attachPinChangeInterrupt+0x66>
    121a:	70 93 a6 04 	sts	0x04A6, r23	; 0x8004a6 <callbackPCINT5+0x1>
    121e:	60 93 a5 04 	sts	0x04A5, r22	; 0x8004a5 <callbackPCINT5>
    1222:	84 c0       	rjmp	.+264    	; 0x132c <attachPinChangeInterrupt+0x16e>
    1224:	86 30       	cpi	r24, 0x06	; 6
    1226:	29 f4       	brne	.+10     	; 0x1232 <attachPinChangeInterrupt+0x74>
    1228:	70 93 96 04 	sts	0x0496, r23	; 0x800496 <callbackPCINT6+0x1>
    122c:	60 93 95 04 	sts	0x0495, r22	; 0x800495 <callbackPCINT6>
    1230:	7d c0       	rjmp	.+250    	; 0x132c <attachPinChangeInterrupt+0x16e>
    1232:	87 30       	cpi	r24, 0x07	; 7
    1234:	09 f0       	breq	.+2      	; 0x1238 <attachPinChangeInterrupt+0x7a>
    1236:	7a c0       	rjmp	.+244    	; 0x132c <attachPinChangeInterrupt+0x16e>
    1238:	70 93 8a 04 	sts	0x048A, r23	; 0x80048a <callbackPCINT7+0x1>
    123c:	60 93 89 04 	sts	0x0489, r22	; 0x800489 <callbackPCINT7>
    1240:	75 c0       	rjmp	.+234    	; 0x132c <attachPinChangeInterrupt+0x16e>
    1242:	91 30       	cpi	r25, 0x01	; 1
    1244:	c9 f5       	brne	.+114    	; 0x12b8 <attachPinChangeInterrupt+0xfa>
    1246:	88 30       	cpi	r24, 0x08	; 8
    1248:	29 f4       	brne	.+10     	; 0x1254 <attachPinChangeInterrupt+0x96>
    124a:	70 93 98 04 	sts	0x0498, r23	; 0x800498 <callbackPCINT8+0x1>
    124e:	60 93 97 04 	sts	0x0497, r22	; 0x800497 <callbackPCINT8>
    1252:	0e c0       	rjmp	.+28     	; 0x1270 <attachPinChangeInterrupt+0xb2>
    1254:	89 30       	cpi	r24, 0x09	; 9
    1256:	29 f4       	brne	.+10     	; 0x1262 <attachPinChangeInterrupt+0xa4>
    1258:	70 93 90 04 	sts	0x0490, r23	; 0x800490 <callbackPCINT9+0x1>
    125c:	60 93 8f 04 	sts	0x048F, r22	; 0x80048f <callbackPCINT9>
    1260:	0e c0       	rjmp	.+28     	; 0x127e <attachPinChangeInterrupt+0xc0>
    1262:	8a 30       	cpi	r24, 0x0A	; 10
    1264:	29 f4       	brne	.+10     	; 0x1270 <attachPinChangeInterrupt+0xb2>
    1266:	70 93 a2 04 	sts	0x04A2, r23	; 0x8004a2 <callbackPCINT10+0x1>
    126a:	60 93 a1 04 	sts	0x04A1, r22	; 0x8004a1 <callbackPCINT10>
    126e:	0e c0       	rjmp	.+28     	; 0x128c <attachPinChangeInterrupt+0xce>
    1270:	8b 30       	cpi	r24, 0x0B	; 11
    1272:	29 f4       	brne	.+10     	; 0x127e <attachPinChangeInterrupt+0xc0>
    1274:	70 93 94 04 	sts	0x0494, r23	; 0x800494 <callbackPCINT11+0x1>
    1278:	60 93 93 04 	sts	0x0493, r22	; 0x800493 <callbackPCINT11>
    127c:	0e c0       	rjmp	.+28     	; 0x129a <attachPinChangeInterrupt+0xdc>
    127e:	8c 30       	cpi	r24, 0x0C	; 12
    1280:	29 f4       	brne	.+10     	; 0x128c <attachPinChangeInterrupt+0xce>
    1282:	70 93 ae 04 	sts	0x04AE, r23	; 0x8004ae <callbackPCINT12+0x1>
    1286:	60 93 ad 04 	sts	0x04AD, r22	; 0x8004ad <callbackPCINT12>
    128a:	0e c0       	rjmp	.+28     	; 0x12a8 <attachPinChangeInterrupt+0xea>
    128c:	8d 30       	cpi	r24, 0x0D	; 13
    128e:	29 f4       	brne	.+10     	; 0x129a <attachPinChangeInterrupt+0xdc>
    1290:	70 93 a0 04 	sts	0x04A0, r23	; 0x8004a0 <callbackPCINT13+0x1>
    1294:	60 93 9f 04 	sts	0x049F, r22	; 0x80049f <callbackPCINT13>
    1298:	49 c0       	rjmp	.+146    	; 0x132c <attachPinChangeInterrupt+0x16e>
    129a:	8e 30       	cpi	r24, 0x0E	; 14
    129c:	29 f4       	brne	.+10     	; 0x12a8 <attachPinChangeInterrupt+0xea>
    129e:	70 93 9e 04 	sts	0x049E, r23	; 0x80049e <callbackPCINT14+0x1>
    12a2:	60 93 9d 04 	sts	0x049D, r22	; 0x80049d <callbackPCINT14>
    12a6:	42 c0       	rjmp	.+132    	; 0x132c <attachPinChangeInterrupt+0x16e>
    12a8:	8f 30       	cpi	r24, 0x0F	; 15
    12aa:	09 f0       	breq	.+2      	; 0x12ae <attachPinChangeInterrupt+0xf0>
    12ac:	3f c0       	rjmp	.+126    	; 0x132c <attachPinChangeInterrupt+0x16e>
    12ae:	70 93 aa 04 	sts	0x04AA, r23	; 0x8004aa <callbackPCINT15+0x1>
    12b2:	60 93 a9 04 	sts	0x04A9, r22	; 0x8004a9 <callbackPCINT15>
    12b6:	3a c0       	rjmp	.+116    	; 0x132c <attachPinChangeInterrupt+0x16e>
    12b8:	92 30       	cpi	r25, 0x02	; 2
    12ba:	09 f0       	breq	.+2      	; 0x12be <attachPinChangeInterrupt+0x100>
    12bc:	56 c0       	rjmp	.+172    	; 0x136a <attachPinChangeInterrupt+0x1ac>
    12be:	80 31       	cpi	r24, 0x10	; 16
    12c0:	29 f4       	brne	.+10     	; 0x12cc <attachPinChangeInterrupt+0x10e>
    12c2:	70 93 8c 04 	sts	0x048C, r23	; 0x80048c <callbackPCINT16+0x1>
    12c6:	60 93 8b 04 	sts	0x048B, r22	; 0x80048b <callbackPCINT16>
    12ca:	0e c0       	rjmp	.+28     	; 0x12e8 <attachPinChangeInterrupt+0x12a>
    12cc:	81 31       	cpi	r24, 0x11	; 17
    12ce:	29 f4       	brne	.+10     	; 0x12da <attachPinChangeInterrupt+0x11c>
    12d0:	70 93 a4 04 	sts	0x04A4, r23	; 0x8004a4 <callbackPCINT17+0x1>
    12d4:	60 93 a3 04 	sts	0x04A3, r22	; 0x8004a3 <callbackPCINT17>
    12d8:	0e c0       	rjmp	.+28     	; 0x12f6 <attachPinChangeInterrupt+0x138>
    12da:	82 31       	cpi	r24, 0x12	; 18
    12dc:	29 f4       	brne	.+10     	; 0x12e8 <attachPinChangeInterrupt+0x12a>
    12de:	70 93 84 04 	sts	0x0484, r23	; 0x800484 <callbackPCINT18+0x1>
    12e2:	60 93 83 04 	sts	0x0483, r22	; 0x800483 <callbackPCINT18>
    12e6:	0e c0       	rjmp	.+28     	; 0x1304 <attachPinChangeInterrupt+0x146>
    12e8:	83 31       	cpi	r24, 0x13	; 19
    12ea:	29 f4       	brne	.+10     	; 0x12f6 <attachPinChangeInterrupt+0x138>
    12ec:	70 93 8e 04 	sts	0x048E, r23	; 0x80048e <callbackPCINT19+0x1>
    12f0:	60 93 8d 04 	sts	0x048D, r22	; 0x80048d <callbackPCINT19>
    12f4:	0e c0       	rjmp	.+28     	; 0x1312 <attachPinChangeInterrupt+0x154>
    12f6:	84 31       	cpi	r24, 0x14	; 20
    12f8:	29 f4       	brne	.+10     	; 0x1304 <attachPinChangeInterrupt+0x146>
    12fa:	70 93 b0 04 	sts	0x04B0, r23	; 0x8004b0 <callbackPCINT20+0x1>
    12fe:	60 93 af 04 	sts	0x04AF, r22	; 0x8004af <callbackPCINT20>
    1302:	0e c0       	rjmp	.+28     	; 0x1320 <attachPinChangeInterrupt+0x162>
    1304:	85 31       	cpi	r24, 0x15	; 21
    1306:	29 f4       	brne	.+10     	; 0x1312 <attachPinChangeInterrupt+0x154>
    1308:	70 93 86 04 	sts	0x0486, r23	; 0x800486 <callbackPCINT21+0x1>
    130c:	60 93 85 04 	sts	0x0485, r22	; 0x800485 <callbackPCINT21>
    1310:	0d c0       	rjmp	.+26     	; 0x132c <attachPinChangeInterrupt+0x16e>
    1312:	86 31       	cpi	r24, 0x16	; 22
    1314:	29 f4       	brne	.+10     	; 0x1320 <attachPinChangeInterrupt+0x162>
    1316:	70 93 a8 04 	sts	0x04A8, r23	; 0x8004a8 <callbackPCINT22+0x1>
    131a:	60 93 a7 04 	sts	0x04A7, r22	; 0x8004a7 <callbackPCINT22>
    131e:	06 c0       	rjmp	.+12     	; 0x132c <attachPinChangeInterrupt+0x16e>
    1320:	87 31       	cpi	r24, 0x17	; 23
    1322:	21 f4       	brne	.+8      	; 0x132c <attachPinChangeInterrupt+0x16e>
    1324:	70 93 92 04 	sts	0x0492, r23	; 0x800492 <callbackPCINT23+0x1>
    1328:	60 93 91 04 	sts	0x0491, r22	; 0x800491 <callbackPCINT23>
    132c:	61 e0       	ldi	r22, 0x01	; 1
    132e:	70 e0       	ldi	r23, 0x00	; 0
    1330:	02 c0       	rjmp	.+4      	; 0x1336 <attachPinChangeInterrupt+0x178>
    1332:	66 0f       	add	r22, r22
    1334:	77 1f       	adc	r23, r23
    1336:	2a 95       	dec	r18
    1338:	e2 f7       	brpl	.-8      	; 0x1332 <attachPinChangeInterrupt+0x174>
    133a:	84 2f       	mov	r24, r20
    133c:	8d 7f       	andi	r24, 0xFD	; 253
    133e:	81 30       	cpi	r24, 0x01	; 1
    1340:	39 f4       	brne	.+14     	; 0x1350 <attachPinChangeInterrupt+0x192>
    1342:	e9 2f       	mov	r30, r25
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	ec 5b       	subi	r30, 0xBC	; 188
    1348:	fd 4f       	sbci	r31, 0xFD	; 253
    134a:	80 81       	ld	r24, Z
    134c:	86 2b       	or	r24, r22
    134e:	80 83       	st	Z, r24
    1350:	41 50       	subi	r20, 0x01	; 1
    1352:	42 30       	cpi	r20, 0x02	; 2
    1354:	38 f4       	brcc	.+14     	; 0x1364 <attachPinChangeInterrupt+0x1a6>
    1356:	e9 2f       	mov	r30, r25
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	e9 5b       	subi	r30, 0xB9	; 185
    135c:	fd 4f       	sbci	r31, 0xFD	; 253
    135e:	80 81       	ld	r24, Z
    1360:	86 2b       	or	r24, r22
    1362:	80 83       	st	Z, r24
    1364:	49 2f       	mov	r20, r25
    1366:	89 2f       	mov	r24, r25
    1368:	e2 ce       	rjmp	.-572    	; 0x112e <enablePinChangeInterruptHelper>
    136a:	08 95       	ret

0000136c <PinChangeInterruptEventPCINT0>:

//============callbacks==============

#if (PCINT_USE_PCINT0 == true)
void PinChangeInterruptEventPCINT0(void) {
	callbackPCINT0();
    136c:	e0 91 81 04 	lds	r30, 0x0481	; 0x800481 <callbackPCINT0>
    1370:	f0 91 82 04 	lds	r31, 0x0482	; 0x800482 <callbackPCINT0+0x1>
    1374:	19 95       	eicall
    1376:	08 95       	ret

00001378 <PinChangeInterruptEventPCINT1>:
}
#endif
#if (PCINT_USE_PCINT1 == true)
void PinChangeInterruptEventPCINT1(void) {
	callbackPCINT1();
    1378:	e0 91 87 04 	lds	r30, 0x0487	; 0x800487 <callbackPCINT1>
    137c:	f0 91 88 04 	lds	r31, 0x0488	; 0x800488 <callbackPCINT1+0x1>
    1380:	19 95       	eicall
    1382:	08 95       	ret

00001384 <PinChangeInterruptEventPCINT2>:
}
#endif
#if (PCINT_USE_PCINT2 == true)
void PinChangeInterruptEventPCINT2(void) {
	callbackPCINT2();
    1384:	e0 91 99 04 	lds	r30, 0x0499	; 0x800499 <callbackPCINT2>
    1388:	f0 91 9a 04 	lds	r31, 0x049A	; 0x80049a <callbackPCINT2+0x1>
    138c:	19 95       	eicall
    138e:	08 95       	ret

00001390 <PinChangeInterruptEventPCINT3>:
}
#endif
#if (PCINT_USE_PCINT3 == true)
void PinChangeInterruptEventPCINT3(void) {
	callbackPCINT3();
    1390:	e0 91 ab 04 	lds	r30, 0x04AB	; 0x8004ab <callbackPCINT3>
    1394:	f0 91 ac 04 	lds	r31, 0x04AC	; 0x8004ac <callbackPCINT3+0x1>
    1398:	19 95       	eicall
    139a:	08 95       	ret

0000139c <PinChangeInterruptEventPCINT4>:
}
#endif
#if (PCINT_USE_PCINT4 == true)
void PinChangeInterruptEventPCINT4(void) {
	callbackPCINT4();
    139c:	e0 91 9b 04 	lds	r30, 0x049B	; 0x80049b <callbackPCINT4>
    13a0:	f0 91 9c 04 	lds	r31, 0x049C	; 0x80049c <callbackPCINT4+0x1>
    13a4:	19 95       	eicall
    13a6:	08 95       	ret

000013a8 <PinChangeInterruptEventPCINT5>:
}
#endif
#if (PCINT_USE_PCINT5 == true)
void PinChangeInterruptEventPCINT5(void) {
	callbackPCINT5();
    13a8:	e0 91 a5 04 	lds	r30, 0x04A5	; 0x8004a5 <callbackPCINT5>
    13ac:	f0 91 a6 04 	lds	r31, 0x04A6	; 0x8004a6 <callbackPCINT5+0x1>
    13b0:	19 95       	eicall
    13b2:	08 95       	ret

000013b4 <PinChangeInterruptEventPCINT6>:
}
#endif
#if (PCINT_USE_PCINT6 == true)
void PinChangeInterruptEventPCINT6(void) {
	callbackPCINT6();
    13b4:	e0 91 95 04 	lds	r30, 0x0495	; 0x800495 <callbackPCINT6>
    13b8:	f0 91 96 04 	lds	r31, 0x0496	; 0x800496 <callbackPCINT6+0x1>
    13bc:	19 95       	eicall
    13be:	08 95       	ret

000013c0 <PinChangeInterruptEventPCINT7>:
}
#endif
#if (PCINT_USE_PCINT7 == true)
void PinChangeInterruptEventPCINT7(void) {
	callbackPCINT7();
    13c0:	e0 91 89 04 	lds	r30, 0x0489	; 0x800489 <callbackPCINT7>
    13c4:	f0 91 8a 04 	lds	r31, 0x048A	; 0x80048a <callbackPCINT7+0x1>
    13c8:	19 95       	eicall
    13ca:	08 95       	ret

000013cc <__vector_9>:
// Interrupt Handler
//================================================================================
//============= PORT0 ===================================
#if (PCINT_USE_PORT0 == true)

ISR (PCINT0_vect){
    13cc:	1f 92       	push	r1
    13ce:	0f 92       	push	r0
    13d0:	0f b6       	in	r0, 0x3f	; 63
    13d2:	0f 92       	push	r0
    13d4:	11 24       	eor	r1, r1
    13d6:	0b b6       	in	r0, 0x3b	; 59
    13d8:	0f 92       	push	r0
    13da:	2f 93       	push	r18
    13dc:	3f 93       	push	r19
    13de:	4f 93       	push	r20
    13e0:	5f 93       	push	r21
    13e2:	6f 93       	push	r22
    13e4:	7f 93       	push	r23
    13e6:	8f 93       	push	r24
    13e8:	9f 93       	push	r25
    13ea:	af 93       	push	r26
    13ec:	bf 93       	push	r27
    13ee:	cf 93       	push	r28
    13f0:	ef 93       	push	r30
    13f2:	ff 93       	push	r31
	// get the new and old pin states for port
	uint8_t newPort = PCINT_INPUT_PORT0;
    13f4:	23 b1       	in	r18, 0x03	; 3
	
	// compare with the old value to detect a rising or falling
	uint8_t arrayPos = getArrayPosPCINT(0);
	uint8_t change = newPort ^ oldPorts[arrayPos]; //XOR detects change
    13f6:	ea e4       	ldi	r30, 0x4A	; 74
    13f8:	f2 e0       	ldi	r31, 0x02	; 2
    13fa:	c0 81       	ld	r28, Z
    13fc:	82 2f       	mov	r24, r18
    13fe:	8c 27       	eor	r24, r28
	uint8_t falling = change & oldPorts[arrayPos];
	
	// check which pins are triggered, compared with the settings
	uint8_t risingTrigger = rising & risingPorts[arrayPos];
	uint8_t fallingTrigger = falling & fallingPorts[arrayPos];
	uint8_t trigger = risingTrigger | fallingTrigger;
    1400:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <__data_end>
    1404:	92 23       	and	r25, r18
    1406:	30 91 47 02 	lds	r19, 0x0247	; 0x800247 <fallingPorts>
    140a:	c3 23       	and	r28, r19
    140c:	c9 2b       	or	r28, r25
    140e:	c8 23       	and	r28, r24
	
	// save the new state for next comparison
	oldPorts[arrayPos] = newPort;
    1410:	20 83       	st	Z, r18
	PCINT_CALLBACK(4, 4);
	PCINT_CALLBACK(5, 5);
	PCINT_CALLBACK(6, 6);
	PCINT_CALLBACK(7, 7);
#else
	PCINT_CALLBACK_PORT0
    1412:	c4 fd       	sbrc	r28, 4
    1414:	c3 df       	rcall	.-122    	; 0x139c <PinChangeInterruptEventPCINT4>
    1416:	c5 fd       	sbrc	r28, 5
    1418:	c7 df       	rcall	.-114    	; 0x13a8 <PinChangeInterruptEventPCINT5>
    141a:	c6 fd       	sbrc	r28, 6
    141c:	cb df       	rcall	.-106    	; 0x13b4 <PinChangeInterruptEventPCINT6>
    141e:	cc 23       	and	r28, r28
    1420:	0c f4       	brge	.+2      	; 0x1424 <__vector_9+0x58>
    1422:	ce df       	rcall	.-100    	; 0x13c0 <PinChangeInterruptEventPCINT7>
    1424:	c0 fd       	sbrc	r28, 0
    1426:	a2 df       	rcall	.-188    	; 0x136c <PinChangeInterruptEventPCINT0>
    1428:	c1 fd       	sbrc	r28, 1
    142a:	a6 df       	rcall	.-180    	; 0x1378 <PinChangeInterruptEventPCINT1>
    142c:	c2 fd       	sbrc	r28, 2
    142e:	aa df       	rcall	.-172    	; 0x1384 <PinChangeInterruptEventPCINT2>
    1430:	c3 fd       	sbrc	r28, 3
    1432:	ae df       	rcall	.-164    	; 0x1390 <PinChangeInterruptEventPCINT3>
#endif
	
}
    1434:	ff 91       	pop	r31
    1436:	ef 91       	pop	r30
    1438:	cf 91       	pop	r28
    143a:	bf 91       	pop	r27
    143c:	af 91       	pop	r26
    143e:	9f 91       	pop	r25
    1440:	8f 91       	pop	r24
    1442:	7f 91       	pop	r23
    1444:	6f 91       	pop	r22
    1446:	5f 91       	pop	r21
    1448:	4f 91       	pop	r20
    144a:	3f 91       	pop	r19
    144c:	2f 91       	pop	r18
    144e:	0f 90       	pop	r0
    1450:	0b be       	out	0x3b, r0	; 59
    1452:	0f 90       	pop	r0
    1454:	0f be       	out	0x3f, r0	; 63
    1456:	0f 90       	pop	r0
    1458:	1f 90       	pop	r1
    145a:	18 95       	reti

0000145c <PinChangeInterruptEventPCINT8>:
}
#endif

#if (PCINT_USE_PCINT8 == true)
void PinChangeInterruptEventPCINT8(void) {
	callbackPCINT8();
    145c:	e0 91 97 04 	lds	r30, 0x0497	; 0x800497 <callbackPCINT8>
    1460:	f0 91 98 04 	lds	r31, 0x0498	; 0x800498 <callbackPCINT8+0x1>
    1464:	19 95       	eicall
    1466:	08 95       	ret

00001468 <PinChangeInterruptEventPCINT9>:
}
#endif
#if (PCINT_USE_PCINT9 == true)
void PinChangeInterruptEventPCINT9(void) {
	callbackPCINT9();
    1468:	e0 91 8f 04 	lds	r30, 0x048F	; 0x80048f <callbackPCINT9>
    146c:	f0 91 90 04 	lds	r31, 0x0490	; 0x800490 <callbackPCINT9+0x1>
    1470:	19 95       	eicall
    1472:	08 95       	ret

00001474 <PinChangeInterruptEventPCINT10>:
}
#endif
#if (PCINT_USE_PCINT10 == true)
void PinChangeInterruptEventPCINT10(void) {
	callbackPCINT10();
    1474:	e0 91 a1 04 	lds	r30, 0x04A1	; 0x8004a1 <callbackPCINT10>
    1478:	f0 91 a2 04 	lds	r31, 0x04A2	; 0x8004a2 <callbackPCINT10+0x1>
    147c:	19 95       	eicall
    147e:	08 95       	ret

00001480 <PinChangeInterruptEventPCINT11>:
}
#endif
#if (PCINT_USE_PCINT11 == true)
void PinChangeInterruptEventPCINT11(void) {
	callbackPCINT11();
    1480:	e0 91 93 04 	lds	r30, 0x0493	; 0x800493 <callbackPCINT11>
    1484:	f0 91 94 04 	lds	r31, 0x0494	; 0x800494 <callbackPCINT11+0x1>
    1488:	19 95       	eicall
    148a:	08 95       	ret

0000148c <PinChangeInterruptEventPCINT12>:
}
#endif
#if (PCINT_USE_PCINT12 == true)
void PinChangeInterruptEventPCINT12(void) {
	callbackPCINT12();
    148c:	e0 91 ad 04 	lds	r30, 0x04AD	; 0x8004ad <callbackPCINT12>
    1490:	f0 91 ae 04 	lds	r31, 0x04AE	; 0x8004ae <callbackPCINT12+0x1>
    1494:	19 95       	eicall
    1496:	08 95       	ret

00001498 <PinChangeInterruptEventPCINT13>:
}
#endif
#if (PCINT_USE_PCINT13 == true)
void PinChangeInterruptEventPCINT13(void) {
	callbackPCINT13();
    1498:	e0 91 9f 04 	lds	r30, 0x049F	; 0x80049f <callbackPCINT13>
    149c:	f0 91 a0 04 	lds	r31, 0x04A0	; 0x8004a0 <callbackPCINT13+0x1>
    14a0:	19 95       	eicall
    14a2:	08 95       	ret

000014a4 <PinChangeInterruptEventPCINT14>:
}
#endif
#if (PCINT_USE_PCINT14 == true)
void PinChangeInterruptEventPCINT14(void) {
	callbackPCINT14();
    14a4:	e0 91 9d 04 	lds	r30, 0x049D	; 0x80049d <callbackPCINT14>
    14a8:	f0 91 9e 04 	lds	r31, 0x049E	; 0x80049e <callbackPCINT14+0x1>
    14ac:	19 95       	eicall
    14ae:	08 95       	ret

000014b0 <PinChangeInterruptEventPCINT15>:
}
#endif
#if (PCINT_USE_PCINT15 == true)
void PinChangeInterruptEventPCINT15(void) {
	callbackPCINT15();
    14b0:	e0 91 a9 04 	lds	r30, 0x04A9	; 0x8004a9 <callbackPCINT15>
    14b4:	f0 91 aa 04 	lds	r31, 0x04AA	; 0x8004aa <callbackPCINT15+0x1>
    14b8:	19 95       	eicall
    14ba:	08 95       	ret

000014bc <__vector_10>:
	
}

//============= PORT1 ===================================
#if (PCINT_USE_PORT1)
ISR(PCINT1_vect) {
    14bc:	1f 92       	push	r1
    14be:	0f 92       	push	r0
    14c0:	0f b6       	in	r0, 0x3f	; 63
    14c2:	0f 92       	push	r0
    14c4:	11 24       	eor	r1, r1
    14c6:	0b b6       	in	r0, 0x3b	; 59
    14c8:	0f 92       	push	r0
    14ca:	2f 93       	push	r18
    14cc:	3f 93       	push	r19
    14ce:	4f 93       	push	r20
    14d0:	5f 93       	push	r21
    14d2:	6f 93       	push	r22
    14d4:	7f 93       	push	r23
    14d6:	8f 93       	push	r24
    14d8:	9f 93       	push	r25
    14da:	af 93       	push	r26
    14dc:	bf 93       	push	r27
    14de:	cf 93       	push	r28
    14e0:	ef 93       	push	r30
    14e2:	ff 93       	push	r31
	// get the new and old pin states for port
	uint8_t newPort = PCINT_INPUT_PORT1;
    14e4:	8c b1       	in	r24, 0x0c	; 12
    14e6:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
    14ea:	81 70       	andi	r24, 0x01	; 1
    14ec:	99 0f       	add	r25, r25
    14ee:	98 2b       	or	r25, r24

	// compare with the old value to detect a rising or falling
	uint8_t arrayPos = getArrayPosPCINT(1);
	uint8_t change = newPort ^ oldPorts[arrayPos];
    14f0:	ea e4       	ldi	r30, 0x4A	; 74
    14f2:	f2 e0       	ldi	r31, 0x02	; 2
    14f4:	c1 81       	ldd	r28, Z+1	; 0x01
    14f6:	89 2f       	mov	r24, r25
    14f8:	8c 27       	eor	r24, r28
	uint8_t falling = change & oldPorts[arrayPos];

	// check which pins are triggered, compared with the settings
	uint8_t risingTrigger = rising & risingPorts[arrayPos];
	uint8_t fallingTrigger = falling & fallingPorts[arrayPos];
	uint8_t trigger = risingTrigger | fallingTrigger;
    14fa:	20 91 45 02 	lds	r18, 0x0245	; 0x800245 <__data_end+0x1>
    14fe:	29 23       	and	r18, r25
    1500:	30 91 48 02 	lds	r19, 0x0248	; 0x800248 <fallingPorts+0x1>
    1504:	c3 23       	and	r28, r19
    1506:	c2 2b       	or	r28, r18
    1508:	c8 23       	and	r28, r24

	// save the new state for next comparison
	oldPorts[arrayPos] = newPort;
    150a:	91 83       	std	Z+1, r25	; 0x01
	// Execute all functions that should be triggered
	// This way we can exclude a single function
	// and the calling is also much faster
	// We may also reorder the pins for different priority
	#if !defined(PCINT_CALLBACK_PORT1)
	PCINT_CALLBACK(0, 8);
    150c:	c0 fd       	sbrc	r28, 0
    150e:	a6 df       	rcall	.-180    	; 0x145c <PinChangeInterruptEventPCINT8>
	PCINT_CALLBACK(1, 9);
    1510:	c1 fd       	sbrc	r28, 1
	PCINT_CALLBACK(2, 10);
    1512:	aa df       	rcall	.-172    	; 0x1468 <PinChangeInterruptEventPCINT9>
    1514:	c2 fd       	sbrc	r28, 2
	PCINT_CALLBACK(3, 11);
    1516:	ae df       	rcall	.-164    	; 0x1474 <PinChangeInterruptEventPCINT10>
	PCINT_CALLBACK(4, 12);
    1518:	c3 fd       	sbrc	r28, 3
    151a:	b2 df       	rcall	.-156    	; 0x1480 <PinChangeInterruptEventPCINT11>
	PCINT_CALLBACK(5, 13);
    151c:	c4 fd       	sbrc	r28, 4
    151e:	b6 df       	rcall	.-148    	; 0x148c <PinChangeInterruptEventPCINT12>
	PCINT_CALLBACK(6, 14);
    1520:	c5 fd       	sbrc	r28, 5
    1522:	ba df       	rcall	.-140    	; 0x1498 <PinChangeInterruptEventPCINT13>
    1524:	c6 fd       	sbrc	r28, 6
	PCINT_CALLBACK(7, 15);
    1526:	be df       	rcall	.-132    	; 0x14a4 <PinChangeInterruptEventPCINT14>
    1528:	cc 23       	and	r28, r28
    152a:	0c f4       	brge	.+2      	; 0x152e <__vector_10+0x72>
    152c:	c1 df       	rcall	.-126    	; 0x14b0 <PinChangeInterruptEventPCINT15>
	#else
	PCINT_CALLBACK_PORT1
	#endif
}
    152e:	ff 91       	pop	r31
    1530:	ef 91       	pop	r30
    1532:	cf 91       	pop	r28
    1534:	bf 91       	pop	r27
    1536:	af 91       	pop	r26
    1538:	9f 91       	pop	r25
    153a:	8f 91       	pop	r24
    153c:	7f 91       	pop	r23
    153e:	6f 91       	pop	r22
    1540:	5f 91       	pop	r21
    1542:	4f 91       	pop	r20
    1544:	3f 91       	pop	r19
    1546:	2f 91       	pop	r18
    1548:	0f 90       	pop	r0
    154a:	0b be       	out	0x3b, r0	; 59
    154c:	0f 90       	pop	r0
    154e:	0f be       	out	0x3f, r0	; 63
    1550:	0f 90       	pop	r0
    1552:	1f 90       	pop	r1
    1554:	18 95       	reti

00001556 <PinChangeInterruptEventPCINT16>:
}
#endif

#if (PCINT_USE_PCINT16 == true)
void PinChangeInterruptEventPCINT16(void) {
	callbackPCINT16();
    1556:	e0 91 8b 04 	lds	r30, 0x048B	; 0x80048b <callbackPCINT16>
    155a:	f0 91 8c 04 	lds	r31, 0x048C	; 0x80048c <callbackPCINT16+0x1>
    155e:	19 95       	eicall
    1560:	08 95       	ret

00001562 <PinChangeInterruptEventPCINT17>:
}
#endif
#if (PCINT_USE_PCINT17 == true)
void PinChangeInterruptEventPCINT17(void) {
	callbackPCINT17();
    1562:	e0 91 a3 04 	lds	r30, 0x04A3	; 0x8004a3 <callbackPCINT17>
    1566:	f0 91 a4 04 	lds	r31, 0x04A4	; 0x8004a4 <callbackPCINT17+0x1>
    156a:	19 95       	eicall
    156c:	08 95       	ret

0000156e <PinChangeInterruptEventPCINT18>:
}
#endif
#if (PCINT_USE_PCINT18 == true)
void PinChangeInterruptEventPCINT18(void) {
	callbackPCINT18();
    156e:	e0 91 83 04 	lds	r30, 0x0483	; 0x800483 <callbackPCINT18>
    1572:	f0 91 84 04 	lds	r31, 0x0484	; 0x800484 <callbackPCINT18+0x1>
    1576:	19 95       	eicall
    1578:	08 95       	ret

0000157a <PinChangeInterruptEventPCINT19>:
}
#endif
#if (PCINT_USE_PCINT19 == true)
void PinChangeInterruptEventPCINT19(void) {
	callbackPCINT19();
    157a:	e0 91 8d 04 	lds	r30, 0x048D	; 0x80048d <callbackPCINT19>
    157e:	f0 91 8e 04 	lds	r31, 0x048E	; 0x80048e <callbackPCINT19+0x1>
    1582:	19 95       	eicall
    1584:	08 95       	ret

00001586 <PinChangeInterruptEventPCINT20>:
}
#endif
#if (PCINT_USE_PCINT20 == true)
void PinChangeInterruptEventPCINT20(void) {
	callbackPCINT20();
    1586:	e0 91 af 04 	lds	r30, 0x04AF	; 0x8004af <callbackPCINT20>
    158a:	f0 91 b0 04 	lds	r31, 0x04B0	; 0x8004b0 <callbackPCINT20+0x1>
    158e:	19 95       	eicall
    1590:	08 95       	ret

00001592 <PinChangeInterruptEventPCINT21>:
}
#endif
#if (PCINT_USE_PCINT21 == true)
void PinChangeInterruptEventPCINT21(void) {
	callbackPCINT21();
    1592:	e0 91 85 04 	lds	r30, 0x0485	; 0x800485 <callbackPCINT21>
    1596:	f0 91 86 04 	lds	r31, 0x0486	; 0x800486 <callbackPCINT21+0x1>
    159a:	19 95       	eicall
    159c:	08 95       	ret

0000159e <PinChangeInterruptEventPCINT22>:
}
#endif
#if (PCINT_USE_PCINT22 == true)
void PinChangeInterruptEventPCINT22(void) {
	callbackPCINT22();
    159e:	e0 91 a7 04 	lds	r30, 0x04A7	; 0x8004a7 <callbackPCINT22>
    15a2:	f0 91 a8 04 	lds	r31, 0x04A8	; 0x8004a8 <callbackPCINT22+0x1>
    15a6:	19 95       	eicall
    15a8:	08 95       	ret

000015aa <PinChangeInterruptEventPCINT23>:
}
#endif
#if (PCINT_USE_PCINT23 == true)
void PinChangeInterruptEventPCINT23(void) {
	callbackPCINT23();
    15aa:	e0 91 91 04 	lds	r30, 0x0491	; 0x800491 <callbackPCINT23>
    15ae:	f0 91 92 04 	lds	r31, 0x0492	; 0x800492 <callbackPCINT23+0x1>
    15b2:	19 95       	eicall
    15b4:	08 95       	ret

000015b6 <__vector_11>:
	#endif
}
#endif
//============= PORT2 ===================================
#if (PCINT_USE_PORT2)
ISR(PCINT2_vect) {
    15b6:	1f 92       	push	r1
    15b8:	0f 92       	push	r0
    15ba:	0f b6       	in	r0, 0x3f	; 63
    15bc:	0f 92       	push	r0
    15be:	11 24       	eor	r1, r1
    15c0:	0b b6       	in	r0, 0x3b	; 59
    15c2:	0f 92       	push	r0
    15c4:	2f 93       	push	r18
    15c6:	3f 93       	push	r19
    15c8:	4f 93       	push	r20
    15ca:	5f 93       	push	r21
    15cc:	6f 93       	push	r22
    15ce:	7f 93       	push	r23
    15d0:	8f 93       	push	r24
    15d2:	9f 93       	push	r25
    15d4:	af 93       	push	r26
    15d6:	bf 93       	push	r27
    15d8:	cf 93       	push	r28
    15da:	ef 93       	push	r30
    15dc:	ff 93       	push	r31
	// get the new and old pin states for port
	uint8_t newPort = PCINT_INPUT_PORT2;
    15de:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>

	// compare with the old value to detect a rising or falling
	uint8_t arrayPos = getArrayPosPCINT(2);
	uint8_t change = newPort ^ oldPorts[arrayPos];
    15e2:	ea e4       	ldi	r30, 0x4A	; 74
    15e4:	f2 e0       	ldi	r31, 0x02	; 2
    15e6:	c2 81       	ldd	r28, Z+2	; 0x02
    15e8:	82 2f       	mov	r24, r18
    15ea:	8c 27       	eor	r24, r28
	uint8_t falling = change & oldPorts[arrayPos];

	// check which pins are triggered, compared with the settings
	uint8_t risingTrigger = rising & risingPorts[arrayPos];
	uint8_t fallingTrigger = falling & fallingPorts[arrayPos];
	uint8_t trigger = risingTrigger | fallingTrigger;
    15ec:	90 91 46 02 	lds	r25, 0x0246	; 0x800246 <__data_end+0x2>
    15f0:	92 23       	and	r25, r18
    15f2:	30 91 49 02 	lds	r19, 0x0249	; 0x800249 <fallingPorts+0x2>
    15f6:	c3 23       	and	r28, r19
    15f8:	c9 2b       	or	r28, r25
    15fa:	c8 23       	and	r28, r24

	// save the new state for next comparison
	oldPorts[arrayPos] = newPort;
    15fc:	22 83       	std	Z+2, r18	; 0x02
	// Execute all functions that should be triggered
	// This way we can exclude a single function
	// and the calling is also much faster
	// We may also reorder the pins for different priority
	#if !defined(PCINT_CALLBACK_PORT2)
	PCINT_CALLBACK(0, 16);
    15fe:	c0 fd       	sbrc	r28, 0
    1600:	aa df       	rcall	.-172    	; 0x1556 <PinChangeInterruptEventPCINT16>
	PCINT_CALLBACK(1, 17);
    1602:	c1 fd       	sbrc	r28, 1
	PCINT_CALLBACK(2, 18);
    1604:	ae df       	rcall	.-164    	; 0x1562 <PinChangeInterruptEventPCINT17>
    1606:	c2 fd       	sbrc	r28, 2
	PCINT_CALLBACK(3, 19);
    1608:	b2 df       	rcall	.-156    	; 0x156e <PinChangeInterruptEventPCINT18>
	PCINT_CALLBACK(4, 20);
    160a:	c3 fd       	sbrc	r28, 3
    160c:	b6 df       	rcall	.-148    	; 0x157a <PinChangeInterruptEventPCINT19>
	PCINT_CALLBACK(5, 21);
    160e:	c4 fd       	sbrc	r28, 4
    1610:	ba df       	rcall	.-140    	; 0x1586 <PinChangeInterruptEventPCINT20>
	PCINT_CALLBACK(6, 22);
    1612:	c5 fd       	sbrc	r28, 5
    1614:	be df       	rcall	.-132    	; 0x1592 <PinChangeInterruptEventPCINT21>
    1616:	c6 fd       	sbrc	r28, 6
	PCINT_CALLBACK(7, 23);
    1618:	c2 df       	rcall	.-124    	; 0x159e <PinChangeInterruptEventPCINT22>
    161a:	cc 23       	and	r28, r28
    161c:	0c f4       	brge	.+2      	; 0x1620 <__vector_11+0x6a>
    161e:	c5 df       	rcall	.-118    	; 0x15aa <PinChangeInterruptEventPCINT23>
	#else
	PCINT_CALLBACK_PORT2
	#endif
}
    1620:	ff 91       	pop	r31
    1622:	ef 91       	pop	r30
    1624:	cf 91       	pop	r28
    1626:	bf 91       	pop	r27
    1628:	af 91       	pop	r26
    162a:	9f 91       	pop	r25
    162c:	8f 91       	pop	r24
    162e:	7f 91       	pop	r23
    1630:	6f 91       	pop	r22
    1632:	5f 91       	pop	r21
    1634:	4f 91       	pop	r20
    1636:	3f 91       	pop	r19
    1638:	2f 91       	pop	r18
    163a:	0f 90       	pop	r0
    163c:	0b be       	out	0x3b, r0	; 59
    163e:	0f 90       	pop	r0
    1640:	0f be       	out	0x3f, r0	; 63
    1642:	0f 90       	pop	r0
    1644:	1f 90       	pop	r1
    1646:	18 95       	reti

00001648 <pwm_init>:
*/

void pwm_init(void)
{
	// Configure Timer1
	TCCR1B = 0;
    1648:	e1 e8       	ldi	r30, 0x81	; 129
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	10 82       	st	Z, r1
	bitSet(TCCR1B, CS11); 
    164e:	80 81       	ld	r24, Z
    1650:	82 60       	ori	r24, 0x02	; 2
    1652:	80 83       	st	Z, r24
	bitSet(TCCR1B, CS10);	// set clk/64 prescaler
    1654:	80 81       	ld	r24, Z
    1656:	81 60       	ori	r24, 0x01	; 1
    1658:	80 83       	st	Z, r24
	bitSet(TCCR1A, WGM10);	// PWM, Phase Correct, 8-bit
    165a:	e0 e8       	ldi	r30, 0x80	; 128
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	80 81       	ld	r24, Z
    1660:	81 60       	ori	r24, 0x01	; 1
    1662:	80 83       	st	Z, r24
	
	// Configure Timer2
	bitSet(TCCR2B, CS22);	// clk/64 prescaler
    1664:	e1 eb       	ldi	r30, 0xB1	; 177
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	80 81       	ld	r24, Z
    166a:	84 60       	ori	r24, 0x04	; 4
    166c:	80 83       	st	Z, r24
	bitSet(TCCR2A, WGM20);	// PWM, Phase Correct
    166e:	e0 eb       	ldi	r30, 0xB0	; 176
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	80 81       	ld	r24, Z
    1674:	81 60       	ori	r24, 0x01	; 1
    1676:	80 83       	st	Z, r24
	
	// Configure Timer3
	bitSet(TCCR3B, CS31);	
    1678:	e1 e9       	ldi	r30, 0x91	; 145
    167a:	f0 e0       	ldi	r31, 0x00	; 0
    167c:	80 81       	ld	r24, Z
    167e:	82 60       	ori	r24, 0x02	; 2
    1680:	80 83       	st	Z, r24
	bitSet(TCCR3B, CS30);	// clk/64 prescaler
    1682:	80 81       	ld	r24, Z
    1684:	81 60       	ori	r24, 0x01	; 1
    1686:	80 83       	st	Z, r24
	bitSet(TCCR3A, WGM30);	// PWM, Phase Correct
    1688:	e0 e9       	ldi	r30, 0x90	; 144
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	80 81       	ld	r24, Z
    168e:	81 60       	ori	r24, 0x01	; 1
    1690:	80 83       	st	Z, r24
	
	// Configure Timer4
	bitSet(TCCR4B, CS41);	
    1692:	e1 ea       	ldi	r30, 0xA1	; 161
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	80 81       	ld	r24, Z
    1698:	82 60       	ori	r24, 0x02	; 2
    169a:	80 83       	st	Z, r24
	bitSet(TCCR4B, CS40);	// clk/64 prescaler
    169c:	80 81       	ld	r24, Z
    169e:	81 60       	ori	r24, 0x01	; 1
    16a0:	80 83       	st	Z, r24
	bitSet(TCCR4A, WGM40);	// PWM, Phase Correct
    16a2:	e0 ea       	ldi	r30, 0xA0	; 160
    16a4:	f0 e0       	ldi	r31, 0x00	; 0
    16a6:	80 81       	ld	r24, Z
    16a8:	81 60       	ori	r24, 0x01	; 1
    16aa:	80 83       	st	Z, r24
	
	// Configure Timer5
	bitSet(TCCR5B, CS51);
    16ac:	e1 e2       	ldi	r30, 0x21	; 33
    16ae:	f1 e0       	ldi	r31, 0x01	; 1
    16b0:	80 81       	ld	r24, Z
    16b2:	82 60       	ori	r24, 0x02	; 2
    16b4:	80 83       	st	Z, r24
	bitSet(TCCR5B, CS50);	// clk/64 prescaler
    16b6:	80 81       	ld	r24, Z
    16b8:	81 60       	ori	r24, 0x01	; 1
    16ba:	80 83       	st	Z, r24
	bitSet(TCCR5A, WGM50);	// PWM, Phase Correct
    16bc:	e0 e2       	ldi	r30, 0x20	; 32
    16be:	f1 e0       	ldi	r31, 0x01	; 1
    16c0:	80 81       	ld	r24, Z
    16c2:	81 60       	ori	r24, 0x01	; 1
    16c4:	80 83       	st	Z, r24
    16c6:	08 95       	ret

000016c8 <analogWrite>:
	 
}

// PWM output
void analogWrite(uint8_t pin, int val)
{
    16c8:	1f 93       	push	r17
    16ca:	cf 93       	push	r28
    16cc:	df 93       	push	r29
    16ce:	18 2f       	mov	r17, r24
    16d0:	eb 01       	movw	r28, r22
	
	pinMode(pin, OUTPUT);
    16d2:	61 e0       	ldi	r22, 0x01	; 1
    16d4:	05 d9       	rcall	.-3574   	; 0x8e0 <pinMode>
	if (val == 0)
    16d6:	20 97       	sbiw	r28, 0x00	; 0
    16d8:	21 f4       	brne	.+8      	; 0x16e2 <analogWrite+0x1a>
	{
		digitalWrite(pin, LOW);
    16da:	60 e0       	ldi	r22, 0x00	; 0
    16dc:	81 2f       	mov	r24, r17
    16de:	3f d9       	rcall	.-3458   	; 0x95e <digitalWrite>
    16e0:	b5 c0       	rjmp	.+362    	; 0x184c <analogWrite+0x184>
	}
	else if (val == 255)
    16e2:	cf 3f       	cpi	r28, 0xFF	; 255
    16e4:	d1 05       	cpc	r29, r1
    16e6:	21 f4       	brne	.+8      	; 0x16f0 <analogWrite+0x28>
	{
		digitalWrite(pin, HIGH);
    16e8:	61 e0       	ldi	r22, 0x01	; 1
    16ea:	81 2f       	mov	r24, r17
    16ec:	38 d9       	rcall	.-3472   	; 0x95e <digitalWrite>
    16ee:	ae c0       	rjmp	.+348    	; 0x184c <analogWrite+0x184>
	}
	else{
		switch(pinToTimer(pin))
    16f0:	e1 2f       	mov	r30, r17
    16f2:	f0 e0       	ldi	r31, 0x00	; 0
    16f4:	e6 55       	subi	r30, 0x56	; 86
    16f6:	fd 4f       	sbci	r31, 0xFD	; 253
    16f8:	e4 91       	lpm	r30, Z
    16fa:	8e 2f       	mov	r24, r30
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	fc 01       	movw	r30, r24
    1700:	31 97       	sbiw	r30, 0x01	; 1
    1702:	e2 31       	cpi	r30, 0x12	; 18
    1704:	f1 05       	cpc	r31, r1
    1706:	08 f0       	brcs	.+2      	; 0x170a <analogWrite+0x42>
    1708:	97 c0       	rjmp	.+302    	; 0x1838 <analogWrite+0x170>
    170a:	88 27       	eor	r24, r24
    170c:	e6 58       	subi	r30, 0x86	; 134
    170e:	ff 4f       	sbci	r31, 0xFF	; 255
    1710:	8f 4f       	sbci	r24, 0xFF	; 255
    1712:	4c c7       	rjmp	.+3736   	; 0x25ac <__tablejump2__>
		{
			//Timer 0
			case TIMER0A:
				//connect pwm to pin on timer 0, channel A
				bitSet(TCCR0A, COM0A1); //clear OC0A on compare match
    1714:	84 b5       	in	r24, 0x24	; 36
    1716:	80 68       	ori	r24, 0x80	; 128
    1718:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; //set pwm duty
    171a:	c7 bd       	out	0x27, r28	; 39
			break;
    171c:	97 c0       	rjmp	.+302    	; 0x184c <analogWrite+0x184>
			
			case TIMER0B:
				//connect pwm to pin on timer 0, channel B
				bitSet(TCCR0B, COM0B1); //clear OC0A on compare match
    171e:	85 b5       	in	r24, 0x25	; 37
    1720:	80 62       	ori	r24, 0x20	; 32
    1722:	85 bd       	out	0x25, r24	; 37
				OCR0B = val; //set pwm duty
    1724:	c8 bd       	out	0x28, r28	; 40
			break;
    1726:	92 c0       	rjmp	.+292    	; 0x184c <analogWrite+0x184>
			
			//Timer 1
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				bitSet(TCCR1A, COM1A1);
    1728:	e0 e8       	ldi	r30, 0x80	; 128
    172a:	f0 e0       	ldi	r31, 0x00	; 0
    172c:	80 81       	ld	r24, Z
    172e:	80 68       	ori	r24, 0x80	; 128
    1730:	80 83       	st	Z, r24
				OCR1A = val; // set pwm duty
    1732:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
    1736:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
			break;
    173a:	88 c0       	rjmp	.+272    	; 0x184c <analogWrite+0x184>
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				bitSet(TCCR1A, COM1B1);
    173c:	e0 e8       	ldi	r30, 0x80	; 128
    173e:	f0 e0       	ldi	r31, 0x00	; 0
    1740:	80 81       	ld	r24, Z
    1742:	80 62       	ori	r24, 0x20	; 32
    1744:	80 83       	st	Z, r24
				OCR1B = val; // set pwm duty
    1746:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
    174a:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
			break;
    174e:	7e c0       	rjmp	.+252    	; 0x184c <analogWrite+0x184>
			case TIMER1C:
				// connect pwm to pin on timer 1, channel C
				bitSet(TCCR1A, COM1C1);
    1750:	e0 e8       	ldi	r30, 0x80	; 128
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	80 81       	ld	r24, Z
    1756:	88 60       	ori	r24, 0x08	; 8
    1758:	80 83       	st	Z, r24
				OCR1C = val; // set pwm duty
    175a:	d0 93 8d 00 	sts	0x008D, r29	; 0x80008d <__TEXT_REGION_LENGTH__+0x70008d>
    175e:	c0 93 8c 00 	sts	0x008C, r28	; 0x80008c <__TEXT_REGION_LENGTH__+0x70008c>
			break;
    1762:	74 c0       	rjmp	.+232    	; 0x184c <analogWrite+0x184>
			
			//Timer 2
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				bitSet(TCCR2A, COM2A1);
    1764:	e0 eb       	ldi	r30, 0xB0	; 176
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	80 81       	ld	r24, Z
    176a:	80 68       	ori	r24, 0x80	; 128
    176c:	80 83       	st	Z, r24
				OCR2A = val; // set pwm duty
    176e:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
			break;
    1772:	6c c0       	rjmp	.+216    	; 0x184c <analogWrite+0x184>
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				bitSet(TCCR2A, COM2B1);
    1774:	e0 eb       	ldi	r30, 0xB0	; 176
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	80 81       	ld	r24, Z
    177a:	80 62       	ori	r24, 0x20	; 32
    177c:	80 83       	st	Z, r24
				OCR2B = val; // set pwm duty
    177e:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7000b4>
			break;
    1782:	64 c0       	rjmp	.+200    	; 0x184c <analogWrite+0x184>
			
			//Timer 3
			case TIMER3A:
				// connect pwm to pin on timer 3, channel A
				bitSet(TCCR3A, COM3A1);
    1784:	e0 e9       	ldi	r30, 0x90	; 144
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	80 81       	ld	r24, Z
    178a:	80 68       	ori	r24, 0x80	; 128
    178c:	80 83       	st	Z, r24
				OCR3A = val; // set pwm duty
    178e:	d0 93 99 00 	sts	0x0099, r29	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
    1792:	c0 93 98 00 	sts	0x0098, r28	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
			break;
    1796:	5a c0       	rjmp	.+180    	; 0x184c <analogWrite+0x184>
			case TIMER3B:
				// connect pwm to pin on timer 3, channel B
				bitSet(TCCR3A, COM3B1);
    1798:	e0 e9       	ldi	r30, 0x90	; 144
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	80 81       	ld	r24, Z
    179e:	80 62       	ori	r24, 0x20	; 32
    17a0:	80 83       	st	Z, r24
				OCR3B = val; // set pwm duty
    17a2:	d0 93 9b 00 	sts	0x009B, r29	; 0x80009b <__TEXT_REGION_LENGTH__+0x70009b>
    17a6:	c0 93 9a 00 	sts	0x009A, r28	; 0x80009a <__TEXT_REGION_LENGTH__+0x70009a>
			break;
    17aa:	50 c0       	rjmp	.+160    	; 0x184c <analogWrite+0x184>
			case TIMER3C:
				// connect pwm to pin on timer 3, channel C
				bitSet(TCCR3A, COM3C1);
    17ac:	e0 e9       	ldi	r30, 0x90	; 144
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	80 81       	ld	r24, Z
    17b2:	88 60       	ori	r24, 0x08	; 8
    17b4:	80 83       	st	Z, r24
				OCR3C = val; // set pwm duty
    17b6:	d0 93 9d 00 	sts	0x009D, r29	; 0x80009d <__TEXT_REGION_LENGTH__+0x70009d>
    17ba:	c0 93 9c 00 	sts	0x009C, r28	; 0x80009c <__TEXT_REGION_LENGTH__+0x70009c>
			break;
    17be:	46 c0       	rjmp	.+140    	; 0x184c <analogWrite+0x184>
			
			//Timer 4
			case TIMER4A:
				//connect pwm to pin on timer 4, channel A
				bitSet(TCCR4A, COM4A1);
    17c0:	e0 ea       	ldi	r30, 0xA0	; 160
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	80 81       	ld	r24, Z
    17c6:	80 68       	ori	r24, 0x80	; 128
    17c8:	80 83       	st	Z, r24
				OCR4A = val;	// set pwm duty
    17ca:	d0 93 a9 00 	sts	0x00A9, r29	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
    17ce:	c0 93 a8 00 	sts	0x00A8, r28	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
			break;
    17d2:	3c c0       	rjmp	.+120    	; 0x184c <analogWrite+0x184>
			case TIMER4B:
				// connect pwm to pin on timer 4, channel B
				bitSet(TCCR4A, COM4B1);
    17d4:	e0 ea       	ldi	r30, 0xA0	; 160
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	80 81       	ld	r24, Z
    17da:	80 62       	ori	r24, 0x20	; 32
    17dc:	80 83       	st	Z, r24
				OCR4B = val; // set pwm duty
    17de:	d0 93 ab 00 	sts	0x00AB, r29	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7000ab>
    17e2:	c0 93 aa 00 	sts	0x00AA, r28	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7000aa>
			break;
    17e6:	32 c0       	rjmp	.+100    	; 0x184c <analogWrite+0x184>
			case TIMER4C:
				// connect pwm to pin on timer 4, channel C
				bitSet(TCCR4A, COM4C1);
    17e8:	e0 ea       	ldi	r30, 0xA0	; 160
    17ea:	f0 e0       	ldi	r31, 0x00	; 0
    17ec:	80 81       	ld	r24, Z
    17ee:	88 60       	ori	r24, 0x08	; 8
    17f0:	80 83       	st	Z, r24
				OCR4C = val; // set pwm duty
    17f2:	d0 93 ad 00 	sts	0x00AD, r29	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7000ad>
    17f6:	c0 93 ac 00 	sts	0x00AC, r28	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7000ac>
			break;
    17fa:	28 c0       	rjmp	.+80     	; 0x184c <analogWrite+0x184>
			//timer 5
			case TIMER5A:
				// connect pwm to pin on timer 5, channel A
				bitSet(TCCR5A, COM5A1);
    17fc:	e0 e2       	ldi	r30, 0x20	; 32
    17fe:	f1 e0       	ldi	r31, 0x01	; 1
    1800:	80 81       	ld	r24, Z
    1802:	80 68       	ori	r24, 0x80	; 128
    1804:	80 83       	st	Z, r24
				OCR5A = val; // set pwm duty
    1806:	d0 93 29 01 	sts	0x0129, r29	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    180a:	c0 93 28 01 	sts	0x0128, r28	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
			break;
    180e:	1e c0       	rjmp	.+60     	; 0x184c <analogWrite+0x184>
			case TIMER5B:
				// connect pwm to pin on timer 5, channel B
				bitSet(TCCR5A, COM5B1);
    1810:	e0 e2       	ldi	r30, 0x20	; 32
    1812:	f1 e0       	ldi	r31, 0x01	; 1
    1814:	80 81       	ld	r24, Z
    1816:	80 62       	ori	r24, 0x20	; 32
    1818:	80 83       	st	Z, r24
				OCR5B = val; // set pwm duty
    181a:	d0 93 2b 01 	sts	0x012B, r29	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
    181e:	c0 93 2a 01 	sts	0x012A, r28	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
			break;
    1822:	14 c0       	rjmp	.+40     	; 0x184c <analogWrite+0x184>
			case TIMER5C:
				// connect pwm to pin on timer 5, channel C
				bitSet(TCCR5A, COM5C1);
    1824:	e0 e2       	ldi	r30, 0x20	; 32
    1826:	f1 e0       	ldi	r31, 0x01	; 1
    1828:	80 81       	ld	r24, Z
    182a:	88 60       	ori	r24, 0x08	; 8
    182c:	80 83       	st	Z, r24
				OCR5C = val; // set pwm duty
    182e:	d0 93 2d 01 	sts	0x012D, r29	; 0x80012d <__TEXT_REGION_LENGTH__+0x70012d>
    1832:	c0 93 2c 01 	sts	0x012C, r28	; 0x80012c <__TEXT_REGION_LENGTH__+0x70012c>
			break;
    1836:	0a c0       	rjmp	.+20     	; 0x184c <analogWrite+0x184>
			case NOT_ON_TIMER:
			
			default:
				if (val < 128) {
    1838:	c0 38       	cpi	r28, 0x80	; 128
    183a:	d1 05       	cpc	r29, r1
					digitalWrite(pin, LOW);
    183c:	24 f4       	brge	.+8      	; 0x1846 <analogWrite+0x17e>
    183e:	60 e0       	ldi	r22, 0x00	; 0
    1840:	81 2f       	mov	r24, r17
    1842:	8d d8       	rcall	.-3814   	; 0x95e <digitalWrite>
				} else {
					digitalWrite(pin, HIGH);
    1844:	03 c0       	rjmp	.+6      	; 0x184c <analogWrite+0x184>
    1846:	61 e0       	ldi	r22, 0x01	; 1
    1848:	81 2f       	mov	r24, r17
    184a:	89 d8       	rcall	.-3822   	; 0x95e <digitalWrite>
				}
		}
	}
    184c:	df 91       	pop	r29
    184e:	cf 91       	pop	r28
    1850:	1f 91       	pop	r17
    1852:	08 95       	ret

00001854 <_tx2_udr_empty_irq>:
	bitClear(UCSR2B, TXEN2);
	bitClear(UCSR2B, RXCIE2); //Rx complete interrupt enable
	bitClear(UCSR2B, UDRIE2); //data register empty int -disable
	
	//clear any received data
	_rx_buffer_head = _rx_buffer_tail;	
    1854:	e0 91 6b 03 	lds	r30, 0x036B	; 0x80036b <_tx_buffer_tail>
    1858:	f0 e0       	ldi	r31, 0x00	; 0
    185a:	e4 59       	subi	r30, 0x94	; 148
    185c:	fc 4f       	sbci	r31, 0xFC	; 252
    185e:	20 81       	ld	r18, Z
    1860:	80 91 6b 03 	lds	r24, 0x036B	; 0x80036b <_tx_buffer_tail>
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	01 96       	adiw	r24, 0x01	; 1
    1868:	8f 73       	andi	r24, 0x3F	; 63
    186a:	90 78       	andi	r25, 0x80	; 128
    186c:	99 23       	and	r25, r25
    186e:	24 f4       	brge	.+8      	; 0x1878 <_tx2_udr_empty_irq+0x24>
    1870:	01 97       	sbiw	r24, 0x01	; 1
    1872:	80 6c       	ori	r24, 0xC0	; 192
    1874:	9f 6f       	ori	r25, 0xFF	; 255
    1876:	01 96       	adiw	r24, 0x01	; 1
    1878:	80 93 6b 03 	sts	0x036B, r24	; 0x80036b <_tx_buffer_tail>
    187c:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    1880:	e0 ed       	ldi	r30, 0xD0	; 208
    1882:	f0 e0       	ldi	r31, 0x00	; 0
    1884:	80 81       	ld	r24, Z
    1886:	83 70       	andi	r24, 0x03	; 3
    1888:	80 64       	ori	r24, 0x40	; 64
    188a:	80 83       	st	Z, r24
    188c:	90 91 2e 04 	lds	r25, 0x042E	; 0x80042e <_tx_buffer_head>
    1890:	80 91 6b 03 	lds	r24, 0x036B	; 0x80036b <_tx_buffer_tail>
    1894:	98 13       	cpse	r25, r24
    1896:	05 c0       	rjmp	.+10     	; 0x18a2 <_tx2_udr_empty_irq+0x4e>
    1898:	e1 ed       	ldi	r30, 0xD1	; 209
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	80 81       	ld	r24, Z
    189e:	8f 7d       	andi	r24, 0xDF	; 223
    18a0:	80 83       	st	Z, r24
    18a2:	08 95       	ret

000018a4 <_rx2_complete_irq>:
	}
}

void _rx2_complete_irq(void)
{
	if (bit_is_clear(UCSR2A, UPE2)){
    18a4:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    18a8:	82 fd       	sbrc	r24, 2
    18aa:	13 c0       	rjmp	.+38     	; 0x18d2 <_rx2_complete_irq+0x2e>
		// No Parity error, read byte and store it in the buffer if there is room
		unsigned char c = UDR2;
    18ac:	20 91 d6 00 	lds	r18, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
		rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    18b0:	80 91 7c 04 	lds	r24, 0x047C	; 0x80047c <_rx_buffer_head>
    18b4:	8f 5f       	subi	r24, 0xFF	; 255
    18b6:	8f 73       	andi	r24, 0x3F	; 63
		
		// if we should be storing the received character into the location just before the tail 
		// (meaning that the head would advance to the current location of the tail), we're about to overflow the buffer
		// and so we don't write the character or advance the head.
		if (i != _rx_buffer_tail) {
    18b8:	90 91 73 04 	lds	r25, 0x0473	; 0x800473 <_rx_buffer_tail>
    18bc:	89 17       	cp	r24, r25
    18be:	59 f0       	breq	.+22     	; 0x18d6 <_rx2_complete_irq+0x32>
			_rx_buffer[_rx_buffer_head] = c;
    18c0:	e0 91 7c 04 	lds	r30, 0x047C	; 0x80047c <_rx_buffer_head>
    18c4:	f0 e0       	ldi	r31, 0x00	; 0
    18c6:	e3 55       	subi	r30, 0x53	; 83
    18c8:	fc 4f       	sbci	r31, 0xFC	; 252
    18ca:	20 83       	st	Z, r18
			_rx_buffer_head = i;
    18cc:	80 93 7c 04 	sts	0x047C, r24	; 0x80047c <_rx_buffer_head>
    18d0:	08 95       	ret
		}
	}else{
		// Parity error, read byte but discard it
		UDR2;
    18d2:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    18d6:	08 95       	ret

000018d8 <__vector_51>:
}

/************************************************************************/
/*					 ISRs                                                */
/************************************************************************/
ISR(USART2_RX_vect){
    18d8:	1f 92       	push	r1
    18da:	0f 92       	push	r0
    18dc:	0f b6       	in	r0, 0x3f	; 63
    18de:	0f 92       	push	r0
    18e0:	11 24       	eor	r1, r1
    18e2:	0b b6       	in	r0, 0x3b	; 59
    18e4:	0f 92       	push	r0
    18e6:	2f 93       	push	r18
    18e8:	3f 93       	push	r19
    18ea:	4f 93       	push	r20
    18ec:	5f 93       	push	r21
    18ee:	6f 93       	push	r22
    18f0:	7f 93       	push	r23
    18f2:	8f 93       	push	r24
    18f4:	9f 93       	push	r25
    18f6:	af 93       	push	r26
    18f8:	bf 93       	push	r27
    18fa:	ef 93       	push	r30
    18fc:	ff 93       	push	r31
	_rx2_complete_irq();
    18fe:	d2 df       	rcall	.-92     	; 0x18a4 <_rx2_complete_irq>
}
    1900:	ff 91       	pop	r31
    1902:	ef 91       	pop	r30
    1904:	bf 91       	pop	r27
    1906:	af 91       	pop	r26
    1908:	9f 91       	pop	r25
    190a:	8f 91       	pop	r24
    190c:	7f 91       	pop	r23
    190e:	6f 91       	pop	r22
    1910:	5f 91       	pop	r21
    1912:	4f 91       	pop	r20
    1914:	3f 91       	pop	r19
    1916:	2f 91       	pop	r18
    1918:	0f 90       	pop	r0
    191a:	0b be       	out	0x3b, r0	; 59
    191c:	0f 90       	pop	r0
    191e:	0f be       	out	0x3f, r0	; 63
    1920:	0f 90       	pop	r0
    1922:	1f 90       	pop	r1
    1924:	18 95       	reti

00001926 <__vector_52>:

ISR(USART2_UDRE_vect){
    1926:	1f 92       	push	r1
    1928:	0f 92       	push	r0
    192a:	0f b6       	in	r0, 0x3f	; 63
    192c:	0f 92       	push	r0
    192e:	11 24       	eor	r1, r1
    1930:	0b b6       	in	r0, 0x3b	; 59
    1932:	0f 92       	push	r0
    1934:	2f 93       	push	r18
    1936:	3f 93       	push	r19
    1938:	4f 93       	push	r20
    193a:	5f 93       	push	r21
    193c:	6f 93       	push	r22
    193e:	7f 93       	push	r23
    1940:	8f 93       	push	r24
    1942:	9f 93       	push	r25
    1944:	af 93       	push	r26
    1946:	bf 93       	push	r27
    1948:	ef 93       	push	r30
    194a:	ff 93       	push	r31
	_tx2_udr_empty_irq();
    194c:	83 df       	rcall	.-250    	; 0x1854 <_tx2_udr_empty_irq>
    194e:	ff 91       	pop	r31
    1950:	ef 91       	pop	r30
    1952:	bf 91       	pop	r27
    1954:	af 91       	pop	r26
    1956:	9f 91       	pop	r25
    1958:	8f 91       	pop	r24
    195a:	7f 91       	pop	r23
    195c:	6f 91       	pop	r22
    195e:	5f 91       	pop	r21
    1960:	4f 91       	pop	r20
    1962:	3f 91       	pop	r19
    1964:	2f 91       	pop	r18
    1966:	0f 90       	pop	r0
    1968:	0b be       	out	0x3b, r0	; 59
    196a:	0f 90       	pop	r0
    196c:	0f be       	out	0x3f, r0	; 63
    196e:	0f 90       	pop	r0
    1970:	1f 90       	pop	r1
    1972:	18 95       	reti

00001974 <__vector_24>:
/*************************************************************************
Function: SPI interrupt
Purpose:  called when the SS pin has been put low
**************************************************************************/
ISR(SPI_STC_vect)
{
    1974:	1f 92       	push	r1
    1976:	0f 92       	push	r0
    1978:	0f b6       	in	r0, 0x3f	; 63
    197a:	0f 92       	push	r0
    197c:	11 24       	eor	r1, r1
    197e:	0b b6       	in	r0, 0x3b	; 59
    1980:	0f 92       	push	r0
    1982:	2f 93       	push	r18
    1984:	3f 93       	push	r19
    1986:	4f 93       	push	r20
    1988:	5f 93       	push	r21
    198a:	6f 93       	push	r22
    198c:	7f 93       	push	r23
    198e:	8f 93       	push	r24
    1990:	9f 93       	push	r25
    1992:	af 93       	push	r26
    1994:	bf 93       	push	r27
    1996:	ef 93       	push	r30
    1998:	ff 93       	push	r31
	/* SPI MASTER */
#if defined (SPI_MASTER_ENABLED)
	
	//RECEIVE
	// calculate buffer index
	tmphead = ( SPI_RxHead + 1) & SPI_RX_BUFFER_MASK;
    199a:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <SPI_RxHead>
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	01 96       	adiw	r24, 0x01	; 1
    19a2:	8f 73       	andi	r24, 0x3F	; 63
    19a4:	99 27       	eor	r25, r25
	if ( tmphead == SPI_RxTail ) {
    19a6:	20 91 4f 02 	lds	r18, 0x024F	; 0x80024f <SPI_RxTail>
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	82 17       	cp	r24, r18
    19ae:	93 07       	cpc	r25, r19
    19b0:	39 f0       	breq	.+14     	; 0x19c0 <__vector_24+0x4c>
		// error: receive buffer overflow
	} else {
		// store new index
		SPI_RxHead = tmphead;
    19b2:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <SPI_RxHead>
		// store received data in buffer
		SPI_RxBuf[tmphead] = SPDR;
    19b6:	2e b5       	in	r18, 0x2e	; 46
    19b8:	fc 01       	movw	r30, r24
    19ba:	ed 5a       	subi	r30, 0xAD	; 173
    19bc:	fd 4f       	sbci	r31, 0xFD	; 253
    19be:	20 83       	st	Z, r18
	}

	// SEND
	if ( SPI_TxHead != SPI_TxTail) {
    19c0:	90 91 52 02 	lds	r25, 0x0252	; 0x800252 <SPI_TxHead>
    19c4:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <SPI_TxTail>
    19c8:	98 17       	cp	r25, r24
    19ca:	71 f0       	breq	.+28     	; 0x19e8 <__vector_24+0x74>
		// calculate and store new buffer index
		tmptail = (SPI_TxTail + 1) & SPI_TX_BUFFER_MASK;
    19cc:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <SPI_TxTail>
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	01 96       	adiw	r24, 0x01	; 1
    19d4:	8f 73       	andi	r24, 0x3F	; 63
    19d6:	99 27       	eor	r25, r25
		SPI_TxTail = tmptail;
    19d8:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <SPI_TxTail>
		// get one byte from buffer and write it to UART
		SPDR = SPI_TxBuf[tmptail];  // start transmission
    19dc:	fc 01       	movw	r30, r24
    19de:	ed 56       	subi	r30, 0x6D	; 109
    19e0:	fd 4f       	sbci	r31, 0xFD	; 253
    19e2:	80 81       	ld	r24, Z
    19e4:	8e bd       	out	0x2e, r24	; 46
    19e6:	12 c0       	rjmp	.+36     	; 0x1a0c <__vector_24+0x98>
	}
	else if(SPI_bytesRequest>0){
    19e8:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <SPI_bytesRequest>
    19ec:	88 23       	and	r24, r24
    19ee:	39 f0       	breq	.+14     	; 0x19fe <__vector_24+0x8a>
		SPI_bytesRequest--;
    19f0:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <SPI_bytesRequest>
    19f4:	81 50       	subi	r24, 0x01	; 1
    19f6:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <SPI_bytesRequest>
		SPDR = 0x00;
    19fa:	1e bc       	out	0x2e, r1	; 46
    19fc:	07 c0       	rjmp	.+14     	; 0x1a0c <__vector_24+0x98>
	}
	else {
		// tx buffer empty, STOP the transmission
		digitalWrite(SS, HIGH);
    19fe:	61 e0       	ldi	r22, 0x01	; 1
    1a00:	83 e1       	ldi	r24, 0x13	; 19
    1a02:	0e 94 af 04 	call	0x95e	; 0x95e <digitalWrite>
		SPI_CTS = SPI_INACTIVE;
    1a06:	81 e0       	ldi	r24, 0x01	; 1
    1a08:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <SPI_CTS>
	else{
		SPDR=0x00;
	}
	
#endif //End of Master/Slave ISR
}
    1a0c:	ff 91       	pop	r31
    1a0e:	ef 91       	pop	r30
    1a10:	bf 91       	pop	r27
    1a12:	af 91       	pop	r26
    1a14:	9f 91       	pop	r25
    1a16:	8f 91       	pop	r24
    1a18:	7f 91       	pop	r23
    1a1a:	6f 91       	pop	r22
    1a1c:	5f 91       	pop	r21
    1a1e:	4f 91       	pop	r20
    1a20:	3f 91       	pop	r19
    1a22:	2f 91       	pop	r18
    1a24:	0f 90       	pop	r0
    1a26:	0b be       	out	0x3b, r0	; 59
    1a28:	0f 90       	pop	r0
    1a2a:	0f be       	out	0x3f, r0	; 63
    1a2c:	0f 90       	pop	r0
    1a2e:	1f 90       	pop	r1
    1a30:	18 95       	reti

00001a32 <millis_init>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    1a32:	78 94       	sei
    1a34:	84 b5       	in	r24, 0x24	; 36
    1a36:	82 60       	ori	r24, 0x02	; 2
    1a38:	84 bd       	out	0x24, r24	; 36
    1a3a:	84 b5       	in	r24, 0x24	; 36
    1a3c:	81 60       	ori	r24, 0x01	; 1
    1a3e:	84 bd       	out	0x24, r24	; 36
    1a40:	85 b5       	in	r24, 0x25	; 37
    1a42:	82 60       	ori	r24, 0x02	; 2
    1a44:	85 bd       	out	0x25, r24	; 37
    1a46:	85 b5       	in	r24, 0x25	; 37
    1a48:	81 60       	ori	r24, 0x01	; 1
    1a4a:	85 bd       	out	0x25, r24	; 37
    1a4c:	ee e6       	ldi	r30, 0x6E	; 110
    1a4e:	f0 e0       	ldi	r31, 0x00	; 0
    1a50:	80 81       	ld	r24, Z
    1a52:	81 60       	ori	r24, 0x01	; 1
    1a54:	80 83       	st	Z, r24
    1a56:	08 95       	ret

00001a58 <millis>:
    1a58:	2f b7       	in	r18, 0x3f	; 63
    1a5a:	f8 94       	cli
    1a5c:	60 91 d4 02 	lds	r22, 0x02D4	; 0x8002d4 <timer0_millis>
    1a60:	70 91 d5 02 	lds	r23, 0x02D5	; 0x8002d5 <timer0_millis+0x1>
    1a64:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <timer0_millis+0x2>
    1a68:	90 91 d7 02 	lds	r25, 0x02D7	; 0x8002d7 <timer0_millis+0x3>
    1a6c:	2f bf       	out	0x3f, r18	; 63
    1a6e:	08 95       	ret

00001a70 <micros>:
    1a70:	3f b7       	in	r19, 0x3f	; 63
    1a72:	f8 94       	cli
    1a74:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <timer0_overflow_count>
    1a78:	90 91 d9 02 	lds	r25, 0x02D9	; 0x8002d9 <timer0_overflow_count+0x1>
    1a7c:	a0 91 da 02 	lds	r26, 0x02DA	; 0x8002da <timer0_overflow_count+0x2>
    1a80:	b0 91 db 02 	lds	r27, 0x02DB	; 0x8002db <timer0_overflow_count+0x3>
    1a84:	26 b5       	in	r18, 0x26	; 38
    1a86:	a8 9b       	sbis	0x15, 0	; 21
    1a88:	05 c0       	rjmp	.+10     	; 0x1a94 <micros+0x24>
    1a8a:	2f 3f       	cpi	r18, 0xFF	; 255
    1a8c:	19 f0       	breq	.+6      	; 0x1a94 <micros+0x24>
    1a8e:	01 96       	adiw	r24, 0x01	; 1
    1a90:	a1 1d       	adc	r26, r1
    1a92:	b1 1d       	adc	r27, r1
    1a94:	3f bf       	out	0x3f, r19	; 63
    1a96:	ba 2f       	mov	r27, r26
    1a98:	a9 2f       	mov	r26, r25
    1a9a:	98 2f       	mov	r25, r24
    1a9c:	88 27       	eor	r24, r24
    1a9e:	82 0f       	add	r24, r18
    1aa0:	91 1d       	adc	r25, r1
    1aa2:	a1 1d       	adc	r26, r1
    1aa4:	b1 1d       	adc	r27, r1
    1aa6:	bc 01       	movw	r22, r24
    1aa8:	cd 01       	movw	r24, r26
    1aaa:	66 0f       	add	r22, r22
    1aac:	77 1f       	adc	r23, r23
    1aae:	88 1f       	adc	r24, r24
    1ab0:	99 1f       	adc	r25, r25
    1ab2:	66 0f       	add	r22, r22
    1ab4:	77 1f       	adc	r23, r23
    1ab6:	88 1f       	adc	r24, r24
    1ab8:	99 1f       	adc	r25, r25
    1aba:	08 95       	ret

00001abc <delay_ms>:
    1abc:	8f 92       	push	r8
    1abe:	9f 92       	push	r9
    1ac0:	af 92       	push	r10
    1ac2:	bf 92       	push	r11
    1ac4:	cf 92       	push	r12
    1ac6:	df 92       	push	r13
    1ac8:	ef 92       	push	r14
    1aca:	ff 92       	push	r15
    1acc:	6b 01       	movw	r12, r22
    1ace:	7c 01       	movw	r14, r24
    1ad0:	cf df       	rcall	.-98     	; 0x1a70 <micros>
    1ad2:	4b 01       	movw	r8, r22
    1ad4:	5c 01       	movw	r10, r24
    1ad6:	c1 14       	cp	r12, r1
    1ad8:	d1 04       	cpc	r13, r1
    1ada:	e1 04       	cpc	r14, r1
    1adc:	f1 04       	cpc	r15, r1
    1ade:	89 f4       	brne	.+34     	; 0x1b02 <delay_ms+0x46>
    1ae0:	21 c0       	rjmp	.+66     	; 0x1b24 <delay_ms+0x68>
    1ae2:	21 e0       	ldi	r18, 0x01	; 1
    1ae4:	c2 1a       	sub	r12, r18
    1ae6:	d1 08       	sbc	r13, r1
    1ae8:	e1 08       	sbc	r14, r1
    1aea:	f1 08       	sbc	r15, r1
    1aec:	88 ee       	ldi	r24, 0xE8	; 232
    1aee:	88 0e       	add	r8, r24
    1af0:	83 e0       	ldi	r24, 0x03	; 3
    1af2:	98 1e       	adc	r9, r24
    1af4:	a1 1c       	adc	r10, r1
    1af6:	b1 1c       	adc	r11, r1
    1af8:	c1 14       	cp	r12, r1
    1afa:	d1 04       	cpc	r13, r1
    1afc:	e1 04       	cpc	r14, r1
    1afe:	f1 04       	cpc	r15, r1
    1b00:	89 f0       	breq	.+34     	; 0x1b24 <delay_ms+0x68>
    1b02:	b6 df       	rcall	.-148    	; 0x1a70 <micros>
    1b04:	dc 01       	movw	r26, r24
    1b06:	cb 01       	movw	r24, r22
    1b08:	88 19       	sub	r24, r8
    1b0a:	99 09       	sbc	r25, r9
    1b0c:	aa 09       	sbc	r26, r10
    1b0e:	bb 09       	sbc	r27, r11
    1b10:	88 3e       	cpi	r24, 0xE8	; 232
    1b12:	93 40       	sbci	r25, 0x03	; 3
    1b14:	a1 05       	cpc	r26, r1
    1b16:	b1 05       	cpc	r27, r1
    1b18:	20 f7       	brcc	.-56     	; 0x1ae2 <delay_ms+0x26>
    1b1a:	c1 14       	cp	r12, r1
    1b1c:	d1 04       	cpc	r13, r1
    1b1e:	e1 04       	cpc	r14, r1
    1b20:	f1 04       	cpc	r15, r1
    1b22:	79 f7       	brne	.-34     	; 0x1b02 <delay_ms+0x46>
    1b24:	ff 90       	pop	r15
    1b26:	ef 90       	pop	r14
    1b28:	df 90       	pop	r13
    1b2a:	cf 90       	pop	r12
    1b2c:	bf 90       	pop	r11
    1b2e:	af 90       	pop	r10
    1b30:	9f 90       	pop	r9
    1b32:	8f 90       	pop	r8
    1b34:	08 95       	ret

00001b36 <__vector_23>:
	// return = 4 cycles	
}


ISR(TIMER0_OVF_vect)
{
    1b36:	1f 92       	push	r1
    1b38:	0f 92       	push	r0
    1b3a:	0f b6       	in	r0, 0x3f	; 63
    1b3c:	0f 92       	push	r0
    1b3e:	11 24       	eor	r1, r1
    1b40:	2f 93       	push	r18
    1b42:	3f 93       	push	r19
    1b44:	8f 93       	push	r24
    1b46:	9f 93       	push	r25
    1b48:	af 93       	push	r26
    1b4a:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    1b4c:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <timer0_millis>
    1b50:	90 91 d5 02 	lds	r25, 0x02D5	; 0x8002d5 <timer0_millis+0x1>
    1b54:	a0 91 d6 02 	lds	r26, 0x02D6	; 0x8002d6 <timer0_millis+0x2>
    1b58:	b0 91 d7 02 	lds	r27, 0x02D7	; 0x8002d7 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    1b5c:	30 91 d3 02 	lds	r19, 0x02D3	; 0x8002d3 <timer0_fract>
	
	m += MILLIS_INC;
	f += FRACT_INC;
    1b60:	23 e0       	ldi	r18, 0x03	; 3
    1b62:	23 0f       	add	r18, r19
	
	if(f >= FRACT_MAX){
    1b64:	2d 37       	cpi	r18, 0x7D	; 125
    1b66:	20 f4       	brcc	.+8      	; 0x1b70 <__vector_23+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;
	
	m += MILLIS_INC;
    1b68:	01 96       	adiw	r24, 0x01	; 1
    1b6a:	a1 1d       	adc	r26, r1
    1b6c:	b1 1d       	adc	r27, r1
    1b6e:	05 c0       	rjmp	.+10     	; 0x1b7a <__vector_23+0x44>
	f += FRACT_INC;
	
	if(f >= FRACT_MAX){
		f -= FRACT_MAX;
    1b70:	26 e8       	ldi	r18, 0x86	; 134
    1b72:	23 0f       	add	r18, r19
		m += 1;
    1b74:	02 96       	adiw	r24, 0x02	; 2
    1b76:	a1 1d       	adc	r26, r1
    1b78:	b1 1d       	adc	r27, r1
	}
	
	timer0_fract = f;
    1b7a:	20 93 d3 02 	sts	0x02D3, r18	; 0x8002d3 <timer0_fract>
	timer0_millis = m;
    1b7e:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <timer0_millis>
    1b82:	90 93 d5 02 	sts	0x02D5, r25	; 0x8002d5 <timer0_millis+0x1>
    1b86:	a0 93 d6 02 	sts	0x02D6, r26	; 0x8002d6 <timer0_millis+0x2>
    1b8a:	b0 93 d7 02 	sts	0x02D7, r27	; 0x8002d7 <timer0_millis+0x3>
	timer0_overflow_count++;
    1b8e:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <timer0_overflow_count>
    1b92:	90 91 d9 02 	lds	r25, 0x02D9	; 0x8002d9 <timer0_overflow_count+0x1>
    1b96:	a0 91 da 02 	lds	r26, 0x02DA	; 0x8002da <timer0_overflow_count+0x2>
    1b9a:	b0 91 db 02 	lds	r27, 0x02DB	; 0x8002db <timer0_overflow_count+0x3>
    1b9e:	01 96       	adiw	r24, 0x01	; 1
    1ba0:	a1 1d       	adc	r26, r1
    1ba2:	b1 1d       	adc	r27, r1
    1ba4:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <timer0_overflow_count>
    1ba8:	90 93 d9 02 	sts	0x02D9, r25	; 0x8002d9 <timer0_overflow_count+0x1>
    1bac:	a0 93 da 02 	sts	0x02DA, r26	; 0x8002da <timer0_overflow_count+0x2>
    1bb0:	b0 93 db 02 	sts	0x02DB, r27	; 0x8002db <timer0_overflow_count+0x3>
    1bb4:	bf 91       	pop	r27
    1bb6:	af 91       	pop	r26
    1bb8:	9f 91       	pop	r25
    1bba:	8f 91       	pop	r24
    1bbc:	3f 91       	pop	r19
    1bbe:	2f 91       	pop	r18
    1bc0:	0f 90       	pop	r0
    1bc2:	0f be       	out	0x3f, r0	; 63
    1bc4:	0f 90       	pop	r0
    1bc6:	1f 90       	pop	r1
    1bc8:	18 95       	reti

00001bca <disableTimer>:
		}
	}
	  
	disableTimer(_timer);
	digitalWrite(_pin, 0);
}
    1bca:	82 30       	cpi	r24, 0x02	; 2
    1bcc:	a9 f0       	breq	.+42     	; 0x1bf8 <disableTimer+0x2e>
    1bce:	28 f4       	brcc	.+10     	; 0x1bda <disableTimer+0x10>
    1bd0:	88 23       	and	r24, r24
    1bd2:	49 f0       	breq	.+18     	; 0x1be6 <disableTimer+0x1c>
    1bd4:	81 30       	cpi	r24, 0x01	; 1
    1bd6:	51 f0       	breq	.+20     	; 0x1bec <disableTimer+0x22>
    1bd8:	08 95       	ret
    1bda:	84 30       	cpi	r24, 0x04	; 4
    1bdc:	21 f1       	breq	.+72     	; 0x1c26 <disableTimer+0x5c>
    1bde:	e8 f0       	brcs	.+58     	; 0x1c1a <disableTimer+0x50>
    1be0:	85 30       	cpi	r24, 0x05	; 5
    1be2:	39 f1       	breq	.+78     	; 0x1c32 <disableTimer+0x68>
    1be4:	08 95       	ret
    1be6:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
    1bea:	08 95       	ret
    1bec:	ef e6       	ldi	r30, 0x6F	; 111
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	80 81       	ld	r24, Z
    1bf2:	8d 7f       	andi	r24, 0xFD	; 253
    1bf4:	80 83       	st	Z, r24
    1bf6:	08 95       	ret
    1bf8:	e0 e7       	ldi	r30, 0x70	; 112
    1bfa:	f0 e0       	ldi	r31, 0x00	; 0
    1bfc:	80 81       	ld	r24, Z
    1bfe:	8d 7f       	andi	r24, 0xFD	; 253
    1c00:	80 83       	st	Z, r24
    1c02:	81 e0       	ldi	r24, 0x01	; 1
    1c04:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    1c08:	e1 eb       	ldi	r30, 0xB1	; 177
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	80 81       	ld	r24, Z
    1c0e:	88 7f       	andi	r24, 0xF8	; 248
    1c10:	84 60       	ori	r24, 0x04	; 4
    1c12:	80 83       	st	Z, r24
    1c14:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
    1c18:	08 95       	ret
    1c1a:	e1 e7       	ldi	r30, 0x71	; 113
    1c1c:	f0 e0       	ldi	r31, 0x00	; 0
    1c1e:	80 81       	ld	r24, Z
    1c20:	8d 7f       	andi	r24, 0xFD	; 253
    1c22:	80 83       	st	Z, r24
    1c24:	08 95       	ret
    1c26:	e2 e7       	ldi	r30, 0x72	; 114
    1c28:	f0 e0       	ldi	r31, 0x00	; 0
    1c2a:	80 81       	ld	r24, Z
    1c2c:	8d 7f       	andi	r24, 0xFD	; 253
    1c2e:	80 83       	st	Z, r24
    1c30:	08 95       	ret
    1c32:	e3 e7       	ldi	r30, 0x73	; 115
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	80 81       	ld	r24, Z
    1c38:	8d 7f       	andi	r24, 0xFD	; 253
    1c3a:	80 83       	st	Z, r24
    1c3c:	08 95       	ret

00001c3e <__vector_32>:
}
#endif

#ifdef USE_TIMER3
ISR(TIMER3_COMPA_vect)
{
    1c3e:	1f 92       	push	r1
    1c40:	0f 92       	push	r0
    1c42:	0f b6       	in	r0, 0x3f	; 63
    1c44:	0f 92       	push	r0
    1c46:	11 24       	eor	r1, r1
    1c48:	0b b6       	in	r0, 0x3b	; 59
    1c4a:	0f 92       	push	r0
    1c4c:	2f 93       	push	r18
    1c4e:	3f 93       	push	r19
    1c50:	4f 93       	push	r20
    1c52:	5f 93       	push	r21
    1c54:	6f 93       	push	r22
    1c56:	7f 93       	push	r23
    1c58:	8f 93       	push	r24
    1c5a:	9f 93       	push	r25
    1c5c:	af 93       	push	r26
    1c5e:	bf 93       	push	r27
    1c60:	ef 93       	push	r30
    1c62:	ff 93       	push	r31
	if (timer3_toggle_count != 0)
    1c64:	80 91 c0 04 	lds	r24, 0x04C0	; 0x8004c0 <timer3_toggle_count>
    1c68:	90 91 c1 04 	lds	r25, 0x04C1	; 0x8004c1 <timer3_toggle_count+0x1>
    1c6c:	a0 91 c2 04 	lds	r26, 0x04C2	; 0x8004c2 <timer3_toggle_count+0x2>
    1c70:	b0 91 c3 04 	lds	r27, 0x04C3	; 0x8004c3 <timer3_toggle_count+0x3>
    1c74:	89 2b       	or	r24, r25
    1c76:	8a 2b       	or	r24, r26
    1c78:	8b 2b       	or	r24, r27
    1c7a:	51 f1       	breq	.+84     	; 0x1cd0 <__vector_32+0x92>
	{
		// toggle the pin
		*timer3_pin_port ^= timer3_pin_mask;
    1c7c:	90 91 b2 04 	lds	r25, 0x04B2	; 0x8004b2 <timer3_pin_mask>
    1c80:	e0 91 ba 04 	lds	r30, 0x04BA	; 0x8004ba <timer3_pin_port>
    1c84:	f0 91 bb 04 	lds	r31, 0x04BB	; 0x8004bb <timer3_pin_port+0x1>
    1c88:	80 81       	ld	r24, Z
    1c8a:	89 27       	eor	r24, r25
    1c8c:	80 83       	st	Z, r24
		
		if (timer3_toggle_count > 0)
    1c8e:	80 91 c0 04 	lds	r24, 0x04C0	; 0x8004c0 <timer3_toggle_count>
    1c92:	90 91 c1 04 	lds	r25, 0x04C1	; 0x8004c1 <timer3_toggle_count+0x1>
    1c96:	a0 91 c2 04 	lds	r26, 0x04C2	; 0x8004c2 <timer3_toggle_count+0x2>
    1c9a:	b0 91 c3 04 	lds	r27, 0x04C3	; 0x8004c3 <timer3_toggle_count+0x3>
    1c9e:	18 16       	cp	r1, r24
    1ca0:	19 06       	cpc	r1, r25
    1ca2:	1a 06       	cpc	r1, r26
    1ca4:	1b 06       	cpc	r1, r27
    1ca6:	04 f5       	brge	.+64     	; 0x1ce8 <__vector_32+0xaa>
			timer3_toggle_count--;
    1ca8:	80 91 c0 04 	lds	r24, 0x04C0	; 0x8004c0 <timer3_toggle_count>
    1cac:	90 91 c1 04 	lds	r25, 0x04C1	; 0x8004c1 <timer3_toggle_count+0x1>
    1cb0:	a0 91 c2 04 	lds	r26, 0x04C2	; 0x8004c2 <timer3_toggle_count+0x2>
    1cb4:	b0 91 c3 04 	lds	r27, 0x04C3	; 0x8004c3 <timer3_toggle_count+0x3>
    1cb8:	01 97       	sbiw	r24, 0x01	; 1
    1cba:	a1 09       	sbc	r26, r1
    1cbc:	b1 09       	sbc	r27, r1
    1cbe:	80 93 c0 04 	sts	0x04C0, r24	; 0x8004c0 <timer3_toggle_count>
    1cc2:	90 93 c1 04 	sts	0x04C1, r25	; 0x8004c1 <timer3_toggle_count+0x1>
    1cc6:	a0 93 c2 04 	sts	0x04C2, r26	; 0x8004c2 <timer3_toggle_count+0x2>
    1cca:	b0 93 c3 04 	sts	0x04C3, r27	; 0x8004c3 <timer3_toggle_count+0x3>
    1cce:	0c c0       	rjmp	.+24     	; 0x1ce8 <__vector_32+0xaa>
	}
	else
	{
		disableTimer(3);
    1cd0:	83 e0       	ldi	r24, 0x03	; 3
    1cd2:	7b df       	rcall	.-266    	; 0x1bca <disableTimer>
		
		*timer3_pin_port &= ~(timer3_pin_mask);  // keep pin low after stop
    1cd4:	80 91 b2 04 	lds	r24, 0x04B2	; 0x8004b2 <timer3_pin_mask>
    1cd8:	e0 91 ba 04 	lds	r30, 0x04BA	; 0x8004ba <timer3_pin_port>
    1cdc:	f0 91 bb 04 	lds	r31, 0x04BB	; 0x8004bb <timer3_pin_port+0x1>
    1ce0:	90 81       	ld	r25, Z
    1ce2:	80 95       	com	r24
    1ce4:	89 23       	and	r24, r25
    1ce6:	80 83       	st	Z, r24
	}
}
    1ce8:	ff 91       	pop	r31
    1cea:	ef 91       	pop	r30
    1cec:	bf 91       	pop	r27
    1cee:	af 91       	pop	r26
    1cf0:	9f 91       	pop	r25
    1cf2:	8f 91       	pop	r24
    1cf4:	7f 91       	pop	r23
    1cf6:	6f 91       	pop	r22
    1cf8:	5f 91       	pop	r21
    1cfa:	4f 91       	pop	r20
    1cfc:	3f 91       	pop	r19
    1cfe:	2f 91       	pop	r18
    1d00:	0f 90       	pop	r0
    1d02:	0b be       	out	0x3b, r0	; 59
    1d04:	0f 90       	pop	r0
    1d06:	0f be       	out	0x3f, r0	; 63
    1d08:	0f 90       	pop	r0
    1d0a:	1f 90       	pop	r1
    1d0c:	18 95       	reti

00001d0e <twi_init>:
  bool flag = twi_timed_out_flag;
  if (clear_flag){
    twi_timed_out_flag = false;
  }
  return(flag);
}
    1d0e:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <twi_state>
    1d12:	81 e0       	ldi	r24, 0x01	; 1
    1d14:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <twi_sendStop>
    1d18:	10 92 4c 03 	sts	0x034C, r1	; 0x80034c <twi_inRepStart>
    1d1c:	82 e0       	ldi	r24, 0x02	; 2
    1d1e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    1d22:	e9 eb       	ldi	r30, 0xB9	; 185
    1d24:	f0 e0       	ldi	r31, 0x00	; 0
    1d26:	80 81       	ld	r24, Z
    1d28:	83 60       	ori	r24, 0x03	; 3
    1d2a:	80 83       	st	Z, r24
    1d2c:	85 e4       	ldi	r24, 0x45	; 69
    1d2e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1d32:	08 95       	ret

00001d34 <twi_disable>:
    1d34:	ec eb       	ldi	r30, 0xBC	; 188
    1d36:	f0 e0       	ldi	r31, 0x00	; 0
    1d38:	80 81       	ld	r24, Z
    1d3a:	8a 7b       	andi	r24, 0xBA	; 186
    1d3c:	80 83       	st	Z, r24
    1d3e:	60 e0       	ldi	r22, 0x00	; 0
    1d40:	8c e2       	ldi	r24, 0x2C	; 44
    1d42:	0e 94 af 04 	call	0x95e	; 0x95e <digitalWrite>
    1d46:	60 e0       	ldi	r22, 0x00	; 0
    1d48:	8b e2       	ldi	r24, 0x2B	; 43
    1d4a:	0c 94 af 04 	jmp	0x95e	; 0x95e <digitalWrite>
    1d4e:	08 95       	ret

00001d50 <twi_releaseBus>:
    1d50:	85 ec       	ldi	r24, 0xC5	; 197
    1d52:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1d56:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <twi_state>
    1d5a:	08 95       	ret

00001d5c <twi_handleTimeout>:
    1d5c:	ef 92       	push	r14
    1d5e:	ff 92       	push	r15
    1d60:	0f 93       	push	r16
    1d62:	1f 93       	push	r17
    1d64:	cf 93       	push	r28
    1d66:	df 93       	push	r29
    1d68:	91 e0       	ldi	r25, 0x01	; 1
    1d6a:	90 93 47 03 	sts	0x0347, r25	; 0x800347 <twi_timed_out_flag>
    1d6e:	88 23       	and	r24, r24
    1d70:	61 f0       	breq	.+24     	; 0x1d8a <twi_handleTimeout+0x2e>
    1d72:	c8 eb       	ldi	r28, 0xB8	; 184
    1d74:	d0 e0       	ldi	r29, 0x00	; 0
    1d76:	f8 80       	ld	r15, Y
    1d78:	0a eb       	ldi	r16, 0xBA	; 186
    1d7a:	10 e0       	ldi	r17, 0x00	; 0
    1d7c:	f8 01       	movw	r30, r16
    1d7e:	e0 80       	ld	r14, Z
    1d80:	d9 df       	rcall	.-78     	; 0x1d34 <twi_disable>
    1d82:	c5 df       	rcall	.-118    	; 0x1d0e <twi_init>
    1d84:	f8 01       	movw	r30, r16
    1d86:	e0 82       	st	Z, r14
    1d88:	f8 82       	st	Y, r15
    1d8a:	df 91       	pop	r29
    1d8c:	cf 91       	pop	r28
    1d8e:	1f 91       	pop	r17
    1d90:	0f 91       	pop	r16
    1d92:	ff 90       	pop	r15
    1d94:	ef 90       	pop	r14
    1d96:	08 95       	ret

00001d98 <twi_readFrom>:
    1d98:	4f 92       	push	r4
    1d9a:	5f 92       	push	r5
    1d9c:	6f 92       	push	r6
    1d9e:	7f 92       	push	r7
    1da0:	8f 92       	push	r8
    1da2:	9f 92       	push	r9
    1da4:	af 92       	push	r10
    1da6:	bf 92       	push	r11
    1da8:	cf 92       	push	r12
    1daa:	df 92       	push	r13
    1dac:	ff 92       	push	r15
    1dae:	0f 93       	push	r16
    1db0:	1f 93       	push	r17
    1db2:	cf 93       	push	r28
    1db4:	df 93       	push	r29
    1db6:	18 2f       	mov	r17, r24
    1db8:	f6 2e       	mov	r15, r22
    1dba:	07 2f       	mov	r16, r23
    1dbc:	d4 2f       	mov	r29, r20
    1dbe:	d2 2e       	mov	r13, r18
    1dc0:	41 32       	cpi	r20, 0x21	; 33
    1dc2:	08 f0       	brcs	.+2      	; 0x1dc6 <twi_readFrom+0x2e>
    1dc4:	c3 c0       	rjmp	.+390    	; 0x1f4c <twi_readFrom+0x1b4>
    1dc6:	54 de       	rcall	.-856    	; 0x1a70 <micros>
    1dc8:	4b 01       	movw	r8, r22
    1dca:	5c 01       	movw	r10, r24
    1dcc:	25 c0       	rjmp	.+74     	; 0x1e18 <twi_readFrom+0x80>
    1dce:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <twi_timeout_us>
    1dd2:	90 91 49 03 	lds	r25, 0x0349	; 0x800349 <twi_timeout_us+0x1>
    1dd6:	a0 91 4a 03 	lds	r26, 0x034A	; 0x80034a <twi_timeout_us+0x2>
    1dda:	b0 91 4b 03 	lds	r27, 0x034B	; 0x80034b <twi_timeout_us+0x3>
    1dde:	89 2b       	or	r24, r25
    1de0:	8a 2b       	or	r24, r26
    1de2:	8b 2b       	or	r24, r27
    1de4:	c9 f0       	breq	.+50     	; 0x1e18 <twi_readFrom+0x80>
    1de6:	44 de       	rcall	.-888    	; 0x1a70 <micros>
    1de8:	40 90 48 03 	lds	r4, 0x0348	; 0x800348 <twi_timeout_us>
    1dec:	50 90 49 03 	lds	r5, 0x0349	; 0x800349 <twi_timeout_us+0x1>
    1df0:	60 90 4a 03 	lds	r6, 0x034A	; 0x80034a <twi_timeout_us+0x2>
    1df4:	70 90 4b 03 	lds	r7, 0x034B	; 0x80034b <twi_timeout_us+0x3>
    1df8:	dc 01       	movw	r26, r24
    1dfa:	cb 01       	movw	r24, r22
    1dfc:	88 19       	sub	r24, r8
    1dfe:	99 09       	sbc	r25, r9
    1e00:	aa 09       	sbc	r26, r10
    1e02:	bb 09       	sbc	r27, r11
    1e04:	48 16       	cp	r4, r24
    1e06:	59 06       	cpc	r5, r25
    1e08:	6a 06       	cpc	r6, r26
    1e0a:	7b 06       	cpc	r7, r27
    1e0c:	28 f4       	brcc	.+10     	; 0x1e18 <twi_readFrom+0x80>
    1e0e:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <twi_do_reset_on_timeout>
    1e12:	a4 df       	rcall	.-184    	; 0x1d5c <twi_handleTimeout>
    1e14:	c0 e0       	ldi	r28, 0x00	; 0
    1e16:	9b c0       	rjmp	.+310    	; 0x1f4e <twi_readFrom+0x1b6>
    1e18:	c0 91 4f 03 	lds	r28, 0x034F	; 0x80034f <twi_state>
    1e1c:	c1 11       	cpse	r28, r1
    1e1e:	d7 cf       	rjmp	.-82     	; 0x1dce <twi_readFrom+0x36>
    1e20:	81 e0       	ldi	r24, 0x01	; 1
    1e22:	80 93 4f 03 	sts	0x034F, r24	; 0x80034f <twi_state>
    1e26:	d0 92 4d 03 	sts	0x034D, r13	; 0x80034d <twi_sendStop>
    1e2a:	9f ef       	ldi	r25, 0xFF	; 255
    1e2c:	90 93 dc 02 	sts	0x02DC, r25	; 0x8002dc <twi_error>
    1e30:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <twi_masterBufferIndex>
    1e34:	9d 0f       	add	r25, r29
    1e36:	90 93 20 03 	sts	0x0320, r25	; 0x800320 <twi_masterBufferLength>
    1e3a:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <twi_slarw>
    1e3e:	80 91 4e 03 	lds	r24, 0x034E	; 0x80034e <twi_slarw>
    1e42:	11 0f       	add	r17, r17
    1e44:	18 2b       	or	r17, r24
    1e46:	10 93 4e 03 	sts	0x034E, r17	; 0x80034e <twi_slarw>
    1e4a:	80 91 4c 03 	lds	r24, 0x034C	; 0x80034c <twi_inRepStart>
    1e4e:	81 30       	cpi	r24, 0x01	; 1
    1e50:	b1 f5       	brne	.+108    	; 0x1ebe <twi_readFrom+0x126>
    1e52:	10 92 4c 03 	sts	0x034C, r1	; 0x80034c <twi_inRepStart>
    1e56:	0c de       	rcall	.-1000   	; 0x1a70 <micros>
    1e58:	4b 01       	movw	r8, r22
    1e5a:	5c 01       	movw	r10, r24
    1e5c:	0f 2e       	mov	r0, r31
    1e5e:	fc eb       	ldi	r31, 0xBC	; 188
    1e60:	cf 2e       	mov	r12, r31
    1e62:	d1 2c       	mov	r13, r1
    1e64:	f0 2d       	mov	r31, r0
    1e66:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <twi_timeout_us>
    1e6a:	90 91 49 03 	lds	r25, 0x0349	; 0x800349 <twi_timeout_us+0x1>
    1e6e:	a0 91 4a 03 	lds	r26, 0x034A	; 0x80034a <twi_timeout_us+0x2>
    1e72:	b0 91 4b 03 	lds	r27, 0x034B	; 0x80034b <twi_timeout_us+0x3>
    1e76:	89 2b       	or	r24, r25
    1e78:	8a 2b       	or	r24, r26
    1e7a:	8b 2b       	or	r24, r27
    1e7c:	c1 f0       	breq	.+48     	; 0x1eae <twi_readFrom+0x116>
    1e7e:	f8 dd       	rcall	.-1040   	; 0x1a70 <micros>
    1e80:	40 90 48 03 	lds	r4, 0x0348	; 0x800348 <twi_timeout_us>
    1e84:	50 90 49 03 	lds	r5, 0x0349	; 0x800349 <twi_timeout_us+0x1>
    1e88:	60 90 4a 03 	lds	r6, 0x034A	; 0x80034a <twi_timeout_us+0x2>
    1e8c:	70 90 4b 03 	lds	r7, 0x034B	; 0x80034b <twi_timeout_us+0x3>
    1e90:	dc 01       	movw	r26, r24
    1e92:	cb 01       	movw	r24, r22
    1e94:	88 19       	sub	r24, r8
    1e96:	99 09       	sbc	r25, r9
    1e98:	aa 09       	sbc	r26, r10
    1e9a:	bb 09       	sbc	r27, r11
    1e9c:	48 16       	cp	r4, r24
    1e9e:	59 06       	cpc	r5, r25
    1ea0:	6a 06       	cpc	r6, r26
    1ea2:	7b 06       	cpc	r7, r27
    1ea4:	20 f4       	brcc	.+8      	; 0x1eae <twi_readFrom+0x116>
    1ea6:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <twi_do_reset_on_timeout>
    1eaa:	58 df       	rcall	.-336    	; 0x1d5c <twi_handleTimeout>
    1eac:	50 c0       	rjmp	.+160    	; 0x1f4e <twi_readFrom+0x1b6>
    1eae:	f6 01       	movw	r30, r12
    1eb0:	80 81       	ld	r24, Z
    1eb2:	83 fd       	sbrc	r24, 3
    1eb4:	d8 cf       	rjmp	.-80     	; 0x1e66 <twi_readFrom+0xce>
    1eb6:	85 ec       	ldi	r24, 0xC5	; 197
    1eb8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1ebc:	03 c0       	rjmp	.+6      	; 0x1ec4 <twi_readFrom+0x12c>
    1ebe:	85 ee       	ldi	r24, 0xE5	; 229
    1ec0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1ec4:	d5 dd       	rcall	.-1110   	; 0x1a70 <micros>
    1ec6:	4b 01       	movw	r8, r22
    1ec8:	5c 01       	movw	r10, r24
    1eca:	24 c0       	rjmp	.+72     	; 0x1f14 <twi_readFrom+0x17c>
    1ecc:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <twi_timeout_us>
    1ed0:	90 91 49 03 	lds	r25, 0x0349	; 0x800349 <twi_timeout_us+0x1>
    1ed4:	a0 91 4a 03 	lds	r26, 0x034A	; 0x80034a <twi_timeout_us+0x2>
    1ed8:	b0 91 4b 03 	lds	r27, 0x034B	; 0x80034b <twi_timeout_us+0x3>
    1edc:	89 2b       	or	r24, r25
    1ede:	8a 2b       	or	r24, r26
    1ee0:	8b 2b       	or	r24, r27
    1ee2:	c1 f0       	breq	.+48     	; 0x1f14 <twi_readFrom+0x17c>
    1ee4:	c5 dd       	rcall	.-1142   	; 0x1a70 <micros>
    1ee6:	40 90 48 03 	lds	r4, 0x0348	; 0x800348 <twi_timeout_us>
    1eea:	50 90 49 03 	lds	r5, 0x0349	; 0x800349 <twi_timeout_us+0x1>
    1eee:	60 90 4a 03 	lds	r6, 0x034A	; 0x80034a <twi_timeout_us+0x2>
    1ef2:	70 90 4b 03 	lds	r7, 0x034B	; 0x80034b <twi_timeout_us+0x3>
    1ef6:	dc 01       	movw	r26, r24
    1ef8:	cb 01       	movw	r24, r22
    1efa:	88 19       	sub	r24, r8
    1efc:	99 09       	sbc	r25, r9
    1efe:	aa 09       	sbc	r26, r10
    1f00:	bb 09       	sbc	r27, r11
    1f02:	48 16       	cp	r4, r24
    1f04:	59 06       	cpc	r5, r25
    1f06:	6a 06       	cpc	r6, r26
    1f08:	7b 06       	cpc	r7, r27
    1f0a:	20 f4       	brcc	.+8      	; 0x1f14 <twi_readFrom+0x17c>
    1f0c:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <twi_do_reset_on_timeout>
    1f10:	25 df       	rcall	.-438    	; 0x1d5c <twi_handleTimeout>
    1f12:	1d c0       	rjmp	.+58     	; 0x1f4e <twi_readFrom+0x1b6>
    1f14:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <twi_state>
    1f18:	81 30       	cpi	r24, 0x01	; 1
    1f1a:	c1 f2       	breq	.-80     	; 0x1ecc <twi_readFrom+0x134>
    1f1c:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <twi_masterBufferIndex>
    1f20:	8d 17       	cp	r24, r29
    1f22:	10 f4       	brcc	.+4      	; 0x1f28 <twi_readFrom+0x190>
    1f24:	d0 91 21 03 	lds	r29, 0x0321	; 0x800321 <twi_masterBufferIndex>
    1f28:	dd 23       	and	r29, r29
    1f2a:	89 f0       	breq	.+34     	; 0x1f4e <twi_readFrom+0x1b6>
    1f2c:	e2 e2       	ldi	r30, 0x22	; 34
    1f2e:	f3 e0       	ldi	r31, 0x03	; 3
    1f30:	af 2d       	mov	r26, r15
    1f32:	b0 2f       	mov	r27, r16
    1f34:	2f ef       	ldi	r18, 0xFF	; 255
    1f36:	2d 0f       	add	r18, r29
    1f38:	30 e0       	ldi	r19, 0x00	; 0
    1f3a:	2d 5d       	subi	r18, 0xDD	; 221
    1f3c:	3c 4f       	sbci	r19, 0xFC	; 252
    1f3e:	81 91       	ld	r24, Z+
    1f40:	8d 93       	st	X+, r24
    1f42:	e2 17       	cp	r30, r18
    1f44:	f3 07       	cpc	r31, r19
    1f46:	d9 f7       	brne	.-10     	; 0x1f3e <twi_readFrom+0x1a6>
    1f48:	cd 2f       	mov	r28, r29
    1f4a:	01 c0       	rjmp	.+2      	; 0x1f4e <twi_readFrom+0x1b6>
    1f4c:	c0 e0       	ldi	r28, 0x00	; 0
    1f4e:	8c 2f       	mov	r24, r28
    1f50:	df 91       	pop	r29
    1f52:	cf 91       	pop	r28
    1f54:	1f 91       	pop	r17
    1f56:	0f 91       	pop	r16
    1f58:	ff 90       	pop	r15
    1f5a:	df 90       	pop	r13
    1f5c:	cf 90       	pop	r12
    1f5e:	bf 90       	pop	r11
    1f60:	af 90       	pop	r10
    1f62:	9f 90       	pop	r9
    1f64:	8f 90       	pop	r8
    1f66:	7f 90       	pop	r7
    1f68:	6f 90       	pop	r6
    1f6a:	5f 90       	pop	r5
    1f6c:	4f 90       	pop	r4
    1f6e:	08 95       	ret

00001f70 <twi_writeTo>:
    1f70:	4f 92       	push	r4
    1f72:	5f 92       	push	r5
    1f74:	6f 92       	push	r6
    1f76:	7f 92       	push	r7
    1f78:	8f 92       	push	r8
    1f7a:	9f 92       	push	r9
    1f7c:	af 92       	push	r10
    1f7e:	bf 92       	push	r11
    1f80:	df 92       	push	r13
    1f82:	ef 92       	push	r14
    1f84:	ff 92       	push	r15
    1f86:	0f 93       	push	r16
    1f88:	1f 93       	push	r17
    1f8a:	cf 93       	push	r28
    1f8c:	df 93       	push	r29
    1f8e:	41 32       	cpi	r20, 0x21	; 33
    1f90:	08 f0       	brcs	.+2      	; 0x1f94 <twi_writeTo+0x24>
    1f92:	eb c0       	rjmp	.+470    	; 0x216a <twi_writeTo+0x1fa>
    1f94:	12 2f       	mov	r17, r18
    1f96:	d4 2e       	mov	r13, r20
    1f98:	7b 01       	movw	r14, r22
    1f9a:	d8 2f       	mov	r29, r24
    1f9c:	69 dd       	rcall	.-1326   	; 0x1a70 <micros>
    1f9e:	4b 01       	movw	r8, r22
    1fa0:	5c 01       	movw	r10, r24
    1fa2:	25 c0       	rjmp	.+74     	; 0x1fee <twi_writeTo+0x7e>
    1fa4:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <twi_timeout_us>
    1fa8:	90 91 49 03 	lds	r25, 0x0349	; 0x800349 <twi_timeout_us+0x1>
    1fac:	a0 91 4a 03 	lds	r26, 0x034A	; 0x80034a <twi_timeout_us+0x2>
    1fb0:	b0 91 4b 03 	lds	r27, 0x034B	; 0x80034b <twi_timeout_us+0x3>
    1fb4:	89 2b       	or	r24, r25
    1fb6:	8a 2b       	or	r24, r26
    1fb8:	8b 2b       	or	r24, r27
    1fba:	c9 f0       	breq	.+50     	; 0x1fee <twi_writeTo+0x7e>
    1fbc:	59 dd       	rcall	.-1358   	; 0x1a70 <micros>
    1fbe:	40 90 48 03 	lds	r4, 0x0348	; 0x800348 <twi_timeout_us>
    1fc2:	50 90 49 03 	lds	r5, 0x0349	; 0x800349 <twi_timeout_us+0x1>
    1fc6:	60 90 4a 03 	lds	r6, 0x034A	; 0x80034a <twi_timeout_us+0x2>
    1fca:	70 90 4b 03 	lds	r7, 0x034B	; 0x80034b <twi_timeout_us+0x3>
    1fce:	dc 01       	movw	r26, r24
    1fd0:	cb 01       	movw	r24, r22
    1fd2:	88 19       	sub	r24, r8
    1fd4:	99 09       	sbc	r25, r9
    1fd6:	aa 09       	sbc	r26, r10
    1fd8:	bb 09       	sbc	r27, r11
    1fda:	48 16       	cp	r4, r24
    1fdc:	59 06       	cpc	r5, r25
    1fde:	6a 06       	cpc	r6, r26
    1fe0:	7b 06       	cpc	r7, r27
    1fe2:	28 f4       	brcc	.+10     	; 0x1fee <twi_writeTo+0x7e>
    1fe4:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <twi_do_reset_on_timeout>
    1fe8:	b9 de       	rcall	.-654    	; 0x1d5c <twi_handleTimeout>
    1fea:	c5 e0       	ldi	r28, 0x05	; 5
    1fec:	c3 c0       	rjmp	.+390    	; 0x2174 <twi_writeTo+0x204>
    1fee:	c0 91 4f 03 	lds	r28, 0x034F	; 0x80034f <twi_state>
    1ff2:	c1 11       	cpse	r28, r1
    1ff4:	d7 cf       	rjmp	.-82     	; 0x1fa4 <twi_writeTo+0x34>
    1ff6:	82 e0       	ldi	r24, 0x02	; 2
    1ff8:	80 93 4f 03 	sts	0x034F, r24	; 0x80034f <twi_state>
    1ffc:	00 93 4d 03 	sts	0x034D, r16	; 0x80034d <twi_sendStop>
    2000:	8f ef       	ldi	r24, 0xFF	; 255
    2002:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <twi_error>
    2006:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <twi_masterBufferIndex>
    200a:	d0 92 20 03 	sts	0x0320, r13	; 0x800320 <twi_masterBufferLength>
    200e:	dd 20       	and	r13, r13
    2010:	79 f0       	breq	.+30     	; 0x2030 <twi_writeTo+0xc0>
    2012:	f7 01       	movw	r30, r14
    2014:	a2 e2       	ldi	r26, 0x22	; 34
    2016:	b3 e0       	ldi	r27, 0x03	; 3
    2018:	6f ef       	ldi	r22, 0xFF	; 255
    201a:	6d 0d       	add	r22, r13
    201c:	70 e0       	ldi	r23, 0x00	; 0
    201e:	6f 5f       	subi	r22, 0xFF	; 255
    2020:	7f 4f       	sbci	r23, 0xFF	; 255
    2022:	6e 0d       	add	r22, r14
    2024:	7f 1d       	adc	r23, r15
    2026:	91 91       	ld	r25, Z+
    2028:	9d 93       	st	X+, r25
    202a:	e6 17       	cp	r30, r22
    202c:	f7 07       	cpc	r31, r23
    202e:	d9 f7       	brne	.-10     	; 0x2026 <twi_writeTo+0xb6>
    2030:	10 92 4e 03 	sts	0x034E, r1	; 0x80034e <twi_slarw>
    2034:	80 91 4e 03 	lds	r24, 0x034E	; 0x80034e <twi_slarw>
    2038:	dd 0f       	add	r29, r29
    203a:	d8 2b       	or	r29, r24
    203c:	d0 93 4e 03 	sts	0x034E, r29	; 0x80034e <twi_slarw>
    2040:	80 91 4c 03 	lds	r24, 0x034C	; 0x80034c <twi_inRepStart>
    2044:	81 30       	cpi	r24, 0x01	; 1
    2046:	09 f0       	breq	.+2      	; 0x204a <twi_writeTo+0xda>
    2048:	40 c0       	rjmp	.+128    	; 0x20ca <twi_writeTo+0x15a>
    204a:	10 92 4c 03 	sts	0x034C, r1	; 0x80034c <twi_inRepStart>
    204e:	10 dd       	rcall	.-1504   	; 0x1a70 <micros>
    2050:	2b 01       	movw	r4, r22
    2052:	3c 01       	movw	r6, r24
    2054:	0f 2e       	mov	r0, r31
    2056:	fb eb       	ldi	r31, 0xBB	; 187
    2058:	ef 2e       	mov	r14, r31
    205a:	f1 2c       	mov	r15, r1
    205c:	f0 2d       	mov	r31, r0
    205e:	0f 2e       	mov	r0, r31
    2060:	fc eb       	ldi	r31, 0xBC	; 188
    2062:	af 2e       	mov	r10, r31
    2064:	b1 2c       	mov	r11, r1
    2066:	f0 2d       	mov	r31, r0
    2068:	80 91 4e 03 	lds	r24, 0x034E	; 0x80034e <twi_slarw>
    206c:	f7 01       	movw	r30, r14
    206e:	80 83       	st	Z, r24
    2070:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <twi_timeout_us>
    2074:	90 91 49 03 	lds	r25, 0x0349	; 0x800349 <twi_timeout_us+0x1>
    2078:	a0 91 4a 03 	lds	r26, 0x034A	; 0x80034a <twi_timeout_us+0x2>
    207c:	b0 91 4b 03 	lds	r27, 0x034B	; 0x80034b <twi_timeout_us+0x3>
    2080:	89 2b       	or	r24, r25
    2082:	8a 2b       	or	r24, r26
    2084:	8b 2b       	or	r24, r27
    2086:	c9 f0       	breq	.+50     	; 0x20ba <twi_writeTo+0x14a>
    2088:	f3 dc       	rcall	.-1562   	; 0x1a70 <micros>
    208a:	20 91 48 03 	lds	r18, 0x0348	; 0x800348 <twi_timeout_us>
    208e:	30 91 49 03 	lds	r19, 0x0349	; 0x800349 <twi_timeout_us+0x1>
    2092:	40 91 4a 03 	lds	r20, 0x034A	; 0x80034a <twi_timeout_us+0x2>
    2096:	50 91 4b 03 	lds	r21, 0x034B	; 0x80034b <twi_timeout_us+0x3>
    209a:	dc 01       	movw	r26, r24
    209c:	cb 01       	movw	r24, r22
    209e:	84 19       	sub	r24, r4
    20a0:	95 09       	sbc	r25, r5
    20a2:	a6 09       	sbc	r26, r6
    20a4:	b7 09       	sbc	r27, r7
    20a6:	28 17       	cp	r18, r24
    20a8:	39 07       	cpc	r19, r25
    20aa:	4a 07       	cpc	r20, r26
    20ac:	5b 07       	cpc	r21, r27
    20ae:	28 f4       	brcc	.+10     	; 0x20ba <twi_writeTo+0x14a>
    20b0:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <twi_do_reset_on_timeout>
    20b4:	53 de       	rcall	.-858    	; 0x1d5c <twi_handleTimeout>
    20b6:	c5 e0       	ldi	r28, 0x05	; 5
    20b8:	5d c0       	rjmp	.+186    	; 0x2174 <twi_writeTo+0x204>
    20ba:	f5 01       	movw	r30, r10
    20bc:	80 81       	ld	r24, Z
    20be:	83 fd       	sbrc	r24, 3
    20c0:	d3 cf       	rjmp	.-90     	; 0x2068 <twi_writeTo+0xf8>
    20c2:	85 ec       	ldi	r24, 0xC5	; 197
    20c4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    20c8:	03 c0       	rjmp	.+6      	; 0x20d0 <twi_writeTo+0x160>
    20ca:	85 ee       	ldi	r24, 0xE5	; 229
    20cc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    20d0:	cf dc       	rcall	.-1634   	; 0x1a70 <micros>
    20d2:	4b 01       	movw	r8, r22
    20d4:	5c 01       	movw	r10, r24
    20d6:	25 c0       	rjmp	.+74     	; 0x2122 <twi_writeTo+0x1b2>
    20d8:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <twi_timeout_us>
    20dc:	90 91 49 03 	lds	r25, 0x0349	; 0x800349 <twi_timeout_us+0x1>
    20e0:	a0 91 4a 03 	lds	r26, 0x034A	; 0x80034a <twi_timeout_us+0x2>
    20e4:	b0 91 4b 03 	lds	r27, 0x034B	; 0x80034b <twi_timeout_us+0x3>
    20e8:	89 2b       	or	r24, r25
    20ea:	8a 2b       	or	r24, r26
    20ec:	8b 2b       	or	r24, r27
    20ee:	59 f1       	breq	.+86     	; 0x2146 <twi_writeTo+0x1d6>
    20f0:	bf dc       	rcall	.-1666   	; 0x1a70 <micros>
    20f2:	40 90 48 03 	lds	r4, 0x0348	; 0x800348 <twi_timeout_us>
    20f6:	50 90 49 03 	lds	r5, 0x0349	; 0x800349 <twi_timeout_us+0x1>
    20fa:	60 90 4a 03 	lds	r6, 0x034A	; 0x80034a <twi_timeout_us+0x2>
    20fe:	70 90 4b 03 	lds	r7, 0x034B	; 0x80034b <twi_timeout_us+0x3>
    2102:	dc 01       	movw	r26, r24
    2104:	cb 01       	movw	r24, r22
    2106:	88 19       	sub	r24, r8
    2108:	99 09       	sbc	r25, r9
    210a:	aa 09       	sbc	r26, r10
    210c:	bb 09       	sbc	r27, r11
    210e:	48 16       	cp	r4, r24
    2110:	59 06       	cpc	r5, r25
    2112:	6a 06       	cpc	r6, r26
    2114:	7b 06       	cpc	r7, r27
    2116:	28 f4       	brcc	.+10     	; 0x2122 <twi_writeTo+0x1b2>
    2118:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <twi_do_reset_on_timeout>
    211c:	1f de       	rcall	.-962    	; 0x1d5c <twi_handleTimeout>
    211e:	c5 e0       	ldi	r28, 0x05	; 5
    2120:	29 c0       	rjmp	.+82     	; 0x2174 <twi_writeTo+0x204>
    2122:	11 23       	and	r17, r17
    2124:	a1 f0       	breq	.+40     	; 0x214e <twi_writeTo+0x1de>
    2126:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <twi_state>
    212a:	82 30       	cpi	r24, 0x02	; 2
    212c:	81 f4       	brne	.+32     	; 0x214e <twi_writeTo+0x1de>
    212e:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <twi_timeout_us>
    2132:	90 91 49 03 	lds	r25, 0x0349	; 0x800349 <twi_timeout_us+0x1>
    2136:	a0 91 4a 03 	lds	r26, 0x034A	; 0x80034a <twi_timeout_us+0x2>
    213a:	b0 91 4b 03 	lds	r27, 0x034B	; 0x80034b <twi_timeout_us+0x3>
    213e:	89 2b       	or	r24, r25
    2140:	8a 2b       	or	r24, r26
    2142:	8b 2b       	or	r24, r27
    2144:	a9 f6       	brne	.-86     	; 0x20f0 <twi_writeTo+0x180>
    2146:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <twi_state>
    214a:	82 30       	cpi	r24, 0x02	; 2
    214c:	29 f2       	breq	.-118    	; 0x20d8 <twi_writeTo+0x168>
    214e:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <twi_error>
    2152:	8f 3f       	cpi	r24, 0xFF	; 255
    2154:	79 f0       	breq	.+30     	; 0x2174 <twi_writeTo+0x204>
    2156:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <twi_error>
    215a:	80 32       	cpi	r24, 0x20	; 32
    215c:	41 f0       	breq	.+16     	; 0x216e <twi_writeTo+0x1fe>
    215e:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <twi_error>
    2162:	80 33       	cpi	r24, 0x30	; 48
    2164:	31 f0       	breq	.+12     	; 0x2172 <twi_writeTo+0x202>
    2166:	c4 e0       	ldi	r28, 0x04	; 4
    2168:	05 c0       	rjmp	.+10     	; 0x2174 <twi_writeTo+0x204>
    216a:	c1 e0       	ldi	r28, 0x01	; 1
    216c:	03 c0       	rjmp	.+6      	; 0x2174 <twi_writeTo+0x204>
    216e:	c2 e0       	ldi	r28, 0x02	; 2
    2170:	01 c0       	rjmp	.+2      	; 0x2174 <twi_writeTo+0x204>
    2172:	c3 e0       	ldi	r28, 0x03	; 3
    2174:	8c 2f       	mov	r24, r28
    2176:	df 91       	pop	r29
    2178:	cf 91       	pop	r28
    217a:	1f 91       	pop	r17
    217c:	0f 91       	pop	r16
    217e:	ff 90       	pop	r15
    2180:	ef 90       	pop	r14
    2182:	df 90       	pop	r13
    2184:	bf 90       	pop	r11
    2186:	af 90       	pop	r10
    2188:	9f 90       	pop	r9
    218a:	8f 90       	pop	r8
    218c:	7f 90       	pop	r7
    218e:	6f 90       	pop	r6
    2190:	5f 90       	pop	r5
    2192:	4f 90       	pop	r4
    2194:	08 95       	ret

00002196 <twi_stop>:
    2196:	85 ed       	ldi	r24, 0xD5	; 213
    2198:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    219c:	40 91 48 03 	lds	r20, 0x0348	; 0x800348 <twi_timeout_us>
    21a0:	50 91 49 03 	lds	r21, 0x0349	; 0x800349 <twi_timeout_us+0x1>
    21a4:	60 91 4a 03 	lds	r22, 0x034A	; 0x80034a <twi_timeout_us+0x2>
    21a8:	70 91 4b 03 	lds	r23, 0x034B	; 0x80034b <twi_timeout_us+0x3>
    21ac:	49 5f       	subi	r20, 0xF9	; 249
    21ae:	5f 4f       	sbci	r21, 0xFF	; 255
    21b0:	6f 4f       	sbci	r22, 0xFF	; 255
    21b2:	7f 4f       	sbci	r23, 0xFF	; 255
    21b4:	68 94       	set
    21b6:	12 f8       	bld	r1, 2
    21b8:	76 95       	lsr	r23
    21ba:	67 95       	ror	r22
    21bc:	57 95       	ror	r21
    21be:	47 95       	ror	r20
    21c0:	16 94       	lsr	r1
    21c2:	d1 f7       	brne	.-12     	; 0x21b8 <twi_stop+0x22>
    21c4:	ec eb       	ldi	r30, 0xBC	; 188
    21c6:	f0 e0       	ldi	r31, 0x00	; 0
    21c8:	1e c0       	rjmp	.+60     	; 0x2206 <__stack+0x7>
    21ca:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <twi_timeout_us>
    21ce:	90 91 49 03 	lds	r25, 0x0349	; 0x800349 <twi_timeout_us+0x1>
    21d2:	a0 91 4a 03 	lds	r26, 0x034A	; 0x80034a <twi_timeout_us+0x2>
    21d6:	b0 91 4b 03 	lds	r27, 0x034B	; 0x80034b <twi_timeout_us+0x3>
    21da:	89 2b       	or	r24, r25
    21dc:	8a 2b       	or	r24, r26
    21de:	8b 2b       	or	r24, r27
    21e0:	91 f0       	breq	.+36     	; 0x2206 <__stack+0x7>
    21e2:	41 15       	cp	r20, r1
    21e4:	51 05       	cpc	r21, r1
    21e6:	61 05       	cpc	r22, r1
    21e8:	71 05       	cpc	r23, r1
    21ea:	49 f0       	breq	.+18     	; 0x21fe <twi_stop+0x68>
    21ec:	8a e2       	ldi	r24, 0x2A	; 42
    21ee:	8a 95       	dec	r24
    21f0:	f1 f7       	brne	.-4      	; 0x21ee <twi_stop+0x58>
    21f2:	00 c0       	rjmp	.+0      	; 0x21f4 <twi_stop+0x5e>
    21f4:	41 50       	subi	r20, 0x01	; 1
    21f6:	51 09       	sbc	r21, r1
    21f8:	61 09       	sbc	r22, r1
    21fa:	71 09       	sbc	r23, r1
    21fc:	04 c0       	rjmp	.+8      	; 0x2206 <__stack+0x7>
    21fe:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <twi_do_reset_on_timeout>
    2202:	ac cd       	rjmp	.-1192   	; 0x1d5c <twi_handleTimeout>
    2204:	08 95       	ret
    2206:	80 81       	ld	r24, Z
    2208:	84 fd       	sbrc	r24, 4
    220a:	df cf       	rjmp	.-66     	; 0x21ca <twi_stop+0x34>
    220c:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <twi_state>
    2210:	08 95       	ret

00002212 <__vector_39>:

ISR(TWI_vect)
{
    2212:	1f 92       	push	r1
    2214:	0f 92       	push	r0
    2216:	0f b6       	in	r0, 0x3f	; 63
    2218:	0f 92       	push	r0
    221a:	11 24       	eor	r1, r1
    221c:	0b b6       	in	r0, 0x3b	; 59
    221e:	0f 92       	push	r0
    2220:	2f 93       	push	r18
    2222:	3f 93       	push	r19
    2224:	4f 93       	push	r20
    2226:	5f 93       	push	r21
    2228:	6f 93       	push	r22
    222a:	7f 93       	push	r23
    222c:	8f 93       	push	r24
    222e:	9f 93       	push	r25
    2230:	af 93       	push	r26
    2232:	bf 93       	push	r27
    2234:	ef 93       	push	r30
    2236:	ff 93       	push	r31
	switch(TW_STATUS){
    2238:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    223c:	88 7f       	andi	r24, 0xF8	; 248
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	89 3c       	cpi	r24, 0xC9	; 201
    2242:	91 05       	cpc	r25, r1
    2244:	08 f0       	brcs	.+2      	; 0x2248 <__vector_39+0x36>
    2246:	ee c0       	rjmp	.+476    	; 0x2424 <__vector_39+0x212>
    2248:	fc 01       	movw	r30, r24
    224a:	88 27       	eor	r24, r24
    224c:	e4 57       	subi	r30, 0x74	; 116
    224e:	ff 4f       	sbci	r31, 0xFF	; 255
    2250:	8f 4f       	sbci	r24, 0xFF	; 255
    2252:	ac c1       	rjmp	.+856    	; 0x25ac <__tablejump2__>
		// All Master
		case TW_START:     // sent start condition
		case TW_REP_START: // sent repeated start condition
			// copy device address and r/w bit to output register and ack
			TWDR = twi_slarw;
    2254:	80 91 4e 03 	lds	r24, 0x034E	; 0x80034e <twi_slarw>
    2258:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    225c:	85 ec       	ldi	r24, 0xC5	; 197
    225e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2262:	e0 c0       	rjmp	.+448    	; 0x2424 <__vector_39+0x212>
		
		// Master Transmitter
		case TW_MT_SLA_ACK:  // slave receiver acked address
		case TW_MT_DATA_ACK: // slave receiver acked data
			// if there is data to send, send it, otherwise stop
			if(twi_masterBufferIndex < twi_masterBufferLength){
    2264:	90 91 21 03 	lds	r25, 0x0321	; 0x800321 <twi_masterBufferIndex>
    2268:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <twi_masterBufferLength>
    226c:	98 17       	cp	r25, r24
    226e:	80 f4       	brcc	.+32     	; 0x2290 <__vector_39+0x7e>
				// copy data to output register and ack
				TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    2270:	e0 91 21 03 	lds	r30, 0x0321	; 0x800321 <twi_masterBufferIndex>
    2274:	81 e0       	ldi	r24, 0x01	; 1
    2276:	8e 0f       	add	r24, r30
    2278:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <twi_masterBufferIndex>
    227c:	f0 e0       	ldi	r31, 0x00	; 0
    227e:	ee 5d       	subi	r30, 0xDE	; 222
    2280:	fc 4f       	sbci	r31, 0xFC	; 252
    2282:	80 81       	ld	r24, Z
    2284:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2288:	85 ec       	ldi	r24, 0xC5	; 197
    228a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    228e:	ca c0       	rjmp	.+404    	; 0x2424 <__vector_39+0x212>
			if(twi_masterBufferIndex < twi_masterBufferLength){
				// copy data to output register and ack
				TWDR = twi_masterBuffer[twi_masterBufferIndex++];
				twi_reply(1); //ack
			}else{
				if (twi_sendStop){
    2290:	80 91 4d 03 	lds	r24, 0x034D	; 0x80034d <twi_sendStop>
    2294:	88 23       	and	r24, r24
					twi_stop();
    2296:	11 f0       	breq	.+4      	; 0x229c <__vector_39+0x8a>
    2298:	7e df       	rcall	.-260    	; 0x2196 <twi_stop>
    229a:	c4 c0       	rjmp	.+392    	; 0x2424 <__vector_39+0x212>
				} else {
					twi_inRepStart = true;	// we're gonna send the START
    229c:	81 e0       	ldi	r24, 0x01	; 1
    229e:	80 93 4c 03 	sts	0x034C, r24	; 0x80034c <twi_inRepStart>
					// don't enable the interrupt. We'll generate the start, but we
					// avoid handling the interrupt until we're in the next transaction,
					// at the point where we would normally issue the start.
					TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    22a2:	84 ea       	ldi	r24, 0xA4	; 164
    22a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
					twi_state = TWI_READY;
    22a8:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <twi_state>
    22ac:	bb c0       	rjmp	.+374    	; 0x2424 <__vector_39+0x212>
				}
			}
		break;
		case TW_MT_SLA_NACK:  // address sent, nack received
			twi_error = TW_MT_SLA_NACK;
    22ae:	80 e2       	ldi	r24, 0x20	; 32
    22b0:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <twi_error>
			twi_stop();
    22b4:	70 df       	rcall	.-288    	; 0x2196 <twi_stop>
		break;
    22b6:	b6 c0       	rjmp	.+364    	; 0x2424 <__vector_39+0x212>
		case TW_MT_DATA_NACK: // data sent, nack received
			twi_error = TW_MT_DATA_NACK;
    22b8:	80 e3       	ldi	r24, 0x30	; 48
    22ba:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <twi_error>
			twi_stop();
    22be:	6b df       	rcall	.-298    	; 0x2196 <twi_stop>
		break;
		case TW_MT_ARB_LOST: // lost bus arbitration
			twi_error = TW_MT_ARB_LOST;
    22c0:	b1 c0       	rjmp	.+354    	; 0x2424 <__vector_39+0x212>
    22c2:	88 e3       	ldi	r24, 0x38	; 56
    22c4:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <twi_error>
			twi_releaseBus();
    22c8:	43 dd       	rcall	.-1402   	; 0x1d50 <twi_releaseBus>
		break;
    22ca:	ac c0       	rjmp	.+344    	; 0x2424 <__vector_39+0x212>
		
		// Master Receiver
		case TW_MR_DATA_ACK: // data received, ack sent
			// put byte into buffer
			twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    22cc:	e0 91 21 03 	lds	r30, 0x0321	; 0x800321 <twi_masterBufferIndex>
    22d0:	81 e0       	ldi	r24, 0x01	; 1
    22d2:	8e 0f       	add	r24, r30
    22d4:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <twi_masterBufferIndex>
    22d8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    22dc:	f0 e0       	ldi	r31, 0x00	; 0
    22de:	ee 5d       	subi	r30, 0xDE	; 222
    22e0:	fc 4f       	sbci	r31, 0xFC	; 252
    22e2:	80 83       	st	Z, r24
			//__attribute__ ((fallthrough));
			/* fall through */
		case TW_MR_SLA_ACK:  // address sent, ack received
			// ack if more bytes are expected, otherwise nack
			if(twi_masterBufferIndex < twi_masterBufferLength){
    22e4:	90 91 21 03 	lds	r25, 0x0321	; 0x800321 <twi_masterBufferIndex>
    22e8:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <twi_masterBufferLength>
    22ec:	98 17       	cp	r25, r24
    22ee:	20 f4       	brcc	.+8      	; 0x22f8 <__vector_39+0xe6>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    22f0:	85 ec       	ldi	r24, 0xC5	; 197
    22f2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    22f6:	96 c0       	rjmp	.+300    	; 0x2424 <__vector_39+0x212>
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    22f8:	85 e8       	ldi	r24, 0x85	; 133
    22fa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    22fe:	92 c0       	rjmp	.+292    	; 0x2424 <__vector_39+0x212>
				twi_reply(0);
			}
		break;
		case TW_MR_DATA_NACK: // data received, nack sent
			// put final byte into buffer
			twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2300:	e0 91 21 03 	lds	r30, 0x0321	; 0x800321 <twi_masterBufferIndex>
    2304:	81 e0       	ldi	r24, 0x01	; 1
    2306:	8e 0f       	add	r24, r30
    2308:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <twi_masterBufferIndex>
    230c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2310:	f0 e0       	ldi	r31, 0x00	; 0
    2312:	ee 5d       	subi	r30, 0xDE	; 222
    2314:	fc 4f       	sbci	r31, 0xFC	; 252
			if (twi_sendStop){
    2316:	80 83       	st	Z, r24
    2318:	80 91 4d 03 	lds	r24, 0x034D	; 0x80034d <twi_sendStop>
    231c:	88 23       	and	r24, r24
				twi_stop();
    231e:	11 f0       	breq	.+4      	; 0x2324 <__vector_39+0x112>
    2320:	3a df       	rcall	.-396    	; 0x2196 <twi_stop>
    2322:	80 c0       	rjmp	.+256    	; 0x2424 <__vector_39+0x212>
			} else {
				twi_inRepStart = true;	// we're gonna send the START
    2324:	81 e0       	ldi	r24, 0x01	; 1
    2326:	80 93 4c 03 	sts	0x034C, r24	; 0x80034c <twi_inRepStart>
				// don't enable the interrupt. We'll generate the start, but we
				// avoid handling the interrupt until we're in the next transaction,
				// at the point where we would normally issue the start.
				TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    232a:	84 ea       	ldi	r24, 0xA4	; 164
    232c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
				twi_state = TWI_READY;
    2330:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <twi_state>
			}
		break;
		case TW_MR_SLA_NACK: // address sent, nack received
			twi_stop();
    2334:	77 c0       	rjmp	.+238    	; 0x2424 <__vector_39+0x212>
    2336:	2f df       	rcall	.-418    	; 0x2196 <twi_stop>
		break;
    2338:	75 c0       	rjmp	.+234    	; 0x2424 <__vector_39+0x212>
		case TW_SR_SLA_ACK:   // addressed, returned ack
		case TW_SR_GCALL_ACK: // addressed generally, returned ack
		case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
		case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
			// enter slave receiver mode
			twi_state = TWI_SRX;
    233a:	83 e0       	ldi	r24, 0x03	; 3
    233c:	80 93 4f 03 	sts	0x034F, r24	; 0x80034f <twi_state>
			// indicate that rx buffer can be overwritten and ack
			twi_rxBufferIndex = 0;
    2340:	10 92 dd 02 	sts	0x02DD, r1	; 0x8002dd <twi_rxBufferIndex>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2344:	85 ec       	ldi	r24, 0xC5	; 197
    2346:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    234a:	6c c0       	rjmp	.+216    	; 0x2424 <__vector_39+0x212>
			twi_reply(1);
		break;
		case TW_SR_DATA_ACK:       // data received, returned ack
		case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
			// if there is still room in the rx buffer
			if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    234c:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <twi_rxBufferIndex>
    2350:	80 32       	cpi	r24, 0x20	; 32
    2352:	80 f4       	brcc	.+32     	; 0x2374 <__vector_39+0x162>
				// put byte in buffer and ack
				twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    2354:	e0 91 dd 02 	lds	r30, 0x02DD	; 0x8002dd <twi_rxBufferIndex>
    2358:	81 e0       	ldi	r24, 0x01	; 1
    235a:	8e 0f       	add	r24, r30
    235c:	80 93 dd 02 	sts	0x02DD, r24	; 0x8002dd <twi_rxBufferIndex>
    2360:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2364:	f0 e0       	ldi	r31, 0x00	; 0
    2366:	e2 52       	subi	r30, 0x22	; 34
    2368:	fd 4f       	sbci	r31, 0xFD	; 253
    236a:	80 83       	st	Z, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    236c:	85 ec       	ldi	r24, 0xC5	; 197
    236e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2372:	58 c0       	rjmp	.+176    	; 0x2424 <__vector_39+0x212>
    2374:	85 e8       	ldi	r24, 0x85	; 133
    2376:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
				twi_reply(0);
			}
		break;
		case TW_SR_STOP: // stop or repeated start condition received
			// ack future responses and leave slave receiver state
			twi_releaseBus();
    237a:	54 c0       	rjmp	.+168    	; 0x2424 <__vector_39+0x212>
    237c:	e9 dc       	rcall	.-1582   	; 0x1d50 <twi_releaseBus>
			// put a null char after data if there's room
			if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    237e:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <twi_rxBufferIndex>
    2382:	80 32       	cpi	r24, 0x20	; 32
    2384:	30 f4       	brcc	.+12     	; 0x2392 <__vector_39+0x180>
				twi_rxBuffer[twi_rxBufferIndex] = '\0';
    2386:	e0 91 dd 02 	lds	r30, 0x02DD	; 0x8002dd <twi_rxBufferIndex>
    238a:	f0 e0       	ldi	r31, 0x00	; 0
    238c:	e2 52       	subi	r30, 0x22	; 34
    238e:	fd 4f       	sbci	r31, 0xFD	; 253
    2390:	10 82       	st	Z, r1
			}
			// callback to user defined callback
			twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    2392:	60 91 dd 02 	lds	r22, 0x02DD	; 0x8002dd <twi_rxBufferIndex>
    2396:	70 e0       	ldi	r23, 0x00	; 0
    2398:	e0 91 42 03 	lds	r30, 0x0342	; 0x800342 <twi_onSlaveReceive>
    239c:	f0 91 43 03 	lds	r31, 0x0343	; 0x800343 <twi_onSlaveReceive+0x1>
    23a0:	8e ed       	ldi	r24, 0xDE	; 222
    23a2:	92 e0       	ldi	r25, 0x02	; 2
    23a4:	19 95       	eicall
			// since we submit rx buffer to "wire" library, we can reset it
			twi_rxBufferIndex = 0;
    23a6:	10 92 dd 02 	sts	0x02DD, r1	; 0x8002dd <twi_rxBufferIndex>
		break;
    23aa:	3c c0       	rjmp	.+120    	; 0x2424 <__vector_39+0x212>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    23ac:	85 e8       	ldi	r24, 0x85	; 133
    23ae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    23b2:	38 c0       	rjmp	.+112    	; 0x2424 <__vector_39+0x212>
		
		// Slave Transmitter
		case TW_ST_SLA_ACK:          // addressed, returned ack
		case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
			// enter slave transmitter mode
			twi_state = TWI_STX;
    23b4:	84 e0       	ldi	r24, 0x04	; 4
    23b6:	80 93 4f 03 	sts	0x034F, r24	; 0x80034f <twi_state>
			// ready the tx buffer index for iteration
			twi_txBufferIndex = 0;
    23ba:	10 92 ff 02 	sts	0x02FF, r1	; 0x8002ff <twi_txBufferIndex>
			// set tx buffer length to be zero, to verify if user changes it
			twi_txBufferLength = 0;
    23be:	10 92 fe 02 	sts	0x02FE, r1	; 0x8002fe <twi_txBufferLength>
			// request for txBuffer to be filled and length to be set
			// note: user must call twi_transmit(bytes, length) to do this
			twi_onSlaveTransmit();
    23c2:	e0 91 44 03 	lds	r30, 0x0344	; 0x800344 <twi_onSlaveTransmit>
    23c6:	f0 91 45 03 	lds	r31, 0x0345	; 0x800345 <twi_onSlaveTransmit+0x1>
    23ca:	19 95       	eicall
			// if they didn't change buffer & length, initialize it
			if(0 == twi_txBufferLength){
    23cc:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <twi_txBufferLength>
    23d0:	81 11       	cpse	r24, r1
    23d2:	05 c0       	rjmp	.+10     	; 0x23de <__vector_39+0x1cc>
				twi_txBufferLength = 1;
    23d4:	81 e0       	ldi	r24, 0x01	; 1
    23d6:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <twi_txBufferLength>
				twi_txBuffer[0] = 0x00;
    23da:	10 92 00 03 	sts	0x0300, r1	; 0x800300 <twi_txBuffer>
			//__attribute__ ((fallthrough));
			/* fall through */
			// transmit first byte from buffer, fall
		case TW_ST_DATA_ACK: // byte sent, ack returned
			// copy data to output register
			TWDR = twi_txBuffer[twi_txBufferIndex++];
    23de:	e0 91 ff 02 	lds	r30, 0x02FF	; 0x8002ff <twi_txBufferIndex>
    23e2:	81 e0       	ldi	r24, 0x01	; 1
    23e4:	8e 0f       	add	r24, r30
    23e6:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <twi_txBufferIndex>
    23ea:	f0 e0       	ldi	r31, 0x00	; 0
    23ec:	e0 50       	subi	r30, 0x00	; 0
    23ee:	fd 4f       	sbci	r31, 0xFD	; 253
    23f0:	80 81       	ld	r24, Z
    23f2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
			// if there is more to send, ack, otherwise nack
			if(twi_txBufferIndex < twi_txBufferLength){
    23f6:	90 91 ff 02 	lds	r25, 0x02FF	; 0x8002ff <twi_txBufferIndex>
    23fa:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <twi_txBufferLength>
    23fe:	98 17       	cp	r25, r24
    2400:	20 f4       	brcc	.+8      	; 0x240a <__vector_39+0x1f8>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2402:	85 ec       	ldi	r24, 0xC5	; 197
    2404:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2408:	0d c0       	rjmp	.+26     	; 0x2424 <__vector_39+0x212>
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    240a:	85 e8       	ldi	r24, 0x85	; 133
    240c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2410:	09 c0       	rjmp	.+18     	; 0x2424 <__vector_39+0x212>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2412:	85 ec       	ldi	r24, 0xC5	; 197
    2414:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
		case TW_ST_DATA_NACK: // received nack, we are done
		case TW_ST_LAST_DATA: // received ack, but we are done already!
			// ack future responses
			twi_reply(1);
			// leave slave receiver state
			twi_state = TWI_READY;
    2418:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <twi_state>

		// All
		case TW_NO_INFO:   // no state information
			break;
		case TW_BUS_ERROR: // bus error, illegal stop/start
			twi_error = TW_BUS_ERROR;
    241c:	03 c0       	rjmp	.+6      	; 0x2424 <__vector_39+0x212>
    241e:	10 92 dc 02 	sts	0x02DC, r1	; 0x8002dc <twi_error>
			twi_stop();
    2422:	b9 de       	rcall	.-654    	; 0x2196 <twi_stop>
			break;
		
	}
    2424:	ff 91       	pop	r31
    2426:	ef 91       	pop	r30
    2428:	bf 91       	pop	r27
    242a:	af 91       	pop	r26
    242c:	9f 91       	pop	r25
    242e:	8f 91       	pop	r24
    2430:	7f 91       	pop	r23
    2432:	6f 91       	pop	r22
    2434:	5f 91       	pop	r21
    2436:	4f 91       	pop	r20
    2438:	3f 91       	pop	r19
    243a:	2f 91       	pop	r18
    243c:	0f 90       	pop	r0
    243e:	0b be       	out	0x3b, r0	; 59
    2440:	0f 90       	pop	r0
    2442:	0f be       	out	0x3f, r0	; 63
    2444:	0f 90       	pop	r0
    2446:	1f 90       	pop	r1
    2448:	18 95       	reti

0000244a <sdDetected>:
    }
}

void sdDetected(void)
{
	LCD_PrintString("SD Detected",0,1);
    244a:	41 e0       	ldi	r20, 0x01	; 1
    244c:	60 e0       	ldi	r22, 0x00	; 0
    244e:	8c e1       	ldi	r24, 0x1C	; 28
    2450:	92 e0       	ldi	r25, 0x02	; 2
    2452:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <LCD_PrintString>
    2456:	08 95       	ret

00002458 <Button1>:
}

void Button1(void)
{
	//char str[] = "Good";
	togglePin(Pin_PK0);
    2458:	89 e5       	ldi	r24, 0x59	; 89
    245a:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <togglePin>
// 	Serial2_write('o');
// 	Serial2_write('o');
// 	Serial2_write('o');
// 	Serial2_write('o');
// 	Serial2_write('d');
	Serial0_print("Good stuff");
    245e:	88 e2       	ldi	r24, 0x28	; 40
    2460:	92 e0       	ldi	r25, 0x02	; 2
    2462:	0c 94 3f 06 	jmp	0xc7e	; 0xc7e <Serial0_print>
    2466:	08 95       	ret

00002468 <Button2>:

}
void Button2(void)
{
	togglePin(Pin_PK1);
    2468:	88 e5       	ldi	r24, 0x58	; 88
    246a:	0c 94 d1 04 	jmp	0x9a2	; 0x9a2 <togglePin>
    246e:	08 95       	ret

00002470 <Button3>:
}
void Button3(void)
{
	togglePin(Pin_PK2);
    2470:	87 e5       	ldi	r24, 0x57	; 87
    2472:	0c 94 d1 04 	jmp	0x9a2	; 0x9a2 <togglePin>
    2476:	08 95       	ret

00002478 <main>:
void LCD_PrintInt(uint16_t n,uint8_t x,uint8_t y);



int main(void)
{
    2478:	cf 93       	push	r28
    247a:	df 93       	push	r29
    247c:	cd b7       	in	r28, 0x3d	; 61
    247e:	de b7       	in	r29, 0x3e	; 62
    2480:	65 97       	sbiw	r28, 0x15	; 21
    2482:	0f b6       	in	r0, 0x3f	; 63
    2484:	f8 94       	cli
    2486:	de bf       	out	0x3e, r29	; 62
    2488:	0f be       	out	0x3f, r0	; 63
    248a:	cd bf       	out	0x3d, r28	; 61
	millis_init();
    248c:	d2 da       	rcall	.-2652   	; 0x1a32 <millis_init>
	pwm_init();
    248e:	dc d8       	rcall	.-3656   	; 0x1648 <pwm_init>
    2490:	0e 94 61 04 	call	0x8c2	; 0x8c2 <adc_init>
	adc_init();
    2494:	46 e0       	ldi	r20, 0x06	; 6
	Serial0_begin(9600, SERIAL_8N1);
    2496:	60 e8       	ldi	r22, 0x80	; 128
    2498:	75 e2       	ldi	r23, 0x25	; 37
    249a:	80 e0       	ldi	r24, 0x00	; 0
    249c:	90 e0       	ldi	r25, 0x00	; 0
    249e:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <Serial0_begin>
    24a2:	0e 94 dd 02 	call	0x5ba	; 0x5ba <lcd_init>
	
	lcd_init();
    24a6:	0e 94 b0 02 	call	0x560	; 0x560 <lcd_clear>
	lcd_clear();
    24aa:	40 e0       	ldi	r20, 0x00	; 0
	LCD_PrintString("MCU TRAINING KIT",0,0);
    24ac:	60 e0       	ldi	r22, 0x00	; 0
    24ae:	83 e3       	ldi	r24, 0x33	; 51
    24b0:	92 e0       	ldi	r25, 0x02	; 2
    24b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <LCD_PrintString>
    24b6:	0e 94 d7 03 	call	0x7ae	; 0x7ae <ClockInit>
	
	ClockInit();
    24ba:	61 e0       	ldi	r22, 0x01	; 1

	//User LEDs
	pinMode(Pin_PK0, OUTPUT);
    24bc:	89 e5       	ldi	r24, 0x59	; 89
    24be:	0e 94 70 04 	call	0x8e0	; 0x8e0 <pinMode>
    24c2:	61 e0       	ldi	r22, 0x01	; 1
	pinMode(Pin_PK1, OUTPUT);
    24c4:	88 e5       	ldi	r24, 0x58	; 88
    24c6:	0e 94 70 04 	call	0x8e0	; 0x8e0 <pinMode>
    24ca:	61 e0       	ldi	r22, 0x01	; 1
	pinMode(Pin_PK2, OUTPUT);
    24cc:	87 e5       	ldi	r24, 0x57	; 87
    24ce:	0e 94 70 04 	call	0x8e0	; 0x8e0 <pinMode>
    24d2:	60 e0       	ldi	r22, 0x00	; 0
	
	//Buttons - Pin change
	pinMode(Pin_PJ2, INPUT);
    24d4:	81 e4       	ldi	r24, 0x41	; 65
    24d6:	0e 94 70 04 	call	0x8e0	; 0x8e0 <pinMode>
    24da:	60 e0       	ldi	r22, 0x00	; 0
	pinMode(Pin_PJ3, INPUT);
    24dc:	82 e4       	ldi	r24, 0x42	; 66
    24de:	0e 94 70 04 	call	0x8e0	; 0x8e0 <pinMode>
    24e2:	60 e0       	ldi	r22, 0x00	; 0
	pinMode(Pin_PJ4, INPUT);
    24e4:	83 e4       	ldi	r24, 0x43	; 67
    24e6:	0e 94 70 04 	call	0x8e0	; 0x8e0 <pinMode>
    24ea:	43 e0       	ldi	r20, 0x03	; 3
	attachPCINT(pinToPCINT(Pin_PJ2), Button1, RISING);
    24ec:	6c e2       	ldi	r22, 0x2C	; 44
    24ee:	72 e1       	ldi	r23, 0x12	; 18
    24f0:	8b e0       	ldi	r24, 0x0B	; 11
    24f2:	0e 94 df 08 	call	0x11be	; 0x11be <attachPinChangeInterrupt>
    24f6:	43 e0       	ldi	r20, 0x03	; 3
	attachPCINT(pinToPCINT(Pin_PJ3), Button2, RISING);
    24f8:	64 e3       	ldi	r22, 0x34	; 52
    24fa:	72 e1       	ldi	r23, 0x12	; 18
    24fc:	8c e0       	ldi	r24, 0x0C	; 12
    24fe:	0e 94 df 08 	call	0x11be	; 0x11be <attachPinChangeInterrupt>
    2502:	43 e0       	ldi	r20, 0x03	; 3
	attachPCINT(pinToPCINT(Pin_PJ4), Button3, RISING);
    2504:	68 e3       	ldi	r22, 0x38	; 56
    2506:	72 e1       	ldi	r23, 0x12	; 18
    2508:	8d e0       	ldi	r24, 0x0D	; 13
    250a:	0e 94 df 08 	call	0x11be	; 0x11be <attachPinChangeInterrupt>
    250e:	43 e0       	ldi	r20, 0x03	; 3
	
	attachInterrupt(EXTERNAL_INT_5,sdDetected, RISING);
    2510:	50 e0       	ldi	r21, 0x00	; 0
    2512:	65 e2       	ldi	r22, 0x25	; 37
    2514:	72 e1       	ldi	r23, 0x12	; 18
    2516:	85 e0       	ldi	r24, 0x05	; 5
    2518:	0e 94 c2 06 	call	0xd84	; 0xd84 <attachInterrupt>
    251c:	6f e3       	ldi	r22, 0x3F	; 63
	
	analogWrite(Pin_PH3,255/4);
    251e:	70 e0       	ldi	r23, 0x00	; 0
    2520:	8f e0       	ldi	r24, 0x0F	; 15
    2522:	d2 d8       	rcall	.-3676   	; 0x16c8 <analogWrite>
    2524:	ce 01       	movw	r24, r28
		LCD_PrintInt(pot_val,4,1);
		delay_ms(50);
		LCD_PrintString("ADC:    ",0,1);//clear line
		*/
		
		GetTimeString(time_string);
    2526:	0b 96       	adiw	r24, 0x0b	; 11
    2528:	0e 94 09 04 	call	0x812	; 0x812 <GetTimeString>
    252c:	41 e0       	ldi	r20, 0x01	; 1
		LCD_PrintString(time_string,2,1);
    252e:	62 e0       	ldi	r22, 0x02	; 2
    2530:	ce 01       	movw	r24, r28
    2532:	0b 96       	adiw	r24, 0x0b	; 11
    2534:	0e 94 79 03 	call	0x6f2	; 0x6f2 <LCD_PrintString>
    2538:	61 e0       	ldi	r22, 0x01	; 1
		{
			_delay_ms(70);
			togglePin(Pin_PK0);
		}
		*/
		lcd_setCursor(0,1);
    253a:	80 e0       	ldi	r24, 0x00	; 0
    253c:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_setCursor>
    2540:	0e 94 54 05 	call	0xaa8	; 0xaa8 <Serial0_available>
		if (Serial0_available())
    2544:	89 2b       	or	r24, r25
    2546:	71 f3       	breq	.-36     	; 0x2524 <main+0xac>
    2548:	68 ee       	ldi	r22, 0xE8	; 232
		{
// 			int r = Serial2_timedRead();
// 			LCD_PrintInt(r,0,1);
// 			Serial2_write(r);

			delay_ms(1000);//wait for all data
    254a:	73 e0       	ldi	r23, 0x03	; 3
    254c:	80 e0       	ldi	r24, 0x00	; 0
    254e:	90 e0       	ldi	r25, 0x00	; 0
    2550:	b5 da       	rcall	.-2710   	; 0x1abc <delay_ms>
    2552:	6a e0       	ldi	r22, 0x0A	; 10
			Serial0_readAllBytes(buf, BUFFER_SIZE);
    2554:	70 e0       	ldi	r23, 0x00	; 0
    2556:	ce 01       	movw	r24, r28
    2558:	01 96       	adiw	r24, 0x01	; 1
    255a:	0e 94 a6 05 	call	0xb4c	; 0xb4c <Serial0_readAllBytes>
    255e:	ce 01       	movw	r24, r28
			Serial0_print(buf);		
    2560:	01 96       	adiw	r24, 0x01	; 1
    2562:	0e 94 3f 06 	call	0xc7e	; 0xc7e <Serial0_print>
    2566:	de cf       	rjmp	.-68     	; 0x2524 <main+0xac>

00002568 <__udivmodsi4>:
    2568:	a1 e2       	ldi	r26, 0x21	; 33
    256a:	1a 2e       	mov	r1, r26
    256c:	aa 1b       	sub	r26, r26
    256e:	bb 1b       	sub	r27, r27
    2570:	fd 01       	movw	r30, r26
    2572:	0d c0       	rjmp	.+26     	; 0x258e <__udivmodsi4_ep>

00002574 <__udivmodsi4_loop>:
    2574:	aa 1f       	adc	r26, r26
    2576:	bb 1f       	adc	r27, r27
    2578:	ee 1f       	adc	r30, r30
    257a:	ff 1f       	adc	r31, r31
    257c:	a2 17       	cp	r26, r18
    257e:	b3 07       	cpc	r27, r19
    2580:	e4 07       	cpc	r30, r20
    2582:	f5 07       	cpc	r31, r21
    2584:	20 f0       	brcs	.+8      	; 0x258e <__udivmodsi4_ep>
    2586:	a2 1b       	sub	r26, r18
    2588:	b3 0b       	sbc	r27, r19
    258a:	e4 0b       	sbc	r30, r20
    258c:	f5 0b       	sbc	r31, r21

0000258e <__udivmodsi4_ep>:
    258e:	66 1f       	adc	r22, r22
    2590:	77 1f       	adc	r23, r23
    2592:	88 1f       	adc	r24, r24
    2594:	99 1f       	adc	r25, r25
    2596:	1a 94       	dec	r1
    2598:	69 f7       	brne	.-38     	; 0x2574 <__udivmodsi4_loop>
    259a:	60 95       	com	r22
    259c:	70 95       	com	r23
    259e:	80 95       	com	r24
    25a0:	90 95       	com	r25
    25a2:	9b 01       	movw	r18, r22
    25a4:	ac 01       	movw	r20, r24
    25a6:	bd 01       	movw	r22, r26
    25a8:	cf 01       	movw	r24, r30
    25aa:	08 95       	ret

000025ac <__tablejump2__>:
    25ac:	ee 0f       	add	r30, r30
    25ae:	ff 1f       	adc	r31, r31
    25b0:	88 1f       	adc	r24, r24
    25b2:	8b bf       	out	0x3b, r24	; 59
    25b4:	07 90       	elpm	r0, Z+
    25b6:	f6 91       	elpm	r31, Z
    25b8:	e0 2d       	mov	r30, r0
    25ba:	19 94       	eijmp

000025bc <_exit>:
    25bc:	f8 94       	cli

000025be <__stop_program>:
    25be:	ff cf       	rjmp	.-2      	; 0x25be <__stop_program>
