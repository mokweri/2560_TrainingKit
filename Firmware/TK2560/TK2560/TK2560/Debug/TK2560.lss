
TK2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  0000032c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002d8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000035c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  0000039c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000013e6  00000000  00000000  0000040c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000e13  00000000  00000000  000017f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005db  00000000  00000000  00002605  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  00002be0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000655  00000000  00000000  00002c64  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000355  00000000  00000000  000032b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  0000360e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	f0 c0       	rjmp	.+480    	; 0x1e2 <__ctors_end>
   2:	00 00       	nop
   4:	f8 c0       	rjmp	.+496    	; 0x1f6 <__bad_interrupt>
   6:	00 00       	nop
   8:	f6 c0       	rjmp	.+492    	; 0x1f6 <__bad_interrupt>
   a:	00 00       	nop
   c:	f4 c0       	rjmp	.+488    	; 0x1f6 <__bad_interrupt>
   e:	00 00       	nop
  10:	f2 c0       	rjmp	.+484    	; 0x1f6 <__bad_interrupt>
  12:	00 00       	nop
  14:	f0 c0       	rjmp	.+480    	; 0x1f6 <__bad_interrupt>
  16:	00 00       	nop
  18:	ee c0       	rjmp	.+476    	; 0x1f6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	ec c0       	rjmp	.+472    	; 0x1f6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	ea c0       	rjmp	.+468    	; 0x1f6 <__bad_interrupt>
  22:	00 00       	nop
  24:	e8 c0       	rjmp	.+464    	; 0x1f6 <__bad_interrupt>
  26:	00 00       	nop
  28:	e6 c0       	rjmp	.+460    	; 0x1f6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	e4 c0       	rjmp	.+456    	; 0x1f6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	e2 c0       	rjmp	.+452    	; 0x1f6 <__bad_interrupt>
  32:	00 00       	nop
  34:	e0 c0       	rjmp	.+448    	; 0x1f6 <__bad_interrupt>
  36:	00 00       	nop
  38:	de c0       	rjmp	.+444    	; 0x1f6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	dc c0       	rjmp	.+440    	; 0x1f6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	da c0       	rjmp	.+436    	; 0x1f6 <__bad_interrupt>
  42:	00 00       	nop
  44:	d8 c0       	rjmp	.+432    	; 0x1f6 <__bad_interrupt>
  46:	00 00       	nop
  48:	d6 c0       	rjmp	.+428    	; 0x1f6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	d4 c0       	rjmp	.+424    	; 0x1f6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	d2 c0       	rjmp	.+420    	; 0x1f6 <__bad_interrupt>
  52:	00 00       	nop
  54:	d0 c0       	rjmp	.+416    	; 0x1f6 <__bad_interrupt>
  56:	00 00       	nop
  58:	ce c0       	rjmp	.+412    	; 0x1f6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	cc c0       	rjmp	.+408    	; 0x1f6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	ca c0       	rjmp	.+404    	; 0x1f6 <__bad_interrupt>
  62:	00 00       	nop
  64:	c8 c0       	rjmp	.+400    	; 0x1f6 <__bad_interrupt>
  66:	00 00       	nop
  68:	c6 c0       	rjmp	.+396    	; 0x1f6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	c4 c0       	rjmp	.+392    	; 0x1f6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	c2 c0       	rjmp	.+388    	; 0x1f6 <__bad_interrupt>
  72:	00 00       	nop
  74:	c0 c0       	rjmp	.+384    	; 0x1f6 <__bad_interrupt>
  76:	00 00       	nop
  78:	be c0       	rjmp	.+380    	; 0x1f6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	bc c0       	rjmp	.+376    	; 0x1f6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	ba c0       	rjmp	.+372    	; 0x1f6 <__bad_interrupt>
  82:	00 00       	nop
  84:	b8 c0       	rjmp	.+368    	; 0x1f6 <__bad_interrupt>
  86:	00 00       	nop
  88:	b6 c0       	rjmp	.+364    	; 0x1f6 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	b4 c0       	rjmp	.+360    	; 0x1f6 <__bad_interrupt>
  8e:	00 00       	nop
  90:	b2 c0       	rjmp	.+356    	; 0x1f6 <__bad_interrupt>
  92:	00 00       	nop
  94:	b0 c0       	rjmp	.+352    	; 0x1f6 <__bad_interrupt>
  96:	00 00       	nop
  98:	ae c0       	rjmp	.+348    	; 0x1f6 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	ac c0       	rjmp	.+344    	; 0x1f6 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	aa c0       	rjmp	.+340    	; 0x1f6 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	a8 c0       	rjmp	.+336    	; 0x1f6 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	a6 c0       	rjmp	.+332    	; 0x1f6 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	a4 c0       	rjmp	.+328    	; 0x1f6 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	a2 c0       	rjmp	.+324    	; 0x1f6 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	a0 c0       	rjmp	.+320    	; 0x1f6 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	9e c0       	rjmp	.+316    	; 0x1f6 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	9c c0       	rjmp	.+312    	; 0x1f6 <__bad_interrupt>
  be:	00 00       	nop
  c0:	9a c0       	rjmp	.+308    	; 0x1f6 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	98 c0       	rjmp	.+304    	; 0x1f6 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	96 c0       	rjmp	.+300    	; 0x1f6 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	94 c0       	rjmp	.+296    	; 0x1f6 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	92 c0       	rjmp	.+292    	; 0x1f6 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	90 c0       	rjmp	.+288    	; 0x1f6 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	8e c0       	rjmp	.+284    	; 0x1f6 <__bad_interrupt>
  da:	00 00       	nop
  dc:	8c c0       	rjmp	.+280    	; 0x1f6 <__bad_interrupt>
  de:	00 00       	nop
  e0:	8a c0       	rjmp	.+276    	; 0x1f6 <__bad_interrupt>
	...

000000e4 <__trampolines_end>:
  e4:	00 20       	and	r0, r0
  e6:	01 02       	muls	r16, r17
  e8:	04 08       	sbc	r0, r4
  ea:	10 20       	and	r1, r0
  ec:	40 80       	ld	r4, Z
  ee:	00 00       	nop
  f0:	01 02       	muls	r16, r17
  f2:	04 08       	sbc	r0, r4
  f4:	10 20       	and	r1, r0
  f6:	40 01       	movw	r8, r0
  f8:	02 04       	cpc	r0, r2
  fa:	08 10       	cpse	r0, r8
  fc:	20 40       	sbci	r18, 0x00	; 0
  fe:	80 80       	ld	r8, Z
 100:	08 10       	cpse	r0, r8
 102:	00 00       	nop
 104:	00 00       	nop
 106:	00 01       	movw	r0, r0
 108:	02 04       	cpc	r0, r2
 10a:	08 10       	cpse	r0, r8
 10c:	20 40       	sbci	r18, 0x00	; 0
 10e:	80 01       	movw	r16, r0
 110:	02 04       	cpc	r0, r2
 112:	08 10       	cpse	r0, r8
 114:	20 40       	sbci	r18, 0x00	; 0
 116:	80 01       	movw	r16, r0
 118:	02 01       	movw	r0, r4
 11a:	02 04       	cpc	r0, r2
 11c:	08 10       	cpse	r0, r8
 11e:	20 40       	sbci	r18, 0x00	; 0
 120:	80 00       	.word	0x0080	; ????
 122:	00 01       	movw	r0, r0
 124:	02 04       	cpc	r0, r2
 126:	08 10       	cpse	r0, r8
 128:	20 40       	sbci	r18, 0x00	; 0
 12a:	04 80       	ldd	r0, Z+4	; 0x04
 12c:	40 20       	and	r4, r0
 12e:	10 08       	sbc	r1, r0
 130:	04 02       	muls	r16, r20
 132:	01 80       	ldd	r0, Z+1	; 0x01
 134:	00 00       	nop
 136:	80 40       	sbci	r24, 0x00	; 0
 138:	20 10       	cpse	r2, r0
 13a:	08 04       	cpc	r0, r8
 13c:	02 01       	movw	r0, r4
 13e:	80 40       	sbci	r24, 0x00	; 0
 140:	20 10       	cpse	r2, r0
 142:	08 04       	cpc	r0, r8
 144:	02 01       	movw	r0, r4
 146:	00 00       	nop
	...

00000149 <pin_to_port_PGM>:
 149:	00 07 05 05 05 05 05 05 05 05 00 00 08 08 08 08     ................
 159:	08 08 08 02 02 02 02 02 02 02 02 08 07 07 00 00     ................
 169:	00 00 00 0c 0c 0c 0c 0c 0c 0c 0c 04 04 04 04 04     ................
 179:	04 04 04 07 07 03 03 03 03 03 03 03 03 00 00 0a     ................
 189:	0a 0a 0a 0a 0a 0a 07 01 01 01 01 01 01 01 01 0a     ................
 199:	00 00 0b 0b 0b 0b 0b 0b 0b 0b 06 06 06 06 06 06     ................
 1a9:	06 06 00 00 00                                      .....

000001ae <port_to_output_PGM>:
 1ae:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
 1be:	02 01 00 00 05 01 08 01 0b 01                       ..........

000001c8 <port_to_ddr_PGM>:
 1c8:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
 1d8:	01 01 00 00 04 01 07 01 0a 01                       ..........

000001e2 <__ctors_end>:
 1e2:	11 24       	eor	r1, r1
 1e4:	1f be       	out	0x3f, r1	; 63
 1e6:	cf ef       	ldi	r28, 0xFF	; 255
 1e8:	d1 e2       	ldi	r29, 0x21	; 33
 1ea:	de bf       	out	0x3e, r29	; 62
 1ec:	cd bf       	out	0x3d, r28	; 61
 1ee:	00 e0       	ldi	r16, 0x00	; 0
 1f0:	0c bf       	out	0x3c, r16	; 60
 1f2:	5b d0       	rcall	.+182    	; 0x2aa <main>
 1f4:	6f c0       	rjmp	.+222    	; 0x2d4 <_exit>

000001f6 <__bad_interrupt>:
 1f6:	04 cf       	rjmp	.-504    	; 0x0 <__vectors>

000001f8 <pinMode>:
		*out &= ~bit;
	} else {
		*out |= bit;
	}
	
	SREG = oldSREG;
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	fc 01       	movw	r30, r24
 200:	ec 51       	subi	r30, 0x1C	; 28
 202:	ff 4f       	sbci	r31, 0xFF	; 255
 204:	24 91       	lpm	r18, Z
 206:	fc 01       	movw	r30, r24
 208:	e7 5b       	subi	r30, 0xB7	; 183
 20a:	fe 4f       	sbci	r31, 0xFE	; 254
 20c:	84 91       	lpm	r24, Z
 20e:	88 23       	and	r24, r24
 210:	79 f1       	breq	.+94     	; 0x270 <pinMode+0x78>
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	88 0f       	add	r24, r24
 216:	99 1f       	adc	r25, r25
 218:	fc 01       	movw	r30, r24
 21a:	e8 53       	subi	r30, 0x38	; 56
 21c:	fe 4f       	sbci	r31, 0xFE	; 254
 21e:	a5 91       	lpm	r26, Z+
 220:	b4 91       	lpm	r27, Z
 222:	fc 01       	movw	r30, r24
 224:	e2 55       	subi	r30, 0x52	; 82
 226:	fe 4f       	sbci	r31, 0xFE	; 254
 228:	c5 91       	lpm	r28, Z+
 22a:	d4 91       	lpm	r29, Z
 22c:	61 11       	cpse	r22, r1
 22e:	0c c0       	rjmp	.+24     	; 0x248 <pinMode+0x50>
 230:	9f b7       	in	r25, 0x3f	; 63
 232:	f8 94       	cli
 234:	8c 91       	ld	r24, X
 236:	e2 2f       	mov	r30, r18
 238:	e0 95       	com	r30
 23a:	8e 23       	and	r24, r30
 23c:	8c 93       	st	X, r24
 23e:	28 81       	ld	r18, Y
 240:	e2 23       	and	r30, r18
 242:	e8 83       	st	Y, r30
 244:	9f bf       	out	0x3f, r25	; 63
 246:	14 c0       	rjmp	.+40     	; 0x270 <pinMode+0x78>
 248:	62 30       	cpi	r22, 0x02	; 2
 24a:	61 f4       	brne	.+24     	; 0x264 <pinMode+0x6c>
 24c:	9f b7       	in	r25, 0x3f	; 63
 24e:	f8 94       	cli
 250:	8c 91       	ld	r24, X
 252:	32 2f       	mov	r19, r18
 254:	30 95       	com	r19
 256:	83 23       	and	r24, r19
 258:	8c 93       	st	X, r24
 25a:	e8 81       	ld	r30, Y
 25c:	e2 2b       	or	r30, r18
 25e:	e8 83       	st	Y, r30
 260:	9f bf       	out	0x3f, r25	; 63
 262:	06 c0       	rjmp	.+12     	; 0x270 <pinMode+0x78>
 264:	8f b7       	in	r24, 0x3f	; 63
 266:	f8 94       	cli
 268:	ec 91       	ld	r30, X
 26a:	e2 2b       	or	r30, r18
 26c:	ec 93       	st	X, r30
 26e:	8f bf       	out	0x3f, r24	; 63
 270:	df 91       	pop	r29
 272:	cf 91       	pop	r28
 274:	08 95       	ret

00000276 <togglePin>:
	
}

void togglePin(uint8_t pin)
{
	uint8_t bit = pinToBitMask(pin);
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	fc 01       	movw	r30, r24
 27a:	ec 51       	subi	r30, 0x1C	; 28
 27c:	ff 4f       	sbci	r31, 0xFF	; 255
 27e:	24 91       	lpm	r18, Z
	uint8_t port = pinToPort(pin);
 280:	fc 01       	movw	r30, r24
 282:	e7 5b       	subi	r30, 0xB7	; 183
 284:	fe 4f       	sbci	r31, 0xFE	; 254
 286:	84 91       	lpm	r24, Z
	volatile uint8_t *out;
	
	if (port == NOT_A_PIN) return;
 288:	88 23       	and	r24, r24
 28a:	71 f0       	breq	.+28     	; 0x2a8 <togglePin+0x32>
	
	out = portOutputRegister(port);
 28c:	e8 2f       	mov	r30, r24
 28e:	f0 e0       	ldi	r31, 0x00	; 0
 290:	ee 0f       	add	r30, r30
 292:	ff 1f       	adc	r31, r31
 294:	e2 55       	subi	r30, 0x52	; 82
 296:	fe 4f       	sbci	r31, 0xFE	; 254
 298:	a5 91       	lpm	r26, Z+
 29a:	b4 91       	lpm	r27, Z
	
	uint8_t oldSREG = SREG;
 29c:	8f b7       	in	r24, 0x3f	; 63
	cli();
 29e:	f8 94       	cli
	
	//toggle
	*out ^= bit;
 2a0:	ec 91       	ld	r30, X
 2a2:	e2 27       	eor	r30, r18
 2a4:	ec 93       	st	X, r30
	
	SREG = oldSREG;
 2a6:	8f bf       	out	0x3f, r24	; 63
 2a8:	08 95       	ret

000002aa <main>:


int main(void)
{
    /* Replace with your application code */
	pinMode(Pin_PK0, OUTPUT);
 2aa:	61 e0       	ldi	r22, 0x01	; 1
 2ac:	89 e5       	ldi	r24, 0x59	; 89
 2ae:	a4 df       	rcall	.-184    	; 0x1f8 <pinMode>
	pinMode(Pin_PK3, OUTPUT);
 2b0:	61 e0       	ldi	r22, 0x01	; 1
 2b2:	86 e5       	ldi	r24, 0x56	; 86
 2b4:	a1 df       	rcall	.-190    	; 0x1f8 <pinMode>
	pinMode(Pin_PJ2, INPUT);
 2b6:	60 e0       	ldi	r22, 0x00	; 0
 2b8:	81 e4       	ldi	r24, 0x41	; 65
		{
			_delay_ms(70);
			togglePin(Pin_PK0);
		}
		*/
		togglePin(Pin_PK3);
 2ba:	9e df       	rcall	.-196    	; 0x1f8 <pinMode>
 2bc:	86 e5       	ldi	r24, 0x56	; 86
 2be:	db df       	rcall	.-74     	; 0x276 <togglePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2c0:	2f e3       	ldi	r18, 0x3F	; 63
 2c2:	8d e0       	ldi	r24, 0x0D	; 13
 2c4:	93 e0       	ldi	r25, 0x03	; 3
 2c6:	21 50       	subi	r18, 0x01	; 1
 2c8:	80 40       	sbci	r24, 0x00	; 0
 2ca:	90 40       	sbci	r25, 0x00	; 0
 2cc:	e1 f7       	brne	.-8      	; 0x2c6 <main+0x1c>
 2ce:	00 c0       	rjmp	.+0      	; 0x2d0 <main+0x26>
 2d0:	00 00       	nop
 2d2:	f4 cf       	rjmp	.-24     	; 0x2bc <main+0x12>

000002d4 <_exit>:
 2d4:	f8 94       	cli

000002d6 <__stop_program>:
 2d6:	ff cf       	rjmp	.-2      	; 0x2d6 <__stop_program>
