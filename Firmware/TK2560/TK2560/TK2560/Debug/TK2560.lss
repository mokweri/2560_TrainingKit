
TK2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800200  000013d6  0000146a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000013d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000007d  0080022e  0080022e  00001498  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001498  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000014c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003a8  00000000  00000000  00001508  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003bb5  00000000  00000000  000018b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001871  00000000  00000000  00005465  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002277  00000000  00000000  00006cd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000aa0  00000000  00000000  00008f50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000011a9  00000000  00000000  000099f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000029be  00000000  00000000  0000ab99  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000350  00000000  00000000  0000d557  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	3d c1       	rjmp	.+634    	; 0x27c <__ctors_end>
       2:	00 00       	nop
       4:	b0 c3       	rjmp	.+1888   	; 0x766 <__vector_1>
       6:	00 00       	nop
       8:	d9 c3       	rjmp	.+1970   	; 0x7bc <__vector_2>
       a:	00 00       	nop
       c:	02 c4       	rjmp	.+2052   	; 0x812 <__vector_3>
       e:	00 00       	nop
      10:	2b c4       	rjmp	.+2134   	; 0x868 <__vector_4>
      12:	00 00       	nop
      14:	54 c4       	rjmp	.+2216   	; 0x8be <__vector_5>
      16:	00 00       	nop
      18:	7d c4       	rjmp	.+2298   	; 0x914 <__vector_6>
      1a:	00 00       	nop
      1c:	a6 c4       	rjmp	.+2380   	; 0x96a <__vector_7>
      1e:	00 00       	nop
      20:	cf c4       	rjmp	.+2462   	; 0x9c0 <__vector_8>
      22:	00 00       	nop
      24:	47 c6       	rjmp	.+3214   	; 0xcb4 <__vector_9>
      26:	00 00       	nop
      28:	bd c6       	rjmp	.+3450   	; 0xda4 <__vector_10>
      2a:	00 00       	nop
      2c:	38 c7       	rjmp	.+3696   	; 0xe9e <__vector_11>
      2e:	00 00       	nop
      30:	46 c1       	rjmp	.+652    	; 0x2be <__bad_interrupt>
      32:	00 00       	nop
      34:	44 c1       	rjmp	.+648    	; 0x2be <__bad_interrupt>
      36:	00 00       	nop
      38:	42 c1       	rjmp	.+644    	; 0x2be <__bad_interrupt>
      3a:	00 00       	nop
      3c:	40 c1       	rjmp	.+640    	; 0x2be <__bad_interrupt>
      3e:	00 00       	nop
      40:	3e c1       	rjmp	.+636    	; 0x2be <__bad_interrupt>
      42:	00 00       	nop
      44:	3c c1       	rjmp	.+632    	; 0x2be <__bad_interrupt>
      46:	00 00       	nop
      48:	3a c1       	rjmp	.+628    	; 0x2be <__bad_interrupt>
      4a:	00 00       	nop
      4c:	38 c1       	rjmp	.+624    	; 0x2be <__bad_interrupt>
      4e:	00 00       	nop
      50:	36 c1       	rjmp	.+620    	; 0x2be <__bad_interrupt>
      52:	00 00       	nop
      54:	34 c1       	rjmp	.+616    	; 0x2be <__bad_interrupt>
      56:	00 00       	nop
      58:	32 c1       	rjmp	.+612    	; 0x2be <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 b1 08 	jmp	0x1162	; 0x1162 <__vector_23>
      60:	2e c1       	rjmp	.+604    	; 0x2be <__bad_interrupt>
      62:	00 00       	nop
      64:	2c c1       	rjmp	.+600    	; 0x2be <__bad_interrupt>
      66:	00 00       	nop
      68:	2a c1       	rjmp	.+596    	; 0x2be <__bad_interrupt>
      6a:	00 00       	nop
      6c:	28 c1       	rjmp	.+592    	; 0x2be <__bad_interrupt>
      6e:	00 00       	nop
      70:	26 c1       	rjmp	.+588    	; 0x2be <__bad_interrupt>
      72:	00 00       	nop
      74:	24 c1       	rjmp	.+584    	; 0x2be <__bad_interrupt>
      76:	00 00       	nop
      78:	22 c1       	rjmp	.+580    	; 0x2be <__bad_interrupt>
      7a:	00 00       	nop
      7c:	20 c1       	rjmp	.+576    	; 0x2be <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 35 09 	jmp	0x126a	; 0x126a <__vector_32>
      84:	1c c1       	rjmp	.+568    	; 0x2be <__bad_interrupt>
      86:	00 00       	nop
      88:	1a c1       	rjmp	.+564    	; 0x2be <__bad_interrupt>
      8a:	00 00       	nop
      8c:	18 c1       	rjmp	.+560    	; 0x2be <__bad_interrupt>
      8e:	00 00       	nop
      90:	16 c1       	rjmp	.+556    	; 0x2be <__bad_interrupt>
      92:	00 00       	nop
      94:	14 c1       	rjmp	.+552    	; 0x2be <__bad_interrupt>
      96:	00 00       	nop
      98:	12 c1       	rjmp	.+548    	; 0x2be <__bad_interrupt>
      9a:	00 00       	nop
      9c:	10 c1       	rjmp	.+544    	; 0x2be <__bad_interrupt>
      9e:	00 00       	nop
      a0:	0e c1       	rjmp	.+540    	; 0x2be <__bad_interrupt>
      a2:	00 00       	nop
      a4:	0c c1       	rjmp	.+536    	; 0x2be <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0a c1       	rjmp	.+532    	; 0x2be <__bad_interrupt>
      aa:	00 00       	nop
      ac:	08 c1       	rjmp	.+528    	; 0x2be <__bad_interrupt>
      ae:	00 00       	nop
      b0:	06 c1       	rjmp	.+524    	; 0x2be <__bad_interrupt>
      b2:	00 00       	nop
      b4:	04 c1       	rjmp	.+520    	; 0x2be <__bad_interrupt>
      b6:	00 00       	nop
      b8:	02 c1       	rjmp	.+516    	; 0x2be <__bad_interrupt>
      ba:	00 00       	nop
      bc:	00 c1       	rjmp	.+512    	; 0x2be <__bad_interrupt>
      be:	00 00       	nop
      c0:	fe c0       	rjmp	.+508    	; 0x2be <__bad_interrupt>
      c2:	00 00       	nop
      c4:	fc c0       	rjmp	.+504    	; 0x2be <__bad_interrupt>
      c6:	00 00       	nop
      c8:	fa c0       	rjmp	.+500    	; 0x2be <__bad_interrupt>
      ca:	00 00       	nop
      cc:	f8 c0       	rjmp	.+496    	; 0x2be <__bad_interrupt>
      ce:	00 00       	nop
      d0:	f6 c0       	rjmp	.+492    	; 0x2be <__bad_interrupt>
      d2:	00 00       	nop
      d4:	f4 c0       	rjmp	.+488    	; 0x2be <__bad_interrupt>
      d6:	00 00       	nop
      d8:	f2 c0       	rjmp	.+484    	; 0x2be <__bad_interrupt>
      da:	00 00       	nop
      dc:	f0 c0       	rjmp	.+480    	; 0x2be <__bad_interrupt>
      de:	00 00       	nop
      e0:	ee c0       	rjmp	.+476    	; 0x2be <__bad_interrupt>
      e2:	00 00       	nop
      e4:	4d 03       	fmul	r20, r21
      e6:	55 03       	mulsu	r21, r21
      e8:	61 03       	mulsu	r22, r17
      ea:	6f 03       	fmul	r22, r23
      ec:	80 03       	fmuls	r16, r16
      ee:	88 03       	fmulsu	r16, r16
      f0:	94 03       	fmuls	r17, r20
      f2:	a2 03       	fmuls	r18, r18
      f4:	fe 07       	cpc	r31, r30
      f6:	03 08       	sbc	r0, r3
      f8:	08 08       	sbc	r0, r8
      fa:	12 08       	sbc	r1, r2
      fc:	1c 08       	sbc	r1, r12
      fe:	90 08       	sbc	r9, r0
     100:	26 08       	sbc	r2, r6
     102:	2e 08       	sbc	r2, r14
     104:	36 08       	sbc	r3, r6
     106:	40 08       	sbc	r4, r0
     108:	4a 08       	sbc	r4, r10
     10a:	54 08       	sbc	r5, r4
     10c:	5e 08       	sbc	r5, r14
     10e:	68 08       	sbc	r6, r8
     110:	90 08       	sbc	r9, r0
     112:	72 08       	sbc	r7, r2
     114:	7c 08       	sbc	r7, r12
     116:	86 08       	sbc	r8, r6

00000118 <__trampolines_end>:
     118:	00 02       	muls	r16, r16
     11a:	00 00       	nop
     11c:	00 09       	sbc	r16, r0
     11e:	0a 0b       	sbc	r16, r26
     120:	00 00       	nop
     122:	00 00       	nop
     124:	00 00       	nop
     126:	00 0c       	add	r0, r0
     128:	0d 0e       	add	r0, r29
     12a:	08 00       	.word	0x0008	; ????
     12c:	00 00       	nop
     12e:	00 07       	cpc	r16, r16
     130:	03 04       	cpc	r0, r3
     132:	01 00       	.word	0x0001	; ????
	...
     13c:	00 00       	nop
     13e:	10 11       	cpse	r17, r0
     140:	12 00       	.word	0x0012	; ????
	...

0000017d <pin_to_bit_mask_PGM>:
     17d:	00 20 01 02 04 08 10 20 40 80 00 00 01 02 04 08     . ..... @.......
     18d:	10 20 40 01 02 04 08 10 20 40 80 80 08 10 00 00     . @..... @......
     19d:	00 00 00 01 02 04 08 10 20 40 80 01 02 04 08 10     ........ @......
     1ad:	20 40 80 01 02 01 02 04 08 10 20 40 80 00 00 01      @........ @....
     1bd:	02 04 08 10 20 40 04 80 40 20 10 08 04 02 01 80     .... @..@ ......
     1cd:	00 00 80 40 20 10 08 04 02 01 80 40 20 10 08 04     ...@ ......@ ...
     1dd:	02 01 00 00 00                                      .....

000001e2 <pin_to_port_PGM>:
     1e2:	00 07 05 05 05 05 05 05 05 05 00 00 08 08 08 08     ................
     1f2:	08 08 08 02 02 02 02 02 02 02 02 08 07 07 00 00     ................
     202:	00 00 00 0c 0c 0c 0c 0c 0c 0c 0c 04 04 04 04 04     ................
     212:	04 04 04 07 07 03 03 03 03 03 03 03 03 00 00 0a     ................
     222:	0a 0a 0a 0a 0a 0a 07 01 01 01 01 01 01 01 01 0a     ................
     232:	00 00 0b 0b 0b 0b 0b 0b 0b 0b 06 06 06 06 06 06     ................
     242:	06 06 00 00 00                                      .....

00000247 <port_to_output_PGM>:
     247:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     257:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000261 <port_to_ddr_PGM>:
     261:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     271:	01 01 00 00 04 01 07 01 0a 01 00                    ...........

0000027c <__ctors_end>:
     27c:	11 24       	eor	r1, r1
     27e:	1f be       	out	0x3f, r1	; 63
     280:	cf ef       	ldi	r28, 0xFF	; 255
     282:	d1 e2       	ldi	r29, 0x21	; 33
     284:	de bf       	out	0x3e, r29	; 62
     286:	cd bf       	out	0x3d, r28	; 61
     288:	00 e0       	ldi	r16, 0x00	; 0
     28a:	0c bf       	out	0x3c, r16	; 60

0000028c <__do_copy_data>:
     28c:	12 e0       	ldi	r17, 0x02	; 2
     28e:	a0 e0       	ldi	r26, 0x00	; 0
     290:	b2 e0       	ldi	r27, 0x02	; 2
     292:	e6 ed       	ldi	r30, 0xD6	; 214
     294:	f3 e1       	ldi	r31, 0x13	; 19
     296:	00 e0       	ldi	r16, 0x00	; 0
     298:	0b bf       	out	0x3b, r16	; 59
     29a:	02 c0       	rjmp	.+4      	; 0x2a0 <__do_copy_data+0x14>
     29c:	07 90       	elpm	r0, Z+
     29e:	0d 92       	st	X+, r0
     2a0:	ae 32       	cpi	r26, 0x2E	; 46
     2a2:	b1 07       	cpc	r27, r17
     2a4:	d9 f7       	brne	.-10     	; 0x29c <__do_copy_data+0x10>

000002a6 <__do_clear_bss>:
     2a6:	22 e0       	ldi	r18, 0x02	; 2
     2a8:	ae e2       	ldi	r26, 0x2E	; 46
     2aa:	b2 e0       	ldi	r27, 0x02	; 2
     2ac:	01 c0       	rjmp	.+2      	; 0x2b0 <.do_clear_bss_start>

000002ae <.do_clear_bss_loop>:
     2ae:	1d 92       	st	X+, r1

000002b0 <.do_clear_bss_start>:
     2b0:	ab 3a       	cpi	r26, 0xAB	; 171
     2b2:	b2 07       	cpc	r27, r18
     2b4:	e1 f7       	brne	.-8      	; 0x2ae <.do_clear_bss_loop>
     2b6:	0e 94 ac 09 	call	0x1358	; 0x1358 <main>
     2ba:	0c 94 e9 09 	jmp	0x13d2	; 0x13d2 <_exit>

000002be <__bad_interrupt>:
     2be:	a0 ce       	rjmp	.-704    	; 0x0 <__vectors>

000002c0 <pulseEnable>:
	location &= 0x7; // we only have 8 locations 0-7
	command(LCD_SETCGRAMADDR | (location << 3));
	for (int i=0; i<8; i++) {
		write(charmap[i]);
	}
}
     2c0:	15 98       	cbi	0x02, 5	; 2
     2c2:	85 e0       	ldi	r24, 0x05	; 5
     2c4:	8a 95       	dec	r24
     2c6:	f1 f7       	brne	.-4      	; 0x2c4 <pulseEnable+0x4>
     2c8:	00 00       	nop
     2ca:	15 9a       	sbi	0x02, 5	; 2
     2cc:	95 e0       	ldi	r25, 0x05	; 5
     2ce:	9a 95       	dec	r25
     2d0:	f1 f7       	brne	.-4      	; 0x2ce <pulseEnable+0xe>
     2d2:	00 00       	nop
     2d4:	15 98       	cbi	0x02, 5	; 2
     2d6:	8f e8       	ldi	r24, 0x8F	; 143
     2d8:	91 e0       	ldi	r25, 0x01	; 1
     2da:	01 97       	sbiw	r24, 0x01	; 1
     2dc:	f1 f7       	brne	.-4      	; 0x2da <pulseEnable+0x1a>
     2de:	00 c0       	rjmp	.+0      	; 0x2e0 <pulseEnable+0x20>
     2e0:	00 00       	nop
     2e2:	08 95       	ret

000002e4 <write4bits>:
     2e4:	cf 93       	push	r28
     2e6:	df 93       	push	r29
     2e8:	e6 e4       	ldi	r30, 0x46	; 70
     2ea:	f2 e0       	ldi	r31, 0x02	; 2
     2ec:	20 e0       	ldi	r18, 0x00	; 0
     2ee:	30 e0       	ldi	r19, 0x00	; 0
     2f0:	a8 2f       	mov	r26, r24
     2f2:	b0 e0       	ldi	r27, 0x00	; 0
     2f4:	c1 e0       	ldi	r28, 0x01	; 1
     2f6:	d0 e0       	ldi	r29, 0x00	; 0
     2f8:	ad 01       	movw	r20, r26
     2fa:	02 2e       	mov	r0, r18
     2fc:	02 c0       	rjmp	.+4      	; 0x302 <write4bits+0x1e>
     2fe:	55 95       	asr	r21
     300:	47 95       	ror	r20
     302:	0a 94       	dec	r0
     304:	e2 f7       	brpl	.-8      	; 0x2fe <write4bits+0x1a>
     306:	40 ff       	sbrs	r20, 0
     308:	0b c0       	rjmp	.+22     	; 0x320 <write4bits+0x3c>
     30a:	82 b1       	in	r24, 0x02	; 2
     30c:	ae 01       	movw	r20, r28
     30e:	00 80       	ld	r0, Z
     310:	02 c0       	rjmp	.+4      	; 0x316 <write4bits+0x32>
     312:	44 0f       	add	r20, r20
     314:	55 1f       	adc	r21, r21
     316:	0a 94       	dec	r0
     318:	e2 f7       	brpl	.-8      	; 0x312 <write4bits+0x2e>
     31a:	48 2b       	or	r20, r24
     31c:	42 b9       	out	0x02, r20	; 2
     31e:	0c c0       	rjmp	.+24     	; 0x338 <write4bits+0x54>
     320:	42 b1       	in	r20, 0x02	; 2
     322:	be 01       	movw	r22, r28
     324:	00 80       	ld	r0, Z
     326:	02 c0       	rjmp	.+4      	; 0x32c <write4bits+0x48>
     328:	66 0f       	add	r22, r22
     32a:	77 1f       	adc	r23, r23
     32c:	0a 94       	dec	r0
     32e:	e2 f7       	brpl	.-8      	; 0x328 <write4bits+0x44>
     330:	96 2f       	mov	r25, r22
     332:	90 95       	com	r25
     334:	94 23       	and	r25, r20
     336:	92 b9       	out	0x02, r25	; 2
     338:	2f 5f       	subi	r18, 0xFF	; 255
     33a:	3f 4f       	sbci	r19, 0xFF	; 255
     33c:	31 96       	adiw	r30, 0x01	; 1
     33e:	24 30       	cpi	r18, 0x04	; 4
     340:	31 05       	cpc	r19, r1
     342:	d1 f6       	brne	.-76     	; 0x2f8 <write4bits+0x14>
     344:	bd df       	rcall	.-134    	; 0x2c0 <pulseEnable>
     346:	df 91       	pop	r29
     348:	cf 91       	pop	r28
     34a:	08 95       	ret

0000034c <write8bits>:
     34c:	86 95       	lsr	r24
     34e:	81 70       	andi	r24, 0x01	; 1
     350:	e6 e4       	ldi	r30, 0x46	; 70
     352:	f2 e0       	ldi	r31, 0x02	; 2
     354:	6e e4       	ldi	r22, 0x4E	; 78
     356:	72 e0       	ldi	r23, 0x02	; 2
     358:	a1 e0       	ldi	r26, 0x01	; 1
     35a:	b0 e0       	ldi	r27, 0x00	; 0
     35c:	88 23       	and	r24, r24
     35e:	59 f0       	breq	.+22     	; 0x376 <write8bits+0x2a>
     360:	92 b1       	in	r25, 0x02	; 2
     362:	9d 01       	movw	r18, r26
     364:	00 80       	ld	r0, Z
     366:	02 c0       	rjmp	.+4      	; 0x36c <write8bits+0x20>
     368:	22 0f       	add	r18, r18
     36a:	33 1f       	adc	r19, r19
     36c:	0a 94       	dec	r0
     36e:	e2 f7       	brpl	.-8      	; 0x368 <write8bits+0x1c>
     370:	29 2b       	or	r18, r25
     372:	22 b9       	out	0x02, r18	; 2
     374:	0c c0       	rjmp	.+24     	; 0x38e <write8bits+0x42>
     376:	22 b1       	in	r18, 0x02	; 2
     378:	ad 01       	movw	r20, r26
     37a:	00 80       	ld	r0, Z
     37c:	02 c0       	rjmp	.+4      	; 0x382 <write8bits+0x36>
     37e:	44 0f       	add	r20, r20
     380:	55 1f       	adc	r21, r21
     382:	0a 94       	dec	r0
     384:	e2 f7       	brpl	.-8      	; 0x37e <write8bits+0x32>
     386:	94 2f       	mov	r25, r20
     388:	90 95       	com	r25
     38a:	92 23       	and	r25, r18
     38c:	92 b9       	out	0x02, r25	; 2
     38e:	31 96       	adiw	r30, 0x01	; 1
     390:	e6 17       	cp	r30, r22
     392:	f7 07       	cpc	r31, r23
     394:	19 f7       	brne	.-58     	; 0x35c <write8bits+0x10>
     396:	94 cf       	rjmp	.-216    	; 0x2c0 <pulseEnable>
     398:	08 95       	ret

0000039a <send>:
     39a:	cf 93       	push	r28
     39c:	c8 2f       	mov	r28, r24
     39e:	66 23       	and	r22, r22
     3a0:	11 f0       	breq	.+4      	; 0x3a6 <send+0xc>
     3a2:	17 9a       	sbi	0x02, 7	; 2
     3a4:	01 c0       	rjmp	.+2      	; 0x3a8 <send+0xe>
     3a6:	17 98       	cbi	0x02, 7	; 2
     3a8:	16 98       	cbi	0x02, 6	; 2
     3aa:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <_displayfunction>
     3ae:	84 ff       	sbrs	r24, 4
     3b0:	03 c0       	rjmp	.+6      	; 0x3b8 <send+0x1e>
     3b2:	8c 2f       	mov	r24, r28
     3b4:	cb df       	rcall	.-106    	; 0x34c <write8bits>
     3b6:	06 c0       	rjmp	.+12     	; 0x3c4 <send+0x2a>
     3b8:	8c 2f       	mov	r24, r28
     3ba:	82 95       	swap	r24
     3bc:	8f 70       	andi	r24, 0x0F	; 15
     3be:	92 df       	rcall	.-220    	; 0x2e4 <write4bits>
     3c0:	8c 2f       	mov	r24, r28
     3c2:	90 df       	rcall	.-224    	; 0x2e4 <write4bits>
     3c4:	cf 91       	pop	r28
     3c6:	08 95       	ret

000003c8 <command>:
     3c8:	60 e0       	ldi	r22, 0x00	; 0
     3ca:	e7 cf       	rjmp	.-50     	; 0x39a <send>
     3cc:	08 95       	ret

000003ce <lcd_clear>:
     3ce:	81 e0       	ldi	r24, 0x01	; 1
     3d0:	fb df       	rcall	.-10     	; 0x3c8 <command>
     3d2:	8f e3       	ldi	r24, 0x3F	; 63
     3d4:	9f e1       	ldi	r25, 0x1F	; 31
     3d6:	01 97       	sbiw	r24, 0x01	; 1
     3d8:	f1 f7       	brne	.-4      	; 0x3d6 <lcd_clear+0x8>
     3da:	00 c0       	rjmp	.+0      	; 0x3dc <lcd_clear+0xe>
     3dc:	00 00       	nop
     3de:	08 95       	ret

000003e0 <lcd_setCursor>:
     3e0:	e0 e4       	ldi	r30, 0x40	; 64
     3e2:	f2 e0       	ldi	r31, 0x02	; 2
     3e4:	10 82       	st	Z, r1
     3e6:	90 e4       	ldi	r25, 0x40	; 64
     3e8:	91 83       	std	Z+1, r25	; 0x01
     3ea:	94 e1       	ldi	r25, 0x14	; 20
     3ec:	92 83       	std	Z+2, r25	; 0x02
     3ee:	94 e5       	ldi	r25, 0x54	; 84
     3f0:	93 83       	std	Z+3, r25	; 0x03
     3f2:	64 30       	cpi	r22, 0x04	; 4
     3f4:	08 f0       	brcs	.+2      	; 0x3f8 <lcd_setCursor+0x18>
     3f6:	63 e0       	ldi	r22, 0x03	; 3
     3f8:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <_numlines>
     3fc:	69 17       	cp	r22, r25
     3fe:	10 f0       	brcs	.+4      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     400:	6f ef       	ldi	r22, 0xFF	; 255
     402:	69 0f       	add	r22, r25
     404:	e6 2f       	mov	r30, r22
     406:	f0 e0       	ldi	r31, 0x00	; 0
     408:	e0 5c       	subi	r30, 0xC0	; 192
     40a:	fd 4f       	sbci	r31, 0xFD	; 253
     40c:	90 81       	ld	r25, Z
     40e:	89 0f       	add	r24, r25
     410:	80 68       	ori	r24, 0x80	; 128
     412:	da cf       	rjmp	.-76     	; 0x3c8 <command>
     414:	08 95       	ret

00000416 <lcd_display_on>:
     416:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <_displaycontrol>
     41a:	98 2f       	mov	r25, r24
     41c:	94 60       	ori	r25, 0x04	; 4
     41e:	90 93 44 02 	sts	0x0244, r25	; 0x800244 <_displaycontrol>
     422:	8c 60       	ori	r24, 0x0C	; 12
     424:	d1 cf       	rjmp	.-94     	; 0x3c8 <command>
     426:	08 95       	ret

00000428 <lcd_init>:
     428:	cf 93       	push	r28
     42a:	e6 e4       	ldi	r30, 0x46	; 70
     42c:	f2 e0       	ldi	r31, 0x02	; 2
     42e:	83 e0       	ldi	r24, 0x03	; 3
     430:	80 83       	st	Z, r24
     432:	82 e0       	ldi	r24, 0x02	; 2
     434:	81 83       	std	Z+1, r24	; 0x01
     436:	91 e0       	ldi	r25, 0x01	; 1
     438:	92 83       	std	Z+2, r25	; 0x02
     43a:	13 82       	std	Z+3, r1	; 0x03
     43c:	14 82       	std	Z+4, r1	; 0x04
     43e:	15 82       	std	Z+5, r1	; 0x05
     440:	16 82       	std	Z+6, r1	; 0x06
     442:	17 82       	std	Z+7, r1	; 0x07
     444:	98 e0       	ldi	r25, 0x08	; 8
     446:	90 93 4f 02 	sts	0x024F, r25	; 0x80024f <_displayfunction>
     44a:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <_numlines>
     44e:	0f 9a       	sbi	0x01, 7	; 1
     450:	0e 9a       	sbi	0x01, 6	; 1
     452:	0d 9a       	sbi	0x01, 5	; 1
     454:	0c 9a       	sbi	0x01, 4	; 1
     456:	14 9a       	sbi	0x02, 4	; 2
     458:	20 e0       	ldi	r18, 0x00	; 0
     45a:	30 e0       	ldi	r19, 0x00	; 0
     45c:	c8 e0       	ldi	r28, 0x08	; 8
     45e:	b0 e0       	ldi	r27, 0x00	; 0
     460:	a4 e0       	ldi	r26, 0x04	; 4
     462:	50 e0       	ldi	r21, 0x00	; 0
     464:	61 e0       	ldi	r22, 0x01	; 1
     466:	70 e0       	ldi	r23, 0x00	; 0
     468:	0c c0       	rjmp	.+24     	; 0x482 <lcd_init+0x5a>
     46a:	41 b1       	in	r20, 0x01	; 1
     46c:	cb 01       	movw	r24, r22
     46e:	01 90       	ld	r0, Z+
     470:	02 c0       	rjmp	.+4      	; 0x476 <lcd_init+0x4e>
     472:	88 0f       	add	r24, r24
     474:	99 1f       	adc	r25, r25
     476:	0a 94       	dec	r0
     478:	e2 f7       	brpl	.-8      	; 0x472 <lcd_init+0x4a>
     47a:	84 2b       	or	r24, r20
     47c:	81 b9       	out	0x01, r24	; 1
     47e:	2f 5f       	subi	r18, 0xFF	; 255
     480:	3f 4f       	sbci	r19, 0xFF	; 255
     482:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <_displayfunction>
     486:	84 fd       	sbrc	r24, 4
     488:	03 c0       	rjmp	.+6      	; 0x490 <lcd_init+0x68>
     48a:	8a 2f       	mov	r24, r26
     48c:	95 2f       	mov	r25, r21
     48e:	02 c0       	rjmp	.+4      	; 0x494 <lcd_init+0x6c>
     490:	8c 2f       	mov	r24, r28
     492:	9b 2f       	mov	r25, r27
     494:	28 17       	cp	r18, r24
     496:	39 07       	cpc	r19, r25
     498:	44 f3       	brlt	.-48     	; 0x46a <lcd_init+0x42>
     49a:	2f ef       	ldi	r18, 0xFF	; 255
     49c:	80 e7       	ldi	r24, 0x70	; 112
     49e:	92 e0       	ldi	r25, 0x02	; 2
     4a0:	21 50       	subi	r18, 0x01	; 1
     4a2:	80 40       	sbci	r24, 0x00	; 0
     4a4:	90 40       	sbci	r25, 0x00	; 0
     4a6:	e1 f7       	brne	.-8      	; 0x4a0 <lcd_init+0x78>
     4a8:	00 c0       	rjmp	.+0      	; 0x4aa <lcd_init+0x82>
     4aa:	00 00       	nop
     4ac:	17 98       	cbi	0x02, 7	; 2
     4ae:	15 98       	cbi	0x02, 5	; 2
     4b0:	16 98       	cbi	0x02, 6	; 2
     4b2:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <_displayfunction>
     4b6:	84 fd       	sbrc	r24, 4
     4b8:	1b c0       	rjmp	.+54     	; 0x4f0 <lcd_init+0xc8>
     4ba:	83 e0       	ldi	r24, 0x03	; 3
     4bc:	13 df       	rcall	.-474    	; 0x2e4 <write4bits>
     4be:	8f e4       	ldi	r24, 0x4F	; 79
     4c0:	96 e4       	ldi	r25, 0x46	; 70
     4c2:	01 97       	sbiw	r24, 0x01	; 1
     4c4:	f1 f7       	brne	.-4      	; 0x4c2 <lcd_init+0x9a>
     4c6:	00 c0       	rjmp	.+0      	; 0x4c8 <lcd_init+0xa0>
     4c8:	00 00       	nop
     4ca:	83 e0       	ldi	r24, 0x03	; 3
     4cc:	0b df       	rcall	.-490    	; 0x2e4 <write4bits>
     4ce:	8f e4       	ldi	r24, 0x4F	; 79
     4d0:	96 e4       	ldi	r25, 0x46	; 70
     4d2:	01 97       	sbiw	r24, 0x01	; 1
     4d4:	f1 f7       	brne	.-4      	; 0x4d2 <lcd_init+0xaa>
     4d6:	00 c0       	rjmp	.+0      	; 0x4d8 <lcd_init+0xb0>
     4d8:	00 00       	nop
     4da:	83 e0       	ldi	r24, 0x03	; 3
     4dc:	03 df       	rcall	.-506    	; 0x2e4 <write4bits>
     4de:	87 e5       	ldi	r24, 0x57	; 87
     4e0:	92 e0       	ldi	r25, 0x02	; 2
     4e2:	01 97       	sbiw	r24, 0x01	; 1
     4e4:	f1 f7       	brne	.-4      	; 0x4e2 <lcd_init+0xba>
     4e6:	00 c0       	rjmp	.+0      	; 0x4e8 <lcd_init+0xc0>
     4e8:	00 00       	nop
     4ea:	82 e0       	ldi	r24, 0x02	; 2
     4ec:	fb de       	rcall	.-522    	; 0x2e4 <write4bits>
     4ee:	16 c0       	rjmp	.+44     	; 0x51c <lcd_init+0xf4>
     4f0:	80 62       	ori	r24, 0x20	; 32
     4f2:	6a df       	rcall	.-300    	; 0x3c8 <command>
     4f4:	8f e4       	ldi	r24, 0x4F	; 79
     4f6:	96 e4       	ldi	r25, 0x46	; 70
     4f8:	01 97       	sbiw	r24, 0x01	; 1
     4fa:	f1 f7       	brne	.-4      	; 0x4f8 <lcd_init+0xd0>
     4fc:	00 c0       	rjmp	.+0      	; 0x4fe <lcd_init+0xd6>
     4fe:	00 00       	nop
     500:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <_displayfunction>
     504:	80 62       	ori	r24, 0x20	; 32
     506:	60 df       	rcall	.-320    	; 0x3c8 <command>
     508:	87 e5       	ldi	r24, 0x57	; 87
     50a:	92 e0       	ldi	r25, 0x02	; 2
     50c:	01 97       	sbiw	r24, 0x01	; 1
     50e:	f1 f7       	brne	.-4      	; 0x50c <lcd_init+0xe4>
     510:	00 c0       	rjmp	.+0      	; 0x512 <lcd_init+0xea>
     512:	00 00       	nop
     514:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <_displayfunction>
     518:	80 62       	ori	r24, 0x20	; 32
     51a:	56 df       	rcall	.-340    	; 0x3c8 <command>
     51c:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <_displayfunction>
     520:	80 62       	ori	r24, 0x20	; 32
     522:	52 df       	rcall	.-348    	; 0x3c8 <command>
     524:	84 e0       	ldi	r24, 0x04	; 4
     526:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <_displaycontrol>
     52a:	75 df       	rcall	.-278    	; 0x416 <lcd_display_on>
     52c:	50 df       	rcall	.-352    	; 0x3ce <lcd_clear>
     52e:	82 e0       	ldi	r24, 0x02	; 2
     530:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <_displaymode>
     534:	86 e0       	ldi	r24, 0x06	; 6
     536:	48 df       	rcall	.-368    	; 0x3c8 <command>
     538:	cf 91       	pop	r28
     53a:	08 95       	ret

0000053c <write>:
     53c:	61 e0       	ldi	r22, 0x01	; 1
     53e:	2d df       	rcall	.-422    	; 0x39a <send>
     540:	81 e0       	ldi	r24, 0x01	; 1
     542:	08 95       	ret

00000544 <lcd_puts>:
	}
	pulseEnable();
}

//------Print------------
void lcd_puts(char *string) {
     544:	cf 93       	push	r28
     546:	df 93       	push	r29
     548:	ec 01       	movw	r28, r24
	for (char *it = string; *it; it++) {
     54a:	88 81       	ld	r24, Y
     54c:	88 23       	and	r24, r24
     54e:	29 f0       	breq	.+10     	; 0x55a <lcd_puts+0x16>
     550:	21 96       	adiw	r28, 0x01	; 1
		write(*it);
     552:	f4 df       	rcall	.-24     	; 0x53c <write>
	pulseEnable();
}

//------Print------------
void lcd_puts(char *string) {
	for (char *it = string; *it; it++) {
     554:	89 91       	ld	r24, Y+
     556:	81 11       	cpse	r24, r1
     558:	fc cf       	rjmp	.-8      	; 0x552 <lcd_puts+0xe>
		write(*it);
	}
}
     55a:	df 91       	pop	r29
     55c:	cf 91       	pop	r28
     55e:	08 95       	ret

00000560 <LCD_PrintString>:

void LCD_PrintString(char *string, uint8_t x, uint8_t y)
{
     560:	cf 93       	push	r28
     562:	df 93       	push	r29
     564:	ec 01       	movw	r28, r24
     566:	86 2f       	mov	r24, r22
	lcd_setCursor(x,y);
     568:	64 2f       	mov	r22, r20
     56a:	3a df       	rcall	.-396    	; 0x3e0 <lcd_setCursor>
	lcd_puts(string);
     56c:	ce 01       	movw	r24, r28
     56e:	ea df       	rcall	.-44     	; 0x544 <lcd_puts>
}
     570:	df 91       	pop	r29
     572:	cf 91       	pop	r28
     574:	08 95       	ret

00000576 <pinMode>:
 */ 
#include "tk2560.h"


void pinMode(uint8_t pin, uint8_t mode)
{
     576:	cf 93       	push	r28
     578:	df 93       	push	r29
	uint8_t bit = pinToBitMask(pin);
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	fc 01       	movw	r30, r24
     57e:	e3 58       	subi	r30, 0x83	; 131
     580:	fe 4f       	sbci	r31, 0xFE	; 254
     582:	24 91       	lpm	r18, Z
	uint8_t port = pinToPort(pin);
     584:	fc 01       	movw	r30, r24
     586:	ee 51       	subi	r30, 0x1E	; 30
     588:	fe 4f       	sbci	r31, 0xFE	; 254
     58a:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;
	
	if (port == NOT_A_PIN) return;
     58c:	88 23       	and	r24, r24
     58e:	79 f1       	breq	.+94     	; 0x5ee <pinMode+0x78>
	
	reg = portDDRRegister(port);
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	88 0f       	add	r24, r24
     594:	99 1f       	adc	r25, r25
     596:	fc 01       	movw	r30, r24
     598:	ef 59       	subi	r30, 0x9F	; 159
     59a:	fd 4f       	sbci	r31, 0xFD	; 253
     59c:	a5 91       	lpm	r26, Z+
     59e:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
     5a0:	fc 01       	movw	r30, r24
     5a2:	e9 5b       	subi	r30, 0xB9	; 185
     5a4:	fd 4f       	sbci	r31, 0xFD	; 253
     5a6:	c5 91       	lpm	r28, Z+
     5a8:	d4 91       	lpm	r29, Z
	
	if (mode == INPUT)
     5aa:	61 11       	cpse	r22, r1
     5ac:	0c c0       	rjmp	.+24     	; 0x5c6 <pinMode+0x50>
	{
		uint8_t oldSREG = SREG;
     5ae:	9f b7       	in	r25, 0x3f	; 63
		cli();
     5b0:	f8 94       	cli
		*reg &= ~bit;
     5b2:	8c 91       	ld	r24, X
     5b4:	e2 2f       	mov	r30, r18
     5b6:	e0 95       	com	r30
     5b8:	8e 23       	and	r24, r30
     5ba:	8c 93       	st	X, r24
		*out &= ~bit;
     5bc:	28 81       	ld	r18, Y
     5be:	e2 23       	and	r30, r18
     5c0:	e8 83       	st	Y, r30
		SREG = oldSREG;
     5c2:	9f bf       	out	0x3f, r25	; 63
     5c4:	14 c0       	rjmp	.+40     	; 0x5ee <pinMode+0x78>
	}else if(mode == INPUT_PULLUP)
     5c6:	62 30       	cpi	r22, 0x02	; 2
     5c8:	61 f4       	brne	.+24     	; 0x5e2 <pinMode+0x6c>
	{
		uint8_t oldSREG = SREG;
     5ca:	9f b7       	in	r25, 0x3f	; 63
		cli();
     5cc:	f8 94       	cli
		*reg &= ~bit;
     5ce:	8c 91       	ld	r24, X
     5d0:	32 2f       	mov	r19, r18
     5d2:	30 95       	com	r19
     5d4:	83 23       	and	r24, r19
     5d6:	8c 93       	st	X, r24
		*out |= bit;
     5d8:	e8 81       	ld	r30, Y
     5da:	e2 2b       	or	r30, r18
     5dc:	e8 83       	st	Y, r30
		SREG = oldSREG;
     5de:	9f bf       	out	0x3f, r25	; 63
     5e0:	06 c0       	rjmp	.+12     	; 0x5ee <pinMode+0x78>
	}else{
		//output
		uint8_t oldSREG = SREG;
     5e2:	8f b7       	in	r24, 0x3f	; 63
		cli();
     5e4:	f8 94       	cli
		*reg |= bit;
     5e6:	ec 91       	ld	r30, X
     5e8:	e2 2b       	or	r30, r18
     5ea:	ec 93       	st	X, r30
		SREG = oldSREG;
     5ec:	8f bf       	out	0x3f, r24	; 63
	}
		
}
     5ee:	df 91       	pop	r29
     5f0:	cf 91       	pop	r28
     5f2:	08 95       	ret

000005f4 <digitalWrite>:

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t bit = pinToBitMask(pin);
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	fc 01       	movw	r30, r24
     5f8:	e3 58       	subi	r30, 0x83	; 131
     5fa:	fe 4f       	sbci	r31, 0xFE	; 254
     5fc:	24 91       	lpm	r18, Z
	uint8_t port = pinToPort(pin);
     5fe:	fc 01       	movw	r30, r24
     600:	ee 51       	subi	r30, 0x1E	; 30
     602:	fe 4f       	sbci	r31, 0xFE	; 254
     604:	84 91       	lpm	r24, Z
	volatile uint8_t *out;
	
	if (port == NOT_A_PIN) return;
     606:	88 23       	and	r24, r24
     608:	b1 f0       	breq	.+44     	; 0x636 <digitalWrite+0x42>
	
	out = portOutputRegister(port);
     60a:	e8 2f       	mov	r30, r24
     60c:	f0 e0       	ldi	r31, 0x00	; 0
     60e:	ee 0f       	add	r30, r30
     610:	ff 1f       	adc	r31, r31
     612:	e9 5b       	subi	r30, 0xB9	; 185
     614:	fd 4f       	sbci	r31, 0xFD	; 253
     616:	a5 91       	lpm	r26, Z+
     618:	b4 91       	lpm	r27, Z
	
	uint8_t oldSREG = SREG;
     61a:	8f b7       	in	r24, 0x3f	; 63
	cli();
     61c:	f8 94       	cli
	
	if (val == LOW) {
     61e:	61 11       	cpse	r22, r1
     620:	06 c0       	rjmp	.+12     	; 0x62e <digitalWrite+0x3a>
		*out &= ~bit;
     622:	9c 91       	ld	r25, X
     624:	e2 2f       	mov	r30, r18
     626:	e0 95       	com	r30
     628:	e9 23       	and	r30, r25
     62a:	ec 93       	st	X, r30
     62c:	03 c0       	rjmp	.+6      	; 0x634 <digitalWrite+0x40>
	} else {
		*out |= bit;
     62e:	ec 91       	ld	r30, X
     630:	e2 2b       	or	r30, r18
     632:	ec 93       	st	X, r30
	}
	
	SREG = oldSREG;
     634:	8f bf       	out	0x3f, r24	; 63
     636:	08 95       	ret

00000638 <togglePin>:
	
}

void togglePin(uint8_t pin)
{
	uint8_t bit = pinToBitMask(pin);
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	fc 01       	movw	r30, r24
     63c:	e3 58       	subi	r30, 0x83	; 131
     63e:	fe 4f       	sbci	r31, 0xFE	; 254
     640:	24 91       	lpm	r18, Z
	uint8_t port = pinToPort(pin);
     642:	fc 01       	movw	r30, r24
     644:	ee 51       	subi	r30, 0x1E	; 30
     646:	fe 4f       	sbci	r31, 0xFE	; 254
     648:	84 91       	lpm	r24, Z
	volatile uint8_t *out;
	
	if (port == NOT_A_PIN) return;
     64a:	88 23       	and	r24, r24
     64c:	71 f0       	breq	.+28     	; 0x66a <togglePin+0x32>
	
	out = portOutputRegister(port);
     64e:	e8 2f       	mov	r30, r24
     650:	f0 e0       	ldi	r31, 0x00	; 0
     652:	ee 0f       	add	r30, r30
     654:	ff 1f       	adc	r31, r31
     656:	e9 5b       	subi	r30, 0xB9	; 185
     658:	fd 4f       	sbci	r31, 0xFD	; 253
     65a:	a5 91       	lpm	r26, Z+
     65c:	b4 91       	lpm	r27, Z
	
	uint8_t oldSREG = SREG;
     65e:	8f b7       	in	r24, 0x3f	; 63
	cli();
     660:	f8 94       	cli
	
	//toggle
	*out ^= bit;
     662:	ec 91       	ld	r30, X
     664:	e2 27       	eor	r30, r18
     666:	ec 93       	st	X, r30
	
	SREG = oldSREG;
     668:	8f bf       	out	0x3f, r24	; 63
     66a:	08 95       	ret

0000066c <nothing>:
			break;
			case 7:
				EIMSK &= ~(1<<INT7);
			break;
		}
		intFunc[interruptNum] = nothing;
     66c:	08 95       	ret

0000066e <attachInterrupt>:
     66e:	88 30       	cpi	r24, 0x08	; 8
     670:	08 f0       	brcs	.+2      	; 0x674 <attachInterrupt+0x6>
     672:	78 c0       	rjmp	.+240    	; 0x764 <attachInterrupt+0xf6>
     674:	e8 2f       	mov	r30, r24
     676:	f0 e0       	ldi	r31, 0x00	; 0
     678:	ee 0f       	add	r30, r30
     67a:	ff 1f       	adc	r31, r31
     67c:	e0 50       	subi	r30, 0x00	; 0
     67e:	fe 4f       	sbci	r31, 0xFE	; 254
     680:	71 83       	std	Z+1, r23	; 0x01
     682:	60 83       	st	Z, r22
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	88 30       	cpi	r24, 0x08	; 8
     688:	91 05       	cpc	r25, r1
     68a:	08 f0       	brcs	.+2      	; 0x68e <attachInterrupt+0x20>
     68c:	6b c0       	rjmp	.+214    	; 0x764 <attachInterrupt+0xf6>
     68e:	fc 01       	movw	r30, r24
     690:	88 27       	eor	r24, r24
     692:	ee 58       	subi	r30, 0x8E	; 142
     694:	ff 4f       	sbci	r31, 0xFF	; 255
     696:	8f 4f       	sbci	r24, 0xFF	; 255
     698:	94 c6       	rjmp	.+3368   	; 0x13c2 <__tablejump2__>
     69a:	e9 e6       	ldi	r30, 0x69	; 105
     69c:	f0 e0       	ldi	r31, 0x00	; 0
     69e:	80 81       	ld	r24, Z
     6a0:	8c 7f       	andi	r24, 0xFC	; 252
     6a2:	48 2b       	or	r20, r24
     6a4:	40 83       	st	Z, r20
     6a6:	e8 9a       	sbi	0x1d, 0	; 29
     6a8:	08 95       	ret
     6aa:	e9 e6       	ldi	r30, 0x69	; 105
     6ac:	f0 e0       	ldi	r31, 0x00	; 0
     6ae:	80 81       	ld	r24, Z
     6b0:	83 7f       	andi	r24, 0xF3	; 243
     6b2:	44 0f       	add	r20, r20
     6b4:	55 1f       	adc	r21, r21
     6b6:	44 0f       	add	r20, r20
     6b8:	55 1f       	adc	r21, r21
     6ba:	48 2b       	or	r20, r24
     6bc:	40 83       	st	Z, r20
     6be:	e9 9a       	sbi	0x1d, 1	; 29
     6c0:	08 95       	ret
     6c2:	e9 e6       	ldi	r30, 0x69	; 105
     6c4:	f0 e0       	ldi	r31, 0x00	; 0
     6c6:	80 81       	ld	r24, Z
     6c8:	8f 7c       	andi	r24, 0xCF	; 207
     6ca:	42 95       	swap	r20
     6cc:	52 95       	swap	r21
     6ce:	50 7f       	andi	r21, 0xF0	; 240
     6d0:	54 27       	eor	r21, r20
     6d2:	40 7f       	andi	r20, 0xF0	; 240
     6d4:	54 27       	eor	r21, r20
     6d6:	48 2b       	or	r20, r24
     6d8:	40 83       	st	Z, r20
     6da:	ea 9a       	sbi	0x1d, 2	; 29
     6dc:	08 95       	ret
     6de:	e9 e6       	ldi	r30, 0x69	; 105
     6e0:	f0 e0       	ldi	r31, 0x00	; 0
     6e2:	80 81       	ld	r24, Z
     6e4:	8f 73       	andi	r24, 0x3F	; 63
     6e6:	00 24       	eor	r0, r0
     6e8:	56 95       	lsr	r21
     6ea:	47 95       	ror	r20
     6ec:	07 94       	ror	r0
     6ee:	56 95       	lsr	r21
     6f0:	47 95       	ror	r20
     6f2:	07 94       	ror	r0
     6f4:	54 2f       	mov	r21, r20
     6f6:	40 2d       	mov	r20, r0
     6f8:	48 2b       	or	r20, r24
     6fa:	40 83       	st	Z, r20
     6fc:	eb 9a       	sbi	0x1d, 3	; 29
     6fe:	08 95       	ret
     700:	ea e6       	ldi	r30, 0x6A	; 106
     702:	f0 e0       	ldi	r31, 0x00	; 0
     704:	80 81       	ld	r24, Z
     706:	8c 7f       	andi	r24, 0xFC	; 252
     708:	48 2b       	or	r20, r24
     70a:	40 83       	st	Z, r20
     70c:	ec 9a       	sbi	0x1d, 4	; 29
     70e:	08 95       	ret
     710:	ea e6       	ldi	r30, 0x6A	; 106
     712:	f0 e0       	ldi	r31, 0x00	; 0
     714:	80 81       	ld	r24, Z
     716:	83 7f       	andi	r24, 0xF3	; 243
     718:	44 0f       	add	r20, r20
     71a:	55 1f       	adc	r21, r21
     71c:	44 0f       	add	r20, r20
     71e:	55 1f       	adc	r21, r21
     720:	48 2b       	or	r20, r24
     722:	40 83       	st	Z, r20
     724:	ed 9a       	sbi	0x1d, 5	; 29
     726:	08 95       	ret
     728:	ea e6       	ldi	r30, 0x6A	; 106
     72a:	f0 e0       	ldi	r31, 0x00	; 0
     72c:	80 81       	ld	r24, Z
     72e:	8f 7c       	andi	r24, 0xCF	; 207
     730:	42 95       	swap	r20
     732:	52 95       	swap	r21
     734:	50 7f       	andi	r21, 0xF0	; 240
     736:	54 27       	eor	r21, r20
     738:	40 7f       	andi	r20, 0xF0	; 240
     73a:	54 27       	eor	r21, r20
     73c:	48 2b       	or	r20, r24
     73e:	40 83       	st	Z, r20
     740:	ee 9a       	sbi	0x1d, 6	; 29
     742:	08 95       	ret
     744:	ea e6       	ldi	r30, 0x6A	; 106
     746:	f0 e0       	ldi	r31, 0x00	; 0
     748:	80 81       	ld	r24, Z
     74a:	8f 73       	andi	r24, 0x3F	; 63
     74c:	00 24       	eor	r0, r0
     74e:	56 95       	lsr	r21
     750:	47 95       	ror	r20
     752:	07 94       	ror	r0
     754:	56 95       	lsr	r21
     756:	47 95       	ror	r20
     758:	07 94       	ror	r0
     75a:	54 2f       	mov	r21, r20
     75c:	40 2d       	mov	r20, r0
     75e:	48 2b       	or	r20, r24
     760:	40 83       	st	Z, r20
     762:	ef 9a       	sbi	0x1d, 7	; 29
     764:	08 95       	ret

00000766 <__vector_1>:
#define IMPLEMENT_ISR(vect, interrupt) \
	ISR(vect) { \
		intFunc[interrupt](); \
	}
	
IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
     766:	1f 92       	push	r1
     768:	0f 92       	push	r0
     76a:	0f b6       	in	r0, 0x3f	; 63
     76c:	0f 92       	push	r0
     76e:	11 24       	eor	r1, r1
     770:	0b b6       	in	r0, 0x3b	; 59
     772:	0f 92       	push	r0
     774:	2f 93       	push	r18
     776:	3f 93       	push	r19
     778:	4f 93       	push	r20
     77a:	5f 93       	push	r21
     77c:	6f 93       	push	r22
     77e:	7f 93       	push	r23
     780:	8f 93       	push	r24
     782:	9f 93       	push	r25
     784:	af 93       	push	r26
     786:	bf 93       	push	r27
     788:	ef 93       	push	r30
     78a:	ff 93       	push	r31
     78c:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <__data_start>
     790:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <__data_start+0x1>
     794:	19 95       	eicall
     796:	ff 91       	pop	r31
     798:	ef 91       	pop	r30
     79a:	bf 91       	pop	r27
     79c:	af 91       	pop	r26
     79e:	9f 91       	pop	r25
     7a0:	8f 91       	pop	r24
     7a2:	7f 91       	pop	r23
     7a4:	6f 91       	pop	r22
     7a6:	5f 91       	pop	r21
     7a8:	4f 91       	pop	r20
     7aa:	3f 91       	pop	r19
     7ac:	2f 91       	pop	r18
     7ae:	0f 90       	pop	r0
     7b0:	0b be       	out	0x3b, r0	; 59
     7b2:	0f 90       	pop	r0
     7b4:	0f be       	out	0x3f, r0	; 63
     7b6:	0f 90       	pop	r0
     7b8:	1f 90       	pop	r1
     7ba:	18 95       	reti

000007bc <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
     7bc:	1f 92       	push	r1
     7be:	0f 92       	push	r0
     7c0:	0f b6       	in	r0, 0x3f	; 63
     7c2:	0f 92       	push	r0
     7c4:	11 24       	eor	r1, r1
     7c6:	0b b6       	in	r0, 0x3b	; 59
     7c8:	0f 92       	push	r0
     7ca:	2f 93       	push	r18
     7cc:	3f 93       	push	r19
     7ce:	4f 93       	push	r20
     7d0:	5f 93       	push	r21
     7d2:	6f 93       	push	r22
     7d4:	7f 93       	push	r23
     7d6:	8f 93       	push	r24
     7d8:	9f 93       	push	r25
     7da:	af 93       	push	r26
     7dc:	bf 93       	push	r27
     7de:	ef 93       	push	r30
     7e0:	ff 93       	push	r31
     7e2:	e0 91 02 02 	lds	r30, 0x0202	; 0x800202 <__data_start+0x2>
     7e6:	f0 91 03 02 	lds	r31, 0x0203	; 0x800203 <__data_start+0x3>
     7ea:	19 95       	eicall
     7ec:	ff 91       	pop	r31
     7ee:	ef 91       	pop	r30
     7f0:	bf 91       	pop	r27
     7f2:	af 91       	pop	r26
     7f4:	9f 91       	pop	r25
     7f6:	8f 91       	pop	r24
     7f8:	7f 91       	pop	r23
     7fa:	6f 91       	pop	r22
     7fc:	5f 91       	pop	r21
     7fe:	4f 91       	pop	r20
     800:	3f 91       	pop	r19
     802:	2f 91       	pop	r18
     804:	0f 90       	pop	r0
     806:	0b be       	out	0x3b, r0	; 59
     808:	0f 90       	pop	r0
     80a:	0f be       	out	0x3f, r0	; 63
     80c:	0f 90       	pop	r0
     80e:	1f 90       	pop	r1
     810:	18 95       	reti

00000812 <__vector_3>:
IMPLEMENT_ISR(INT2_vect, EXTERNAL_INT_2)
     812:	1f 92       	push	r1
     814:	0f 92       	push	r0
     816:	0f b6       	in	r0, 0x3f	; 63
     818:	0f 92       	push	r0
     81a:	11 24       	eor	r1, r1
     81c:	0b b6       	in	r0, 0x3b	; 59
     81e:	0f 92       	push	r0
     820:	2f 93       	push	r18
     822:	3f 93       	push	r19
     824:	4f 93       	push	r20
     826:	5f 93       	push	r21
     828:	6f 93       	push	r22
     82a:	7f 93       	push	r23
     82c:	8f 93       	push	r24
     82e:	9f 93       	push	r25
     830:	af 93       	push	r26
     832:	bf 93       	push	r27
     834:	ef 93       	push	r30
     836:	ff 93       	push	r31
     838:	e0 91 04 02 	lds	r30, 0x0204	; 0x800204 <__data_start+0x4>
     83c:	f0 91 05 02 	lds	r31, 0x0205	; 0x800205 <__data_start+0x5>
     840:	19 95       	eicall
     842:	ff 91       	pop	r31
     844:	ef 91       	pop	r30
     846:	bf 91       	pop	r27
     848:	af 91       	pop	r26
     84a:	9f 91       	pop	r25
     84c:	8f 91       	pop	r24
     84e:	7f 91       	pop	r23
     850:	6f 91       	pop	r22
     852:	5f 91       	pop	r21
     854:	4f 91       	pop	r20
     856:	3f 91       	pop	r19
     858:	2f 91       	pop	r18
     85a:	0f 90       	pop	r0
     85c:	0b be       	out	0x3b, r0	; 59
     85e:	0f 90       	pop	r0
     860:	0f be       	out	0x3f, r0	; 63
     862:	0f 90       	pop	r0
     864:	1f 90       	pop	r1
     866:	18 95       	reti

00000868 <__vector_4>:
IMPLEMENT_ISR(INT3_vect, EXTERNAL_INT_3)
     868:	1f 92       	push	r1
     86a:	0f 92       	push	r0
     86c:	0f b6       	in	r0, 0x3f	; 63
     86e:	0f 92       	push	r0
     870:	11 24       	eor	r1, r1
     872:	0b b6       	in	r0, 0x3b	; 59
     874:	0f 92       	push	r0
     876:	2f 93       	push	r18
     878:	3f 93       	push	r19
     87a:	4f 93       	push	r20
     87c:	5f 93       	push	r21
     87e:	6f 93       	push	r22
     880:	7f 93       	push	r23
     882:	8f 93       	push	r24
     884:	9f 93       	push	r25
     886:	af 93       	push	r26
     888:	bf 93       	push	r27
     88a:	ef 93       	push	r30
     88c:	ff 93       	push	r31
     88e:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <__data_start+0x6>
     892:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <__data_start+0x7>
     896:	19 95       	eicall
     898:	ff 91       	pop	r31
     89a:	ef 91       	pop	r30
     89c:	bf 91       	pop	r27
     89e:	af 91       	pop	r26
     8a0:	9f 91       	pop	r25
     8a2:	8f 91       	pop	r24
     8a4:	7f 91       	pop	r23
     8a6:	6f 91       	pop	r22
     8a8:	5f 91       	pop	r21
     8aa:	4f 91       	pop	r20
     8ac:	3f 91       	pop	r19
     8ae:	2f 91       	pop	r18
     8b0:	0f 90       	pop	r0
     8b2:	0b be       	out	0x3b, r0	; 59
     8b4:	0f 90       	pop	r0
     8b6:	0f be       	out	0x3f, r0	; 63
     8b8:	0f 90       	pop	r0
     8ba:	1f 90       	pop	r1
     8bc:	18 95       	reti

000008be <__vector_5>:
IMPLEMENT_ISR(INT4_vect, EXTERNAL_INT_4)
     8be:	1f 92       	push	r1
     8c0:	0f 92       	push	r0
     8c2:	0f b6       	in	r0, 0x3f	; 63
     8c4:	0f 92       	push	r0
     8c6:	11 24       	eor	r1, r1
     8c8:	0b b6       	in	r0, 0x3b	; 59
     8ca:	0f 92       	push	r0
     8cc:	2f 93       	push	r18
     8ce:	3f 93       	push	r19
     8d0:	4f 93       	push	r20
     8d2:	5f 93       	push	r21
     8d4:	6f 93       	push	r22
     8d6:	7f 93       	push	r23
     8d8:	8f 93       	push	r24
     8da:	9f 93       	push	r25
     8dc:	af 93       	push	r26
     8de:	bf 93       	push	r27
     8e0:	ef 93       	push	r30
     8e2:	ff 93       	push	r31
     8e4:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <__data_start+0x8>
     8e8:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <__data_start+0x9>
     8ec:	19 95       	eicall
     8ee:	ff 91       	pop	r31
     8f0:	ef 91       	pop	r30
     8f2:	bf 91       	pop	r27
     8f4:	af 91       	pop	r26
     8f6:	9f 91       	pop	r25
     8f8:	8f 91       	pop	r24
     8fa:	7f 91       	pop	r23
     8fc:	6f 91       	pop	r22
     8fe:	5f 91       	pop	r21
     900:	4f 91       	pop	r20
     902:	3f 91       	pop	r19
     904:	2f 91       	pop	r18
     906:	0f 90       	pop	r0
     908:	0b be       	out	0x3b, r0	; 59
     90a:	0f 90       	pop	r0
     90c:	0f be       	out	0x3f, r0	; 63
     90e:	0f 90       	pop	r0
     910:	1f 90       	pop	r1
     912:	18 95       	reti

00000914 <__vector_6>:
IMPLEMENT_ISR(INT5_vect, EXTERNAL_INT_5)
     914:	1f 92       	push	r1
     916:	0f 92       	push	r0
     918:	0f b6       	in	r0, 0x3f	; 63
     91a:	0f 92       	push	r0
     91c:	11 24       	eor	r1, r1
     91e:	0b b6       	in	r0, 0x3b	; 59
     920:	0f 92       	push	r0
     922:	2f 93       	push	r18
     924:	3f 93       	push	r19
     926:	4f 93       	push	r20
     928:	5f 93       	push	r21
     92a:	6f 93       	push	r22
     92c:	7f 93       	push	r23
     92e:	8f 93       	push	r24
     930:	9f 93       	push	r25
     932:	af 93       	push	r26
     934:	bf 93       	push	r27
     936:	ef 93       	push	r30
     938:	ff 93       	push	r31
     93a:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <__data_start+0xa>
     93e:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <__data_start+0xb>
     942:	19 95       	eicall
     944:	ff 91       	pop	r31
     946:	ef 91       	pop	r30
     948:	bf 91       	pop	r27
     94a:	af 91       	pop	r26
     94c:	9f 91       	pop	r25
     94e:	8f 91       	pop	r24
     950:	7f 91       	pop	r23
     952:	6f 91       	pop	r22
     954:	5f 91       	pop	r21
     956:	4f 91       	pop	r20
     958:	3f 91       	pop	r19
     95a:	2f 91       	pop	r18
     95c:	0f 90       	pop	r0
     95e:	0b be       	out	0x3b, r0	; 59
     960:	0f 90       	pop	r0
     962:	0f be       	out	0x3f, r0	; 63
     964:	0f 90       	pop	r0
     966:	1f 90       	pop	r1
     968:	18 95       	reti

0000096a <__vector_7>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
     96a:	1f 92       	push	r1
     96c:	0f 92       	push	r0
     96e:	0f b6       	in	r0, 0x3f	; 63
     970:	0f 92       	push	r0
     972:	11 24       	eor	r1, r1
     974:	0b b6       	in	r0, 0x3b	; 59
     976:	0f 92       	push	r0
     978:	2f 93       	push	r18
     97a:	3f 93       	push	r19
     97c:	4f 93       	push	r20
     97e:	5f 93       	push	r21
     980:	6f 93       	push	r22
     982:	7f 93       	push	r23
     984:	8f 93       	push	r24
     986:	9f 93       	push	r25
     988:	af 93       	push	r26
     98a:	bf 93       	push	r27
     98c:	ef 93       	push	r30
     98e:	ff 93       	push	r31
     990:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <__data_start+0xc>
     994:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <__data_start+0xd>
     998:	19 95       	eicall
     99a:	ff 91       	pop	r31
     99c:	ef 91       	pop	r30
     99e:	bf 91       	pop	r27
     9a0:	af 91       	pop	r26
     9a2:	9f 91       	pop	r25
     9a4:	8f 91       	pop	r24
     9a6:	7f 91       	pop	r23
     9a8:	6f 91       	pop	r22
     9aa:	5f 91       	pop	r21
     9ac:	4f 91       	pop	r20
     9ae:	3f 91       	pop	r19
     9b0:	2f 91       	pop	r18
     9b2:	0f 90       	pop	r0
     9b4:	0b be       	out	0x3b, r0	; 59
     9b6:	0f 90       	pop	r0
     9b8:	0f be       	out	0x3f, r0	; 63
     9ba:	0f 90       	pop	r0
     9bc:	1f 90       	pop	r1
     9be:	18 95       	reti

000009c0 <__vector_8>:
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)
     9c0:	1f 92       	push	r1
     9c2:	0f 92       	push	r0
     9c4:	0f b6       	in	r0, 0x3f	; 63
     9c6:	0f 92       	push	r0
     9c8:	11 24       	eor	r1, r1
     9ca:	0b b6       	in	r0, 0x3b	; 59
     9cc:	0f 92       	push	r0
     9ce:	2f 93       	push	r18
     9d0:	3f 93       	push	r19
     9d2:	4f 93       	push	r20
     9d4:	5f 93       	push	r21
     9d6:	6f 93       	push	r22
     9d8:	7f 93       	push	r23
     9da:	8f 93       	push	r24
     9dc:	9f 93       	push	r25
     9de:	af 93       	push	r26
     9e0:	bf 93       	push	r27
     9e2:	ef 93       	push	r30
     9e4:	ff 93       	push	r31
     9e6:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <__data_start+0xe>
     9ea:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <__data_start+0xf>
     9ee:	19 95       	eicall
     9f0:	ff 91       	pop	r31
     9f2:	ef 91       	pop	r30
     9f4:	bf 91       	pop	r27
     9f6:	af 91       	pop	r26
     9f8:	9f 91       	pop	r25
     9fa:	8f 91       	pop	r24
     9fc:	7f 91       	pop	r23
     9fe:	6f 91       	pop	r22
     a00:	5f 91       	pop	r21
     a02:	4f 91       	pop	r20
     a04:	3f 91       	pop	r19
     a06:	2f 91       	pop	r18
     a08:	0f 90       	pop	r0
     a0a:	0b be       	out	0x3b, r0	; 59
     a0c:	0f 90       	pop	r0
     a0e:	0f be       	out	0x3f, r0	; 63
     a10:	0f 90       	pop	r0
     a12:	1f 90       	pop	r1
     a14:	18 95       	reti

00000a16 <enablePinChangeInterruptHelper>:
	// delete setting
	risingPorts[arrayPos] &= ~pcintMask;
	fallingPorts[arrayPos] &= ~pcintMask;

	// call the actual hardware disable function
	disablePinChangeInterruptHelper(pcintPort, pcintMask);
     a16:	98 2f       	mov	r25, r24
     a18:	81 30       	cpi	r24, 0x01	; 1
     a1a:	59 f0       	breq	.+22     	; 0xa32 <enablePinChangeInterruptHelper+0x1c>
     a1c:	18 f0       	brcs	.+6      	; 0xa24 <enablePinChangeInterruptHelper+0xe>
     a1e:	82 30       	cpi	r24, 0x02	; 2
     a20:	a1 f0       	breq	.+40     	; 0xa4a <enablePinChangeInterruptHelper+0x34>
     a22:	1b c0       	rjmp	.+54     	; 0xa5a <enablePinChangeInterruptHelper+0x44>
     a24:	83 b1       	in	r24, 0x03	; 3
     a26:	e4 2f       	mov	r30, r20
     a28:	f0 e0       	ldi	r31, 0x00	; 0
     a2a:	ec 5c       	subi	r30, 0xCC	; 204
     a2c:	fd 4f       	sbci	r31, 0xFD	; 253
     a2e:	80 83       	st	Z, r24
     a30:	1a c0       	rjmp	.+52     	; 0xa66 <enablePinChangeInterruptHelper+0x50>
     a32:	2c b1       	in	r18, 0x0c	; 12
     a34:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
     a38:	e4 2f       	mov	r30, r20
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	ec 5c       	subi	r30, 0xCC	; 204
     a3e:	fd 4f       	sbci	r31, 0xFD	; 253
     a40:	21 70       	andi	r18, 0x01	; 1
     a42:	88 0f       	add	r24, r24
     a44:	82 2b       	or	r24, r18
     a46:	80 83       	st	Z, r24
     a48:	14 c0       	rjmp	.+40     	; 0xa72 <enablePinChangeInterruptHelper+0x5c>
     a4a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
     a4e:	e4 2f       	mov	r30, r20
     a50:	f0 e0       	ldi	r31, 0x00	; 0
     a52:	ec 5c       	subi	r30, 0xCC	; 204
     a54:	fd 4f       	sbci	r31, 0xFD	; 253
     a56:	80 83       	st	Z, r24
     a58:	12 c0       	rjmp	.+36     	; 0xa7e <enablePinChangeInterruptHelper+0x68>
     a5a:	81 30       	cpi	r24, 0x01	; 1
     a5c:	51 f0       	breq	.+20     	; 0xa72 <enablePinChangeInterruptHelper+0x5c>
     a5e:	18 f0       	brcs	.+6      	; 0xa66 <enablePinChangeInterruptHelper+0x50>
     a60:	82 30       	cpi	r24, 0x02	; 2
     a62:	91 f4       	brne	.+36     	; 0xa88 <enablePinChangeInterruptHelper+0x72>
     a64:	0c c0       	rjmp	.+24     	; 0xa7e <enablePinChangeInterruptHelper+0x68>
     a66:	eb e6       	ldi	r30, 0x6B	; 107
     a68:	f0 e0       	ldi	r31, 0x00	; 0
     a6a:	80 81       	ld	r24, Z
     a6c:	68 2b       	or	r22, r24
     a6e:	60 83       	st	Z, r22
     a70:	0b c0       	rjmp	.+22     	; 0xa88 <enablePinChangeInterruptHelper+0x72>
     a72:	ec e6       	ldi	r30, 0x6C	; 108
     a74:	f0 e0       	ldi	r31, 0x00	; 0
     a76:	80 81       	ld	r24, Z
     a78:	68 2b       	or	r22, r24
     a7a:	60 83       	st	Z, r22
     a7c:	05 c0       	rjmp	.+10     	; 0xa88 <enablePinChangeInterruptHelper+0x72>
     a7e:	ed e6       	ldi	r30, 0x6D	; 109
     a80:	f0 e0       	ldi	r31, 0x00	; 0
     a82:	80 81       	ld	r24, Z
     a84:	68 2b       	or	r22, r24
     a86:	60 83       	st	Z, r22
     a88:	e8 e6       	ldi	r30, 0x68	; 104
     a8a:	f0 e0       	ldi	r31, 0x00	; 0
     a8c:	40 81       	ld	r20, Z
     a8e:	21 e0       	ldi	r18, 0x01	; 1
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	b9 01       	movw	r22, r18
     a94:	02 c0       	rjmp	.+4      	; 0xa9a <enablePinChangeInterruptHelper+0x84>
     a96:	66 0f       	add	r22, r22
     a98:	77 1f       	adc	r23, r23
     a9a:	9a 95       	dec	r25
     a9c:	e2 f7       	brpl	.-8      	; 0xa96 <enablePinChangeInterruptHelper+0x80>
     a9e:	cb 01       	movw	r24, r22
     aa0:	84 2b       	or	r24, r20
     aa2:	80 83       	st	Z, r24
     aa4:	08 95       	ret

00000aa6 <attachPinChangeInterrupt>:
     aa6:	98 2f       	mov	r25, r24
     aa8:	96 95       	lsr	r25
     aaa:	96 95       	lsr	r25
     aac:	96 95       	lsr	r25
     aae:	28 2f       	mov	r18, r24
     ab0:	27 70       	andi	r18, 0x07	; 7
     ab2:	78 94       	sei
     ab4:	91 11       	cpse	r25, r1
     ab6:	39 c0       	rjmp	.+114    	; 0xb2a <attachPinChangeInterrupt+0x84>
     ab8:	81 11       	cpse	r24, r1
     aba:	05 c0       	rjmp	.+10     	; 0xac6 <attachPinChangeInterrupt+0x20>
     abc:	70 93 52 02 	sts	0x0252, r23	; 0x800252 <callbackPCINT0+0x1>
     ac0:	60 93 51 02 	sts	0x0251, r22	; 0x800251 <callbackPCINT0>
     ac4:	0e c0       	rjmp	.+28     	; 0xae2 <attachPinChangeInterrupt+0x3c>
     ac6:	81 30       	cpi	r24, 0x01	; 1
     ac8:	29 f4       	brne	.+10     	; 0xad4 <attachPinChangeInterrupt+0x2e>
     aca:	70 93 58 02 	sts	0x0258, r23	; 0x800258 <callbackPCINT1+0x1>
     ace:	60 93 57 02 	sts	0x0257, r22	; 0x800257 <callbackPCINT1>
     ad2:	0e c0       	rjmp	.+28     	; 0xaf0 <attachPinChangeInterrupt+0x4a>
     ad4:	82 30       	cpi	r24, 0x02	; 2
     ad6:	29 f4       	brne	.+10     	; 0xae2 <attachPinChangeInterrupt+0x3c>
     ad8:	70 93 6a 02 	sts	0x026A, r23	; 0x80026a <callbackPCINT2+0x1>
     adc:	60 93 69 02 	sts	0x0269, r22	; 0x800269 <callbackPCINT2>
     ae0:	0e c0       	rjmp	.+28     	; 0xafe <attachPinChangeInterrupt+0x58>
     ae2:	83 30       	cpi	r24, 0x03	; 3
     ae4:	29 f4       	brne	.+10     	; 0xaf0 <attachPinChangeInterrupt+0x4a>
     ae6:	70 93 7c 02 	sts	0x027C, r23	; 0x80027c <callbackPCINT3+0x1>
     aea:	60 93 7b 02 	sts	0x027B, r22	; 0x80027b <callbackPCINT3>
     aee:	0e c0       	rjmp	.+28     	; 0xb0c <attachPinChangeInterrupt+0x66>
     af0:	84 30       	cpi	r24, 0x04	; 4
     af2:	29 f4       	brne	.+10     	; 0xafe <attachPinChangeInterrupt+0x58>
     af4:	70 93 6c 02 	sts	0x026C, r23	; 0x80026c <callbackPCINT4+0x1>
     af8:	60 93 6b 02 	sts	0x026B, r22	; 0x80026b <callbackPCINT4>
     afc:	0e c0       	rjmp	.+28     	; 0xb1a <attachPinChangeInterrupt+0x74>
     afe:	85 30       	cpi	r24, 0x05	; 5
     b00:	29 f4       	brne	.+10     	; 0xb0c <attachPinChangeInterrupt+0x66>
     b02:	70 93 76 02 	sts	0x0276, r23	; 0x800276 <callbackPCINT5+0x1>
     b06:	60 93 75 02 	sts	0x0275, r22	; 0x800275 <callbackPCINT5>
     b0a:	84 c0       	rjmp	.+264    	; 0xc14 <attachPinChangeInterrupt+0x16e>
     b0c:	86 30       	cpi	r24, 0x06	; 6
     b0e:	29 f4       	brne	.+10     	; 0xb1a <attachPinChangeInterrupt+0x74>
     b10:	70 93 66 02 	sts	0x0266, r23	; 0x800266 <callbackPCINT6+0x1>
     b14:	60 93 65 02 	sts	0x0265, r22	; 0x800265 <callbackPCINT6>
     b18:	7d c0       	rjmp	.+250    	; 0xc14 <attachPinChangeInterrupt+0x16e>
     b1a:	87 30       	cpi	r24, 0x07	; 7
     b1c:	09 f0       	breq	.+2      	; 0xb20 <attachPinChangeInterrupt+0x7a>
     b1e:	7a c0       	rjmp	.+244    	; 0xc14 <attachPinChangeInterrupt+0x16e>
     b20:	70 93 5a 02 	sts	0x025A, r23	; 0x80025a <callbackPCINT7+0x1>
     b24:	60 93 59 02 	sts	0x0259, r22	; 0x800259 <callbackPCINT7>
     b28:	75 c0       	rjmp	.+234    	; 0xc14 <attachPinChangeInterrupt+0x16e>
     b2a:	91 30       	cpi	r25, 0x01	; 1
     b2c:	c9 f5       	brne	.+114    	; 0xba0 <attachPinChangeInterrupt+0xfa>
     b2e:	88 30       	cpi	r24, 0x08	; 8
     b30:	29 f4       	brne	.+10     	; 0xb3c <attachPinChangeInterrupt+0x96>
     b32:	70 93 68 02 	sts	0x0268, r23	; 0x800268 <callbackPCINT8+0x1>
     b36:	60 93 67 02 	sts	0x0267, r22	; 0x800267 <callbackPCINT8>
     b3a:	0e c0       	rjmp	.+28     	; 0xb58 <attachPinChangeInterrupt+0xb2>
     b3c:	89 30       	cpi	r24, 0x09	; 9
     b3e:	29 f4       	brne	.+10     	; 0xb4a <attachPinChangeInterrupt+0xa4>
     b40:	70 93 60 02 	sts	0x0260, r23	; 0x800260 <callbackPCINT9+0x1>
     b44:	60 93 5f 02 	sts	0x025F, r22	; 0x80025f <callbackPCINT9>
     b48:	0e c0       	rjmp	.+28     	; 0xb66 <attachPinChangeInterrupt+0xc0>
     b4a:	8a 30       	cpi	r24, 0x0A	; 10
     b4c:	29 f4       	brne	.+10     	; 0xb58 <attachPinChangeInterrupt+0xb2>
     b4e:	70 93 72 02 	sts	0x0272, r23	; 0x800272 <callbackPCINT10+0x1>
     b52:	60 93 71 02 	sts	0x0271, r22	; 0x800271 <callbackPCINT10>
     b56:	0e c0       	rjmp	.+28     	; 0xb74 <attachPinChangeInterrupt+0xce>
     b58:	8b 30       	cpi	r24, 0x0B	; 11
     b5a:	29 f4       	brne	.+10     	; 0xb66 <attachPinChangeInterrupt+0xc0>
     b5c:	70 93 64 02 	sts	0x0264, r23	; 0x800264 <callbackPCINT11+0x1>
     b60:	60 93 63 02 	sts	0x0263, r22	; 0x800263 <callbackPCINT11>
     b64:	0e c0       	rjmp	.+28     	; 0xb82 <attachPinChangeInterrupt+0xdc>
     b66:	8c 30       	cpi	r24, 0x0C	; 12
     b68:	29 f4       	brne	.+10     	; 0xb74 <attachPinChangeInterrupt+0xce>
     b6a:	70 93 7e 02 	sts	0x027E, r23	; 0x80027e <callbackPCINT12+0x1>
     b6e:	60 93 7d 02 	sts	0x027D, r22	; 0x80027d <callbackPCINT12>
     b72:	0e c0       	rjmp	.+28     	; 0xb90 <attachPinChangeInterrupt+0xea>
     b74:	8d 30       	cpi	r24, 0x0D	; 13
     b76:	29 f4       	brne	.+10     	; 0xb82 <attachPinChangeInterrupt+0xdc>
     b78:	70 93 70 02 	sts	0x0270, r23	; 0x800270 <callbackPCINT13+0x1>
     b7c:	60 93 6f 02 	sts	0x026F, r22	; 0x80026f <callbackPCINT13>
     b80:	49 c0       	rjmp	.+146    	; 0xc14 <attachPinChangeInterrupt+0x16e>
     b82:	8e 30       	cpi	r24, 0x0E	; 14
     b84:	29 f4       	brne	.+10     	; 0xb90 <attachPinChangeInterrupt+0xea>
     b86:	70 93 6e 02 	sts	0x026E, r23	; 0x80026e <callbackPCINT14+0x1>
     b8a:	60 93 6d 02 	sts	0x026D, r22	; 0x80026d <callbackPCINT14>
     b8e:	42 c0       	rjmp	.+132    	; 0xc14 <attachPinChangeInterrupt+0x16e>
     b90:	8f 30       	cpi	r24, 0x0F	; 15
     b92:	09 f0       	breq	.+2      	; 0xb96 <attachPinChangeInterrupt+0xf0>
     b94:	3f c0       	rjmp	.+126    	; 0xc14 <attachPinChangeInterrupt+0x16e>
     b96:	70 93 7a 02 	sts	0x027A, r23	; 0x80027a <callbackPCINT15+0x1>
     b9a:	60 93 79 02 	sts	0x0279, r22	; 0x800279 <callbackPCINT15>
     b9e:	3a c0       	rjmp	.+116    	; 0xc14 <attachPinChangeInterrupt+0x16e>
     ba0:	92 30       	cpi	r25, 0x02	; 2
     ba2:	09 f0       	breq	.+2      	; 0xba6 <attachPinChangeInterrupt+0x100>
     ba4:	56 c0       	rjmp	.+172    	; 0xc52 <attachPinChangeInterrupt+0x1ac>
     ba6:	80 31       	cpi	r24, 0x10	; 16
     ba8:	29 f4       	brne	.+10     	; 0xbb4 <attachPinChangeInterrupt+0x10e>
     baa:	70 93 5c 02 	sts	0x025C, r23	; 0x80025c <callbackPCINT16+0x1>
     bae:	60 93 5b 02 	sts	0x025B, r22	; 0x80025b <callbackPCINT16>
     bb2:	0e c0       	rjmp	.+28     	; 0xbd0 <attachPinChangeInterrupt+0x12a>
     bb4:	81 31       	cpi	r24, 0x11	; 17
     bb6:	29 f4       	brne	.+10     	; 0xbc2 <attachPinChangeInterrupt+0x11c>
     bb8:	70 93 74 02 	sts	0x0274, r23	; 0x800274 <callbackPCINT17+0x1>
     bbc:	60 93 73 02 	sts	0x0273, r22	; 0x800273 <callbackPCINT17>
     bc0:	0e c0       	rjmp	.+28     	; 0xbde <attachPinChangeInterrupt+0x138>
     bc2:	82 31       	cpi	r24, 0x12	; 18
     bc4:	29 f4       	brne	.+10     	; 0xbd0 <attachPinChangeInterrupt+0x12a>
     bc6:	70 93 54 02 	sts	0x0254, r23	; 0x800254 <callbackPCINT18+0x1>
     bca:	60 93 53 02 	sts	0x0253, r22	; 0x800253 <callbackPCINT18>
     bce:	0e c0       	rjmp	.+28     	; 0xbec <attachPinChangeInterrupt+0x146>
     bd0:	83 31       	cpi	r24, 0x13	; 19
     bd2:	29 f4       	brne	.+10     	; 0xbde <attachPinChangeInterrupt+0x138>
     bd4:	70 93 5e 02 	sts	0x025E, r23	; 0x80025e <callbackPCINT19+0x1>
     bd8:	60 93 5d 02 	sts	0x025D, r22	; 0x80025d <callbackPCINT19>
     bdc:	0e c0       	rjmp	.+28     	; 0xbfa <attachPinChangeInterrupt+0x154>
     bde:	84 31       	cpi	r24, 0x14	; 20
     be0:	29 f4       	brne	.+10     	; 0xbec <attachPinChangeInterrupt+0x146>
     be2:	70 93 80 02 	sts	0x0280, r23	; 0x800280 <callbackPCINT20+0x1>
     be6:	60 93 7f 02 	sts	0x027F, r22	; 0x80027f <callbackPCINT20>
     bea:	0e c0       	rjmp	.+28     	; 0xc08 <attachPinChangeInterrupt+0x162>
     bec:	85 31       	cpi	r24, 0x15	; 21
     bee:	29 f4       	brne	.+10     	; 0xbfa <attachPinChangeInterrupt+0x154>
     bf0:	70 93 56 02 	sts	0x0256, r23	; 0x800256 <callbackPCINT21+0x1>
     bf4:	60 93 55 02 	sts	0x0255, r22	; 0x800255 <callbackPCINT21>
     bf8:	0d c0       	rjmp	.+26     	; 0xc14 <attachPinChangeInterrupt+0x16e>
     bfa:	86 31       	cpi	r24, 0x16	; 22
     bfc:	29 f4       	brne	.+10     	; 0xc08 <attachPinChangeInterrupt+0x162>
     bfe:	70 93 78 02 	sts	0x0278, r23	; 0x800278 <callbackPCINT22+0x1>
     c02:	60 93 77 02 	sts	0x0277, r22	; 0x800277 <callbackPCINT22>
     c06:	06 c0       	rjmp	.+12     	; 0xc14 <attachPinChangeInterrupt+0x16e>
     c08:	87 31       	cpi	r24, 0x17	; 23
     c0a:	21 f4       	brne	.+8      	; 0xc14 <attachPinChangeInterrupt+0x16e>
     c0c:	70 93 62 02 	sts	0x0262, r23	; 0x800262 <callbackPCINT23+0x1>
     c10:	60 93 61 02 	sts	0x0261, r22	; 0x800261 <callbackPCINT23>
     c14:	61 e0       	ldi	r22, 0x01	; 1
     c16:	70 e0       	ldi	r23, 0x00	; 0
     c18:	02 c0       	rjmp	.+4      	; 0xc1e <attachPinChangeInterrupt+0x178>
     c1a:	66 0f       	add	r22, r22
     c1c:	77 1f       	adc	r23, r23
     c1e:	2a 95       	dec	r18
     c20:	e2 f7       	brpl	.-8      	; 0xc1a <attachPinChangeInterrupt+0x174>
     c22:	84 2f       	mov	r24, r20
     c24:	8d 7f       	andi	r24, 0xFD	; 253
     c26:	81 30       	cpi	r24, 0x01	; 1
     c28:	39 f4       	brne	.+14     	; 0xc38 <attachPinChangeInterrupt+0x192>
     c2a:	e9 2f       	mov	r30, r25
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	e2 5d       	subi	r30, 0xD2	; 210
     c30:	fd 4f       	sbci	r31, 0xFD	; 253
     c32:	80 81       	ld	r24, Z
     c34:	86 2b       	or	r24, r22
     c36:	80 83       	st	Z, r24
     c38:	41 50       	subi	r20, 0x01	; 1
     c3a:	42 30       	cpi	r20, 0x02	; 2
     c3c:	38 f4       	brcc	.+14     	; 0xc4c <attachPinChangeInterrupt+0x1a6>
     c3e:	e9 2f       	mov	r30, r25
     c40:	f0 e0       	ldi	r31, 0x00	; 0
     c42:	ef 5c       	subi	r30, 0xCF	; 207
     c44:	fd 4f       	sbci	r31, 0xFD	; 253
     c46:	80 81       	ld	r24, Z
     c48:	86 2b       	or	r24, r22
     c4a:	80 83       	st	Z, r24
     c4c:	49 2f       	mov	r20, r25
     c4e:	89 2f       	mov	r24, r25
     c50:	e2 ce       	rjmp	.-572    	; 0xa16 <enablePinChangeInterruptHelper>
     c52:	08 95       	ret

00000c54 <PinChangeInterruptEventPCINT0>:

//============callbacks==============

#if (PCINT_USE_PCINT0 == true)
void PinChangeInterruptEventPCINT0(void) {
	callbackPCINT0();
     c54:	e0 91 51 02 	lds	r30, 0x0251	; 0x800251 <callbackPCINT0>
     c58:	f0 91 52 02 	lds	r31, 0x0252	; 0x800252 <callbackPCINT0+0x1>
     c5c:	19 95       	eicall
     c5e:	08 95       	ret

00000c60 <PinChangeInterruptEventPCINT1>:
}
#endif
#if (PCINT_USE_PCINT1 == true)
void PinChangeInterruptEventPCINT1(void) {
	callbackPCINT1();
     c60:	e0 91 57 02 	lds	r30, 0x0257	; 0x800257 <callbackPCINT1>
     c64:	f0 91 58 02 	lds	r31, 0x0258	; 0x800258 <callbackPCINT1+0x1>
     c68:	19 95       	eicall
     c6a:	08 95       	ret

00000c6c <PinChangeInterruptEventPCINT2>:
}
#endif
#if (PCINT_USE_PCINT2 == true)
void PinChangeInterruptEventPCINT2(void) {
	callbackPCINT2();
     c6c:	e0 91 69 02 	lds	r30, 0x0269	; 0x800269 <callbackPCINT2>
     c70:	f0 91 6a 02 	lds	r31, 0x026A	; 0x80026a <callbackPCINT2+0x1>
     c74:	19 95       	eicall
     c76:	08 95       	ret

00000c78 <PinChangeInterruptEventPCINT3>:
}
#endif
#if (PCINT_USE_PCINT3 == true)
void PinChangeInterruptEventPCINT3(void) {
	callbackPCINT3();
     c78:	e0 91 7b 02 	lds	r30, 0x027B	; 0x80027b <callbackPCINT3>
     c7c:	f0 91 7c 02 	lds	r31, 0x027C	; 0x80027c <callbackPCINT3+0x1>
     c80:	19 95       	eicall
     c82:	08 95       	ret

00000c84 <PinChangeInterruptEventPCINT4>:
}
#endif
#if (PCINT_USE_PCINT4 == true)
void PinChangeInterruptEventPCINT4(void) {
	callbackPCINT4();
     c84:	e0 91 6b 02 	lds	r30, 0x026B	; 0x80026b <callbackPCINT4>
     c88:	f0 91 6c 02 	lds	r31, 0x026C	; 0x80026c <callbackPCINT4+0x1>
     c8c:	19 95       	eicall
     c8e:	08 95       	ret

00000c90 <PinChangeInterruptEventPCINT5>:
}
#endif
#if (PCINT_USE_PCINT5 == true)
void PinChangeInterruptEventPCINT5(void) {
	callbackPCINT5();
     c90:	e0 91 75 02 	lds	r30, 0x0275	; 0x800275 <callbackPCINT5>
     c94:	f0 91 76 02 	lds	r31, 0x0276	; 0x800276 <callbackPCINT5+0x1>
     c98:	19 95       	eicall
     c9a:	08 95       	ret

00000c9c <PinChangeInterruptEventPCINT6>:
}
#endif
#if (PCINT_USE_PCINT6 == true)
void PinChangeInterruptEventPCINT6(void) {
	callbackPCINT6();
     c9c:	e0 91 65 02 	lds	r30, 0x0265	; 0x800265 <callbackPCINT6>
     ca0:	f0 91 66 02 	lds	r31, 0x0266	; 0x800266 <callbackPCINT6+0x1>
     ca4:	19 95       	eicall
     ca6:	08 95       	ret

00000ca8 <PinChangeInterruptEventPCINT7>:
}
#endif
#if (PCINT_USE_PCINT7 == true)
void PinChangeInterruptEventPCINT7(void) {
	callbackPCINT7();
     ca8:	e0 91 59 02 	lds	r30, 0x0259	; 0x800259 <callbackPCINT7>
     cac:	f0 91 5a 02 	lds	r31, 0x025A	; 0x80025a <callbackPCINT7+0x1>
     cb0:	19 95       	eicall
     cb2:	08 95       	ret

00000cb4 <__vector_9>:
// Interrupt Handler
//================================================================================
//============= PORT0 ===================================
#if (PCINT_USE_PORT0 == true)

ISR (PCINT0_vect){
     cb4:	1f 92       	push	r1
     cb6:	0f 92       	push	r0
     cb8:	0f b6       	in	r0, 0x3f	; 63
     cba:	0f 92       	push	r0
     cbc:	11 24       	eor	r1, r1
     cbe:	0b b6       	in	r0, 0x3b	; 59
     cc0:	0f 92       	push	r0
     cc2:	2f 93       	push	r18
     cc4:	3f 93       	push	r19
     cc6:	4f 93       	push	r20
     cc8:	5f 93       	push	r21
     cca:	6f 93       	push	r22
     ccc:	7f 93       	push	r23
     cce:	8f 93       	push	r24
     cd0:	9f 93       	push	r25
     cd2:	af 93       	push	r26
     cd4:	bf 93       	push	r27
     cd6:	cf 93       	push	r28
     cd8:	ef 93       	push	r30
     cda:	ff 93       	push	r31
	// get the new and old pin states for port
	uint8_t newPort = PCINT_INPUT_PORT0;
     cdc:	23 b1       	in	r18, 0x03	; 3
	
	// compare with the old value to detect a rising or falling
	uint8_t arrayPos = getArrayPosPCINT(0);
	uint8_t change = newPort ^ oldPorts[arrayPos]; //XOR detects change
     cde:	e4 e3       	ldi	r30, 0x34	; 52
     ce0:	f2 e0       	ldi	r31, 0x02	; 2
     ce2:	c0 81       	ld	r28, Z
     ce4:	82 2f       	mov	r24, r18
     ce6:	8c 27       	eor	r24, r28
	uint8_t falling = change & oldPorts[arrayPos];
	
	// check which pins are triggered, compared with the settings
	uint8_t risingTrigger = rising & risingPorts[arrayPos];
	uint8_t fallingTrigger = falling & fallingPorts[arrayPos];
	uint8_t trigger = risingTrigger | fallingTrigger;
     ce8:	90 91 2e 02 	lds	r25, 0x022E	; 0x80022e <__data_end>
     cec:	92 23       	and	r25, r18
     cee:	30 91 31 02 	lds	r19, 0x0231	; 0x800231 <fallingPorts>
     cf2:	c3 23       	and	r28, r19
     cf4:	c9 2b       	or	r28, r25
     cf6:	c8 23       	and	r28, r24
	
	// save the new state for next comparison
	oldPorts[arrayPos] = newPort;
     cf8:	20 83       	st	Z, r18
	PCINT_CALLBACK(4, 4);
	PCINT_CALLBACK(5, 5);
	PCINT_CALLBACK(6, 6);
	PCINT_CALLBACK(7, 7);
#else
	PCINT_CALLBACK_PORT0
     cfa:	c4 fd       	sbrc	r28, 4
     cfc:	c3 df       	rcall	.-122    	; 0xc84 <PinChangeInterruptEventPCINT4>
     cfe:	c5 fd       	sbrc	r28, 5
     d00:	c7 df       	rcall	.-114    	; 0xc90 <PinChangeInterruptEventPCINT5>
     d02:	c6 fd       	sbrc	r28, 6
     d04:	cb df       	rcall	.-106    	; 0xc9c <PinChangeInterruptEventPCINT6>
     d06:	cc 23       	and	r28, r28
     d08:	0c f4       	brge	.+2      	; 0xd0c <__vector_9+0x58>
     d0a:	ce df       	rcall	.-100    	; 0xca8 <PinChangeInterruptEventPCINT7>
     d0c:	c0 fd       	sbrc	r28, 0
     d0e:	a2 df       	rcall	.-188    	; 0xc54 <PinChangeInterruptEventPCINT0>
     d10:	c1 fd       	sbrc	r28, 1
     d12:	a6 df       	rcall	.-180    	; 0xc60 <PinChangeInterruptEventPCINT1>
     d14:	c2 fd       	sbrc	r28, 2
     d16:	aa df       	rcall	.-172    	; 0xc6c <PinChangeInterruptEventPCINT2>
     d18:	c3 fd       	sbrc	r28, 3
     d1a:	ae df       	rcall	.-164    	; 0xc78 <PinChangeInterruptEventPCINT3>
#endif
	
}
     d1c:	ff 91       	pop	r31
     d1e:	ef 91       	pop	r30
     d20:	cf 91       	pop	r28
     d22:	bf 91       	pop	r27
     d24:	af 91       	pop	r26
     d26:	9f 91       	pop	r25
     d28:	8f 91       	pop	r24
     d2a:	7f 91       	pop	r23
     d2c:	6f 91       	pop	r22
     d2e:	5f 91       	pop	r21
     d30:	4f 91       	pop	r20
     d32:	3f 91       	pop	r19
     d34:	2f 91       	pop	r18
     d36:	0f 90       	pop	r0
     d38:	0b be       	out	0x3b, r0	; 59
     d3a:	0f 90       	pop	r0
     d3c:	0f be       	out	0x3f, r0	; 63
     d3e:	0f 90       	pop	r0
     d40:	1f 90       	pop	r1
     d42:	18 95       	reti

00000d44 <PinChangeInterruptEventPCINT8>:
}
#endif

#if (PCINT_USE_PCINT8 == true)
void PinChangeInterruptEventPCINT8(void) {
	callbackPCINT8();
     d44:	e0 91 67 02 	lds	r30, 0x0267	; 0x800267 <callbackPCINT8>
     d48:	f0 91 68 02 	lds	r31, 0x0268	; 0x800268 <callbackPCINT8+0x1>
     d4c:	19 95       	eicall
     d4e:	08 95       	ret

00000d50 <PinChangeInterruptEventPCINT9>:
}
#endif
#if (PCINT_USE_PCINT9 == true)
void PinChangeInterruptEventPCINT9(void) {
	callbackPCINT9();
     d50:	e0 91 5f 02 	lds	r30, 0x025F	; 0x80025f <callbackPCINT9>
     d54:	f0 91 60 02 	lds	r31, 0x0260	; 0x800260 <callbackPCINT9+0x1>
     d58:	19 95       	eicall
     d5a:	08 95       	ret

00000d5c <PinChangeInterruptEventPCINT10>:
}
#endif
#if (PCINT_USE_PCINT10 == true)
void PinChangeInterruptEventPCINT10(void) {
	callbackPCINT10();
     d5c:	e0 91 71 02 	lds	r30, 0x0271	; 0x800271 <callbackPCINT10>
     d60:	f0 91 72 02 	lds	r31, 0x0272	; 0x800272 <callbackPCINT10+0x1>
     d64:	19 95       	eicall
     d66:	08 95       	ret

00000d68 <PinChangeInterruptEventPCINT11>:
}
#endif
#if (PCINT_USE_PCINT11 == true)
void PinChangeInterruptEventPCINT11(void) {
	callbackPCINT11();
     d68:	e0 91 63 02 	lds	r30, 0x0263	; 0x800263 <callbackPCINT11>
     d6c:	f0 91 64 02 	lds	r31, 0x0264	; 0x800264 <callbackPCINT11+0x1>
     d70:	19 95       	eicall
     d72:	08 95       	ret

00000d74 <PinChangeInterruptEventPCINT12>:
}
#endif
#if (PCINT_USE_PCINT12 == true)
void PinChangeInterruptEventPCINT12(void) {
	callbackPCINT12();
     d74:	e0 91 7d 02 	lds	r30, 0x027D	; 0x80027d <callbackPCINT12>
     d78:	f0 91 7e 02 	lds	r31, 0x027E	; 0x80027e <callbackPCINT12+0x1>
     d7c:	19 95       	eicall
     d7e:	08 95       	ret

00000d80 <PinChangeInterruptEventPCINT13>:
}
#endif
#if (PCINT_USE_PCINT13 == true)
void PinChangeInterruptEventPCINT13(void) {
	callbackPCINT13();
     d80:	e0 91 6f 02 	lds	r30, 0x026F	; 0x80026f <callbackPCINT13>
     d84:	f0 91 70 02 	lds	r31, 0x0270	; 0x800270 <callbackPCINT13+0x1>
     d88:	19 95       	eicall
     d8a:	08 95       	ret

00000d8c <PinChangeInterruptEventPCINT14>:
}
#endif
#if (PCINT_USE_PCINT14 == true)
void PinChangeInterruptEventPCINT14(void) {
	callbackPCINT14();
     d8c:	e0 91 6d 02 	lds	r30, 0x026D	; 0x80026d <callbackPCINT14>
     d90:	f0 91 6e 02 	lds	r31, 0x026E	; 0x80026e <callbackPCINT14+0x1>
     d94:	19 95       	eicall
     d96:	08 95       	ret

00000d98 <PinChangeInterruptEventPCINT15>:
}
#endif
#if (PCINT_USE_PCINT15 == true)
void PinChangeInterruptEventPCINT15(void) {
	callbackPCINT15();
     d98:	e0 91 79 02 	lds	r30, 0x0279	; 0x800279 <callbackPCINT15>
     d9c:	f0 91 7a 02 	lds	r31, 0x027A	; 0x80027a <callbackPCINT15+0x1>
     da0:	19 95       	eicall
     da2:	08 95       	ret

00000da4 <__vector_10>:
	
}

//============= PORT1 ===================================
#if (PCINT_USE_PORT1)
ISR(PCINT1_vect) {
     da4:	1f 92       	push	r1
     da6:	0f 92       	push	r0
     da8:	0f b6       	in	r0, 0x3f	; 63
     daa:	0f 92       	push	r0
     dac:	11 24       	eor	r1, r1
     dae:	0b b6       	in	r0, 0x3b	; 59
     db0:	0f 92       	push	r0
     db2:	2f 93       	push	r18
     db4:	3f 93       	push	r19
     db6:	4f 93       	push	r20
     db8:	5f 93       	push	r21
     dba:	6f 93       	push	r22
     dbc:	7f 93       	push	r23
     dbe:	8f 93       	push	r24
     dc0:	9f 93       	push	r25
     dc2:	af 93       	push	r26
     dc4:	bf 93       	push	r27
     dc6:	cf 93       	push	r28
     dc8:	ef 93       	push	r30
     dca:	ff 93       	push	r31
	// get the new and old pin states for port
	uint8_t newPort = PCINT_INPUT_PORT1;
     dcc:	8c b1       	in	r24, 0x0c	; 12
     dce:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
     dd2:	81 70       	andi	r24, 0x01	; 1
     dd4:	99 0f       	add	r25, r25
     dd6:	98 2b       	or	r25, r24

	// compare with the old value to detect a rising or falling
	uint8_t arrayPos = getArrayPosPCINT(1);
	uint8_t change = newPort ^ oldPorts[arrayPos];
     dd8:	e4 e3       	ldi	r30, 0x34	; 52
     dda:	f2 e0       	ldi	r31, 0x02	; 2
     ddc:	c1 81       	ldd	r28, Z+1	; 0x01
     dde:	89 2f       	mov	r24, r25
     de0:	8c 27       	eor	r24, r28
	uint8_t falling = change & oldPorts[arrayPos];

	// check which pins are triggered, compared with the settings
	uint8_t risingTrigger = rising & risingPorts[arrayPos];
	uint8_t fallingTrigger = falling & fallingPorts[arrayPos];
	uint8_t trigger = risingTrigger | fallingTrigger;
     de2:	20 91 2f 02 	lds	r18, 0x022F	; 0x80022f <__data_end+0x1>
     de6:	29 23       	and	r18, r25
     de8:	30 91 32 02 	lds	r19, 0x0232	; 0x800232 <fallingPorts+0x1>
     dec:	c3 23       	and	r28, r19
     dee:	c2 2b       	or	r28, r18
     df0:	c8 23       	and	r28, r24

	// save the new state for next comparison
	oldPorts[arrayPos] = newPort;
     df2:	91 83       	std	Z+1, r25	; 0x01
	// Execute all functions that should be triggered
	// This way we can exclude a single function
	// and the calling is also much faster
	// We may also reorder the pins for different priority
	#if !defined(PCINT_CALLBACK_PORT1)
	PCINT_CALLBACK(0, 8);
     df4:	c0 fd       	sbrc	r28, 0
     df6:	a6 df       	rcall	.-180    	; 0xd44 <PinChangeInterruptEventPCINT8>
	PCINT_CALLBACK(1, 9);
     df8:	c1 fd       	sbrc	r28, 1
	PCINT_CALLBACK(2, 10);
     dfa:	aa df       	rcall	.-172    	; 0xd50 <PinChangeInterruptEventPCINT9>
     dfc:	c2 fd       	sbrc	r28, 2
	PCINT_CALLBACK(3, 11);
     dfe:	ae df       	rcall	.-164    	; 0xd5c <PinChangeInterruptEventPCINT10>
	PCINT_CALLBACK(4, 12);
     e00:	c3 fd       	sbrc	r28, 3
     e02:	b2 df       	rcall	.-156    	; 0xd68 <PinChangeInterruptEventPCINT11>
	PCINT_CALLBACK(5, 13);
     e04:	c4 fd       	sbrc	r28, 4
     e06:	b6 df       	rcall	.-148    	; 0xd74 <PinChangeInterruptEventPCINT12>
	PCINT_CALLBACK(6, 14);
     e08:	c5 fd       	sbrc	r28, 5
     e0a:	ba df       	rcall	.-140    	; 0xd80 <PinChangeInterruptEventPCINT13>
     e0c:	c6 fd       	sbrc	r28, 6
	PCINT_CALLBACK(7, 15);
     e0e:	be df       	rcall	.-132    	; 0xd8c <PinChangeInterruptEventPCINT14>
     e10:	cc 23       	and	r28, r28
     e12:	0c f4       	brge	.+2      	; 0xe16 <__vector_10+0x72>
     e14:	c1 df       	rcall	.-126    	; 0xd98 <PinChangeInterruptEventPCINT15>
	#else
	PCINT_CALLBACK_PORT1
	#endif
}
     e16:	ff 91       	pop	r31
     e18:	ef 91       	pop	r30
     e1a:	cf 91       	pop	r28
     e1c:	bf 91       	pop	r27
     e1e:	af 91       	pop	r26
     e20:	9f 91       	pop	r25
     e22:	8f 91       	pop	r24
     e24:	7f 91       	pop	r23
     e26:	6f 91       	pop	r22
     e28:	5f 91       	pop	r21
     e2a:	4f 91       	pop	r20
     e2c:	3f 91       	pop	r19
     e2e:	2f 91       	pop	r18
     e30:	0f 90       	pop	r0
     e32:	0b be       	out	0x3b, r0	; 59
     e34:	0f 90       	pop	r0
     e36:	0f be       	out	0x3f, r0	; 63
     e38:	0f 90       	pop	r0
     e3a:	1f 90       	pop	r1
     e3c:	18 95       	reti

00000e3e <PinChangeInterruptEventPCINT16>:
}
#endif

#if (PCINT_USE_PCINT16 == true)
void PinChangeInterruptEventPCINT16(void) {
	callbackPCINT16();
     e3e:	e0 91 5b 02 	lds	r30, 0x025B	; 0x80025b <callbackPCINT16>
     e42:	f0 91 5c 02 	lds	r31, 0x025C	; 0x80025c <callbackPCINT16+0x1>
     e46:	19 95       	eicall
     e48:	08 95       	ret

00000e4a <PinChangeInterruptEventPCINT17>:
}
#endif
#if (PCINT_USE_PCINT17 == true)
void PinChangeInterruptEventPCINT17(void) {
	callbackPCINT17();
     e4a:	e0 91 73 02 	lds	r30, 0x0273	; 0x800273 <callbackPCINT17>
     e4e:	f0 91 74 02 	lds	r31, 0x0274	; 0x800274 <callbackPCINT17+0x1>
     e52:	19 95       	eicall
     e54:	08 95       	ret

00000e56 <PinChangeInterruptEventPCINT18>:
}
#endif
#if (PCINT_USE_PCINT18 == true)
void PinChangeInterruptEventPCINT18(void) {
	callbackPCINT18();
     e56:	e0 91 53 02 	lds	r30, 0x0253	; 0x800253 <callbackPCINT18>
     e5a:	f0 91 54 02 	lds	r31, 0x0254	; 0x800254 <callbackPCINT18+0x1>
     e5e:	19 95       	eicall
     e60:	08 95       	ret

00000e62 <PinChangeInterruptEventPCINT19>:
}
#endif
#if (PCINT_USE_PCINT19 == true)
void PinChangeInterruptEventPCINT19(void) {
	callbackPCINT19();
     e62:	e0 91 5d 02 	lds	r30, 0x025D	; 0x80025d <callbackPCINT19>
     e66:	f0 91 5e 02 	lds	r31, 0x025E	; 0x80025e <callbackPCINT19+0x1>
     e6a:	19 95       	eicall
     e6c:	08 95       	ret

00000e6e <PinChangeInterruptEventPCINT20>:
}
#endif
#if (PCINT_USE_PCINT20 == true)
void PinChangeInterruptEventPCINT20(void) {
	callbackPCINT20();
     e6e:	e0 91 7f 02 	lds	r30, 0x027F	; 0x80027f <callbackPCINT20>
     e72:	f0 91 80 02 	lds	r31, 0x0280	; 0x800280 <callbackPCINT20+0x1>
     e76:	19 95       	eicall
     e78:	08 95       	ret

00000e7a <PinChangeInterruptEventPCINT21>:
}
#endif
#if (PCINT_USE_PCINT21 == true)
void PinChangeInterruptEventPCINT21(void) {
	callbackPCINT21();
     e7a:	e0 91 55 02 	lds	r30, 0x0255	; 0x800255 <callbackPCINT21>
     e7e:	f0 91 56 02 	lds	r31, 0x0256	; 0x800256 <callbackPCINT21+0x1>
     e82:	19 95       	eicall
     e84:	08 95       	ret

00000e86 <PinChangeInterruptEventPCINT22>:
}
#endif
#if (PCINT_USE_PCINT22 == true)
void PinChangeInterruptEventPCINT22(void) {
	callbackPCINT22();
     e86:	e0 91 77 02 	lds	r30, 0x0277	; 0x800277 <callbackPCINT22>
     e8a:	f0 91 78 02 	lds	r31, 0x0278	; 0x800278 <callbackPCINT22+0x1>
     e8e:	19 95       	eicall
     e90:	08 95       	ret

00000e92 <PinChangeInterruptEventPCINT23>:
}
#endif
#if (PCINT_USE_PCINT23 == true)
void PinChangeInterruptEventPCINT23(void) {
	callbackPCINT23();
     e92:	e0 91 61 02 	lds	r30, 0x0261	; 0x800261 <callbackPCINT23>
     e96:	f0 91 62 02 	lds	r31, 0x0262	; 0x800262 <callbackPCINT23+0x1>
     e9a:	19 95       	eicall
     e9c:	08 95       	ret

00000e9e <__vector_11>:
	#endif
}
#endif
//============= PORT2 ===================================
#if (PCINT_USE_PORT2)
ISR(PCINT2_vect) {
     e9e:	1f 92       	push	r1
     ea0:	0f 92       	push	r0
     ea2:	0f b6       	in	r0, 0x3f	; 63
     ea4:	0f 92       	push	r0
     ea6:	11 24       	eor	r1, r1
     ea8:	0b b6       	in	r0, 0x3b	; 59
     eaa:	0f 92       	push	r0
     eac:	2f 93       	push	r18
     eae:	3f 93       	push	r19
     eb0:	4f 93       	push	r20
     eb2:	5f 93       	push	r21
     eb4:	6f 93       	push	r22
     eb6:	7f 93       	push	r23
     eb8:	8f 93       	push	r24
     eba:	9f 93       	push	r25
     ebc:	af 93       	push	r26
     ebe:	bf 93       	push	r27
     ec0:	cf 93       	push	r28
     ec2:	ef 93       	push	r30
     ec4:	ff 93       	push	r31
	// get the new and old pin states for port
	uint8_t newPort = PCINT_INPUT_PORT2;
     ec6:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>

	// compare with the old value to detect a rising or falling
	uint8_t arrayPos = getArrayPosPCINT(2);
	uint8_t change = newPort ^ oldPorts[arrayPos];
     eca:	e4 e3       	ldi	r30, 0x34	; 52
     ecc:	f2 e0       	ldi	r31, 0x02	; 2
     ece:	c2 81       	ldd	r28, Z+2	; 0x02
     ed0:	82 2f       	mov	r24, r18
     ed2:	8c 27       	eor	r24, r28
	uint8_t falling = change & oldPorts[arrayPos];

	// check which pins are triggered, compared with the settings
	uint8_t risingTrigger = rising & risingPorts[arrayPos];
	uint8_t fallingTrigger = falling & fallingPorts[arrayPos];
	uint8_t trigger = risingTrigger | fallingTrigger;
     ed4:	90 91 30 02 	lds	r25, 0x0230	; 0x800230 <__data_end+0x2>
     ed8:	92 23       	and	r25, r18
     eda:	30 91 33 02 	lds	r19, 0x0233	; 0x800233 <fallingPorts+0x2>
     ede:	c3 23       	and	r28, r19
     ee0:	c9 2b       	or	r28, r25
     ee2:	c8 23       	and	r28, r24

	// save the new state for next comparison
	oldPorts[arrayPos] = newPort;
     ee4:	22 83       	std	Z+2, r18	; 0x02
	// Execute all functions that should be triggered
	// This way we can exclude a single function
	// and the calling is also much faster
	// We may also reorder the pins for different priority
	#if !defined(PCINT_CALLBACK_PORT2)
	PCINT_CALLBACK(0, 16);
     ee6:	c0 fd       	sbrc	r28, 0
     ee8:	aa df       	rcall	.-172    	; 0xe3e <PinChangeInterruptEventPCINT16>
	PCINT_CALLBACK(1, 17);
     eea:	c1 fd       	sbrc	r28, 1
	PCINT_CALLBACK(2, 18);
     eec:	ae df       	rcall	.-164    	; 0xe4a <PinChangeInterruptEventPCINT17>
     eee:	c2 fd       	sbrc	r28, 2
	PCINT_CALLBACK(3, 19);
     ef0:	b2 df       	rcall	.-156    	; 0xe56 <PinChangeInterruptEventPCINT18>
	PCINT_CALLBACK(4, 20);
     ef2:	c3 fd       	sbrc	r28, 3
     ef4:	b6 df       	rcall	.-148    	; 0xe62 <PinChangeInterruptEventPCINT19>
	PCINT_CALLBACK(5, 21);
     ef6:	c4 fd       	sbrc	r28, 4
     ef8:	ba df       	rcall	.-140    	; 0xe6e <PinChangeInterruptEventPCINT20>
	PCINT_CALLBACK(6, 22);
     efa:	c5 fd       	sbrc	r28, 5
     efc:	be df       	rcall	.-132    	; 0xe7a <PinChangeInterruptEventPCINT21>
     efe:	c6 fd       	sbrc	r28, 6
	PCINT_CALLBACK(7, 23);
     f00:	c2 df       	rcall	.-124    	; 0xe86 <PinChangeInterruptEventPCINT22>
     f02:	cc 23       	and	r28, r28
     f04:	0c f4       	brge	.+2      	; 0xf08 <__vector_11+0x6a>
     f06:	c5 df       	rcall	.-118    	; 0xe92 <PinChangeInterruptEventPCINT23>
	#else
	PCINT_CALLBACK_PORT2
	#endif
}
     f08:	ff 91       	pop	r31
     f0a:	ef 91       	pop	r30
     f0c:	cf 91       	pop	r28
     f0e:	bf 91       	pop	r27
     f10:	af 91       	pop	r26
     f12:	9f 91       	pop	r25
     f14:	8f 91       	pop	r24
     f16:	7f 91       	pop	r23
     f18:	6f 91       	pop	r22
     f1a:	5f 91       	pop	r21
     f1c:	4f 91       	pop	r20
     f1e:	3f 91       	pop	r19
     f20:	2f 91       	pop	r18
     f22:	0f 90       	pop	r0
     f24:	0b be       	out	0x3b, r0	; 59
     f26:	0f 90       	pop	r0
     f28:	0f be       	out	0x3f, r0	; 63
     f2a:	0f 90       	pop	r0
     f2c:	1f 90       	pop	r1
     f2e:	18 95       	reti

00000f30 <pwm_init>:
*/

void pwm_init(void)
{
	// Configure Timer1
	TCCR1B = 0;
     f30:	e1 e8       	ldi	r30, 0x81	; 129
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	10 82       	st	Z, r1
	bitSet(TCCR1B, CS11); 
     f36:	80 81       	ld	r24, Z
     f38:	82 60       	ori	r24, 0x02	; 2
     f3a:	80 83       	st	Z, r24
	bitSet(TCCR1B, CS10);	// set clk/64 prescaler
     f3c:	80 81       	ld	r24, Z
     f3e:	81 60       	ori	r24, 0x01	; 1
     f40:	80 83       	st	Z, r24
	bitSet(TCCR1A, WGM10);	// PWM, Phase Correct, 8-bit
     f42:	e0 e8       	ldi	r30, 0x80	; 128
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	80 81       	ld	r24, Z
     f48:	81 60       	ori	r24, 0x01	; 1
     f4a:	80 83       	st	Z, r24
	
	// Configure Timer2
	bitSet(TCCR2B, CS22);	// clk/64 prescaler
     f4c:	e1 eb       	ldi	r30, 0xB1	; 177
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	80 81       	ld	r24, Z
     f52:	84 60       	ori	r24, 0x04	; 4
     f54:	80 83       	st	Z, r24
	bitSet(TCCR2A, WGM20);	// PWM, Phase Correct
     f56:	e0 eb       	ldi	r30, 0xB0	; 176
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	81 60       	ori	r24, 0x01	; 1
     f5e:	80 83       	st	Z, r24
	
	// Configure Timer3
	bitSet(TCCR3B, CS31);	
     f60:	e1 e9       	ldi	r30, 0x91	; 145
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	80 81       	ld	r24, Z
     f66:	82 60       	ori	r24, 0x02	; 2
     f68:	80 83       	st	Z, r24
	bitSet(TCCR3B, CS30);	// clk/64 prescaler
     f6a:	80 81       	ld	r24, Z
     f6c:	81 60       	ori	r24, 0x01	; 1
     f6e:	80 83       	st	Z, r24
	bitSet(TCCR3A, WGM30);	// PWM, Phase Correct
     f70:	e0 e9       	ldi	r30, 0x90	; 144
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	80 81       	ld	r24, Z
     f76:	81 60       	ori	r24, 0x01	; 1
     f78:	80 83       	st	Z, r24
	
	// Configure Timer4
	bitSet(TCCR4B, CS41);	
     f7a:	e1 ea       	ldi	r30, 0xA1	; 161
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	82 60       	ori	r24, 0x02	; 2
     f82:	80 83       	st	Z, r24
	bitSet(TCCR4B, CS40);	// clk/64 prescaler
     f84:	80 81       	ld	r24, Z
     f86:	81 60       	ori	r24, 0x01	; 1
     f88:	80 83       	st	Z, r24
	bitSet(TCCR4A, WGM40);	// PWM, Phase Correct
     f8a:	e0 ea       	ldi	r30, 0xA0	; 160
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	81 60       	ori	r24, 0x01	; 1
     f92:	80 83       	st	Z, r24
	
	// Configure Timer5
	bitSet(TCCR5B, CS51);
     f94:	e1 e2       	ldi	r30, 0x21	; 33
     f96:	f1 e0       	ldi	r31, 0x01	; 1
     f98:	80 81       	ld	r24, Z
     f9a:	82 60       	ori	r24, 0x02	; 2
     f9c:	80 83       	st	Z, r24
	bitSet(TCCR5B, CS50);	// clk/64 prescaler
     f9e:	80 81       	ld	r24, Z
     fa0:	81 60       	ori	r24, 0x01	; 1
     fa2:	80 83       	st	Z, r24
	bitSet(TCCR5A, WGM50);	// PWM, Phase Correct
     fa4:	e0 e2       	ldi	r30, 0x20	; 32
     fa6:	f1 e0       	ldi	r31, 0x01	; 1
     fa8:	80 81       	ld	r24, Z
     faa:	81 60       	ori	r24, 0x01	; 1
     fac:	80 83       	st	Z, r24
     fae:	08 95       	ret

00000fb0 <analogWrite>:
	 
}

// PWM output
void analogWrite(uint8_t pin, int val)
{
     fb0:	1f 93       	push	r17
     fb2:	cf 93       	push	r28
     fb4:	df 93       	push	r29
     fb6:	18 2f       	mov	r17, r24
     fb8:	eb 01       	movw	r28, r22
	
	pinMode(pin, OUTPUT);
     fba:	61 e0       	ldi	r22, 0x01	; 1
     fbc:	dc da       	rcall	.-2632   	; 0x576 <pinMode>
	if (val == 0)
     fbe:	20 97       	sbiw	r28, 0x00	; 0
     fc0:	21 f4       	brne	.+8      	; 0xfca <analogWrite+0x1a>
	{
		digitalWrite(pin, LOW);
     fc2:	60 e0       	ldi	r22, 0x00	; 0
     fc4:	81 2f       	mov	r24, r17
     fc6:	16 db       	rcall	.-2516   	; 0x5f4 <digitalWrite>
     fc8:	b5 c0       	rjmp	.+362    	; 0x1134 <analogWrite+0x184>
	}
	else if (val == 255)
     fca:	cf 3f       	cpi	r28, 0xFF	; 255
     fcc:	d1 05       	cpc	r29, r1
     fce:	21 f4       	brne	.+8      	; 0xfd8 <analogWrite+0x28>
	{
		digitalWrite(pin, HIGH);
     fd0:	61 e0       	ldi	r22, 0x01	; 1
     fd2:	81 2f       	mov	r24, r17
     fd4:	0f db       	rcall	.-2530   	; 0x5f4 <digitalWrite>
     fd6:	ae c0       	rjmp	.+348    	; 0x1134 <analogWrite+0x184>
	}
	else{
		switch(pinToTimer(pin))
     fd8:	e1 2f       	mov	r30, r17
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	e8 5e       	subi	r30, 0xE8	; 232
     fde:	fe 4f       	sbci	r31, 0xFE	; 254
     fe0:	e4 91       	lpm	r30, Z
     fe2:	8e 2f       	mov	r24, r30
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	fc 01       	movw	r30, r24
     fe8:	31 97       	sbiw	r30, 0x01	; 1
     fea:	e2 31       	cpi	r30, 0x12	; 18
     fec:	f1 05       	cpc	r31, r1
     fee:	08 f0       	brcs	.+2      	; 0xff2 <analogWrite+0x42>
     ff0:	97 c0       	rjmp	.+302    	; 0x1120 <analogWrite+0x170>
     ff2:	88 27       	eor	r24, r24
     ff4:	e6 58       	subi	r30, 0x86	; 134
     ff6:	ff 4f       	sbci	r31, 0xFF	; 255
     ff8:	8f 4f       	sbci	r24, 0xFF	; 255
     ffa:	e3 c1       	rjmp	.+966    	; 0x13c2 <__tablejump2__>
		{
			//Timer 0
			case TIMER0A:
				//connect pwm to pin on timer 0, channel A
				bitSet(TCCR0A, COM0A1); //clear OC0A on compare match
     ffc:	84 b5       	in	r24, 0x24	; 36
     ffe:	80 68       	ori	r24, 0x80	; 128
    1000:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; //set pwm duty
    1002:	c7 bd       	out	0x27, r28	; 39
			break;
    1004:	97 c0       	rjmp	.+302    	; 0x1134 <analogWrite+0x184>
			
			case TIMER0B:
				//connect pwm to pin on timer 0, channel B
				bitSet(TCCR0B, COM0B1); //clear OC0A on compare match
    1006:	85 b5       	in	r24, 0x25	; 37
    1008:	80 62       	ori	r24, 0x20	; 32
    100a:	85 bd       	out	0x25, r24	; 37
				OCR0B = val; //set pwm duty
    100c:	c8 bd       	out	0x28, r28	; 40
			break;
    100e:	92 c0       	rjmp	.+292    	; 0x1134 <analogWrite+0x184>
			
			//Timer 1
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				bitSet(TCCR1A, COM1A1);
    1010:	e0 e8       	ldi	r30, 0x80	; 128
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	80 81       	ld	r24, Z
    1016:	80 68       	ori	r24, 0x80	; 128
    1018:	80 83       	st	Z, r24
				OCR1A = val; // set pwm duty
    101a:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
    101e:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
			break;
    1022:	88 c0       	rjmp	.+272    	; 0x1134 <analogWrite+0x184>
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				bitSet(TCCR1A, COM1B1);
    1024:	e0 e8       	ldi	r30, 0x80	; 128
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	80 62       	ori	r24, 0x20	; 32
    102c:	80 83       	st	Z, r24
				OCR1B = val; // set pwm duty
    102e:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
    1032:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
			break;
    1036:	7e c0       	rjmp	.+252    	; 0x1134 <analogWrite+0x184>
			case TIMER1C:
				// connect pwm to pin on timer 1, channel C
				bitSet(TCCR1A, COM1C1);
    1038:	e0 e8       	ldi	r30, 0x80	; 128
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	88 60       	ori	r24, 0x08	; 8
    1040:	80 83       	st	Z, r24
				OCR1C = val; // set pwm duty
    1042:	d0 93 8d 00 	sts	0x008D, r29	; 0x80008d <__TEXT_REGION_LENGTH__+0x70008d>
    1046:	c0 93 8c 00 	sts	0x008C, r28	; 0x80008c <__TEXT_REGION_LENGTH__+0x70008c>
			break;
    104a:	74 c0       	rjmp	.+232    	; 0x1134 <analogWrite+0x184>
			
			//Timer 2
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				bitSet(TCCR2A, COM2A1);
    104c:	e0 eb       	ldi	r30, 0xB0	; 176
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	80 81       	ld	r24, Z
    1052:	80 68       	ori	r24, 0x80	; 128
    1054:	80 83       	st	Z, r24
				OCR2A = val; // set pwm duty
    1056:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
			break;
    105a:	6c c0       	rjmp	.+216    	; 0x1134 <analogWrite+0x184>
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				bitSet(TCCR2A, COM2B1);
    105c:	e0 eb       	ldi	r30, 0xB0	; 176
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	80 62       	ori	r24, 0x20	; 32
    1064:	80 83       	st	Z, r24
				OCR2B = val; // set pwm duty
    1066:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7000b4>
			break;
    106a:	64 c0       	rjmp	.+200    	; 0x1134 <analogWrite+0x184>
			
			//Timer 3
			case TIMER3A:
				// connect pwm to pin on timer 3, channel A
				bitSet(TCCR3A, COM3A1);
    106c:	e0 e9       	ldi	r30, 0x90	; 144
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 81       	ld	r24, Z
    1072:	80 68       	ori	r24, 0x80	; 128
    1074:	80 83       	st	Z, r24
				OCR3A = val; // set pwm duty
    1076:	d0 93 99 00 	sts	0x0099, r29	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
    107a:	c0 93 98 00 	sts	0x0098, r28	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
			break;
    107e:	5a c0       	rjmp	.+180    	; 0x1134 <analogWrite+0x184>
			case TIMER3B:
				// connect pwm to pin on timer 3, channel B
				bitSet(TCCR3A, COM3B1);
    1080:	e0 e9       	ldi	r30, 0x90	; 144
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 81       	ld	r24, Z
    1086:	80 62       	ori	r24, 0x20	; 32
    1088:	80 83       	st	Z, r24
				OCR3B = val; // set pwm duty
    108a:	d0 93 9b 00 	sts	0x009B, r29	; 0x80009b <__TEXT_REGION_LENGTH__+0x70009b>
    108e:	c0 93 9a 00 	sts	0x009A, r28	; 0x80009a <__TEXT_REGION_LENGTH__+0x70009a>
			break;
    1092:	50 c0       	rjmp	.+160    	; 0x1134 <analogWrite+0x184>
			case TIMER3C:
				// connect pwm to pin on timer 3, channel C
				bitSet(TCCR3A, COM3C1);
    1094:	e0 e9       	ldi	r30, 0x90	; 144
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	80 81       	ld	r24, Z
    109a:	88 60       	ori	r24, 0x08	; 8
    109c:	80 83       	st	Z, r24
				OCR3C = val; // set pwm duty
    109e:	d0 93 9d 00 	sts	0x009D, r29	; 0x80009d <__TEXT_REGION_LENGTH__+0x70009d>
    10a2:	c0 93 9c 00 	sts	0x009C, r28	; 0x80009c <__TEXT_REGION_LENGTH__+0x70009c>
			break;
    10a6:	46 c0       	rjmp	.+140    	; 0x1134 <analogWrite+0x184>
			
			//Timer 4
			case TIMER4A:
				//connect pwm to pin on timer 4, channel A
				bitSet(TCCR4A, COM4A1);
    10a8:	e0 ea       	ldi	r30, 0xA0	; 160
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	80 81       	ld	r24, Z
    10ae:	80 68       	ori	r24, 0x80	; 128
    10b0:	80 83       	st	Z, r24
				OCR4A = val;	// set pwm duty
    10b2:	d0 93 a9 00 	sts	0x00A9, r29	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
    10b6:	c0 93 a8 00 	sts	0x00A8, r28	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
			break;
    10ba:	3c c0       	rjmp	.+120    	; 0x1134 <analogWrite+0x184>
			case TIMER4B:
				// connect pwm to pin on timer 4, channel B
				bitSet(TCCR4A, COM4B1);
    10bc:	e0 ea       	ldi	r30, 0xA0	; 160
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	80 81       	ld	r24, Z
    10c2:	80 62       	ori	r24, 0x20	; 32
    10c4:	80 83       	st	Z, r24
				OCR4B = val; // set pwm duty
    10c6:	d0 93 ab 00 	sts	0x00AB, r29	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7000ab>
    10ca:	c0 93 aa 00 	sts	0x00AA, r28	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7000aa>
			break;
    10ce:	32 c0       	rjmp	.+100    	; 0x1134 <analogWrite+0x184>
			case TIMER4C:
				// connect pwm to pin on timer 4, channel C
				bitSet(TCCR4A, COM4C1);
    10d0:	e0 ea       	ldi	r30, 0xA0	; 160
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	80 81       	ld	r24, Z
    10d6:	88 60       	ori	r24, 0x08	; 8
    10d8:	80 83       	st	Z, r24
				OCR4C = val; // set pwm duty
    10da:	d0 93 ad 00 	sts	0x00AD, r29	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7000ad>
    10de:	c0 93 ac 00 	sts	0x00AC, r28	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7000ac>
			break;
    10e2:	28 c0       	rjmp	.+80     	; 0x1134 <analogWrite+0x184>
			//timer 5
			case TIMER5A:
				// connect pwm to pin on timer 5, channel A
				bitSet(TCCR5A, COM5A1);
    10e4:	e0 e2       	ldi	r30, 0x20	; 32
    10e6:	f1 e0       	ldi	r31, 0x01	; 1
    10e8:	80 81       	ld	r24, Z
    10ea:	80 68       	ori	r24, 0x80	; 128
    10ec:	80 83       	st	Z, r24
				OCR5A = val; // set pwm duty
    10ee:	d0 93 29 01 	sts	0x0129, r29	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    10f2:	c0 93 28 01 	sts	0x0128, r28	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
			break;
    10f6:	1e c0       	rjmp	.+60     	; 0x1134 <analogWrite+0x184>
			case TIMER5B:
				// connect pwm to pin on timer 5, channel B
				bitSet(TCCR5A, COM5B1);
    10f8:	e0 e2       	ldi	r30, 0x20	; 32
    10fa:	f1 e0       	ldi	r31, 0x01	; 1
    10fc:	80 81       	ld	r24, Z
    10fe:	80 62       	ori	r24, 0x20	; 32
    1100:	80 83       	st	Z, r24
				OCR5B = val; // set pwm duty
    1102:	d0 93 2b 01 	sts	0x012B, r29	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
    1106:	c0 93 2a 01 	sts	0x012A, r28	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
			break;
    110a:	14 c0       	rjmp	.+40     	; 0x1134 <analogWrite+0x184>
			case TIMER5C:
				// connect pwm to pin on timer 5, channel C
				bitSet(TCCR5A, COM5C1);
    110c:	e0 e2       	ldi	r30, 0x20	; 32
    110e:	f1 e0       	ldi	r31, 0x01	; 1
    1110:	80 81       	ld	r24, Z
    1112:	88 60       	ori	r24, 0x08	; 8
    1114:	80 83       	st	Z, r24
				OCR5C = val; // set pwm duty
    1116:	d0 93 2d 01 	sts	0x012D, r29	; 0x80012d <__TEXT_REGION_LENGTH__+0x70012d>
    111a:	c0 93 2c 01 	sts	0x012C, r28	; 0x80012c <__TEXT_REGION_LENGTH__+0x70012c>
			break;
    111e:	0a c0       	rjmp	.+20     	; 0x1134 <analogWrite+0x184>
			case NOT_ON_TIMER:
			
			default:
				if (val < 128) {
    1120:	c0 38       	cpi	r28, 0x80	; 128
    1122:	d1 05       	cpc	r29, r1
					digitalWrite(pin, LOW);
    1124:	24 f4       	brge	.+8      	; 0x112e <analogWrite+0x17e>
    1126:	60 e0       	ldi	r22, 0x00	; 0
    1128:	81 2f       	mov	r24, r17
    112a:	64 da       	rcall	.-2872   	; 0x5f4 <digitalWrite>
				} else {
					digitalWrite(pin, HIGH);
    112c:	03 c0       	rjmp	.+6      	; 0x1134 <analogWrite+0x184>
    112e:	61 e0       	ldi	r22, 0x01	; 1
    1130:	81 2f       	mov	r24, r17
    1132:	60 da       	rcall	.-2880   	; 0x5f4 <digitalWrite>
				}
		}
	}
    1134:	df 91       	pop	r29
    1136:	cf 91       	pop	r28
    1138:	1f 91       	pop	r17
    113a:	08 95       	ret

0000113c <millis_init>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    113c:	78 94       	sei
    113e:	84 b5       	in	r24, 0x24	; 36
    1140:	82 60       	ori	r24, 0x02	; 2
    1142:	84 bd       	out	0x24, r24	; 36
    1144:	84 b5       	in	r24, 0x24	; 36
    1146:	81 60       	ori	r24, 0x01	; 1
    1148:	84 bd       	out	0x24, r24	; 36
    114a:	85 b5       	in	r24, 0x25	; 37
    114c:	82 60       	ori	r24, 0x02	; 2
    114e:	85 bd       	out	0x25, r24	; 37
    1150:	85 b5       	in	r24, 0x25	; 37
    1152:	81 60       	ori	r24, 0x01	; 1
    1154:	85 bd       	out	0x25, r24	; 37
    1156:	ee e6       	ldi	r30, 0x6E	; 110
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	80 81       	ld	r24, Z
    115c:	81 60       	ori	r24, 0x01	; 1
    115e:	80 83       	st	Z, r24
    1160:	08 95       	ret

00001162 <__vector_23>:
	// return = 4 cycles	
}


ISR(TIMER0_OVF_vect)
{
    1162:	1f 92       	push	r1
    1164:	0f 92       	push	r0
    1166:	0f b6       	in	r0, 0x3f	; 63
    1168:	0f 92       	push	r0
    116a:	11 24       	eor	r1, r1
    116c:	2f 93       	push	r18
    116e:	3f 93       	push	r19
    1170:	8f 93       	push	r24
    1172:	9f 93       	push	r25
    1174:	af 93       	push	r26
    1176:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    1178:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <timer0_millis>
    117c:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <timer0_millis+0x1>
    1180:	a0 91 3a 02 	lds	r26, 0x023A	; 0x80023a <timer0_millis+0x2>
    1184:	b0 91 3b 02 	lds	r27, 0x023B	; 0x80023b <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    1188:	30 91 37 02 	lds	r19, 0x0237	; 0x800237 <timer0_fract>
	
	m += MILLIS_INC;
	f += FRACT_INC;
    118c:	23 e0       	ldi	r18, 0x03	; 3
    118e:	23 0f       	add	r18, r19
	
	if(f >= FRACT_MAX){
    1190:	2d 37       	cpi	r18, 0x7D	; 125
    1192:	20 f4       	brcc	.+8      	; 0x119c <__vector_23+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;
	
	m += MILLIS_INC;
    1194:	01 96       	adiw	r24, 0x01	; 1
    1196:	a1 1d       	adc	r26, r1
    1198:	b1 1d       	adc	r27, r1
    119a:	05 c0       	rjmp	.+10     	; 0x11a6 <__vector_23+0x44>
	f += FRACT_INC;
	
	if(f >= FRACT_MAX){
		f -= FRACT_MAX;
    119c:	26 e8       	ldi	r18, 0x86	; 134
    119e:	23 0f       	add	r18, r19
		m += 1;
    11a0:	02 96       	adiw	r24, 0x02	; 2
    11a2:	a1 1d       	adc	r26, r1
    11a4:	b1 1d       	adc	r27, r1
	}
	
	timer0_fract = f;
    11a6:	20 93 37 02 	sts	0x0237, r18	; 0x800237 <timer0_fract>
	timer0_millis = m;
    11aa:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <timer0_millis>
    11ae:	90 93 39 02 	sts	0x0239, r25	; 0x800239 <timer0_millis+0x1>
    11b2:	a0 93 3a 02 	sts	0x023A, r26	; 0x80023a <timer0_millis+0x2>
    11b6:	b0 93 3b 02 	sts	0x023B, r27	; 0x80023b <timer0_millis+0x3>
	timer0_overflow_count++;
    11ba:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <timer0_overflow_count>
    11be:	90 91 3d 02 	lds	r25, 0x023D	; 0x80023d <timer0_overflow_count+0x1>
    11c2:	a0 91 3e 02 	lds	r26, 0x023E	; 0x80023e <timer0_overflow_count+0x2>
    11c6:	b0 91 3f 02 	lds	r27, 0x023F	; 0x80023f <timer0_overflow_count+0x3>
    11ca:	01 96       	adiw	r24, 0x01	; 1
    11cc:	a1 1d       	adc	r26, r1
    11ce:	b1 1d       	adc	r27, r1
    11d0:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <timer0_overflow_count>
    11d4:	90 93 3d 02 	sts	0x023D, r25	; 0x80023d <timer0_overflow_count+0x1>
    11d8:	a0 93 3e 02 	sts	0x023E, r26	; 0x80023e <timer0_overflow_count+0x2>
    11dc:	b0 93 3f 02 	sts	0x023F, r27	; 0x80023f <timer0_overflow_count+0x3>
    11e0:	bf 91       	pop	r27
    11e2:	af 91       	pop	r26
    11e4:	9f 91       	pop	r25
    11e6:	8f 91       	pop	r24
    11e8:	3f 91       	pop	r19
    11ea:	2f 91       	pop	r18
    11ec:	0f 90       	pop	r0
    11ee:	0f be       	out	0x3f, r0	; 63
    11f0:	0f 90       	pop	r0
    11f2:	1f 90       	pop	r1
    11f4:	18 95       	reti

000011f6 <disableTimer>:
		}
	}
	  
	disableTimer(_timer);
	digitalWrite(_pin, 0);
}
    11f6:	82 30       	cpi	r24, 0x02	; 2
    11f8:	a9 f0       	breq	.+42     	; 0x1224 <disableTimer+0x2e>
    11fa:	28 f4       	brcc	.+10     	; 0x1206 <disableTimer+0x10>
    11fc:	88 23       	and	r24, r24
    11fe:	49 f0       	breq	.+18     	; 0x1212 <disableTimer+0x1c>
    1200:	81 30       	cpi	r24, 0x01	; 1
    1202:	51 f0       	breq	.+20     	; 0x1218 <disableTimer+0x22>
    1204:	08 95       	ret
    1206:	84 30       	cpi	r24, 0x04	; 4
    1208:	21 f1       	breq	.+72     	; 0x1252 <disableTimer+0x5c>
    120a:	e8 f0       	brcs	.+58     	; 0x1246 <disableTimer+0x50>
    120c:	85 30       	cpi	r24, 0x05	; 5
    120e:	39 f1       	breq	.+78     	; 0x125e <disableTimer+0x68>
    1210:	08 95       	ret
    1212:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
    1216:	08 95       	ret
    1218:	ef e6       	ldi	r30, 0x6F	; 111
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	80 81       	ld	r24, Z
    121e:	8d 7f       	andi	r24, 0xFD	; 253
    1220:	80 83       	st	Z, r24
    1222:	08 95       	ret
    1224:	e0 e7       	ldi	r30, 0x70	; 112
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	80 81       	ld	r24, Z
    122a:	8d 7f       	andi	r24, 0xFD	; 253
    122c:	80 83       	st	Z, r24
    122e:	81 e0       	ldi	r24, 0x01	; 1
    1230:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    1234:	e1 eb       	ldi	r30, 0xB1	; 177
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	80 81       	ld	r24, Z
    123a:	88 7f       	andi	r24, 0xF8	; 248
    123c:	84 60       	ori	r24, 0x04	; 4
    123e:	80 83       	st	Z, r24
    1240:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
    1244:	08 95       	ret
    1246:	e1 e7       	ldi	r30, 0x71	; 113
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	80 81       	ld	r24, Z
    124c:	8d 7f       	andi	r24, 0xFD	; 253
    124e:	80 83       	st	Z, r24
    1250:	08 95       	ret
    1252:	e2 e7       	ldi	r30, 0x72	; 114
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 81       	ld	r24, Z
    1258:	8d 7f       	andi	r24, 0xFD	; 253
    125a:	80 83       	st	Z, r24
    125c:	08 95       	ret
    125e:	e3 e7       	ldi	r30, 0x73	; 115
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	80 81       	ld	r24, Z
    1264:	8d 7f       	andi	r24, 0xFD	; 253
    1266:	80 83       	st	Z, r24
    1268:	08 95       	ret

0000126a <__vector_32>:
}
#endif

#ifdef USE_TIMER3
ISR(TIMER3_COMPA_vect)
{
    126a:	1f 92       	push	r1
    126c:	0f 92       	push	r0
    126e:	0f b6       	in	r0, 0x3f	; 63
    1270:	0f 92       	push	r0
    1272:	11 24       	eor	r1, r1
    1274:	0b b6       	in	r0, 0x3b	; 59
    1276:	0f 92       	push	r0
    1278:	2f 93       	push	r18
    127a:	3f 93       	push	r19
    127c:	4f 93       	push	r20
    127e:	5f 93       	push	r21
    1280:	6f 93       	push	r22
    1282:	7f 93       	push	r23
    1284:	8f 93       	push	r24
    1286:	9f 93       	push	r25
    1288:	af 93       	push	r26
    128a:	bf 93       	push	r27
    128c:	ef 93       	push	r30
    128e:	ff 93       	push	r31
	if (timer3_toggle_count != 0)
    1290:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <timer3_toggle_count>
    1294:	90 91 91 02 	lds	r25, 0x0291	; 0x800291 <timer3_toggle_count+0x1>
    1298:	a0 91 92 02 	lds	r26, 0x0292	; 0x800292 <timer3_toggle_count+0x2>
    129c:	b0 91 93 02 	lds	r27, 0x0293	; 0x800293 <timer3_toggle_count+0x3>
    12a0:	89 2b       	or	r24, r25
    12a2:	8a 2b       	or	r24, r26
    12a4:	8b 2b       	or	r24, r27
    12a6:	51 f1       	breq	.+84     	; 0x12fc <__vector_32+0x92>
	{
		// toggle the pin
		*timer3_pin_port ^= timer3_pin_mask;
    12a8:	90 91 82 02 	lds	r25, 0x0282	; 0x800282 <timer3_pin_mask>
    12ac:	e0 91 8a 02 	lds	r30, 0x028A	; 0x80028a <timer3_pin_port>
    12b0:	f0 91 8b 02 	lds	r31, 0x028B	; 0x80028b <timer3_pin_port+0x1>
    12b4:	80 81       	ld	r24, Z
    12b6:	89 27       	eor	r24, r25
    12b8:	80 83       	st	Z, r24
		
		if (timer3_toggle_count > 0)
    12ba:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <timer3_toggle_count>
    12be:	90 91 91 02 	lds	r25, 0x0291	; 0x800291 <timer3_toggle_count+0x1>
    12c2:	a0 91 92 02 	lds	r26, 0x0292	; 0x800292 <timer3_toggle_count+0x2>
    12c6:	b0 91 93 02 	lds	r27, 0x0293	; 0x800293 <timer3_toggle_count+0x3>
    12ca:	18 16       	cp	r1, r24
    12cc:	19 06       	cpc	r1, r25
    12ce:	1a 06       	cpc	r1, r26
    12d0:	1b 06       	cpc	r1, r27
    12d2:	04 f5       	brge	.+64     	; 0x1314 <__vector_32+0xaa>
			timer3_toggle_count--;
    12d4:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <timer3_toggle_count>
    12d8:	90 91 91 02 	lds	r25, 0x0291	; 0x800291 <timer3_toggle_count+0x1>
    12dc:	a0 91 92 02 	lds	r26, 0x0292	; 0x800292 <timer3_toggle_count+0x2>
    12e0:	b0 91 93 02 	lds	r27, 0x0293	; 0x800293 <timer3_toggle_count+0x3>
    12e4:	01 97       	sbiw	r24, 0x01	; 1
    12e6:	a1 09       	sbc	r26, r1
    12e8:	b1 09       	sbc	r27, r1
    12ea:	80 93 90 02 	sts	0x0290, r24	; 0x800290 <timer3_toggle_count>
    12ee:	90 93 91 02 	sts	0x0291, r25	; 0x800291 <timer3_toggle_count+0x1>
    12f2:	a0 93 92 02 	sts	0x0292, r26	; 0x800292 <timer3_toggle_count+0x2>
    12f6:	b0 93 93 02 	sts	0x0293, r27	; 0x800293 <timer3_toggle_count+0x3>
    12fa:	0c c0       	rjmp	.+24     	; 0x1314 <__vector_32+0xaa>
	}
	else
	{
		disableTimer(3);
    12fc:	83 e0       	ldi	r24, 0x03	; 3
    12fe:	7b df       	rcall	.-266    	; 0x11f6 <disableTimer>
		
		*timer3_pin_port &= ~(timer3_pin_mask);  // keep pin low after stop
    1300:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <timer3_pin_mask>
    1304:	e0 91 8a 02 	lds	r30, 0x028A	; 0x80028a <timer3_pin_port>
    1308:	f0 91 8b 02 	lds	r31, 0x028B	; 0x80028b <timer3_pin_port+0x1>
    130c:	90 81       	ld	r25, Z
    130e:	80 95       	com	r24
    1310:	89 23       	and	r24, r25
    1312:	80 83       	st	Z, r24
	}
}
    1314:	ff 91       	pop	r31
    1316:	ef 91       	pop	r30
    1318:	bf 91       	pop	r27
    131a:	af 91       	pop	r26
    131c:	9f 91       	pop	r25
    131e:	8f 91       	pop	r24
    1320:	7f 91       	pop	r23
    1322:	6f 91       	pop	r22
    1324:	5f 91       	pop	r21
    1326:	4f 91       	pop	r20
    1328:	3f 91       	pop	r19
    132a:	2f 91       	pop	r18
    132c:	0f 90       	pop	r0
    132e:	0b be       	out	0x3b, r0	; 59
    1330:	0f 90       	pop	r0
    1332:	0f be       	out	0x3f, r0	; 63
    1334:	0f 90       	pop	r0
    1336:	1f 90       	pop	r1
    1338:	18 95       	reti

0000133a <sdDetected>:
    }
}

void sdDetected(void)
{
	LCD_PrintString("SD Detected",0,1);
    133a:	41 e0       	ldi	r20, 0x01	; 1
    133c:	60 e0       	ldi	r22, 0x00	; 0
    133e:	80 e1       	ldi	r24, 0x10	; 16
    1340:	92 e0       	ldi	r25, 0x02	; 2
    1342:	0e c9       	rjmp	.-3556   	; 0x560 <LCD_PrintString>
    1344:	08 95       	ret

00001346 <Button1>:
}

void Button1(void)
{
	togglePin(Pin_PK0);
    1346:	89 e5       	ldi	r24, 0x59	; 89
    1348:	77 c9       	rjmp	.-3346   	; 0x638 <togglePin>
    134a:	08 95       	ret

0000134c <Button2>:
}
void Button2(void)
{
	togglePin(Pin_PK1);
    134c:	88 e5       	ldi	r24, 0x58	; 88
    134e:	74 c9       	rjmp	.-3352   	; 0x638 <togglePin>
    1350:	08 95       	ret

00001352 <Button3>:
}
void Button3(void)
{
	togglePin(Pin_PK2);
    1352:	87 e5       	ldi	r24, 0x57	; 87
    1354:	71 c9       	rjmp	.-3358   	; 0x638 <togglePin>
    1356:	08 95       	ret

00001358 <main>:
void Button2(void);
void Button3(void);

int main(void)
{
	millis_init();
    1358:	f1 de       	rcall	.-542    	; 0x113c <millis_init>
	pwm_init();
    135a:	ea dd       	rcall	.-1068   	; 0xf30 <pwm_init>
	
	lcd_init();
    135c:	65 d8       	rcall	.-3894   	; 0x428 <lcd_init>
    135e:	37 d8       	rcall	.-3986   	; 0x3ce <lcd_clear>
	lcd_clear();
    1360:	40 e0       	ldi	r20, 0x00	; 0
    1362:	60 e0       	ldi	r22, 0x00	; 0
	LCD_PrintString("MCU TRAINING KIT",0,0);
    1364:	8c e1       	ldi	r24, 0x1C	; 28
    1366:	92 e0       	ldi	r25, 0x02	; 2
    1368:	fb d8       	rcall	.-3594   	; 0x560 <LCD_PrintString>
    136a:	61 e0       	ldi	r22, 0x01	; 1
    136c:	89 e5       	ldi	r24, 0x59	; 89
	


	//User LEDs
	pinMode(Pin_PK0, OUTPUT);
    136e:	03 d9       	rcall	.-3578   	; 0x576 <pinMode>
    1370:	61 e0       	ldi	r22, 0x01	; 1
    1372:	88 e5       	ldi	r24, 0x58	; 88
	pinMode(Pin_PK1, OUTPUT);
    1374:	00 d9       	rcall	.-3584   	; 0x576 <pinMode>
    1376:	61 e0       	ldi	r22, 0x01	; 1
    1378:	87 e5       	ldi	r24, 0x57	; 87
	pinMode(Pin_PK2, OUTPUT);
    137a:	fd d8       	rcall	.-3590   	; 0x576 <pinMode>
    137c:	60 e0       	ldi	r22, 0x00	; 0
    137e:	81 e4       	ldi	r24, 0x41	; 65
	
	//Buttons - Pin change
	pinMode(Pin_PJ2, INPUT);
    1380:	fa d8       	rcall	.-3596   	; 0x576 <pinMode>
    1382:	60 e0       	ldi	r22, 0x00	; 0
    1384:	82 e4       	ldi	r24, 0x42	; 66
	pinMode(Pin_PJ3, INPUT);
    1386:	f7 d8       	rcall	.-3602   	; 0x576 <pinMode>
    1388:	60 e0       	ldi	r22, 0x00	; 0
    138a:	83 e4       	ldi	r24, 0x43	; 67
	pinMode(Pin_PJ4, INPUT);
    138c:	f4 d8       	rcall	.-3608   	; 0x576 <pinMode>
    138e:	43 e0       	ldi	r20, 0x03	; 3
    1390:	63 ea       	ldi	r22, 0xA3	; 163
    1392:	79 e0       	ldi	r23, 0x09	; 9
	attachPCINT(pinToPCINT(Pin_PJ2), Button1, RISING);
    1394:	8b e0       	ldi	r24, 0x0B	; 11
    1396:	87 db       	rcall	.-2290   	; 0xaa6 <attachPinChangeInterrupt>
    1398:	43 e0       	ldi	r20, 0x03	; 3
    139a:	66 ea       	ldi	r22, 0xA6	; 166
    139c:	79 e0       	ldi	r23, 0x09	; 9
	attachPCINT(pinToPCINT(Pin_PJ3), Button2, RISING);
    139e:	8c e0       	ldi	r24, 0x0C	; 12
    13a0:	82 db       	rcall	.-2300   	; 0xaa6 <attachPinChangeInterrupt>
    13a2:	43 e0       	ldi	r20, 0x03	; 3
    13a4:	69 ea       	ldi	r22, 0xA9	; 169
    13a6:	79 e0       	ldi	r23, 0x09	; 9
	attachPCINT(pinToPCINT(Pin_PJ4), Button3, RISING);
    13a8:	8d e0       	ldi	r24, 0x0D	; 13
    13aa:	7d db       	rcall	.-2310   	; 0xaa6 <attachPinChangeInterrupt>
    13ac:	43 e0       	ldi	r20, 0x03	; 3
    13ae:	50 e0       	ldi	r21, 0x00	; 0
    13b0:	6d e9       	ldi	r22, 0x9D	; 157
	
	attachInterrupt(EXTERNAL_INT_5,sdDetected, RISING);
    13b2:	79 e0       	ldi	r23, 0x09	; 9
    13b4:	85 e0       	ldi	r24, 0x05	; 5
    13b6:	5b d9       	rcall	.-3402   	; 0x66e <attachInterrupt>
    13b8:	6f e3       	ldi	r22, 0x3F	; 63
    13ba:	70 e0       	ldi	r23, 0x00	; 0
    13bc:	8f e0       	ldi	r24, 0x0F	; 15
    13be:	f8 dd       	rcall	.-1040   	; 0xfb0 <analogWrite>
	
	analogWrite(Pin_PH3,255/4);
    13c0:	ff cf       	rjmp	.-2      	; 0x13c0 <main+0x68>

000013c2 <__tablejump2__>:
    13c2:	ee 0f       	add	r30, r30
    13c4:	ff 1f       	adc	r31, r31
    13c6:	88 1f       	adc	r24, r24
    13c8:	8b bf       	out	0x3b, r24	; 59
    13ca:	07 90       	elpm	r0, Z+
    13cc:	f6 91       	elpm	r31, Z
    13ce:	e0 2d       	mov	r30, r0
    13d0:	19 94       	eijmp

000013d2 <_exit>:
    13d2:	f8 94       	cli

000013d4 <__stop_program>:
    13d4:	ff cf       	rjmp	.-2      	; 0x13d4 <__stop_program>
