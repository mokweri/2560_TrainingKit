
TK2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004e  00800200  000019ce  00001a62  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000019ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000044  0080024e  0080024e  00001ab0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001ab0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001ae0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000278  00000000  00000000  00001b20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000306a  00000000  00000000  00001d98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001649  00000000  00000000  00004e02  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000018a7  00000000  00000000  0000644b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000778  00000000  00000000  00007cf4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000be6  00000000  00000000  0000846c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000021d5  00000000  00000000  00009052  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000230  00000000  00000000  0000b227  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	3d c1       	rjmp	.+634    	; 0x27c <__ctors_end>
       2:	00 00       	nop
       4:	b1 c3       	rjmp	.+1890   	; 0x768 <__vector_1>
       6:	00 00       	nop
       8:	da c3       	rjmp	.+1972   	; 0x7be <__vector_2>
       a:	00 00       	nop
       c:	03 c4       	rjmp	.+2054   	; 0x814 <__vector_3>
       e:	00 00       	nop
      10:	2c c4       	rjmp	.+2136   	; 0x86a <__vector_4>
      12:	00 00       	nop
      14:	55 c4       	rjmp	.+2218   	; 0x8c0 <__vector_5>
      16:	00 00       	nop
      18:	7e c4       	rjmp	.+2300   	; 0x916 <__vector_6>
      1a:	00 00       	nop
      1c:	a7 c4       	rjmp	.+2382   	; 0x96c <__vector_7>
      1e:	00 00       	nop
      20:	d0 c4       	rjmp	.+2464   	; 0x9c2 <__vector_8>
      22:	00 00       	nop
      24:	4c c1       	rjmp	.+664    	; 0x2be <__bad_interrupt>
      26:	00 00       	nop
      28:	4a c1       	rjmp	.+660    	; 0x2be <__bad_interrupt>
      2a:	00 00       	nop
      2c:	48 c1       	rjmp	.+656    	; 0x2be <__bad_interrupt>
      2e:	00 00       	nop
      30:	46 c1       	rjmp	.+652    	; 0x2be <__bad_interrupt>
      32:	00 00       	nop
      34:	44 c1       	rjmp	.+648    	; 0x2be <__bad_interrupt>
      36:	00 00       	nop
      38:	42 c1       	rjmp	.+644    	; 0x2be <__bad_interrupt>
      3a:	00 00       	nop
      3c:	40 c1       	rjmp	.+640    	; 0x2be <__bad_interrupt>
      3e:	00 00       	nop
      40:	3e c1       	rjmp	.+636    	; 0x2be <__bad_interrupt>
      42:	00 00       	nop
      44:	3c c1       	rjmp	.+632    	; 0x2be <__bad_interrupt>
      46:	00 00       	nop
      48:	3a c1       	rjmp	.+628    	; 0x2be <__bad_interrupt>
      4a:	00 00       	nop
      4c:	38 c1       	rjmp	.+624    	; 0x2be <__bad_interrupt>
      4e:	00 00       	nop
      50:	36 c1       	rjmp	.+620    	; 0x2be <__bad_interrupt>
      52:	00 00       	nop
      54:	34 c1       	rjmp	.+616    	; 0x2be <__bad_interrupt>
      56:	00 00       	nop
      58:	32 c1       	rjmp	.+612    	; 0x2be <__bad_interrupt>
      5a:	00 00       	nop
      5c:	59 c6       	rjmp	.+3250   	; 0xd10 <__vector_23>
      5e:	00 00       	nop
      60:	2e c1       	rjmp	.+604    	; 0x2be <__bad_interrupt>
      62:	00 00       	nop
      64:	2c c1       	rjmp	.+600    	; 0x2be <__bad_interrupt>
      66:	00 00       	nop
      68:	2a c1       	rjmp	.+596    	; 0x2be <__bad_interrupt>
      6a:	00 00       	nop
      6c:	28 c1       	rjmp	.+592    	; 0x2be <__bad_interrupt>
      6e:	00 00       	nop
      70:	26 c1       	rjmp	.+588    	; 0x2be <__bad_interrupt>
      72:	00 00       	nop
      74:	24 c1       	rjmp	.+584    	; 0x2be <__bad_interrupt>
      76:	00 00       	nop
      78:	22 c1       	rjmp	.+580    	; 0x2be <__bad_interrupt>
      7a:	00 00       	nop
      7c:	20 c1       	rjmp	.+576    	; 0x2be <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 8b 0a 	jmp	0x1516	; 0x1516 <__vector_32>
      84:	1c c1       	rjmp	.+568    	; 0x2be <__bad_interrupt>
      86:	00 00       	nop
      88:	1a c1       	rjmp	.+564    	; 0x2be <__bad_interrupt>
      8a:	00 00       	nop
      8c:	18 c1       	rjmp	.+560    	; 0x2be <__bad_interrupt>
      8e:	00 00       	nop
      90:	16 c1       	rjmp	.+556    	; 0x2be <__bad_interrupt>
      92:	00 00       	nop
      94:	14 c1       	rjmp	.+552    	; 0x2be <__bad_interrupt>
      96:	00 00       	nop
      98:	12 c1       	rjmp	.+548    	; 0x2be <__bad_interrupt>
      9a:	00 00       	nop
      9c:	10 c1       	rjmp	.+544    	; 0x2be <__bad_interrupt>
      9e:	00 00       	nop
      a0:	0e c1       	rjmp	.+540    	; 0x2be <__bad_interrupt>
      a2:	00 00       	nop
      a4:	0c c1       	rjmp	.+536    	; 0x2be <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0a c1       	rjmp	.+532    	; 0x2be <__bad_interrupt>
      aa:	00 00       	nop
      ac:	08 c1       	rjmp	.+528    	; 0x2be <__bad_interrupt>
      ae:	00 00       	nop
      b0:	06 c1       	rjmp	.+524    	; 0x2be <__bad_interrupt>
      b2:	00 00       	nop
      b4:	04 c1       	rjmp	.+520    	; 0x2be <__bad_interrupt>
      b6:	00 00       	nop
      b8:	02 c1       	rjmp	.+516    	; 0x2be <__bad_interrupt>
      ba:	00 00       	nop
      bc:	00 c1       	rjmp	.+512    	; 0x2be <__bad_interrupt>
      be:	00 00       	nop
      c0:	fe c0       	rjmp	.+508    	; 0x2be <__bad_interrupt>
      c2:	00 00       	nop
      c4:	fc c0       	rjmp	.+504    	; 0x2be <__bad_interrupt>
      c6:	00 00       	nop
      c8:	fa c0       	rjmp	.+500    	; 0x2be <__bad_interrupt>
      ca:	00 00       	nop
      cc:	f8 c0       	rjmp	.+496    	; 0x2be <__bad_interrupt>
      ce:	00 00       	nop
      d0:	f6 c0       	rjmp	.+492    	; 0x2be <__bad_interrupt>
      d2:	00 00       	nop
      d4:	f4 c0       	rjmp	.+488    	; 0x2be <__bad_interrupt>
      d6:	00 00       	nop
      d8:	f2 c0       	rjmp	.+484    	; 0x2be <__bad_interrupt>
      da:	00 00       	nop
      dc:	f0 c0       	rjmp	.+480    	; 0x2be <__bad_interrupt>
      de:	00 00       	nop
      e0:	ee c0       	rjmp	.+476    	; 0x2be <__bad_interrupt>
      e2:	00 00       	nop
      e4:	4e 03       	fmul	r20, r22
      e6:	56 03       	mulsu	r21, r22
      e8:	62 03       	mulsu	r22, r18
      ea:	70 03       	mulsu	r23, r16
      ec:	81 03       	fmuls	r16, r17
      ee:	89 03       	fmulsu	r16, r17
      f0:	95 03       	fmuls	r17, r21
      f2:	a3 03       	fmuls	r18, r19
      f4:	72 05       	cpc	r23, r2
      f6:	77 05       	cpc	r23, r7
      f8:	7c 05       	cpc	r23, r12
      fa:	86 05       	cpc	r24, r6
      fc:	90 05       	cpc	r25, r0
      fe:	04 06       	cpc	r0, r20
     100:	9a 05       	cpc	r25, r10
     102:	a2 05       	cpc	r26, r2
     104:	aa 05       	cpc	r26, r10
     106:	b4 05       	cpc	r27, r4
     108:	be 05       	cpc	r27, r14
     10a:	c8 05       	cpc	r28, r8
     10c:	d2 05       	cpc	r29, r2
     10e:	dc 05       	cpc	r29, r12
     110:	04 06       	cpc	r0, r20
     112:	e6 05       	cpc	r30, r6
     114:	f0 05       	cpc	r31, r0
     116:	fa 05       	cpc	r31, r10

00000118 <__trampolines_end>:
     118:	00 02       	muls	r16, r16
     11a:	00 00       	nop
     11c:	00 09       	sbc	r16, r0
     11e:	0a 0b       	sbc	r16, r26
     120:	00 00       	nop
     122:	00 00       	nop
     124:	00 00       	nop
     126:	00 0c       	add	r0, r0
     128:	0d 0e       	add	r0, r29
     12a:	08 00       	.word	0x0008	; ????
     12c:	00 00       	nop
     12e:	00 07       	cpc	r16, r16
     130:	03 04       	cpc	r0, r3
     132:	01 00       	.word	0x0001	; ????
	...
     13c:	00 00       	nop
     13e:	10 11       	cpse	r17, r0
     140:	12 00       	.word	0x0012	; ????
	...

0000017d <pin_to_bit_mask_PGM>:
     17d:	00 20 01 02 04 08 10 20 40 80 00 00 01 02 04 08     . ..... @.......
     18d:	10 20 40 01 02 04 08 10 20 40 80 80 08 10 00 00     . @..... @......
     19d:	00 00 00 01 02 04 08 10 20 40 80 01 02 04 08 10     ........ @......
     1ad:	20 40 80 01 02 01 02 04 08 10 20 40 80 00 00 01      @........ @....
     1bd:	02 04 08 10 20 40 04 80 40 20 10 08 04 02 01 80     .... @..@ ......
     1cd:	00 00 80 40 20 10 08 04 02 01 80 40 20 10 08 04     ...@ ......@ ...
     1dd:	02 01 00 00 00                                      .....

000001e2 <pin_to_port_PGM>:
     1e2:	00 07 05 05 05 05 05 05 05 05 00 00 08 08 08 08     ................
     1f2:	08 08 08 02 02 02 02 02 02 02 02 08 07 07 00 00     ................
     202:	00 00 00 0c 0c 0c 0c 0c 0c 0c 0c 04 04 04 04 04     ................
     212:	04 04 04 07 07 03 03 03 03 03 03 03 03 00 00 0a     ................
     222:	0a 0a 0a 0a 0a 0a 07 01 01 01 01 01 01 01 01 0a     ................
     232:	00 00 0b 0b 0b 0b 0b 0b 0b 0b 06 06 06 06 06 06     ................
     242:	06 06 00 00 00                                      .....

00000247 <port_to_output_PGM>:
     247:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     257:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000261 <port_to_ddr_PGM>:
     261:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     271:	01 01 00 00 04 01 07 01 0a 01                       ..........

0000027b <tone_pin_to_timer_PGM>:
     27b:	03                                                  .

0000027c <__ctors_end>:
     27c:	11 24       	eor	r1, r1
     27e:	1f be       	out	0x3f, r1	; 63
     280:	cf ef       	ldi	r28, 0xFF	; 255
     282:	d1 e2       	ldi	r29, 0x21	; 33
     284:	de bf       	out	0x3e, r29	; 62
     286:	cd bf       	out	0x3d, r28	; 61
     288:	00 e0       	ldi	r16, 0x00	; 0
     28a:	0c bf       	out	0x3c, r16	; 60

0000028c <__do_copy_data>:
     28c:	12 e0       	ldi	r17, 0x02	; 2
     28e:	a0 e0       	ldi	r26, 0x00	; 0
     290:	b2 e0       	ldi	r27, 0x02	; 2
     292:	ee ec       	ldi	r30, 0xCE	; 206
     294:	f9 e1       	ldi	r31, 0x19	; 25
     296:	00 e0       	ldi	r16, 0x00	; 0
     298:	0b bf       	out	0x3b, r16	; 59
     29a:	02 c0       	rjmp	.+4      	; 0x2a0 <__do_copy_data+0x14>
     29c:	07 90       	elpm	r0, Z+
     29e:	0d 92       	st	X+, r0
     2a0:	ae 34       	cpi	r26, 0x4E	; 78
     2a2:	b1 07       	cpc	r27, r17
     2a4:	d9 f7       	brne	.-10     	; 0x29c <__do_copy_data+0x10>

000002a6 <__do_clear_bss>:
     2a6:	22 e0       	ldi	r18, 0x02	; 2
     2a8:	ae e4       	ldi	r26, 0x4E	; 78
     2aa:	b2 e0       	ldi	r27, 0x02	; 2
     2ac:	01 c0       	rjmp	.+2      	; 0x2b0 <.do_clear_bss_start>

000002ae <.do_clear_bss_loop>:
     2ae:	1d 92       	st	X+, r1

000002b0 <.do_clear_bss_start>:
     2b0:	a2 39       	cpi	r26, 0x92	; 146
     2b2:	b2 07       	cpc	r27, r18
     2b4:	e1 f7       	brne	.-8      	; 0x2ae <.do_clear_bss_loop>
     2b6:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <main>
     2ba:	0c 94 e5 0c 	jmp	0x19ca	; 0x19ca <_exit>

000002be <__bad_interrupt>:
     2be:	a0 ce       	rjmp	.-704    	; 0x0 <__vectors>

000002c0 <pulseEnable>:
	location &= 0x7; // we only have 8 locations 0-7
	command(LCD_SETCGRAMADDR | (location << 3));
	for (int i=0; i<8; i++) {
		write(charmap[i]);
	}
}
     2c0:	15 98       	cbi	0x02, 5	; 2
     2c2:	85 e0       	ldi	r24, 0x05	; 5
     2c4:	8a 95       	dec	r24
     2c6:	f1 f7       	brne	.-4      	; 0x2c4 <pulseEnable+0x4>
     2c8:	00 00       	nop
     2ca:	15 9a       	sbi	0x02, 5	; 2
     2cc:	95 e0       	ldi	r25, 0x05	; 5
     2ce:	9a 95       	dec	r25
     2d0:	f1 f7       	brne	.-4      	; 0x2ce <pulseEnable+0xe>
     2d2:	00 00       	nop
     2d4:	15 98       	cbi	0x02, 5	; 2
     2d6:	8f e8       	ldi	r24, 0x8F	; 143
     2d8:	91 e0       	ldi	r25, 0x01	; 1
     2da:	01 97       	sbiw	r24, 0x01	; 1
     2dc:	f1 f7       	brne	.-4      	; 0x2da <pulseEnable+0x1a>
     2de:	00 c0       	rjmp	.+0      	; 0x2e0 <pulseEnable+0x20>
     2e0:	00 00       	nop
     2e2:	08 95       	ret

000002e4 <write4bits>:
     2e4:	cf 93       	push	r28
     2e6:	df 93       	push	r29
     2e8:	ed e5       	ldi	r30, 0x5D	; 93
     2ea:	f2 e0       	ldi	r31, 0x02	; 2
     2ec:	20 e0       	ldi	r18, 0x00	; 0
     2ee:	30 e0       	ldi	r19, 0x00	; 0
     2f0:	a8 2f       	mov	r26, r24
     2f2:	b0 e0       	ldi	r27, 0x00	; 0
     2f4:	c1 e0       	ldi	r28, 0x01	; 1
     2f6:	d0 e0       	ldi	r29, 0x00	; 0
     2f8:	ad 01       	movw	r20, r26
     2fa:	02 2e       	mov	r0, r18
     2fc:	02 c0       	rjmp	.+4      	; 0x302 <write4bits+0x1e>
     2fe:	55 95       	asr	r21
     300:	47 95       	ror	r20
     302:	0a 94       	dec	r0
     304:	e2 f7       	brpl	.-8      	; 0x2fe <write4bits+0x1a>
     306:	40 ff       	sbrs	r20, 0
     308:	0b c0       	rjmp	.+22     	; 0x320 <write4bits+0x3c>
     30a:	82 b1       	in	r24, 0x02	; 2
     30c:	ae 01       	movw	r20, r28
     30e:	00 80       	ld	r0, Z
     310:	02 c0       	rjmp	.+4      	; 0x316 <write4bits+0x32>
     312:	44 0f       	add	r20, r20
     314:	55 1f       	adc	r21, r21
     316:	0a 94       	dec	r0
     318:	e2 f7       	brpl	.-8      	; 0x312 <write4bits+0x2e>
     31a:	48 2b       	or	r20, r24
     31c:	42 b9       	out	0x02, r20	; 2
     31e:	0c c0       	rjmp	.+24     	; 0x338 <write4bits+0x54>
     320:	42 b1       	in	r20, 0x02	; 2
     322:	be 01       	movw	r22, r28
     324:	00 80       	ld	r0, Z
     326:	02 c0       	rjmp	.+4      	; 0x32c <write4bits+0x48>
     328:	66 0f       	add	r22, r22
     32a:	77 1f       	adc	r23, r23
     32c:	0a 94       	dec	r0
     32e:	e2 f7       	brpl	.-8      	; 0x328 <write4bits+0x44>
     330:	96 2f       	mov	r25, r22
     332:	90 95       	com	r25
     334:	94 23       	and	r25, r20
     336:	92 b9       	out	0x02, r25	; 2
     338:	2f 5f       	subi	r18, 0xFF	; 255
     33a:	3f 4f       	sbci	r19, 0xFF	; 255
     33c:	31 96       	adiw	r30, 0x01	; 1
     33e:	24 30       	cpi	r18, 0x04	; 4
     340:	31 05       	cpc	r19, r1
     342:	d1 f6       	brne	.-76     	; 0x2f8 <write4bits+0x14>
     344:	bd df       	rcall	.-134    	; 0x2c0 <pulseEnable>
     346:	df 91       	pop	r29
     348:	cf 91       	pop	r28
     34a:	08 95       	ret

0000034c <write8bits>:
     34c:	86 95       	lsr	r24
     34e:	81 70       	andi	r24, 0x01	; 1
     350:	ed e5       	ldi	r30, 0x5D	; 93
     352:	f2 e0       	ldi	r31, 0x02	; 2
     354:	65 e6       	ldi	r22, 0x65	; 101
     356:	72 e0       	ldi	r23, 0x02	; 2
     358:	a1 e0       	ldi	r26, 0x01	; 1
     35a:	b0 e0       	ldi	r27, 0x00	; 0
     35c:	88 23       	and	r24, r24
     35e:	59 f0       	breq	.+22     	; 0x376 <write8bits+0x2a>
     360:	92 b1       	in	r25, 0x02	; 2
     362:	9d 01       	movw	r18, r26
     364:	00 80       	ld	r0, Z
     366:	02 c0       	rjmp	.+4      	; 0x36c <write8bits+0x20>
     368:	22 0f       	add	r18, r18
     36a:	33 1f       	adc	r19, r19
     36c:	0a 94       	dec	r0
     36e:	e2 f7       	brpl	.-8      	; 0x368 <write8bits+0x1c>
     370:	29 2b       	or	r18, r25
     372:	22 b9       	out	0x02, r18	; 2
     374:	0c c0       	rjmp	.+24     	; 0x38e <write8bits+0x42>
     376:	22 b1       	in	r18, 0x02	; 2
     378:	ad 01       	movw	r20, r26
     37a:	00 80       	ld	r0, Z
     37c:	02 c0       	rjmp	.+4      	; 0x382 <write8bits+0x36>
     37e:	44 0f       	add	r20, r20
     380:	55 1f       	adc	r21, r21
     382:	0a 94       	dec	r0
     384:	e2 f7       	brpl	.-8      	; 0x37e <write8bits+0x32>
     386:	94 2f       	mov	r25, r20
     388:	90 95       	com	r25
     38a:	92 23       	and	r25, r18
     38c:	92 b9       	out	0x02, r25	; 2
     38e:	31 96       	adiw	r30, 0x01	; 1
     390:	e6 17       	cp	r30, r22
     392:	f7 07       	cpc	r31, r23
     394:	19 f7       	brne	.-58     	; 0x35c <write8bits+0x10>
     396:	94 cf       	rjmp	.-216    	; 0x2c0 <pulseEnable>
     398:	08 95       	ret

0000039a <send>:
     39a:	cf 93       	push	r28
     39c:	c8 2f       	mov	r28, r24
     39e:	66 23       	and	r22, r22
     3a0:	11 f0       	breq	.+4      	; 0x3a6 <send+0xc>
     3a2:	17 9a       	sbi	0x02, 7	; 2
     3a4:	01 c0       	rjmp	.+2      	; 0x3a8 <send+0xe>
     3a6:	17 98       	cbi	0x02, 7	; 2
     3a8:	16 98       	cbi	0x02, 6	; 2
     3aa:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <_displayfunction>
     3ae:	84 ff       	sbrs	r24, 4
     3b0:	03 c0       	rjmp	.+6      	; 0x3b8 <send+0x1e>
     3b2:	8c 2f       	mov	r24, r28
     3b4:	cb df       	rcall	.-106    	; 0x34c <write8bits>
     3b6:	06 c0       	rjmp	.+12     	; 0x3c4 <send+0x2a>
     3b8:	8c 2f       	mov	r24, r28
     3ba:	82 95       	swap	r24
     3bc:	8f 70       	andi	r24, 0x0F	; 15
     3be:	92 df       	rcall	.-220    	; 0x2e4 <write4bits>
     3c0:	8c 2f       	mov	r24, r28
     3c2:	90 df       	rcall	.-224    	; 0x2e4 <write4bits>
     3c4:	cf 91       	pop	r28
     3c6:	08 95       	ret

000003c8 <command>:
     3c8:	60 e0       	ldi	r22, 0x00	; 0
     3ca:	e7 cf       	rjmp	.-50     	; 0x39a <send>
     3cc:	08 95       	ret

000003ce <lcd_clear>:
     3ce:	81 e0       	ldi	r24, 0x01	; 1
     3d0:	fb df       	rcall	.-10     	; 0x3c8 <command>
     3d2:	8f e3       	ldi	r24, 0x3F	; 63
     3d4:	9f e1       	ldi	r25, 0x1F	; 31
     3d6:	01 97       	sbiw	r24, 0x01	; 1
     3d8:	f1 f7       	brne	.-4      	; 0x3d6 <lcd_clear+0x8>
     3da:	00 c0       	rjmp	.+0      	; 0x3dc <lcd_clear+0xe>
     3dc:	00 00       	nop
     3de:	08 95       	ret

000003e0 <lcd_setCursor>:
     3e0:	e7 e5       	ldi	r30, 0x57	; 87
     3e2:	f2 e0       	ldi	r31, 0x02	; 2
     3e4:	10 82       	st	Z, r1
     3e6:	90 e4       	ldi	r25, 0x40	; 64
     3e8:	91 83       	std	Z+1, r25	; 0x01
     3ea:	94 e1       	ldi	r25, 0x14	; 20
     3ec:	92 83       	std	Z+2, r25	; 0x02
     3ee:	94 e5       	ldi	r25, 0x54	; 84
     3f0:	93 83       	std	Z+3, r25	; 0x03
     3f2:	64 30       	cpi	r22, 0x04	; 4
     3f4:	08 f0       	brcs	.+2      	; 0x3f8 <lcd_setCursor+0x18>
     3f6:	63 e0       	ldi	r22, 0x03	; 3
     3f8:	90 91 5c 02 	lds	r25, 0x025C	; 0x80025c <_numlines>
     3fc:	69 17       	cp	r22, r25
     3fe:	10 f0       	brcs	.+4      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     400:	6f ef       	ldi	r22, 0xFF	; 255
     402:	69 0f       	add	r22, r25
     404:	e6 2f       	mov	r30, r22
     406:	f0 e0       	ldi	r31, 0x00	; 0
     408:	e9 5a       	subi	r30, 0xA9	; 169
     40a:	fd 4f       	sbci	r31, 0xFD	; 253
     40c:	90 81       	ld	r25, Z
     40e:	89 0f       	add	r24, r25
     410:	80 68       	ori	r24, 0x80	; 128
     412:	da cf       	rjmp	.-76     	; 0x3c8 <command>
     414:	08 95       	ret

00000416 <lcd_display_on>:
     416:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <_displaycontrol>
     41a:	98 2f       	mov	r25, r24
     41c:	94 60       	ori	r25, 0x04	; 4
     41e:	90 93 5b 02 	sts	0x025B, r25	; 0x80025b <_displaycontrol>
     422:	8c 60       	ori	r24, 0x0C	; 12
     424:	d1 cf       	rjmp	.-94     	; 0x3c8 <command>
     426:	08 95       	ret

00000428 <lcd_init>:
     428:	cf 93       	push	r28
     42a:	ed e5       	ldi	r30, 0x5D	; 93
     42c:	f2 e0       	ldi	r31, 0x02	; 2
     42e:	83 e0       	ldi	r24, 0x03	; 3
     430:	80 83       	st	Z, r24
     432:	82 e0       	ldi	r24, 0x02	; 2
     434:	81 83       	std	Z+1, r24	; 0x01
     436:	91 e0       	ldi	r25, 0x01	; 1
     438:	92 83       	std	Z+2, r25	; 0x02
     43a:	13 82       	std	Z+3, r1	; 0x03
     43c:	14 82       	std	Z+4, r1	; 0x04
     43e:	15 82       	std	Z+5, r1	; 0x05
     440:	16 82       	std	Z+6, r1	; 0x06
     442:	17 82       	std	Z+7, r1	; 0x07
     444:	98 e0       	ldi	r25, 0x08	; 8
     446:	90 93 66 02 	sts	0x0266, r25	; 0x800266 <_displayfunction>
     44a:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <_numlines>
     44e:	0f 9a       	sbi	0x01, 7	; 1
     450:	0e 9a       	sbi	0x01, 6	; 1
     452:	0d 9a       	sbi	0x01, 5	; 1
     454:	0c 9a       	sbi	0x01, 4	; 1
     456:	14 9a       	sbi	0x02, 4	; 2
     458:	20 e0       	ldi	r18, 0x00	; 0
     45a:	30 e0       	ldi	r19, 0x00	; 0
     45c:	c8 e0       	ldi	r28, 0x08	; 8
     45e:	b0 e0       	ldi	r27, 0x00	; 0
     460:	a4 e0       	ldi	r26, 0x04	; 4
     462:	50 e0       	ldi	r21, 0x00	; 0
     464:	61 e0       	ldi	r22, 0x01	; 1
     466:	70 e0       	ldi	r23, 0x00	; 0
     468:	0c c0       	rjmp	.+24     	; 0x482 <lcd_init+0x5a>
     46a:	41 b1       	in	r20, 0x01	; 1
     46c:	cb 01       	movw	r24, r22
     46e:	01 90       	ld	r0, Z+
     470:	02 c0       	rjmp	.+4      	; 0x476 <lcd_init+0x4e>
     472:	88 0f       	add	r24, r24
     474:	99 1f       	adc	r25, r25
     476:	0a 94       	dec	r0
     478:	e2 f7       	brpl	.-8      	; 0x472 <lcd_init+0x4a>
     47a:	84 2b       	or	r24, r20
     47c:	81 b9       	out	0x01, r24	; 1
     47e:	2f 5f       	subi	r18, 0xFF	; 255
     480:	3f 4f       	sbci	r19, 0xFF	; 255
     482:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <_displayfunction>
     486:	84 fd       	sbrc	r24, 4
     488:	03 c0       	rjmp	.+6      	; 0x490 <lcd_init+0x68>
     48a:	8a 2f       	mov	r24, r26
     48c:	95 2f       	mov	r25, r21
     48e:	02 c0       	rjmp	.+4      	; 0x494 <lcd_init+0x6c>
     490:	8c 2f       	mov	r24, r28
     492:	9b 2f       	mov	r25, r27
     494:	28 17       	cp	r18, r24
     496:	39 07       	cpc	r19, r25
     498:	44 f3       	brlt	.-48     	; 0x46a <lcd_init+0x42>
     49a:	2f ef       	ldi	r18, 0xFF	; 255
     49c:	80 e7       	ldi	r24, 0x70	; 112
     49e:	92 e0       	ldi	r25, 0x02	; 2
     4a0:	21 50       	subi	r18, 0x01	; 1
     4a2:	80 40       	sbci	r24, 0x00	; 0
     4a4:	90 40       	sbci	r25, 0x00	; 0
     4a6:	e1 f7       	brne	.-8      	; 0x4a0 <lcd_init+0x78>
     4a8:	00 c0       	rjmp	.+0      	; 0x4aa <lcd_init+0x82>
     4aa:	00 00       	nop
     4ac:	17 98       	cbi	0x02, 7	; 2
     4ae:	15 98       	cbi	0x02, 5	; 2
     4b0:	16 98       	cbi	0x02, 6	; 2
     4b2:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <_displayfunction>
     4b6:	84 fd       	sbrc	r24, 4
     4b8:	1b c0       	rjmp	.+54     	; 0x4f0 <lcd_init+0xc8>
     4ba:	83 e0       	ldi	r24, 0x03	; 3
     4bc:	13 df       	rcall	.-474    	; 0x2e4 <write4bits>
     4be:	8f e4       	ldi	r24, 0x4F	; 79
     4c0:	96 e4       	ldi	r25, 0x46	; 70
     4c2:	01 97       	sbiw	r24, 0x01	; 1
     4c4:	f1 f7       	brne	.-4      	; 0x4c2 <lcd_init+0x9a>
     4c6:	00 c0       	rjmp	.+0      	; 0x4c8 <lcd_init+0xa0>
     4c8:	00 00       	nop
     4ca:	83 e0       	ldi	r24, 0x03	; 3
     4cc:	0b df       	rcall	.-490    	; 0x2e4 <write4bits>
     4ce:	8f e4       	ldi	r24, 0x4F	; 79
     4d0:	96 e4       	ldi	r25, 0x46	; 70
     4d2:	01 97       	sbiw	r24, 0x01	; 1
     4d4:	f1 f7       	brne	.-4      	; 0x4d2 <lcd_init+0xaa>
     4d6:	00 c0       	rjmp	.+0      	; 0x4d8 <lcd_init+0xb0>
     4d8:	00 00       	nop
     4da:	83 e0       	ldi	r24, 0x03	; 3
     4dc:	03 df       	rcall	.-506    	; 0x2e4 <write4bits>
     4de:	87 e5       	ldi	r24, 0x57	; 87
     4e0:	92 e0       	ldi	r25, 0x02	; 2
     4e2:	01 97       	sbiw	r24, 0x01	; 1
     4e4:	f1 f7       	brne	.-4      	; 0x4e2 <lcd_init+0xba>
     4e6:	00 c0       	rjmp	.+0      	; 0x4e8 <lcd_init+0xc0>
     4e8:	00 00       	nop
     4ea:	82 e0       	ldi	r24, 0x02	; 2
     4ec:	fb de       	rcall	.-522    	; 0x2e4 <write4bits>
     4ee:	16 c0       	rjmp	.+44     	; 0x51c <lcd_init+0xf4>
     4f0:	80 62       	ori	r24, 0x20	; 32
     4f2:	6a df       	rcall	.-300    	; 0x3c8 <command>
     4f4:	8f e4       	ldi	r24, 0x4F	; 79
     4f6:	96 e4       	ldi	r25, 0x46	; 70
     4f8:	01 97       	sbiw	r24, 0x01	; 1
     4fa:	f1 f7       	brne	.-4      	; 0x4f8 <lcd_init+0xd0>
     4fc:	00 c0       	rjmp	.+0      	; 0x4fe <lcd_init+0xd6>
     4fe:	00 00       	nop
     500:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <_displayfunction>
     504:	80 62       	ori	r24, 0x20	; 32
     506:	60 df       	rcall	.-320    	; 0x3c8 <command>
     508:	87 e5       	ldi	r24, 0x57	; 87
     50a:	92 e0       	ldi	r25, 0x02	; 2
     50c:	01 97       	sbiw	r24, 0x01	; 1
     50e:	f1 f7       	brne	.-4      	; 0x50c <lcd_init+0xe4>
     510:	00 c0       	rjmp	.+0      	; 0x512 <lcd_init+0xea>
     512:	00 00       	nop
     514:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <_displayfunction>
     518:	80 62       	ori	r24, 0x20	; 32
     51a:	56 df       	rcall	.-340    	; 0x3c8 <command>
     51c:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <_displayfunction>
     520:	80 62       	ori	r24, 0x20	; 32
     522:	52 df       	rcall	.-348    	; 0x3c8 <command>
     524:	84 e0       	ldi	r24, 0x04	; 4
     526:	80 93 5b 02 	sts	0x025B, r24	; 0x80025b <_displaycontrol>
     52a:	75 df       	rcall	.-278    	; 0x416 <lcd_display_on>
     52c:	50 df       	rcall	.-352    	; 0x3ce <lcd_clear>
     52e:	82 e0       	ldi	r24, 0x02	; 2
     530:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <_displaymode>
     534:	86 e0       	ldi	r24, 0x06	; 6
     536:	48 df       	rcall	.-368    	; 0x3c8 <command>
     538:	cf 91       	pop	r28
     53a:	08 95       	ret

0000053c <write>:
     53c:	61 e0       	ldi	r22, 0x01	; 1
     53e:	2d df       	rcall	.-422    	; 0x39a <send>
     540:	81 e0       	ldi	r24, 0x01	; 1
     542:	08 95       	ret

00000544 <lcd_puts>:
	}
	pulseEnable();
}

//------Print------------
void lcd_puts(char *string) {
     544:	cf 93       	push	r28
     546:	df 93       	push	r29
     548:	ec 01       	movw	r28, r24
	for (char *it = string; *it; it++) {
     54a:	88 81       	ld	r24, Y
     54c:	88 23       	and	r24, r24
     54e:	29 f0       	breq	.+10     	; 0x55a <lcd_puts+0x16>
     550:	21 96       	adiw	r28, 0x01	; 1
		write(*it);
     552:	f4 df       	rcall	.-24     	; 0x53c <write>
	pulseEnable();
}

//------Print------------
void lcd_puts(char *string) {
	for (char *it = string; *it; it++) {
     554:	89 91       	ld	r24, Y+
     556:	81 11       	cpse	r24, r1
     558:	fc cf       	rjmp	.-8      	; 0x552 <lcd_puts+0xe>
		write(*it);
	}
}
     55a:	df 91       	pop	r29
     55c:	cf 91       	pop	r28
     55e:	08 95       	ret

00000560 <LCD_PrintString>:

void LCD_PrintString(char *string, uint8_t x, uint8_t y)
{
     560:	cf 93       	push	r28
     562:	df 93       	push	r29
     564:	ec 01       	movw	r28, r24
     566:	86 2f       	mov	r24, r22
	lcd_setCursor(x,y);
     568:	64 2f       	mov	r22, r20
     56a:	3a df       	rcall	.-396    	; 0x3e0 <lcd_setCursor>
	lcd_puts(string);
     56c:	ce 01       	movw	r24, r28
     56e:	ea df       	rcall	.-44     	; 0x544 <lcd_puts>
}
     570:	df 91       	pop	r29
     572:	cf 91       	pop	r28
     574:	08 95       	ret

00000576 <pinMode>:
 */ 
#include "tk2560.h"


void pinMode(uint8_t pin, uint8_t mode)
{
     576:	cf 93       	push	r28
     578:	df 93       	push	r29
	uint8_t bit = pinToBitMask(pin);
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	fc 01       	movw	r30, r24
     57e:	e3 58       	subi	r30, 0x83	; 131
     580:	fe 4f       	sbci	r31, 0xFE	; 254
     582:	24 91       	lpm	r18, Z
	uint8_t port = pinToPort(pin);
     584:	fc 01       	movw	r30, r24
     586:	ee 51       	subi	r30, 0x1E	; 30
     588:	fe 4f       	sbci	r31, 0xFE	; 254
     58a:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;
	
	if (port == NOT_A_PIN) return;
     58c:	88 23       	and	r24, r24
     58e:	79 f1       	breq	.+94     	; 0x5ee <pinMode+0x78>
	
	reg = portDDRRegister(port);
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	88 0f       	add	r24, r24
     594:	99 1f       	adc	r25, r25
     596:	fc 01       	movw	r30, r24
     598:	ef 59       	subi	r30, 0x9F	; 159
     59a:	fd 4f       	sbci	r31, 0xFD	; 253
     59c:	a5 91       	lpm	r26, Z+
     59e:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
     5a0:	fc 01       	movw	r30, r24
     5a2:	e9 5b       	subi	r30, 0xB9	; 185
     5a4:	fd 4f       	sbci	r31, 0xFD	; 253
     5a6:	c5 91       	lpm	r28, Z+
     5a8:	d4 91       	lpm	r29, Z
	
	if (mode == INPUT)
     5aa:	61 11       	cpse	r22, r1
     5ac:	0c c0       	rjmp	.+24     	; 0x5c6 <pinMode+0x50>
	{
		uint8_t oldSREG = SREG;
     5ae:	9f b7       	in	r25, 0x3f	; 63
		cli();
     5b0:	f8 94       	cli
		*reg &= ~bit;
     5b2:	8c 91       	ld	r24, X
     5b4:	e2 2f       	mov	r30, r18
     5b6:	e0 95       	com	r30
     5b8:	8e 23       	and	r24, r30
     5ba:	8c 93       	st	X, r24
		*out &= ~bit;
     5bc:	28 81       	ld	r18, Y
     5be:	e2 23       	and	r30, r18
     5c0:	e8 83       	st	Y, r30
		SREG = oldSREG;
     5c2:	9f bf       	out	0x3f, r25	; 63
     5c4:	14 c0       	rjmp	.+40     	; 0x5ee <pinMode+0x78>
	}else if(mode == INPUT_PULLUP)
     5c6:	62 30       	cpi	r22, 0x02	; 2
     5c8:	61 f4       	brne	.+24     	; 0x5e2 <pinMode+0x6c>
	{
		uint8_t oldSREG = SREG;
     5ca:	9f b7       	in	r25, 0x3f	; 63
		cli();
     5cc:	f8 94       	cli
		*reg &= ~bit;
     5ce:	8c 91       	ld	r24, X
     5d0:	32 2f       	mov	r19, r18
     5d2:	30 95       	com	r19
     5d4:	83 23       	and	r24, r19
     5d6:	8c 93       	st	X, r24
		*out |= bit;
     5d8:	e8 81       	ld	r30, Y
     5da:	e2 2b       	or	r30, r18
     5dc:	e8 83       	st	Y, r30
		SREG = oldSREG;
     5de:	9f bf       	out	0x3f, r25	; 63
     5e0:	06 c0       	rjmp	.+12     	; 0x5ee <pinMode+0x78>
	}else{
		//output
		uint8_t oldSREG = SREG;
     5e2:	8f b7       	in	r24, 0x3f	; 63
		cli();
     5e4:	f8 94       	cli
		*reg |= bit;
     5e6:	ec 91       	ld	r30, X
     5e8:	e2 2b       	or	r30, r18
     5ea:	ec 93       	st	X, r30
		SREG = oldSREG;
     5ec:	8f bf       	out	0x3f, r24	; 63
	}
		
}
     5ee:	df 91       	pop	r29
     5f0:	cf 91       	pop	r28
     5f2:	08 95       	ret

000005f4 <digitalWrite>:

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t bit = pinToBitMask(pin);
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	fc 01       	movw	r30, r24
     5f8:	e3 58       	subi	r30, 0x83	; 131
     5fa:	fe 4f       	sbci	r31, 0xFE	; 254
     5fc:	24 91       	lpm	r18, Z
	uint8_t port = pinToPort(pin);
     5fe:	fc 01       	movw	r30, r24
     600:	ee 51       	subi	r30, 0x1E	; 30
     602:	fe 4f       	sbci	r31, 0xFE	; 254
     604:	84 91       	lpm	r24, Z
	volatile uint8_t *out;
	
	if (port == NOT_A_PIN) return;
     606:	88 23       	and	r24, r24
     608:	b1 f0       	breq	.+44     	; 0x636 <digitalWrite+0x42>
	
	out = portOutputRegister(port);
     60a:	e8 2f       	mov	r30, r24
     60c:	f0 e0       	ldi	r31, 0x00	; 0
     60e:	ee 0f       	add	r30, r30
     610:	ff 1f       	adc	r31, r31
     612:	e9 5b       	subi	r30, 0xB9	; 185
     614:	fd 4f       	sbci	r31, 0xFD	; 253
     616:	a5 91       	lpm	r26, Z+
     618:	b4 91       	lpm	r27, Z
	
	uint8_t oldSREG = SREG;
     61a:	8f b7       	in	r24, 0x3f	; 63
	cli();
     61c:	f8 94       	cli
	
	if (val == LOW) {
     61e:	61 11       	cpse	r22, r1
     620:	06 c0       	rjmp	.+12     	; 0x62e <digitalWrite+0x3a>
		*out &= ~bit;
     622:	9c 91       	ld	r25, X
     624:	e2 2f       	mov	r30, r18
     626:	e0 95       	com	r30
     628:	e9 23       	and	r30, r25
     62a:	ec 93       	st	X, r30
     62c:	03 c0       	rjmp	.+6      	; 0x634 <digitalWrite+0x40>
	} else {
		*out |= bit;
     62e:	ec 91       	ld	r30, X
     630:	e2 2b       	or	r30, r18
     632:	ec 93       	st	X, r30
	}
	
	SREG = oldSREG;
     634:	8f bf       	out	0x3f, r24	; 63
     636:	08 95       	ret

00000638 <togglePin>:
	
}

void togglePin(uint8_t pin)
{
	uint8_t bit = pinToBitMask(pin);
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	fc 01       	movw	r30, r24
     63c:	e3 58       	subi	r30, 0x83	; 131
     63e:	fe 4f       	sbci	r31, 0xFE	; 254
     640:	24 91       	lpm	r18, Z
	uint8_t port = pinToPort(pin);
     642:	fc 01       	movw	r30, r24
     644:	ee 51       	subi	r30, 0x1E	; 30
     646:	fe 4f       	sbci	r31, 0xFE	; 254
     648:	84 91       	lpm	r24, Z
	volatile uint8_t *out;
	
	if (port == NOT_A_PIN) return;
     64a:	88 23       	and	r24, r24
     64c:	71 f0       	breq	.+28     	; 0x66a <togglePin+0x32>
	
	out = portOutputRegister(port);
     64e:	e8 2f       	mov	r30, r24
     650:	f0 e0       	ldi	r31, 0x00	; 0
     652:	ee 0f       	add	r30, r30
     654:	ff 1f       	adc	r31, r31
     656:	e9 5b       	subi	r30, 0xB9	; 185
     658:	fd 4f       	sbci	r31, 0xFD	; 253
     65a:	a5 91       	lpm	r26, Z+
     65c:	b4 91       	lpm	r27, Z
	
	uint8_t oldSREG = SREG;
     65e:	8f b7       	in	r24, 0x3f	; 63
	cli();
     660:	f8 94       	cli
	
	//toggle
	*out ^= bit;
     662:	ec 91       	ld	r30, X
     664:	e2 27       	eor	r30, r18
     666:	ec 93       	st	X, r30
	
	SREG = oldSREG;
     668:	8f bf       	out	0x3f, r24	; 63
     66a:	08 95       	ret

0000066c <nothing>:
			break;
			case 7:
				EIMSK &= ~(1<<INT7);
			break;
		}
		intFunc[interruptNum] = nothing;
     66c:	08 95       	ret

0000066e <attachInterrupt>:
     66e:	88 30       	cpi	r24, 0x08	; 8
     670:	08 f0       	brcs	.+2      	; 0x674 <attachInterrupt+0x6>
     672:	79 c0       	rjmp	.+242    	; 0x766 <attachInterrupt+0xf8>
     674:	e8 2f       	mov	r30, r24
     676:	f0 e0       	ldi	r31, 0x00	; 0
     678:	ee 0f       	add	r30, r30
     67a:	ff 1f       	adc	r31, r31
     67c:	e0 50       	subi	r30, 0x00	; 0
     67e:	fe 4f       	sbci	r31, 0xFE	; 254
     680:	71 83       	std	Z+1, r23	; 0x01
     682:	60 83       	st	Z, r22
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	88 30       	cpi	r24, 0x08	; 8
     688:	91 05       	cpc	r25, r1
     68a:	08 f0       	brcs	.+2      	; 0x68e <attachInterrupt+0x20>
     68c:	6c c0       	rjmp	.+216    	; 0x766 <attachInterrupt+0xf8>
     68e:	fc 01       	movw	r30, r24
     690:	88 27       	eor	r24, r24
     692:	ee 58       	subi	r30, 0x8E	; 142
     694:	ff 4f       	sbci	r31, 0xFF	; 255
     696:	8f 4f       	sbci	r24, 0xFF	; 255
     698:	0c 94 b0 0c 	jmp	0x1960	; 0x1960 <__tablejump2__>
     69c:	e9 e6       	ldi	r30, 0x69	; 105
     69e:	f0 e0       	ldi	r31, 0x00	; 0
     6a0:	80 81       	ld	r24, Z
     6a2:	8c 7f       	andi	r24, 0xFC	; 252
     6a4:	48 2b       	or	r20, r24
     6a6:	40 83       	st	Z, r20
     6a8:	e8 9a       	sbi	0x1d, 0	; 29
     6aa:	08 95       	ret
     6ac:	e9 e6       	ldi	r30, 0x69	; 105
     6ae:	f0 e0       	ldi	r31, 0x00	; 0
     6b0:	80 81       	ld	r24, Z
     6b2:	83 7f       	andi	r24, 0xF3	; 243
     6b4:	44 0f       	add	r20, r20
     6b6:	55 1f       	adc	r21, r21
     6b8:	44 0f       	add	r20, r20
     6ba:	55 1f       	adc	r21, r21
     6bc:	48 2b       	or	r20, r24
     6be:	40 83       	st	Z, r20
     6c0:	e9 9a       	sbi	0x1d, 1	; 29
     6c2:	08 95       	ret
     6c4:	e9 e6       	ldi	r30, 0x69	; 105
     6c6:	f0 e0       	ldi	r31, 0x00	; 0
     6c8:	80 81       	ld	r24, Z
     6ca:	8f 7c       	andi	r24, 0xCF	; 207
     6cc:	42 95       	swap	r20
     6ce:	52 95       	swap	r21
     6d0:	50 7f       	andi	r21, 0xF0	; 240
     6d2:	54 27       	eor	r21, r20
     6d4:	40 7f       	andi	r20, 0xF0	; 240
     6d6:	54 27       	eor	r21, r20
     6d8:	48 2b       	or	r20, r24
     6da:	40 83       	st	Z, r20
     6dc:	ea 9a       	sbi	0x1d, 2	; 29
     6de:	08 95       	ret
     6e0:	e9 e6       	ldi	r30, 0x69	; 105
     6e2:	f0 e0       	ldi	r31, 0x00	; 0
     6e4:	80 81       	ld	r24, Z
     6e6:	8f 73       	andi	r24, 0x3F	; 63
     6e8:	00 24       	eor	r0, r0
     6ea:	56 95       	lsr	r21
     6ec:	47 95       	ror	r20
     6ee:	07 94       	ror	r0
     6f0:	56 95       	lsr	r21
     6f2:	47 95       	ror	r20
     6f4:	07 94       	ror	r0
     6f6:	54 2f       	mov	r21, r20
     6f8:	40 2d       	mov	r20, r0
     6fa:	48 2b       	or	r20, r24
     6fc:	40 83       	st	Z, r20
     6fe:	eb 9a       	sbi	0x1d, 3	; 29
     700:	08 95       	ret
     702:	ea e6       	ldi	r30, 0x6A	; 106
     704:	f0 e0       	ldi	r31, 0x00	; 0
     706:	80 81       	ld	r24, Z
     708:	8c 7f       	andi	r24, 0xFC	; 252
     70a:	48 2b       	or	r20, r24
     70c:	40 83       	st	Z, r20
     70e:	ec 9a       	sbi	0x1d, 4	; 29
     710:	08 95       	ret
     712:	ea e6       	ldi	r30, 0x6A	; 106
     714:	f0 e0       	ldi	r31, 0x00	; 0
     716:	80 81       	ld	r24, Z
     718:	83 7f       	andi	r24, 0xF3	; 243
     71a:	44 0f       	add	r20, r20
     71c:	55 1f       	adc	r21, r21
     71e:	44 0f       	add	r20, r20
     720:	55 1f       	adc	r21, r21
     722:	48 2b       	or	r20, r24
     724:	40 83       	st	Z, r20
     726:	ed 9a       	sbi	0x1d, 5	; 29
     728:	08 95       	ret
     72a:	ea e6       	ldi	r30, 0x6A	; 106
     72c:	f0 e0       	ldi	r31, 0x00	; 0
     72e:	80 81       	ld	r24, Z
     730:	8f 7c       	andi	r24, 0xCF	; 207
     732:	42 95       	swap	r20
     734:	52 95       	swap	r21
     736:	50 7f       	andi	r21, 0xF0	; 240
     738:	54 27       	eor	r21, r20
     73a:	40 7f       	andi	r20, 0xF0	; 240
     73c:	54 27       	eor	r21, r20
     73e:	48 2b       	or	r20, r24
     740:	40 83       	st	Z, r20
     742:	ee 9a       	sbi	0x1d, 6	; 29
     744:	08 95       	ret
     746:	ea e6       	ldi	r30, 0x6A	; 106
     748:	f0 e0       	ldi	r31, 0x00	; 0
     74a:	80 81       	ld	r24, Z
     74c:	8f 73       	andi	r24, 0x3F	; 63
     74e:	00 24       	eor	r0, r0
     750:	56 95       	lsr	r21
     752:	47 95       	ror	r20
     754:	07 94       	ror	r0
     756:	56 95       	lsr	r21
     758:	47 95       	ror	r20
     75a:	07 94       	ror	r0
     75c:	54 2f       	mov	r21, r20
     75e:	40 2d       	mov	r20, r0
     760:	48 2b       	or	r20, r24
     762:	40 83       	st	Z, r20
     764:	ef 9a       	sbi	0x1d, 7	; 29
     766:	08 95       	ret

00000768 <__vector_1>:
#define IMPLEMENT_ISR(vect, interrupt) \
	ISR(vect) { \
		intFunc[interrupt](); \
	}
	
IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
     768:	1f 92       	push	r1
     76a:	0f 92       	push	r0
     76c:	0f b6       	in	r0, 0x3f	; 63
     76e:	0f 92       	push	r0
     770:	11 24       	eor	r1, r1
     772:	0b b6       	in	r0, 0x3b	; 59
     774:	0f 92       	push	r0
     776:	2f 93       	push	r18
     778:	3f 93       	push	r19
     77a:	4f 93       	push	r20
     77c:	5f 93       	push	r21
     77e:	6f 93       	push	r22
     780:	7f 93       	push	r23
     782:	8f 93       	push	r24
     784:	9f 93       	push	r25
     786:	af 93       	push	r26
     788:	bf 93       	push	r27
     78a:	ef 93       	push	r30
     78c:	ff 93       	push	r31
     78e:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     792:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     796:	19 95       	eicall
     798:	ff 91       	pop	r31
     79a:	ef 91       	pop	r30
     79c:	bf 91       	pop	r27
     79e:	af 91       	pop	r26
     7a0:	9f 91       	pop	r25
     7a2:	8f 91       	pop	r24
     7a4:	7f 91       	pop	r23
     7a6:	6f 91       	pop	r22
     7a8:	5f 91       	pop	r21
     7aa:	4f 91       	pop	r20
     7ac:	3f 91       	pop	r19
     7ae:	2f 91       	pop	r18
     7b0:	0f 90       	pop	r0
     7b2:	0b be       	out	0x3b, r0	; 59
     7b4:	0f 90       	pop	r0
     7b6:	0f be       	out	0x3f, r0	; 63
     7b8:	0f 90       	pop	r0
     7ba:	1f 90       	pop	r1
     7bc:	18 95       	reti

000007be <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
     7be:	1f 92       	push	r1
     7c0:	0f 92       	push	r0
     7c2:	0f b6       	in	r0, 0x3f	; 63
     7c4:	0f 92       	push	r0
     7c6:	11 24       	eor	r1, r1
     7c8:	0b b6       	in	r0, 0x3b	; 59
     7ca:	0f 92       	push	r0
     7cc:	2f 93       	push	r18
     7ce:	3f 93       	push	r19
     7d0:	4f 93       	push	r20
     7d2:	5f 93       	push	r21
     7d4:	6f 93       	push	r22
     7d6:	7f 93       	push	r23
     7d8:	8f 93       	push	r24
     7da:	9f 93       	push	r25
     7dc:	af 93       	push	r26
     7de:	bf 93       	push	r27
     7e0:	ef 93       	push	r30
     7e2:	ff 93       	push	r31
     7e4:	e0 91 02 02 	lds	r30, 0x0202	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
     7e8:	f0 91 03 02 	lds	r31, 0x0203	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
     7ec:	19 95       	eicall
     7ee:	ff 91       	pop	r31
     7f0:	ef 91       	pop	r30
     7f2:	bf 91       	pop	r27
     7f4:	af 91       	pop	r26
     7f6:	9f 91       	pop	r25
     7f8:	8f 91       	pop	r24
     7fa:	7f 91       	pop	r23
     7fc:	6f 91       	pop	r22
     7fe:	5f 91       	pop	r21
     800:	4f 91       	pop	r20
     802:	3f 91       	pop	r19
     804:	2f 91       	pop	r18
     806:	0f 90       	pop	r0
     808:	0b be       	out	0x3b, r0	; 59
     80a:	0f 90       	pop	r0
     80c:	0f be       	out	0x3f, r0	; 63
     80e:	0f 90       	pop	r0
     810:	1f 90       	pop	r1
     812:	18 95       	reti

00000814 <__vector_3>:
IMPLEMENT_ISR(INT2_vect, EXTERNAL_INT_2)
     814:	1f 92       	push	r1
     816:	0f 92       	push	r0
     818:	0f b6       	in	r0, 0x3f	; 63
     81a:	0f 92       	push	r0
     81c:	11 24       	eor	r1, r1
     81e:	0b b6       	in	r0, 0x3b	; 59
     820:	0f 92       	push	r0
     822:	2f 93       	push	r18
     824:	3f 93       	push	r19
     826:	4f 93       	push	r20
     828:	5f 93       	push	r21
     82a:	6f 93       	push	r22
     82c:	7f 93       	push	r23
     82e:	8f 93       	push	r24
     830:	9f 93       	push	r25
     832:	af 93       	push	r26
     834:	bf 93       	push	r27
     836:	ef 93       	push	r30
     838:	ff 93       	push	r31
     83a:	e0 91 04 02 	lds	r30, 0x0204	; 0x800204 <__DATA_REGION_ORIGIN__+0x4>
     83e:	f0 91 05 02 	lds	r31, 0x0205	; 0x800205 <__DATA_REGION_ORIGIN__+0x5>
     842:	19 95       	eicall
     844:	ff 91       	pop	r31
     846:	ef 91       	pop	r30
     848:	bf 91       	pop	r27
     84a:	af 91       	pop	r26
     84c:	9f 91       	pop	r25
     84e:	8f 91       	pop	r24
     850:	7f 91       	pop	r23
     852:	6f 91       	pop	r22
     854:	5f 91       	pop	r21
     856:	4f 91       	pop	r20
     858:	3f 91       	pop	r19
     85a:	2f 91       	pop	r18
     85c:	0f 90       	pop	r0
     85e:	0b be       	out	0x3b, r0	; 59
     860:	0f 90       	pop	r0
     862:	0f be       	out	0x3f, r0	; 63
     864:	0f 90       	pop	r0
     866:	1f 90       	pop	r1
     868:	18 95       	reti

0000086a <__vector_4>:
IMPLEMENT_ISR(INT3_vect, EXTERNAL_INT_3)
     86a:	1f 92       	push	r1
     86c:	0f 92       	push	r0
     86e:	0f b6       	in	r0, 0x3f	; 63
     870:	0f 92       	push	r0
     872:	11 24       	eor	r1, r1
     874:	0b b6       	in	r0, 0x3b	; 59
     876:	0f 92       	push	r0
     878:	2f 93       	push	r18
     87a:	3f 93       	push	r19
     87c:	4f 93       	push	r20
     87e:	5f 93       	push	r21
     880:	6f 93       	push	r22
     882:	7f 93       	push	r23
     884:	8f 93       	push	r24
     886:	9f 93       	push	r25
     888:	af 93       	push	r26
     88a:	bf 93       	push	r27
     88c:	ef 93       	push	r30
     88e:	ff 93       	push	r31
     890:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <__DATA_REGION_ORIGIN__+0x6>
     894:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <__DATA_REGION_ORIGIN__+0x7>
     898:	19 95       	eicall
     89a:	ff 91       	pop	r31
     89c:	ef 91       	pop	r30
     89e:	bf 91       	pop	r27
     8a0:	af 91       	pop	r26
     8a2:	9f 91       	pop	r25
     8a4:	8f 91       	pop	r24
     8a6:	7f 91       	pop	r23
     8a8:	6f 91       	pop	r22
     8aa:	5f 91       	pop	r21
     8ac:	4f 91       	pop	r20
     8ae:	3f 91       	pop	r19
     8b0:	2f 91       	pop	r18
     8b2:	0f 90       	pop	r0
     8b4:	0b be       	out	0x3b, r0	; 59
     8b6:	0f 90       	pop	r0
     8b8:	0f be       	out	0x3f, r0	; 63
     8ba:	0f 90       	pop	r0
     8bc:	1f 90       	pop	r1
     8be:	18 95       	reti

000008c0 <__vector_5>:
IMPLEMENT_ISR(INT4_vect, EXTERNAL_INT_4)
     8c0:	1f 92       	push	r1
     8c2:	0f 92       	push	r0
     8c4:	0f b6       	in	r0, 0x3f	; 63
     8c6:	0f 92       	push	r0
     8c8:	11 24       	eor	r1, r1
     8ca:	0b b6       	in	r0, 0x3b	; 59
     8cc:	0f 92       	push	r0
     8ce:	2f 93       	push	r18
     8d0:	3f 93       	push	r19
     8d2:	4f 93       	push	r20
     8d4:	5f 93       	push	r21
     8d6:	6f 93       	push	r22
     8d8:	7f 93       	push	r23
     8da:	8f 93       	push	r24
     8dc:	9f 93       	push	r25
     8de:	af 93       	push	r26
     8e0:	bf 93       	push	r27
     8e2:	ef 93       	push	r30
     8e4:	ff 93       	push	r31
     8e6:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <__DATA_REGION_ORIGIN__+0x8>
     8ea:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <__DATA_REGION_ORIGIN__+0x9>
     8ee:	19 95       	eicall
     8f0:	ff 91       	pop	r31
     8f2:	ef 91       	pop	r30
     8f4:	bf 91       	pop	r27
     8f6:	af 91       	pop	r26
     8f8:	9f 91       	pop	r25
     8fa:	8f 91       	pop	r24
     8fc:	7f 91       	pop	r23
     8fe:	6f 91       	pop	r22
     900:	5f 91       	pop	r21
     902:	4f 91       	pop	r20
     904:	3f 91       	pop	r19
     906:	2f 91       	pop	r18
     908:	0f 90       	pop	r0
     90a:	0b be       	out	0x3b, r0	; 59
     90c:	0f 90       	pop	r0
     90e:	0f be       	out	0x3f, r0	; 63
     910:	0f 90       	pop	r0
     912:	1f 90       	pop	r1
     914:	18 95       	reti

00000916 <__vector_6>:
IMPLEMENT_ISR(INT5_vect, EXTERNAL_INT_5)
     916:	1f 92       	push	r1
     918:	0f 92       	push	r0
     91a:	0f b6       	in	r0, 0x3f	; 63
     91c:	0f 92       	push	r0
     91e:	11 24       	eor	r1, r1
     920:	0b b6       	in	r0, 0x3b	; 59
     922:	0f 92       	push	r0
     924:	2f 93       	push	r18
     926:	3f 93       	push	r19
     928:	4f 93       	push	r20
     92a:	5f 93       	push	r21
     92c:	6f 93       	push	r22
     92e:	7f 93       	push	r23
     930:	8f 93       	push	r24
     932:	9f 93       	push	r25
     934:	af 93       	push	r26
     936:	bf 93       	push	r27
     938:	ef 93       	push	r30
     93a:	ff 93       	push	r31
     93c:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <__DATA_REGION_ORIGIN__+0xa>
     940:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <__DATA_REGION_ORIGIN__+0xb>
     944:	19 95       	eicall
     946:	ff 91       	pop	r31
     948:	ef 91       	pop	r30
     94a:	bf 91       	pop	r27
     94c:	af 91       	pop	r26
     94e:	9f 91       	pop	r25
     950:	8f 91       	pop	r24
     952:	7f 91       	pop	r23
     954:	6f 91       	pop	r22
     956:	5f 91       	pop	r21
     958:	4f 91       	pop	r20
     95a:	3f 91       	pop	r19
     95c:	2f 91       	pop	r18
     95e:	0f 90       	pop	r0
     960:	0b be       	out	0x3b, r0	; 59
     962:	0f 90       	pop	r0
     964:	0f be       	out	0x3f, r0	; 63
     966:	0f 90       	pop	r0
     968:	1f 90       	pop	r1
     96a:	18 95       	reti

0000096c <__vector_7>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
     96c:	1f 92       	push	r1
     96e:	0f 92       	push	r0
     970:	0f b6       	in	r0, 0x3f	; 63
     972:	0f 92       	push	r0
     974:	11 24       	eor	r1, r1
     976:	0b b6       	in	r0, 0x3b	; 59
     978:	0f 92       	push	r0
     97a:	2f 93       	push	r18
     97c:	3f 93       	push	r19
     97e:	4f 93       	push	r20
     980:	5f 93       	push	r21
     982:	6f 93       	push	r22
     984:	7f 93       	push	r23
     986:	8f 93       	push	r24
     988:	9f 93       	push	r25
     98a:	af 93       	push	r26
     98c:	bf 93       	push	r27
     98e:	ef 93       	push	r30
     990:	ff 93       	push	r31
     992:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <__DATA_REGION_ORIGIN__+0xc>
     996:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <__DATA_REGION_ORIGIN__+0xd>
     99a:	19 95       	eicall
     99c:	ff 91       	pop	r31
     99e:	ef 91       	pop	r30
     9a0:	bf 91       	pop	r27
     9a2:	af 91       	pop	r26
     9a4:	9f 91       	pop	r25
     9a6:	8f 91       	pop	r24
     9a8:	7f 91       	pop	r23
     9aa:	6f 91       	pop	r22
     9ac:	5f 91       	pop	r21
     9ae:	4f 91       	pop	r20
     9b0:	3f 91       	pop	r19
     9b2:	2f 91       	pop	r18
     9b4:	0f 90       	pop	r0
     9b6:	0b be       	out	0x3b, r0	; 59
     9b8:	0f 90       	pop	r0
     9ba:	0f be       	out	0x3f, r0	; 63
     9bc:	0f 90       	pop	r0
     9be:	1f 90       	pop	r1
     9c0:	18 95       	reti

000009c2 <__vector_8>:
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)
     9c2:	1f 92       	push	r1
     9c4:	0f 92       	push	r0
     9c6:	0f b6       	in	r0, 0x3f	; 63
     9c8:	0f 92       	push	r0
     9ca:	11 24       	eor	r1, r1
     9cc:	0b b6       	in	r0, 0x3b	; 59
     9ce:	0f 92       	push	r0
     9d0:	2f 93       	push	r18
     9d2:	3f 93       	push	r19
     9d4:	4f 93       	push	r20
     9d6:	5f 93       	push	r21
     9d8:	6f 93       	push	r22
     9da:	7f 93       	push	r23
     9dc:	8f 93       	push	r24
     9de:	9f 93       	push	r25
     9e0:	af 93       	push	r26
     9e2:	bf 93       	push	r27
     9e4:	ef 93       	push	r30
     9e6:	ff 93       	push	r31
     9e8:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <__DATA_REGION_ORIGIN__+0xe>
     9ec:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <__DATA_REGION_ORIGIN__+0xf>
     9f0:	19 95       	eicall
     9f2:	ff 91       	pop	r31
     9f4:	ef 91       	pop	r30
     9f6:	bf 91       	pop	r27
     9f8:	af 91       	pop	r26
     9fa:	9f 91       	pop	r25
     9fc:	8f 91       	pop	r24
     9fe:	7f 91       	pop	r23
     a00:	6f 91       	pop	r22
     a02:	5f 91       	pop	r21
     a04:	4f 91       	pop	r20
     a06:	3f 91       	pop	r19
     a08:	2f 91       	pop	r18
     a0a:	0f 90       	pop	r0
     a0c:	0b be       	out	0x3b, r0	; 59
     a0e:	0f 90       	pop	r0
     a10:	0f be       	out	0x3f, r0	; 63
     a12:	0f 90       	pop	r0
     a14:	1f 90       	pop	r1
     a16:	18 95       	reti

00000a18 <pwm_init>:
*/

void pwm_init(void)
{
	// Configure Timer1
	TCCR1B = 0;
     a18:	e1 e8       	ldi	r30, 0x81	; 129
     a1a:	f0 e0       	ldi	r31, 0x00	; 0
     a1c:	10 82       	st	Z, r1
	bitSet(TCCR1B, CS11); 
     a1e:	80 81       	ld	r24, Z
     a20:	82 60       	ori	r24, 0x02	; 2
     a22:	80 83       	st	Z, r24
	bitSet(TCCR1B, CS10);	// set clk/64 prescaler
     a24:	80 81       	ld	r24, Z
     a26:	81 60       	ori	r24, 0x01	; 1
     a28:	80 83       	st	Z, r24
	bitSet(TCCR1A, WGM10);	// PWM, Phase Correct, 8-bit
     a2a:	e0 e8       	ldi	r30, 0x80	; 128
     a2c:	f0 e0       	ldi	r31, 0x00	; 0
     a2e:	80 81       	ld	r24, Z
     a30:	81 60       	ori	r24, 0x01	; 1
     a32:	80 83       	st	Z, r24
	
	// Configure Timer2
	bitSet(TCCR2B, CS22);	// clk/64 prescaler
     a34:	e1 eb       	ldi	r30, 0xB1	; 177
     a36:	f0 e0       	ldi	r31, 0x00	; 0
     a38:	80 81       	ld	r24, Z
     a3a:	84 60       	ori	r24, 0x04	; 4
     a3c:	80 83       	st	Z, r24
	bitSet(TCCR2A, WGM20);	// PWM, Phase Correct
     a3e:	e0 eb       	ldi	r30, 0xB0	; 176
     a40:	f0 e0       	ldi	r31, 0x00	; 0
     a42:	80 81       	ld	r24, Z
     a44:	81 60       	ori	r24, 0x01	; 1
     a46:	80 83       	st	Z, r24
	
	// Configure Timer3
	bitSet(TCCR3B, CS31);	
     a48:	e1 e9       	ldi	r30, 0x91	; 145
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	80 81       	ld	r24, Z
     a4e:	82 60       	ori	r24, 0x02	; 2
     a50:	80 83       	st	Z, r24
	bitSet(TCCR3B, CS30);	// clk/64 prescaler
     a52:	80 81       	ld	r24, Z
     a54:	81 60       	ori	r24, 0x01	; 1
     a56:	80 83       	st	Z, r24
	bitSet(TCCR3A, WGM30);	// PWM, Phase Correct
     a58:	e0 e9       	ldi	r30, 0x90	; 144
     a5a:	f0 e0       	ldi	r31, 0x00	; 0
     a5c:	80 81       	ld	r24, Z
     a5e:	81 60       	ori	r24, 0x01	; 1
     a60:	80 83       	st	Z, r24
	
	// Configure Timer4
	bitSet(TCCR4B, CS41);	
     a62:	e1 ea       	ldi	r30, 0xA1	; 161
     a64:	f0 e0       	ldi	r31, 0x00	; 0
     a66:	80 81       	ld	r24, Z
     a68:	82 60       	ori	r24, 0x02	; 2
     a6a:	80 83       	st	Z, r24
	bitSet(TCCR4B, CS40);	// clk/64 prescaler
     a6c:	80 81       	ld	r24, Z
     a6e:	81 60       	ori	r24, 0x01	; 1
     a70:	80 83       	st	Z, r24
	bitSet(TCCR4A, WGM40);	// PWM, Phase Correct
     a72:	e0 ea       	ldi	r30, 0xA0	; 160
     a74:	f0 e0       	ldi	r31, 0x00	; 0
     a76:	80 81       	ld	r24, Z
     a78:	81 60       	ori	r24, 0x01	; 1
     a7a:	80 83       	st	Z, r24
	
	// Configure Timer5
	bitSet(TCCR5B, CS51);
     a7c:	e1 e2       	ldi	r30, 0x21	; 33
     a7e:	f1 e0       	ldi	r31, 0x01	; 1
     a80:	80 81       	ld	r24, Z
     a82:	82 60       	ori	r24, 0x02	; 2
     a84:	80 83       	st	Z, r24
	bitSet(TCCR5B, CS50);	// clk/64 prescaler
     a86:	80 81       	ld	r24, Z
     a88:	81 60       	ori	r24, 0x01	; 1
     a8a:	80 83       	st	Z, r24
	bitSet(TCCR5A, WGM50);	// PWM, Phase Correct
     a8c:	e0 e2       	ldi	r30, 0x20	; 32
     a8e:	f1 e0       	ldi	r31, 0x01	; 1
     a90:	80 81       	ld	r24, Z
     a92:	81 60       	ori	r24, 0x01	; 1
     a94:	80 83       	st	Z, r24
     a96:	08 95       	ret

00000a98 <analogWrite>:
	 
}

// PWM output
void analogWrite(uint8_t pin, int val)
{
     a98:	1f 93       	push	r17
     a9a:	cf 93       	push	r28
     a9c:	df 93       	push	r29
     a9e:	18 2f       	mov	r17, r24
     aa0:	eb 01       	movw	r28, r22
	
	pinMode(pin, OUTPUT);
     aa2:	61 e0       	ldi	r22, 0x01	; 1
     aa4:	68 dd       	rcall	.-1328   	; 0x576 <pinMode>
	if (val == 0)
     aa6:	20 97       	sbiw	r28, 0x00	; 0
     aa8:	21 f4       	brne	.+8      	; 0xab2 <analogWrite+0x1a>
	{
		digitalWrite(pin, LOW);
     aaa:	60 e0       	ldi	r22, 0x00	; 0
     aac:	81 2f       	mov	r24, r17
     aae:	a2 dd       	rcall	.-1212   	; 0x5f4 <digitalWrite>
     ab0:	b5 c0       	rjmp	.+362    	; 0xc1c <analogWrite+0x184>
	}
	else if (val == 255)
     ab2:	cf 3f       	cpi	r28, 0xFF	; 255
     ab4:	d1 05       	cpc	r29, r1
     ab6:	21 f4       	brne	.+8      	; 0xac0 <analogWrite+0x28>
	{
		digitalWrite(pin, HIGH);
     ab8:	61 e0       	ldi	r22, 0x01	; 1
     aba:	81 2f       	mov	r24, r17
     abc:	9b dd       	rcall	.-1226   	; 0x5f4 <digitalWrite>
     abe:	ae c0       	rjmp	.+348    	; 0xc1c <analogWrite+0x184>
	}
	else{
		switch(pinToTimer(pin))
     ac0:	e1 2f       	mov	r30, r17
     ac2:	f0 e0       	ldi	r31, 0x00	; 0
     ac4:	e8 5e       	subi	r30, 0xE8	; 232
     ac6:	fe 4f       	sbci	r31, 0xFE	; 254
     ac8:	e4 91       	lpm	r30, Z
     aca:	8e 2f       	mov	r24, r30
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	fc 01       	movw	r30, r24
     ad0:	31 97       	sbiw	r30, 0x01	; 1
     ad2:	e2 31       	cpi	r30, 0x12	; 18
     ad4:	f1 05       	cpc	r31, r1
     ad6:	08 f0       	brcs	.+2      	; 0xada <analogWrite+0x42>
     ad8:	97 c0       	rjmp	.+302    	; 0xc08 <analogWrite+0x170>
     ada:	88 27       	eor	r24, r24
     adc:	e6 58       	subi	r30, 0x86	; 134
     ade:	ff 4f       	sbci	r31, 0xFF	; 255
     ae0:	8f 4f       	sbci	r24, 0xFF	; 255
     ae2:	3e c7       	rjmp	.+3708   	; 0x1960 <__tablejump2__>
		{
			//Timer 0
			case TIMER0A:
				//connect pwm to pin on timer 0, channel A
				bitSet(TCCR0A, COM0A1); //clear OC0A on compare match
     ae4:	84 b5       	in	r24, 0x24	; 36
     ae6:	80 68       	ori	r24, 0x80	; 128
     ae8:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; //set pwm duty
     aea:	c7 bd       	out	0x27, r28	; 39
			break;
     aec:	97 c0       	rjmp	.+302    	; 0xc1c <analogWrite+0x184>
			
			case TIMER0B:
				//connect pwm to pin on timer 0, channel B
				bitSet(TCCR0B, COM0B1); //clear OC0A on compare match
     aee:	85 b5       	in	r24, 0x25	; 37
     af0:	80 62       	ori	r24, 0x20	; 32
     af2:	85 bd       	out	0x25, r24	; 37
				OCR0B = val; //set pwm duty
     af4:	c8 bd       	out	0x28, r28	; 40
			break;
     af6:	92 c0       	rjmp	.+292    	; 0xc1c <analogWrite+0x184>
			
			//Timer 1
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				bitSet(TCCR1A, COM1A1);
     af8:	e0 e8       	ldi	r30, 0x80	; 128
     afa:	f0 e0       	ldi	r31, 0x00	; 0
     afc:	80 81       	ld	r24, Z
     afe:	80 68       	ori	r24, 0x80	; 128
     b00:	80 83       	st	Z, r24
				OCR1A = val; // set pwm duty
     b02:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
     b06:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
			break;
     b0a:	88 c0       	rjmp	.+272    	; 0xc1c <analogWrite+0x184>
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				bitSet(TCCR1A, COM1B1);
     b0c:	e0 e8       	ldi	r30, 0x80	; 128
     b0e:	f0 e0       	ldi	r31, 0x00	; 0
     b10:	80 81       	ld	r24, Z
     b12:	80 62       	ori	r24, 0x20	; 32
     b14:	80 83       	st	Z, r24
				OCR1B = val; // set pwm duty
     b16:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
     b1a:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
			break;
     b1e:	7e c0       	rjmp	.+252    	; 0xc1c <analogWrite+0x184>
			case TIMER1C:
				// connect pwm to pin on timer 1, channel C
				bitSet(TCCR1A, COM1C1);
     b20:	e0 e8       	ldi	r30, 0x80	; 128
     b22:	f0 e0       	ldi	r31, 0x00	; 0
     b24:	80 81       	ld	r24, Z
     b26:	88 60       	ori	r24, 0x08	; 8
     b28:	80 83       	st	Z, r24
				OCR1C = val; // set pwm duty
     b2a:	d0 93 8d 00 	sts	0x008D, r29	; 0x80008d <__TEXT_REGION_LENGTH__+0x70008d>
     b2e:	c0 93 8c 00 	sts	0x008C, r28	; 0x80008c <__TEXT_REGION_LENGTH__+0x70008c>
			break;
     b32:	74 c0       	rjmp	.+232    	; 0xc1c <analogWrite+0x184>
			
			//Timer 2
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				bitSet(TCCR2A, COM2A1);
     b34:	e0 eb       	ldi	r30, 0xB0	; 176
     b36:	f0 e0       	ldi	r31, 0x00	; 0
     b38:	80 81       	ld	r24, Z
     b3a:	80 68       	ori	r24, 0x80	; 128
     b3c:	80 83       	st	Z, r24
				OCR2A = val; // set pwm duty
     b3e:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
			break;
     b42:	6c c0       	rjmp	.+216    	; 0xc1c <analogWrite+0x184>
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				bitSet(TCCR2A, COM2B1);
     b44:	e0 eb       	ldi	r30, 0xB0	; 176
     b46:	f0 e0       	ldi	r31, 0x00	; 0
     b48:	80 81       	ld	r24, Z
     b4a:	80 62       	ori	r24, 0x20	; 32
     b4c:	80 83       	st	Z, r24
				OCR2B = val; // set pwm duty
     b4e:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7000b4>
			break;
     b52:	64 c0       	rjmp	.+200    	; 0xc1c <analogWrite+0x184>
			
			//Timer 3
			case TIMER3A:
				// connect pwm to pin on timer 3, channel A
				bitSet(TCCR3A, COM3A1);
     b54:	e0 e9       	ldi	r30, 0x90	; 144
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	80 81       	ld	r24, Z
     b5a:	80 68       	ori	r24, 0x80	; 128
     b5c:	80 83       	st	Z, r24
				OCR3A = val; // set pwm duty
     b5e:	d0 93 99 00 	sts	0x0099, r29	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
     b62:	c0 93 98 00 	sts	0x0098, r28	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
			break;
     b66:	5a c0       	rjmp	.+180    	; 0xc1c <analogWrite+0x184>
			case TIMER3B:
				// connect pwm to pin on timer 3, channel B
				bitSet(TCCR3A, COM3B1);
     b68:	e0 e9       	ldi	r30, 0x90	; 144
     b6a:	f0 e0       	ldi	r31, 0x00	; 0
     b6c:	80 81       	ld	r24, Z
     b6e:	80 62       	ori	r24, 0x20	; 32
     b70:	80 83       	st	Z, r24
				OCR3B = val; // set pwm duty
     b72:	d0 93 9b 00 	sts	0x009B, r29	; 0x80009b <__TEXT_REGION_LENGTH__+0x70009b>
     b76:	c0 93 9a 00 	sts	0x009A, r28	; 0x80009a <__TEXT_REGION_LENGTH__+0x70009a>
			break;
     b7a:	50 c0       	rjmp	.+160    	; 0xc1c <analogWrite+0x184>
			case TIMER3C:
				// connect pwm to pin on timer 3, channel C
				bitSet(TCCR3A, COM3C1);
     b7c:	e0 e9       	ldi	r30, 0x90	; 144
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	88 60       	ori	r24, 0x08	; 8
     b84:	80 83       	st	Z, r24
				OCR3C = val; // set pwm duty
     b86:	d0 93 9d 00 	sts	0x009D, r29	; 0x80009d <__TEXT_REGION_LENGTH__+0x70009d>
     b8a:	c0 93 9c 00 	sts	0x009C, r28	; 0x80009c <__TEXT_REGION_LENGTH__+0x70009c>
			break;
     b8e:	46 c0       	rjmp	.+140    	; 0xc1c <analogWrite+0x184>
			
			//Timer 4
			case TIMER4A:
				//connect pwm to pin on timer 4, channel A
				bitSet(TCCR4A, COM4A1);
     b90:	e0 ea       	ldi	r30, 0xA0	; 160
     b92:	f0 e0       	ldi	r31, 0x00	; 0
     b94:	80 81       	ld	r24, Z
     b96:	80 68       	ori	r24, 0x80	; 128
     b98:	80 83       	st	Z, r24
				OCR4A = val;	// set pwm duty
     b9a:	d0 93 a9 00 	sts	0x00A9, r29	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
     b9e:	c0 93 a8 00 	sts	0x00A8, r28	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
			break;
     ba2:	3c c0       	rjmp	.+120    	; 0xc1c <analogWrite+0x184>
			case TIMER4B:
				// connect pwm to pin on timer 4, channel B
				bitSet(TCCR4A, COM4B1);
     ba4:	e0 ea       	ldi	r30, 0xA0	; 160
     ba6:	f0 e0       	ldi	r31, 0x00	; 0
     ba8:	80 81       	ld	r24, Z
     baa:	80 62       	ori	r24, 0x20	; 32
     bac:	80 83       	st	Z, r24
				OCR4B = val; // set pwm duty
     bae:	d0 93 ab 00 	sts	0x00AB, r29	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7000ab>
     bb2:	c0 93 aa 00 	sts	0x00AA, r28	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7000aa>
			break;
     bb6:	32 c0       	rjmp	.+100    	; 0xc1c <analogWrite+0x184>
			case TIMER4C:
				// connect pwm to pin on timer 4, channel C
				bitSet(TCCR4A, COM4C1);
     bb8:	e0 ea       	ldi	r30, 0xA0	; 160
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	88 60       	ori	r24, 0x08	; 8
     bc0:	80 83       	st	Z, r24
				OCR4C = val; // set pwm duty
     bc2:	d0 93 ad 00 	sts	0x00AD, r29	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7000ad>
     bc6:	c0 93 ac 00 	sts	0x00AC, r28	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7000ac>
			break;
     bca:	28 c0       	rjmp	.+80     	; 0xc1c <analogWrite+0x184>
			//timer 5
			case TIMER5A:
				// connect pwm to pin on timer 5, channel A
				bitSet(TCCR5A, COM5A1);
     bcc:	e0 e2       	ldi	r30, 0x20	; 32
     bce:	f1 e0       	ldi	r31, 0x01	; 1
     bd0:	80 81       	ld	r24, Z
     bd2:	80 68       	ori	r24, 0x80	; 128
     bd4:	80 83       	st	Z, r24
				OCR5A = val; // set pwm duty
     bd6:	d0 93 29 01 	sts	0x0129, r29	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
     bda:	c0 93 28 01 	sts	0x0128, r28	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
			break;
     bde:	1e c0       	rjmp	.+60     	; 0xc1c <analogWrite+0x184>
			case TIMER5B:
				// connect pwm to pin on timer 5, channel B
				bitSet(TCCR5A, COM5B1);
     be0:	e0 e2       	ldi	r30, 0x20	; 32
     be2:	f1 e0       	ldi	r31, 0x01	; 1
     be4:	80 81       	ld	r24, Z
     be6:	80 62       	ori	r24, 0x20	; 32
     be8:	80 83       	st	Z, r24
				OCR5B = val; // set pwm duty
     bea:	d0 93 2b 01 	sts	0x012B, r29	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
     bee:	c0 93 2a 01 	sts	0x012A, r28	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
			break;
     bf2:	14 c0       	rjmp	.+40     	; 0xc1c <analogWrite+0x184>
			case TIMER5C:
				// connect pwm to pin on timer 5, channel C
				bitSet(TCCR5A, COM5C1);
     bf4:	e0 e2       	ldi	r30, 0x20	; 32
     bf6:	f1 e0       	ldi	r31, 0x01	; 1
     bf8:	80 81       	ld	r24, Z
     bfa:	88 60       	ori	r24, 0x08	; 8
     bfc:	80 83       	st	Z, r24
				OCR5C = val; // set pwm duty
     bfe:	d0 93 2d 01 	sts	0x012D, r29	; 0x80012d <__TEXT_REGION_LENGTH__+0x70012d>
     c02:	c0 93 2c 01 	sts	0x012C, r28	; 0x80012c <__TEXT_REGION_LENGTH__+0x70012c>
			break;
     c06:	0a c0       	rjmp	.+20     	; 0xc1c <analogWrite+0x184>
			case NOT_ON_TIMER:
			
			default:
				if (val < 128) {
     c08:	c0 38       	cpi	r28, 0x80	; 128
     c0a:	d1 05       	cpc	r29, r1
					digitalWrite(pin, LOW);
     c0c:	24 f4       	brge	.+8      	; 0xc16 <analogWrite+0x17e>
     c0e:	60 e0       	ldi	r22, 0x00	; 0
     c10:	81 2f       	mov	r24, r17
     c12:	f0 dc       	rcall	.-1568   	; 0x5f4 <digitalWrite>
				} else {
					digitalWrite(pin, HIGH);
     c14:	03 c0       	rjmp	.+6      	; 0xc1c <analogWrite+0x184>
     c16:	61 e0       	ldi	r22, 0x01	; 1
     c18:	81 2f       	mov	r24, r17
     c1a:	ec dc       	rcall	.-1576   	; 0x5f4 <digitalWrite>
				}
		}
	}
     c1c:	df 91       	pop	r29
     c1e:	cf 91       	pop	r28
     c20:	1f 91       	pop	r17
     c22:	08 95       	ret

00000c24 <millis_init>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
     c24:	78 94       	sei
     c26:	84 b5       	in	r24, 0x24	; 36
     c28:	82 60       	ori	r24, 0x02	; 2
     c2a:	84 bd       	out	0x24, r24	; 36
     c2c:	84 b5       	in	r24, 0x24	; 36
     c2e:	81 60       	ori	r24, 0x01	; 1
     c30:	84 bd       	out	0x24, r24	; 36
     c32:	85 b5       	in	r24, 0x25	; 37
     c34:	82 60       	ori	r24, 0x02	; 2
     c36:	85 bd       	out	0x25, r24	; 37
     c38:	85 b5       	in	r24, 0x25	; 37
     c3a:	81 60       	ori	r24, 0x01	; 1
     c3c:	85 bd       	out	0x25, r24	; 37
     c3e:	ee e6       	ldi	r30, 0x6E	; 110
     c40:	f0 e0       	ldi	r31, 0x00	; 0
     c42:	80 81       	ld	r24, Z
     c44:	81 60       	ori	r24, 0x01	; 1
     c46:	80 83       	st	Z, r24
     c48:	08 95       	ret

00000c4a <micros>:
     c4a:	3f b7       	in	r19, 0x3f	; 63
     c4c:	f8 94       	cli
     c4e:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <timer0_overflow_count>
     c52:	90 91 54 02 	lds	r25, 0x0254	; 0x800254 <timer0_overflow_count+0x1>
     c56:	a0 91 55 02 	lds	r26, 0x0255	; 0x800255 <timer0_overflow_count+0x2>
     c5a:	b0 91 56 02 	lds	r27, 0x0256	; 0x800256 <timer0_overflow_count+0x3>
     c5e:	26 b5       	in	r18, 0x26	; 38
     c60:	a8 9b       	sbis	0x15, 0	; 21
     c62:	05 c0       	rjmp	.+10     	; 0xc6e <micros+0x24>
     c64:	2f 3f       	cpi	r18, 0xFF	; 255
     c66:	19 f0       	breq	.+6      	; 0xc6e <micros+0x24>
     c68:	01 96       	adiw	r24, 0x01	; 1
     c6a:	a1 1d       	adc	r26, r1
     c6c:	b1 1d       	adc	r27, r1
     c6e:	3f bf       	out	0x3f, r19	; 63
     c70:	ba 2f       	mov	r27, r26
     c72:	a9 2f       	mov	r26, r25
     c74:	98 2f       	mov	r25, r24
     c76:	88 27       	eor	r24, r24
     c78:	82 0f       	add	r24, r18
     c7a:	91 1d       	adc	r25, r1
     c7c:	a1 1d       	adc	r26, r1
     c7e:	b1 1d       	adc	r27, r1
     c80:	bc 01       	movw	r22, r24
     c82:	cd 01       	movw	r24, r26
     c84:	66 0f       	add	r22, r22
     c86:	77 1f       	adc	r23, r23
     c88:	88 1f       	adc	r24, r24
     c8a:	99 1f       	adc	r25, r25
     c8c:	66 0f       	add	r22, r22
     c8e:	77 1f       	adc	r23, r23
     c90:	88 1f       	adc	r24, r24
     c92:	99 1f       	adc	r25, r25
     c94:	08 95       	ret

00000c96 <delay_ms>:
     c96:	8f 92       	push	r8
     c98:	9f 92       	push	r9
     c9a:	af 92       	push	r10
     c9c:	bf 92       	push	r11
     c9e:	cf 92       	push	r12
     ca0:	df 92       	push	r13
     ca2:	ef 92       	push	r14
     ca4:	ff 92       	push	r15
     ca6:	6b 01       	movw	r12, r22
     ca8:	7c 01       	movw	r14, r24
     caa:	cf df       	rcall	.-98     	; 0xc4a <micros>
     cac:	4b 01       	movw	r8, r22
     cae:	5c 01       	movw	r10, r24
     cb0:	c1 14       	cp	r12, r1
     cb2:	d1 04       	cpc	r13, r1
     cb4:	e1 04       	cpc	r14, r1
     cb6:	f1 04       	cpc	r15, r1
     cb8:	89 f4       	brne	.+34     	; 0xcdc <delay_ms+0x46>
     cba:	21 c0       	rjmp	.+66     	; 0xcfe <delay_ms+0x68>
     cbc:	21 e0       	ldi	r18, 0x01	; 1
     cbe:	c2 1a       	sub	r12, r18
     cc0:	d1 08       	sbc	r13, r1
     cc2:	e1 08       	sbc	r14, r1
     cc4:	f1 08       	sbc	r15, r1
     cc6:	88 ee       	ldi	r24, 0xE8	; 232
     cc8:	88 0e       	add	r8, r24
     cca:	83 e0       	ldi	r24, 0x03	; 3
     ccc:	98 1e       	adc	r9, r24
     cce:	a1 1c       	adc	r10, r1
     cd0:	b1 1c       	adc	r11, r1
     cd2:	c1 14       	cp	r12, r1
     cd4:	d1 04       	cpc	r13, r1
     cd6:	e1 04       	cpc	r14, r1
     cd8:	f1 04       	cpc	r15, r1
     cda:	89 f0       	breq	.+34     	; 0xcfe <delay_ms+0x68>
     cdc:	b6 df       	rcall	.-148    	; 0xc4a <micros>
     cde:	dc 01       	movw	r26, r24
     ce0:	cb 01       	movw	r24, r22
     ce2:	88 19       	sub	r24, r8
     ce4:	99 09       	sbc	r25, r9
     ce6:	aa 09       	sbc	r26, r10
     ce8:	bb 09       	sbc	r27, r11
     cea:	88 3e       	cpi	r24, 0xE8	; 232
     cec:	93 40       	sbci	r25, 0x03	; 3
     cee:	a1 05       	cpc	r26, r1
     cf0:	b1 05       	cpc	r27, r1
     cf2:	20 f7       	brcc	.-56     	; 0xcbc <delay_ms+0x26>
     cf4:	c1 14       	cp	r12, r1
     cf6:	d1 04       	cpc	r13, r1
     cf8:	e1 04       	cpc	r14, r1
     cfa:	f1 04       	cpc	r15, r1
     cfc:	79 f7       	brne	.-34     	; 0xcdc <delay_ms+0x46>
     cfe:	ff 90       	pop	r15
     d00:	ef 90       	pop	r14
     d02:	df 90       	pop	r13
     d04:	cf 90       	pop	r12
     d06:	bf 90       	pop	r11
     d08:	af 90       	pop	r10
     d0a:	9f 90       	pop	r9
     d0c:	8f 90       	pop	r8
     d0e:	08 95       	ret

00000d10 <__vector_23>:
	// return = 4 cycles	
}


ISR(TIMER0_OVF_vect)
{
     d10:	1f 92       	push	r1
     d12:	0f 92       	push	r0
     d14:	0f b6       	in	r0, 0x3f	; 63
     d16:	0f 92       	push	r0
     d18:	11 24       	eor	r1, r1
     d1a:	2f 93       	push	r18
     d1c:	3f 93       	push	r19
     d1e:	8f 93       	push	r24
     d20:	9f 93       	push	r25
     d22:	af 93       	push	r26
     d24:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
     d26:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <timer0_millis>
     d2a:	90 91 50 02 	lds	r25, 0x0250	; 0x800250 <timer0_millis+0x1>
     d2e:	a0 91 51 02 	lds	r26, 0x0251	; 0x800251 <timer0_millis+0x2>
     d32:	b0 91 52 02 	lds	r27, 0x0252	; 0x800252 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
     d36:	30 91 4e 02 	lds	r19, 0x024E	; 0x80024e <__data_end>
	
	m += MILLIS_INC;
	f += FRACT_INC;
     d3a:	23 e0       	ldi	r18, 0x03	; 3
     d3c:	23 0f       	add	r18, r19
	
	if(f >= FRACT_MAX){
     d3e:	2d 37       	cpi	r18, 0x7D	; 125
     d40:	20 f4       	brcc	.+8      	; 0xd4a <__vector_23+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;
	
	m += MILLIS_INC;
     d42:	01 96       	adiw	r24, 0x01	; 1
     d44:	a1 1d       	adc	r26, r1
     d46:	b1 1d       	adc	r27, r1
     d48:	05 c0       	rjmp	.+10     	; 0xd54 <__vector_23+0x44>
	f += FRACT_INC;
	
	if(f >= FRACT_MAX){
		f -= FRACT_MAX;
     d4a:	26 e8       	ldi	r18, 0x86	; 134
     d4c:	23 0f       	add	r18, r19
		m += 1;
     d4e:	02 96       	adiw	r24, 0x02	; 2
     d50:	a1 1d       	adc	r26, r1
     d52:	b1 1d       	adc	r27, r1
	}
	
	timer0_fract = f;
     d54:	20 93 4e 02 	sts	0x024E, r18	; 0x80024e <__data_end>
	timer0_millis = m;
     d58:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <timer0_millis>
     d5c:	90 93 50 02 	sts	0x0250, r25	; 0x800250 <timer0_millis+0x1>
     d60:	a0 93 51 02 	sts	0x0251, r26	; 0x800251 <timer0_millis+0x2>
     d64:	b0 93 52 02 	sts	0x0252, r27	; 0x800252 <timer0_millis+0x3>
	timer0_overflow_count++;
     d68:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <timer0_overflow_count>
     d6c:	90 91 54 02 	lds	r25, 0x0254	; 0x800254 <timer0_overflow_count+0x1>
     d70:	a0 91 55 02 	lds	r26, 0x0255	; 0x800255 <timer0_overflow_count+0x2>
     d74:	b0 91 56 02 	lds	r27, 0x0256	; 0x800256 <timer0_overflow_count+0x3>
     d78:	01 96       	adiw	r24, 0x01	; 1
     d7a:	a1 1d       	adc	r26, r1
     d7c:	b1 1d       	adc	r27, r1
     d7e:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <timer0_overflow_count>
     d82:	90 93 54 02 	sts	0x0254, r25	; 0x800254 <timer0_overflow_count+0x1>
     d86:	a0 93 55 02 	sts	0x0255, r26	; 0x800255 <timer0_overflow_count+0x2>
     d8a:	b0 93 56 02 	sts	0x0256, r27	; 0x800256 <timer0_overflow_count+0x3>
     d8e:	bf 91       	pop	r27
     d90:	af 91       	pop	r26
     d92:	9f 91       	pop	r25
     d94:	8f 91       	pop	r24
     d96:	3f 91       	pop	r19
     d98:	2f 91       	pop	r18
     d9a:	0f 90       	pop	r0
     d9c:	0f be       	out	0x3f, r0	; 63
     d9e:	0f 90       	pop	r0
     da0:	1f 90       	pop	r1
     da2:	18 95       	reti

00000da4 <tone>:
}


//Generate frequency (in hertz) and duration (in milliseconds)
void tone(uint8_t _pin, unsigned int frequency, unsigned long duration)
{
     da4:	8f 92       	push	r8
     da6:	9f 92       	push	r9
     da8:	af 92       	push	r10
     daa:	bf 92       	push	r11
     dac:	cf 92       	push	r12
     dae:	df 92       	push	r13
     db0:	ef 92       	push	r14
     db2:	ff 92       	push	r15
     db4:	0f 93       	push	r16
     db6:	1f 93       	push	r17
     db8:	cf 93       	push	r28
     dba:	8b 01       	movw	r16, r22
     dbc:	49 01       	movw	r8, r18
     dbe:	5a 01       	movw	r10, r20
	uint8_t prescalarbits = 0b001; // No Prescaling
	long toggle_count = 0;
	uint32_t ocr = 0;
	int8_t _timer;
	sei();
     dc0:	78 94       	sei
	
	int8_t _timer = -1;
	
	// if we're already using the pin, the timer should be configured.
	for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
		if (tone_pins[i] == _pin) {
     dc2:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <tone_pins>
     dc6:	89 13       	cpse	r24, r25
     dc8:	07 c3       	rjmp	.+1550   	; 0x13d8 <tone+0x634>
			return pgm_read_byte(tone_pin_to_timer_PGM + i);
     dca:	eb e7       	ldi	r30, 0x7B	; 123
     dcc:	f2 e0       	ldi	r31, 0x02	; 2
     dce:	c4 91       	lpm	r28, Z
     dd0:	f4 c0       	rjmp	.+488    	; 0xfba <tone+0x216>
	}
	  
	// search for an unused timer.
	for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
		if (tone_pins[i] == 255) {
			tone_pins[i] = _pin;
     dd2:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <tone_pins>
			_timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
     dd6:	eb e7       	ldi	r30, 0x7B	; 123
     dd8:	f2 e0       	ldi	r31, 0x02	; 2
     dda:	c4 91       	lpm	r28, Z
			break;
		}
	}
	
	//Found timer
	if (_timer != -1)
     ddc:	cf 3f       	cpi	r28, 0xFF	; 255
     dde:	09 f4       	brne	.+2      	; 0xde2 <tone+0x3e>
     de0:	40 c3       	rjmp	.+1664   	; 0x1462 <tone+0x6be>
	{
		// Set timer specific stuff
		// All timers in CTC mode
		// 8 bit timers will require changing prescalar values,
		// whereas 16 bit timers are set to either clk/1 or clk/64 prescalar
		switch(_timer)
     de2:	c2 30       	cpi	r28, 0x02	; 2
     de4:	09 f4       	brne	.+2      	; 0xde8 <tone+0x44>
     de6:	56 c0       	rjmp	.+172    	; 0xe94 <tone+0xf0>
     de8:	28 f4       	brcc	.+10     	; 0xdf4 <tone+0x50>
     dea:	cc 23       	and	r28, r28
     dec:	61 f0       	breq	.+24     	; 0xe06 <tone+0x62>
     dee:	c1 30       	cpi	r28, 0x01	; 1
     df0:	69 f1       	breq	.+90     	; 0xe4c <tone+0xa8>
     df2:	e3 c0       	rjmp	.+454    	; 0xfba <tone+0x216>
     df4:	c4 30       	cpi	r28, 0x04	; 4
     df6:	09 f4       	brne	.+2      	; 0xdfa <tone+0x56>
     df8:	98 c0       	rjmp	.+304    	; 0xf2a <tone+0x186>
     dfa:	08 f4       	brcc	.+2      	; 0xdfe <tone+0x5a>
     dfc:	72 c0       	rjmp	.+228    	; 0xee2 <tone+0x13e>
     dfe:	c5 30       	cpi	r28, 0x05	; 5
     e00:	09 f4       	brne	.+2      	; 0xe04 <tone+0x60>
     e02:	b7 c0       	rjmp	.+366    	; 0xf72 <tone+0x1ce>
     e04:	da c0       	rjmp	.+436    	; 0xfba <tone+0x216>
		{
			//TIMER 0 - 8 bit timer
			case 0:
				TCCR0A = 0;
     e06:	14 bc       	out	0x24, r1	; 36
				TCCR0B = 0;
     e08:	15 bc       	out	0x25, r1	; 37
				bitWrite(TCCR0A, WGM01, 1); // set CTC mode
     e0a:	94 b5       	in	r25, 0x24	; 36
     e0c:	92 60       	ori	r25, 0x02	; 2
     e0e:	94 bd       	out	0x24, r25	; 36
				bitWrite(TCCR0B, CS00, 1);  // No prescaling
     e10:	95 b5       	in	r25, 0x25	; 37
     e12:	91 60       	ori	r25, 0x01	; 1
     e14:	95 bd       	out	0x25, r25	; 37
				timer0_pin_port = portOutputRegister(pinToPort(_pin));
     e16:	28 2f       	mov	r18, r24
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	f9 01       	movw	r30, r18
     e1c:	ee 51       	subi	r30, 0x1E	; 30
     e1e:	fe 4f       	sbci	r31, 0xFE	; 254
     e20:	e4 91       	lpm	r30, Z
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	ee 0f       	add	r30, r30
     e26:	ff 1f       	adc	r31, r31
     e28:	e9 5b       	subi	r30, 0xB9	; 185
     e2a:	fd 4f       	sbci	r31, 0xFD	; 253
     e2c:	45 91       	lpm	r20, Z+
     e2e:	54 91       	lpm	r21, Z
     e30:	50 93 81 02 	sts	0x0281, r21	; 0x800281 <timer0_pin_port+0x1>
     e34:	40 93 80 02 	sts	0x0280, r20	; 0x800280 <timer0_pin_port>
				timer0_pin_mask = pinToBitMask(_pin);
     e38:	f9 01       	movw	r30, r18
     e3a:	e3 58       	subi	r30, 0x83	; 131
     e3c:	fe 4f       	sbci	r31, 0xFE	; 254
     e3e:	24 91       	lpm	r18, Z
     e40:	20 93 68 02 	sts	0x0268, r18	; 0x800268 <timer0_pin_mask>
	_timer = toneBegin(_pin);
	
	if (_timer >= 0)
	{
		//1. set the pin as OUTPUT
		pinMode(_pin, OUTPUT);
     e44:	61 e0       	ldi	r22, 0x01	; 1
     e46:	97 db       	rcall	.-2258   	; 0x576 <pinMode>
				timer5_pin_mask = pinToBitMask(_pin);
			break;
		}
	}
	
	return _timer;	
     e48:	c0 e0       	ldi	r28, 0x00	; 0
     e4a:	8e c2       	rjmp	.+1308   	; 0x1368 <tone+0x5c4>
				timer0_pin_port = portOutputRegister(pinToPort(_pin));
				timer0_pin_mask = pinToBitMask(_pin);
			break;			
			//TIMER 1 - 16 bit timer
			case 1:
				TCCR1A = 0;
     e4c:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
				TCCR1B = 0;
     e50:	e1 e8       	ldi	r30, 0x81	; 129
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	10 82       	st	Z, r1
				bitWrite(TCCR1B, WGM12, 1); // Set CTC mode
     e56:	90 81       	ld	r25, Z
     e58:	98 60       	ori	r25, 0x08	; 8
     e5a:	90 83       	st	Z, r25
				bitWrite(TCCR1B, CS10, 1) ; // No prescaling
     e5c:	90 81       	ld	r25, Z
     e5e:	91 60       	ori	r25, 0x01	; 1
     e60:	90 83       	st	Z, r25
				timer1_pin_port = portOutputRegister(pinToPort(_pin));
     e62:	28 2f       	mov	r18, r24
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	f9 01       	movw	r30, r18
     e68:	ee 51       	subi	r30, 0x1E	; 30
     e6a:	fe 4f       	sbci	r31, 0xFE	; 254
     e6c:	e4 91       	lpm	r30, Z
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	ee 0f       	add	r30, r30
     e72:	ff 1f       	adc	r31, r31
     e74:	e9 5b       	subi	r30, 0xB9	; 185
     e76:	fd 4f       	sbci	r31, 0xFD	; 253
     e78:	45 91       	lpm	r20, Z+
     e7a:	54 91       	lpm	r21, Z
     e7c:	50 93 88 02 	sts	0x0288, r21	; 0x800288 <timer1_pin_port+0x1>
     e80:	40 93 87 02 	sts	0x0287, r20	; 0x800287 <timer1_pin_port>
				timer1_pin_mask = pinToBitMask(_pin);
     e84:	f9 01       	movw	r30, r18
     e86:	e3 58       	subi	r30, 0x83	; 131
     e88:	fe 4f       	sbci	r31, 0xFE	; 254
     e8a:	24 91       	lpm	r18, Z
     e8c:	20 93 86 02 	sts	0x0286, r18	; 0x800286 <timer1_pin_mask>
				timer5_pin_mask = pinToBitMask(_pin);
			break;
		}
	}
	
	return _timer;	
     e90:	c1 e0       	ldi	r28, 0x01	; 1
     e92:	e4 c2       	rjmp	.+1480   	; 0x145c <tone+0x6b8>
				timer1_pin_port = portOutputRegister(pinToPort(_pin));
				timer1_pin_mask = pinToBitMask(_pin);
			break;			
			//TIMER 2 - 8 bit timer
			case 2:
				TCCR2A = 0;
     e94:	a0 eb       	ldi	r26, 0xB0	; 176
     e96:	b0 e0       	ldi	r27, 0x00	; 0
     e98:	1c 92       	st	X, r1
				TCCR2B = 0;
     e9a:	e1 eb       	ldi	r30, 0xB1	; 177
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	10 82       	st	Z, r1
				bitWrite(TCCR2A, WGM21, 1); //Set CTC mode
     ea0:	9c 91       	ld	r25, X
     ea2:	92 60       	ori	r25, 0x02	; 2
     ea4:	9c 93       	st	X, r25
				bitWrite(TCCR2B, CS20, 1); // No prescaling
     ea6:	90 81       	ld	r25, Z
     ea8:	91 60       	ori	r25, 0x01	; 1
     eaa:	90 83       	st	Z, r25
				timer2_pin_port = portOutputRegister(pinToPort(_pin));
     eac:	28 2f       	mov	r18, r24
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	f9 01       	movw	r30, r18
     eb2:	ee 51       	subi	r30, 0x1E	; 30
     eb4:	fe 4f       	sbci	r31, 0xFE	; 254
     eb6:	e4 91       	lpm	r30, Z
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	ee 0f       	add	r30, r30
     ebc:	ff 1f       	adc	r31, r31
     ebe:	e9 5b       	subi	r30, 0xB9	; 185
     ec0:	fd 4f       	sbci	r31, 0xFD	; 253
     ec2:	45 91       	lpm	r20, Z+
     ec4:	54 91       	lpm	r21, Z
     ec6:	50 93 6f 02 	sts	0x026F, r21	; 0x80026f <timer2_pin_port+0x1>
     eca:	40 93 6e 02 	sts	0x026E, r20	; 0x80026e <timer2_pin_port>
				timer2_pin_mask = pinToBitMask(_pin);
     ece:	f9 01       	movw	r30, r18
     ed0:	e3 58       	subi	r30, 0x83	; 131
     ed2:	fe 4f       	sbci	r31, 0xFE	; 254
     ed4:	24 91       	lpm	r18, Z
     ed6:	20 93 7b 02 	sts	0x027B, r18	; 0x80027b <timer2_pin_mask>
	_timer = toneBegin(_pin);
	
	if (_timer >= 0)
	{
		//1. set the pin as OUTPUT
		pinMode(_pin, OUTPUT);
     eda:	61 e0       	ldi	r22, 0x01	; 1
     edc:	4c db       	rcall	.-2408   	; 0x576 <pinMode>
				timer5_pin_mask = pinToBitMask(_pin);
			break;
		}
	}
	
	return _timer;	
     ede:	c2 e0       	ldi	r28, 0x02	; 2
     ee0:	0a c2       	rjmp	.+1044   	; 0x12f6 <tone+0x552>
				timer2_pin_port = portOutputRegister(pinToPort(_pin));
				timer2_pin_mask = pinToBitMask(_pin);
			break;			
			//TIMER 3 - 16 bit timer
			case 3:
				TCCR3A = 0;
     ee2:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
				TCCR3B = 0;
     ee6:	e1 e9       	ldi	r30, 0x91	; 145
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	10 82       	st	Z, r1
				bitWrite(TCCR3B, WGM32, 1); //CTC Mode
     eec:	90 81       	ld	r25, Z
     eee:	98 60       	ori	r25, 0x08	; 8
     ef0:	90 83       	st	Z, r25
				bitWrite(TCCR3B, CS30, 1);	//No prescaling
     ef2:	90 81       	ld	r25, Z
     ef4:	91 60       	ori	r25, 0x01	; 1
     ef6:	90 83       	st	Z, r25
				timer3_pin_port = portOutputRegister(pinToPort(_pin));
     ef8:	28 2f       	mov	r18, r24
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	f9 01       	movw	r30, r18
     efe:	ee 51       	subi	r30, 0x1E	; 30
     f00:	fe 4f       	sbci	r31, 0xFE	; 254
     f02:	e4 91       	lpm	r30, Z
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	ee 0f       	add	r30, r30
     f08:	ff 1f       	adc	r31, r31
     f0a:	e9 5b       	subi	r30, 0xB9	; 185
     f0c:	fd 4f       	sbci	r31, 0xFD	; 253
     f0e:	45 91       	lpm	r20, Z+
     f10:	54 91       	lpm	r21, Z
     f12:	50 93 72 02 	sts	0x0272, r21	; 0x800272 <timer3_pin_port+0x1>
     f16:	40 93 71 02 	sts	0x0271, r20	; 0x800271 <timer3_pin_port>
				timer3_pin_mask = pinToBitMask(_pin);
     f1a:	f9 01       	movw	r30, r18
     f1c:	e3 58       	subi	r30, 0x83	; 131
     f1e:	fe 4f       	sbci	r31, 0xFE	; 254
     f20:	24 91       	lpm	r18, Z
     f22:	20 93 69 02 	sts	0x0269, r18	; 0x800269 <timer3_pin_mask>
				timer5_pin_mask = pinToBitMask(_pin);
			break;
		}
	}
	
	return _timer;	
     f26:	c3 e0       	ldi	r28, 0x03	; 3
     f28:	99 c2       	rjmp	.+1330   	; 0x145c <tone+0x6b8>
				timer3_pin_port = portOutputRegister(pinToPort(_pin));
				timer3_pin_mask = pinToBitMask(_pin);
			break;		
			//TIMER 4 - 16 bit timer
			case 4:
				TCCR4A = 0;
     f2a:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
				TCCR4B = 0;
     f2e:	e1 ea       	ldi	r30, 0xA1	; 161
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	10 82       	st	Z, r1
				bitWrite(TCCR4B, WGM42, 1); //CTC Mode
     f34:	90 81       	ld	r25, Z
     f36:	98 60       	ori	r25, 0x08	; 8
     f38:	90 83       	st	Z, r25
				bitWrite(TCCR4B, CS40, 1);  //No prescaling
     f3a:	90 81       	ld	r25, Z
     f3c:	91 60       	ori	r25, 0x01	; 1
     f3e:	90 83       	st	Z, r25
				timer4_pin_port = portOutputRegister(pinToPort(_pin));
     f40:	28 2f       	mov	r18, r24
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	f9 01       	movw	r30, r18
     f46:	ee 51       	subi	r30, 0x1E	; 30
     f48:	fe 4f       	sbci	r31, 0xFE	; 254
     f4a:	e4 91       	lpm	r30, Z
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	ee 0f       	add	r30, r30
     f50:	ff 1f       	adc	r31, r31
     f52:	e9 5b       	subi	r30, 0xB9	; 185
     f54:	fd 4f       	sbci	r31, 0xFD	; 253
     f56:	45 91       	lpm	r20, Z+
     f58:	54 91       	lpm	r21, Z
     f5a:	50 93 7f 02 	sts	0x027F, r21	; 0x80027f <timer4_pin_port+0x1>
     f5e:	40 93 7e 02 	sts	0x027E, r20	; 0x80027e <timer4_pin_port>
				timer4_pin_mask = pinToBitMask(_pin);
     f62:	f9 01       	movw	r30, r18
     f64:	e3 58       	subi	r30, 0x83	; 131
     f66:	fe 4f       	sbci	r31, 0xFE	; 254
     f68:	24 91       	lpm	r18, Z
     f6a:	20 93 70 02 	sts	0x0270, r18	; 0x800270 <timer4_pin_mask>
				timer5_pin_mask = pinToBitMask(_pin);
			break;
		}
	}
	
	return _timer;	
     f6e:	c4 e0       	ldi	r28, 0x04	; 4
     f70:	75 c2       	rjmp	.+1258   	; 0x145c <tone+0x6b8>
				timer4_pin_port = portOutputRegister(pinToPort(_pin));
				timer4_pin_mask = pinToBitMask(_pin);
			break;	
			//TIMER 5 - 16 bit timer
			case 5:
				TCCR5A = 0;
     f72:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
				TCCR5B = 0;
     f76:	e1 e2       	ldi	r30, 0x21	; 33
     f78:	f1 e0       	ldi	r31, 0x01	; 1
     f7a:	10 82       	st	Z, r1
				bitWrite(TCCR5B, WGM52, 1);
     f7c:	90 81       	ld	r25, Z
     f7e:	98 60       	ori	r25, 0x08	; 8
     f80:	90 83       	st	Z, r25
				bitWrite(TCCR5B, CS50, 1);
     f82:	90 81       	ld	r25, Z
     f84:	91 60       	ori	r25, 0x01	; 1
     f86:	90 83       	st	Z, r25
				timer5_pin_port = portOutputRegister(pinToPort(_pin));
     f88:	28 2f       	mov	r18, r24
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	f9 01       	movw	r30, r18
     f8e:	ee 51       	subi	r30, 0x1E	; 30
     f90:	fe 4f       	sbci	r31, 0xFE	; 254
     f92:	e4 91       	lpm	r30, Z
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	ee 0f       	add	r30, r30
     f98:	ff 1f       	adc	r31, r31
     f9a:	e9 5b       	subi	r30, 0xB9	; 185
     f9c:	fd 4f       	sbci	r31, 0xFD	; 253
     f9e:	45 91       	lpm	r20, Z+
     fa0:	54 91       	lpm	r21, Z
     fa2:	50 93 7d 02 	sts	0x027D, r21	; 0x80027d <timer5_pin_port+0x1>
     fa6:	40 93 7c 02 	sts	0x027C, r20	; 0x80027c <timer5_pin_port>
				timer5_pin_mask = pinToBitMask(_pin);
     faa:	f9 01       	movw	r30, r18
     fac:	e3 58       	subi	r30, 0x83	; 131
     fae:	fe 4f       	sbci	r31, 0xFE	; 254
     fb0:	24 91       	lpm	r18, Z
     fb2:	20 93 8d 02 	sts	0x028D, r18	; 0x80028d <timer5_pin_mask>
			break;
		}
	}
	
	return _timer;	
     fb6:	c5 e0       	ldi	r28, 0x05	; 5
     fb8:	51 c2       	rjmp	.+1186   	; 0x145c <tone+0x6b8>
	int8_t _timer;
	sei();
	
	_timer = toneBegin(_pin);
	
	if (_timer >= 0)
     fba:	cc 23       	and	r28, r28
     fbc:	0c f4       	brge	.+2      	; 0xfc0 <tone+0x21c>
	{
		//1. set the pin as OUTPUT
		pinMode(_pin, OUTPUT);
     fbe:	51 c2       	rjmp	.+1186   	; 0x1462 <tone+0x6be>
     fc0:	61 e0       	ldi	r22, 0x01	; 1
     fc2:	d9 da       	rcall	.-2638   	; 0x576 <pinMode>
		
		//2. if we are using an 8 bit timer, scan through prescalers to find the best fit
		if (_timer == 0 || _timer == 2)
     fc4:	cc 23       	and	r28, r28
     fc6:	09 f4       	brne	.+2      	; 0xfca <tone+0x226>
     fc8:	cf c1       	rjmp	.+926    	; 0x1368 <tone+0x5c4>
     fca:	c2 30       	cpi	r28, 0x02	; 2
     fcc:	09 f0       	breq	.+2      	; 0xfd0 <tone+0x22c>
     fce:	77 c0       	rjmp	.+238    	; 0x10be <tone+0x31a>
     fd0:	92 c1       	rjmp	.+804    	; 0x12f6 <tone+0x552>
				ocr = (F_CPU / (frequency * 2 * 8)) - 1;
				prescalarbits = 0b010; // clk/8 prescaler : For both timers
				
				if (_timer == 2 && ocr > 255)
				{
					ocr = (F_CPU / frequency / 2 / 32) - 1;
     fd2:	68 01       	movw	r12, r16
     fd4:	e1 2c       	mov	r14, r1
     fd6:	f1 2c       	mov	r15, r1
     fd8:	60 e9       	ldi	r22, 0x90	; 144
     fda:	70 ed       	ldi	r23, 0xD0	; 208
     fdc:	83 e0       	ldi	r24, 0x03	; 3
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	a7 01       	movw	r20, r14
     fe2:	96 01       	movw	r18, r12
     fe4:	9b d4       	rcall	.+2358   	; 0x191c <__udivmodsi4>
     fe6:	69 01       	movw	r12, r18
     fe8:	7a 01       	movw	r14, r20
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	c8 1a       	sub	r12, r24
     fee:	d1 08       	sbc	r13, r1
     ff0:	e1 08       	sbc	r14, r1
     ff2:	f1 08       	sbc	r15, r1
					prescalarbits = 0b011; // clk/32
				}
					
				if(ocr > 255)
     ff4:	9f ef       	ldi	r25, 0xFF	; 255
     ff6:	c9 16       	cp	r12, r25
     ff8:	d1 04       	cpc	r13, r1
     ffa:	e1 04       	cpc	r14, r1
     ffc:	f1 04       	cpc	r15, r1
     ffe:	11 f0       	breq	.+4      	; 0x1004 <tone+0x260>
    1000:	08 f0       	brcs	.+2      	; 0x1004 <tone+0x260>
    1002:	cc c1       	rjmp	.+920    	; 0x139c <tone+0x5f8>
				prescalarbits = 0b010; // clk/8 prescaler : For both timers
				
				if (_timer == 2 && ocr > 255)
				{
					ocr = (F_CPU / frequency / 2 / 32) - 1;
					prescalarbits = 0b011; // clk/32
    1004:	83 e0       	ldi	r24, 0x03	; 3
    1006:	54 c0       	rjmp	.+168    	; 0x10b0 <tone+0x30c>
				}
					
				if(ocr > 255)
				{
					ocr = (F_CPU / (frequency * 2 * 64)) - 1;
    1008:	98 01       	movw	r18, r16
    100a:	36 95       	lsr	r19
    100c:	32 2f       	mov	r19, r18
    100e:	22 27       	eor	r18, r18
    1010:	37 95       	ror	r19
    1012:	27 95       	ror	r18
    1014:	40 e0       	ldi	r20, 0x00	; 0
    1016:	50 e0       	ldi	r21, 0x00	; 0
    1018:	60 e0       	ldi	r22, 0x00	; 0
    101a:	74 e2       	ldi	r23, 0x24	; 36
    101c:	84 ef       	ldi	r24, 0xF4	; 244
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	7d d4       	rcall	.+2298   	; 0x191c <__udivmodsi4>
    1022:	69 01       	movw	r12, r18
    1024:	7a 01       	movw	r14, r20
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	c8 1a       	sub	r12, r24
    102a:	d1 08       	sbc	r13, r1
    102c:	e1 08       	sbc	r14, r1
    102e:	f1 08       	sbc	r15, r1
					prescalarbits = _timer == 0 ? 0b011 : 0b100; // clk/32 for timer 1: clk/64 for timer 2
    1030:	83 e0       	ldi	r24, 0x03	; 3
    1032:	11 c0       	rjmp	.+34     	; 0x1056 <tone+0x2b2>
					
					if (_timer == 2 && ocr > 255)
					{
						ocr = (F_CPU / (frequency * 2 * 128)) - 1;
    1034:	30 2f       	mov	r19, r16
    1036:	22 27       	eor	r18, r18
    1038:	40 e0       	ldi	r20, 0x00	; 0
    103a:	50 e0       	ldi	r21, 0x00	; 0
    103c:	60 e0       	ldi	r22, 0x00	; 0
    103e:	74 e2       	ldi	r23, 0x24	; 36
    1040:	84 ef       	ldi	r24, 0xF4	; 244
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	6b d4       	rcall	.+2262   	; 0x191c <__udivmodsi4>
    1046:	69 01       	movw	r12, r18
    1048:	7a 01       	movw	r14, r20
    104a:	91 e0       	ldi	r25, 0x01	; 1
    104c:	c9 1a       	sub	r12, r25
    104e:	d1 08       	sbc	r13, r1
    1050:	e1 08       	sbc	r14, r1
    1052:	f1 08       	sbc	r15, r1
						prescalarbits = 0b101; //clk/128
    1054:	85 e0       	ldi	r24, 0x05	; 5
					}

					if (ocr > 255)
    1056:	9f ef       	ldi	r25, 0xFF	; 255
    1058:	c9 16       	cp	r12, r25
    105a:	d1 04       	cpc	r13, r1
    105c:	e1 04       	cpc	r14, r1
    105e:	f1 04       	cpc	r15, r1
    1060:	b9 f0       	breq	.+46     	; 0x1090 <tone+0x2ec>
    1062:	b0 f0       	brcs	.+44     	; 0x1090 <tone+0x2ec>
					{
						ocr = (F_CPU / (frequency * 2 * 256))- 1;
    1064:	98 01       	movw	r18, r16
    1066:	32 2f       	mov	r19, r18
    1068:	22 27       	eor	r18, r18
    106a:	33 0f       	add	r19, r19
    106c:	40 e0       	ldi	r20, 0x00	; 0
    106e:	50 e0       	ldi	r21, 0x00	; 0
    1070:	60 e0       	ldi	r22, 0x00	; 0
    1072:	74 e2       	ldi	r23, 0x24	; 36
    1074:	84 ef       	ldi	r24, 0xF4	; 244
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	51 d4       	rcall	.+2210   	; 0x191c <__udivmodsi4>
    107a:	69 01       	movw	r12, r18
    107c:	7a 01       	movw	r14, r20
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	c8 1a       	sub	r12, r24
    1082:	d1 08       	sbc	r13, r1
    1084:	e1 08       	sbc	r14, r1
    1086:	f1 08       	sbc	r15, r1
						prescalarbits = _timer == 0 ? 0b100 : 0b110;  // clk/64 for timer 1: clk/256 for timer 2
    1088:	cc 23       	and	r28, r28
    108a:	09 f4       	brne	.+2      	; 0x108e <tone+0x2ea>
    108c:	bf c1       	rjmp	.+894    	; 0x140c <tone+0x668>
    108e:	dd c1       	rjmp	.+954    	; 0x144a <tone+0x6a6>
			}
				
			
			//2(b) Set the prescaler for 8 bit timers
			      //TIMER 0
			if (_timer == 0)
    1090:	c1 11       	cpse	r28, r1
    1092:	0e c0       	rjmp	.+28     	; 0x10b0 <tone+0x30c>
			{
				TCCR0B = (TCCR0B & 0b11111000) | prescalarbits;
    1094:	95 b5       	in	r25, 0x25	; 37
    1096:	98 7f       	andi	r25, 0xF8	; 248
    1098:	89 2b       	or	r24, r25
    109a:	85 bd       	out	0x25, r24	; 37
				TCCR5B = (TCCR5B & 0b11111000) | prescalarbits;
			}
		}
		
		//4. Calculate the toggle count
		if (duration > 0)
    109c:	81 14       	cp	r8, r1
    109e:	91 04       	cpc	r9, r1
    10a0:	a1 04       	cpc	r10, r1
    10a2:	b1 04       	cpc	r11, r1
    10a4:	09 f0       	breq	.+2      	; 0x10a8 <tone+0x304>
    10a6:	82 c0       	rjmp	.+260    	; 0x11ac <tone+0x408>
		{
			toggle_count = (2 * frequency * duration)/ 1000;
		}else{
			toggle_count = -1;
    10a8:	2f ef       	ldi	r18, 0xFF	; 255
    10aa:	3f ef       	ldi	r19, 0xFF	; 255
    10ac:	a9 01       	movw	r20, r18
    10ae:	9d c0       	rjmp	.+314    	; 0x11ea <tone+0x446>
			{
				TCCR0B = (TCCR0B & 0b11111000) | prescalarbits;
			}
			else   //TIMER 2
			{
				TCCR2B = (TCCR2B & 0b11111000) | prescalarbits;
    10b0:	e1 eb       	ldi	r30, 0xB1	; 177
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	90 81       	ld	r25, Z
    10b6:	98 7f       	andi	r25, 0xF8	; 248
    10b8:	89 2b       	or	r24, r25
    10ba:	80 83       	st	Z, r24
    10bc:	72 c0       	rjmp	.+228    	; 0x11a2 <tone+0x3fe>
			}
			
		}else{
			//3. Prescaling for 16 bit timers
			// two choices for the 16 bit timers: clk/1 or clk/64
			ocr = (F_CPU / (frequency * 2)) - 1;
    10be:	98 01       	movw	r18, r16
    10c0:	22 0f       	add	r18, r18
    10c2:	33 1f       	adc	r19, r19
    10c4:	40 e0       	ldi	r20, 0x00	; 0
    10c6:	50 e0       	ldi	r21, 0x00	; 0
    10c8:	60 e0       	ldi	r22, 0x00	; 0
    10ca:	74 e2       	ldi	r23, 0x24	; 36
    10cc:	84 ef       	ldi	r24, 0xF4	; 244
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	25 d4       	rcall	.+2122   	; 0x191c <__udivmodsi4>
    10d2:	69 01       	movw	r12, r18
    10d4:	7a 01       	movw	r14, r20
    10d6:	91 e0       	ldi	r25, 0x01	; 1
    10d8:	c9 1a       	sub	r12, r25
    10da:	d1 08       	sbc	r13, r1
    10dc:	e1 08       	sbc	r14, r1
    10de:	f1 08       	sbc	r15, r1
			
			prescalarbits = 0b001; //clk1
			if(ocr > 0xffff) //>65535
    10e0:	c1 14       	cp	r12, r1
    10e2:	d1 04       	cpc	r13, r1
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	e8 06       	cpc	r14, r24
    10e8:	f1 04       	cpc	r15, r1
    10ea:	b0 f0       	brcs	.+44     	; 0x1118 <tone+0x374>
			{
				ocr = (F_CPU / (frequency * 2 * 64 ))- 1;
    10ec:	98 01       	movw	r18, r16
    10ee:	36 95       	lsr	r19
    10f0:	32 2f       	mov	r19, r18
    10f2:	22 27       	eor	r18, r18
    10f4:	37 95       	ror	r19
    10f6:	27 95       	ror	r18
    10f8:	40 e0       	ldi	r20, 0x00	; 0
    10fa:	50 e0       	ldi	r21, 0x00	; 0
    10fc:	60 e0       	ldi	r22, 0x00	; 0
    10fe:	74 e2       	ldi	r23, 0x24	; 36
    1100:	84 ef       	ldi	r24, 0xF4	; 244
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	0b d4       	rcall	.+2070   	; 0x191c <__udivmodsi4>
    1106:	69 01       	movw	r12, r18
    1108:	7a 01       	movw	r14, r20
    110a:	91 e0       	ldi	r25, 0x01	; 1
    110c:	c9 1a       	sub	r12, r25
    110e:	d1 08       	sbc	r13, r1
    1110:	e1 08       	sbc	r14, r1
    1112:	f1 08       	sbc	r15, r1
				prescalarbits = 0b011; //clk/64
    1114:	83 e0       	ldi	r24, 0x03	; 3
    1116:	01 c0       	rjmp	.+2      	; 0x111a <tone+0x376>
		}else{
			//3. Prescaling for 16 bit timers
			// two choices for the 16 bit timers: clk/1 or clk/64
			ocr = (F_CPU / (frequency * 2)) - 1;
			
			prescalarbits = 0b001; //clk1
    1118:	81 e0       	ldi	r24, 0x01	; 1
				ocr = (F_CPU / (frequency * 2 * 64 ))- 1;
				prescalarbits = 0b011; //clk/64
			}
			
			//3(b) Set the prescaler for 16 bit timers
			if (_timer == 1)
    111a:	c1 30       	cpi	r28, 0x01	; 1
    111c:	79 f4       	brne	.+30     	; 0x113c <tone+0x398>
			{
				TCCR1B = (TCCR1B & 0b11111000) | prescalarbits;
    111e:	e1 e8       	ldi	r30, 0x81	; 129
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	90 81       	ld	r25, Z
    1124:	98 7f       	andi	r25, 0xF8	; 248
    1126:	89 2b       	or	r24, r25
    1128:	80 83       	st	Z, r24
				TCCR5B = (TCCR5B & 0b11111000) | prescalarbits;
			}
		}
		
		//4. Calculate the toggle count
		if (duration > 0)
    112a:	81 14       	cp	r8, r1
    112c:	91 04       	cpc	r9, r1
    112e:	a1 04       	cpc	r10, r1
    1130:	b1 04       	cpc	r11, r1
    1132:	e1 f5       	brne	.+120    	; 0x11ac <tone+0x408>
		{
			toggle_count = (2 * frequency * duration)/ 1000;
		}else{
			toggle_count = -1;
    1134:	2f ef       	ldi	r18, 0xFF	; 255
    1136:	3f ef       	ldi	r19, 0xFF	; 255
    1138:	a9 01       	movw	r20, r18
    113a:	66 c0       	rjmp	.+204    	; 0x1208 <tone+0x464>
			//3(b) Set the prescaler for 16 bit timers
			if (_timer == 1)
			{
				TCCR1B = (TCCR1B & 0b11111000) | prescalarbits;
			}
			else if (_timer == 3)
    113c:	c3 30       	cpi	r28, 0x03	; 3
    113e:	79 f4       	brne	.+30     	; 0x115e <tone+0x3ba>
			{
				TCCR3B = (TCCR3B & 0b11111000) | prescalarbits;
    1140:	e1 e9       	ldi	r30, 0x91	; 145
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	90 81       	ld	r25, Z
    1146:	98 7f       	andi	r25, 0xF8	; 248
    1148:	89 2b       	or	r24, r25
    114a:	80 83       	st	Z, r24
				TCCR5B = (TCCR5B & 0b11111000) | prescalarbits;
			}
		}
		
		//4. Calculate the toggle count
		if (duration > 0)
    114c:	81 14       	cp	r8, r1
    114e:	91 04       	cpc	r9, r1
    1150:	a1 04       	cpc	r10, r1
    1152:	b1 04       	cpc	r11, r1
    1154:	59 f5       	brne	.+86     	; 0x11ac <tone+0x408>
		{
			toggle_count = (2 * frequency * duration)/ 1000;
		}else{
			toggle_count = -1;
    1156:	2f ef       	ldi	r18, 0xFF	; 255
    1158:	3f ef       	ldi	r19, 0xFF	; 255
    115a:	a9 01       	movw	r20, r18
    115c:	77 c0       	rjmp	.+238    	; 0x124c <tone+0x4a8>
			}
			else if (_timer == 3)
			{
				TCCR3B = (TCCR3B & 0b11111000) | prescalarbits;
			}
			else if (_timer == 4)
    115e:	c4 30       	cpi	r28, 0x04	; 4
    1160:	79 f4       	brne	.+30     	; 0x1180 <tone+0x3dc>
			{
				TCCR4B = (TCCR4B & 0b11111000) | prescalarbits;
    1162:	e1 ea       	ldi	r30, 0xA1	; 161
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	90 81       	ld	r25, Z
    1168:	98 7f       	andi	r25, 0xF8	; 248
    116a:	89 2b       	or	r24, r25
    116c:	80 83       	st	Z, r24
				TCCR5B = (TCCR5B & 0b11111000) | prescalarbits;
			}
		}
		
		//4. Calculate the toggle count
		if (duration > 0)
    116e:	81 14       	cp	r8, r1
    1170:	91 04       	cpc	r9, r1
    1172:	a1 04       	cpc	r10, r1
    1174:	b1 04       	cpc	r11, r1
    1176:	d1 f4       	brne	.+52     	; 0x11ac <tone+0x408>
		{
			toggle_count = (2 * frequency * duration)/ 1000;
		}else{
			toggle_count = -1;
    1178:	2f ef       	ldi	r18, 0xFF	; 255
    117a:	3f ef       	ldi	r19, 0xFF	; 255
    117c:	a9 01       	movw	r20, r18
    117e:	78 c0       	rjmp	.+240    	; 0x1270 <tone+0x4cc>
			}
			else if (_timer == 4)
			{
				TCCR4B = (TCCR4B & 0b11111000) | prescalarbits;
			}
			else if (_timer == 5)
    1180:	c5 30       	cpi	r28, 0x05	; 5
    1182:	79 f4       	brne	.+30     	; 0x11a2 <tone+0x3fe>
			{
				TCCR5B = (TCCR5B & 0b11111000) | prescalarbits;
    1184:	e1 e2       	ldi	r30, 0x21	; 33
    1186:	f1 e0       	ldi	r31, 0x01	; 1
    1188:	90 81       	ld	r25, Z
    118a:	98 7f       	andi	r25, 0xF8	; 248
    118c:	89 2b       	or	r24, r25
    118e:	80 83       	st	Z, r24
			}
		}
		
		//4. Calculate the toggle count
		if (duration > 0)
    1190:	81 14       	cp	r8, r1
    1192:	91 04       	cpc	r9, r1
    1194:	a1 04       	cpc	r10, r1
    1196:	b1 04       	cpc	r11, r1
    1198:	49 f4       	brne	.+18     	; 0x11ac <tone+0x408>
		{
			toggle_count = (2 * frequency * duration)/ 1000;
		}else{
			toggle_count = -1;
    119a:	2f ef       	ldi	r18, 0xFF	; 255
    119c:	3f ef       	ldi	r19, 0xFF	; 255
    119e:	a9 01       	movw	r20, r18
    11a0:	79 c0       	rjmp	.+242    	; 0x1294 <tone+0x4f0>
				TCCR5B = (TCCR5B & 0b11111000) | prescalarbits;
			}
		}
		
		//4. Calculate the toggle count
		if (duration > 0)
    11a2:	81 14       	cp	r8, r1
    11a4:	91 04       	cpc	r9, r1
    11a6:	a1 04       	cpc	r10, r1
    11a8:	b1 04       	cpc	r11, r1
		{
			toggle_count = (2 * frequency * duration)/ 1000;
    11aa:	61 f0       	breq	.+24     	; 0x11c4 <tone+0x420>
    11ac:	d8 01       	movw	r26, r16
    11ae:	aa 0f       	add	r26, r26
    11b0:	bb 1f       	adc	r27, r27
    11b2:	a5 01       	movw	r20, r10
    11b4:	94 01       	movw	r18, r8
    11b6:	dc d3       	rcall	.+1976   	; 0x1970 <__muluhisi3>
    11b8:	28 ee       	ldi	r18, 0xE8	; 232
    11ba:	33 e0       	ldi	r19, 0x03	; 3
    11bc:	40 e0       	ldi	r20, 0x00	; 0
    11be:	50 e0       	ldi	r21, 0x00	; 0
    11c0:	ad d3       	rcall	.+1882   	; 0x191c <__udivmodsi4>
    11c2:	03 c0       	rjmp	.+6      	; 0x11ca <tone+0x426>
		}else{
			toggle_count = -1;
    11c4:	2f ef       	ldi	r18, 0xFF	; 255
    11c6:	3f ef       	ldi	r19, 0xFF	; 255
    11c8:	a9 01       	movw	r20, r18
		}
		
		//5.Set the OCR for the given timer
		//Set the toggle count and then turn on the interrupts
		switch(_timer)
    11ca:	c2 30       	cpi	r28, 0x02	; 2
    11cc:	79 f1       	breq	.+94     	; 0x122c <tone+0x488>
    11ce:	2c f4       	brge	.+10     	; 0x11da <tone+0x436>
    11d0:	cc 23       	and	r28, r28
    11d2:	59 f0       	breq	.+22     	; 0x11ea <tone+0x446>
    11d4:	c1 30       	cpi	r28, 0x01	; 1
    11d6:	c1 f0       	breq	.+48     	; 0x1208 <tone+0x464>
    11d8:	44 c1       	rjmp	.+648    	; 0x1462 <tone+0x6be>
    11da:	c4 30       	cpi	r28, 0x04	; 4
    11dc:	09 f4       	brne	.+2      	; 0x11e0 <tone+0x43c>
    11de:	48 c0       	rjmp	.+144    	; 0x1270 <tone+0x4cc>
    11e0:	ac f1       	brlt	.+106    	; 0x124c <tone+0x4a8>
    11e2:	c5 30       	cpi	r28, 0x05	; 5
    11e4:	09 f4       	brne	.+2      	; 0x11e8 <tone+0x444>
    11e6:	56 c0       	rjmp	.+172    	; 0x1294 <tone+0x4f0>
    11e8:	3c c1       	rjmp	.+632    	; 0x1462 <tone+0x6be>
		{
			case 0:
				OCR0A = ocr;
    11ea:	c7 bc       	out	0x27, r12	; 39
				timer0_toggle_count = toggle_count;
    11ec:	20 93 89 02 	sts	0x0289, r18	; 0x800289 <timer0_toggle_count>
    11f0:	30 93 8a 02 	sts	0x028A, r19	; 0x80028a <timer0_toggle_count+0x1>
    11f4:	40 93 8b 02 	sts	0x028B, r20	; 0x80028b <timer0_toggle_count+0x2>
    11f8:	50 93 8c 02 	sts	0x028C, r21	; 0x80028c <timer0_toggle_count+0x3>
				bitWrite(TIMSK0, OCIE0A, 1); //turn on interrupt
    11fc:	ee e6       	ldi	r30, 0x6E	; 110
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	80 81       	ld	r24, Z
    1202:	82 60       	ori	r24, 0x02	; 2
    1204:	80 83       	st	Z, r24
			break;
    1206:	2d c1       	rjmp	.+602    	; 0x1462 <tone+0x6be>
			
			case 1:
				OCR1A = ocr;
    1208:	d0 92 89 00 	sts	0x0089, r13	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
    120c:	c0 92 88 00 	sts	0x0088, r12	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
				timer1_toggle_count = toggle_count;
    1210:	20 93 82 02 	sts	0x0282, r18	; 0x800282 <timer1_toggle_count>
    1214:	30 93 83 02 	sts	0x0283, r19	; 0x800283 <timer1_toggle_count+0x1>
    1218:	40 93 84 02 	sts	0x0284, r20	; 0x800284 <timer1_toggle_count+0x2>
    121c:	50 93 85 02 	sts	0x0285, r21	; 0x800285 <timer1_toggle_count+0x3>
				bitWrite(TIMSK1, OCIE1A, 1);
    1220:	ef e6       	ldi	r30, 0x6F	; 111
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	80 81       	ld	r24, Z
    1226:	82 60       	ori	r24, 0x02	; 2
    1228:	80 83       	st	Z, r24
			break;
    122a:	1b c1       	rjmp	.+566    	; 0x1462 <tone+0x6be>
			
			case 2:
				OCR2A = ocr;
    122c:	c0 92 b3 00 	sts	0x00B3, r12	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
				timer2_toggle_count = toggle_count;
    1230:	20 93 8e 02 	sts	0x028E, r18	; 0x80028e <timer2_toggle_count>
    1234:	30 93 8f 02 	sts	0x028F, r19	; 0x80028f <timer2_toggle_count+0x1>
    1238:	40 93 90 02 	sts	0x0290, r20	; 0x800290 <timer2_toggle_count+0x2>
    123c:	50 93 91 02 	sts	0x0291, r21	; 0x800291 <timer2_toggle_count+0x3>
				bitWrite(TIMSK2, OCIE2A, 1);
    1240:	e0 e7       	ldi	r30, 0x70	; 112
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	82 60       	ori	r24, 0x02	; 2
    1248:	80 83       	st	Z, r24
			break;
    124a:	0b c1       	rjmp	.+534    	; 0x1462 <tone+0x6be>
			
			case 3:
				OCR3A = ocr;
    124c:	d0 92 99 00 	sts	0x0099, r13	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
    1250:	c0 92 98 00 	sts	0x0098, r12	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
				timer3_toggle_count = toggle_count;
    1254:	20 93 77 02 	sts	0x0277, r18	; 0x800277 <timer3_toggle_count>
    1258:	30 93 78 02 	sts	0x0278, r19	; 0x800278 <timer3_toggle_count+0x1>
    125c:	40 93 79 02 	sts	0x0279, r20	; 0x800279 <timer3_toggle_count+0x2>
    1260:	50 93 7a 02 	sts	0x027A, r21	; 0x80027a <timer3_toggle_count+0x3>
				//bitWrite(TIMSK3, OCIE3A, 1);
				TIMSK3 |= 1<<OCIE3A;
    1264:	e1 e7       	ldi	r30, 0x71	; 113
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	80 81       	ld	r24, Z
    126a:	82 60       	ori	r24, 0x02	; 2
    126c:	80 83       	st	Z, r24
			break;
    126e:	f9 c0       	rjmp	.+498    	; 0x1462 <tone+0x6be>
			
			case 4:
				OCR4A = ocr;
    1270:	d0 92 a9 00 	sts	0x00A9, r13	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
    1274:	c0 92 a8 00 	sts	0x00A8, r12	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
				timer4_toggle_count = toggle_count;
    1278:	20 93 73 02 	sts	0x0273, r18	; 0x800273 <timer4_toggle_count>
    127c:	30 93 74 02 	sts	0x0274, r19	; 0x800274 <timer4_toggle_count+0x1>
    1280:	40 93 75 02 	sts	0x0275, r20	; 0x800275 <timer4_toggle_count+0x2>
    1284:	50 93 76 02 	sts	0x0276, r21	; 0x800276 <timer4_toggle_count+0x3>
				bitWrite(TIMSK4, OCIE4A, 1);
    1288:	e2 e7       	ldi	r30, 0x72	; 114
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	80 81       	ld	r24, Z
    128e:	82 60       	ori	r24, 0x02	; 2
    1290:	80 83       	st	Z, r24
			break;
    1292:	e7 c0       	rjmp	.+462    	; 0x1462 <tone+0x6be>
			
			case 5:
				OCR5A = ocr;
    1294:	d0 92 29 01 	sts	0x0129, r13	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    1298:	c0 92 28 01 	sts	0x0128, r12	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
				timer5_toggle_count = toggle_count;
    129c:	20 93 6a 02 	sts	0x026A, r18	; 0x80026a <timer5_toggle_count>
    12a0:	30 93 6b 02 	sts	0x026B, r19	; 0x80026b <timer5_toggle_count+0x1>
    12a4:	40 93 6c 02 	sts	0x026C, r20	; 0x80026c <timer5_toggle_count+0x2>
    12a8:	50 93 6d 02 	sts	0x026D, r21	; 0x80026d <timer5_toggle_count+0x3>
				bitWrite(TIMSK5, OCIE5A, 1);
    12ac:	e3 e7       	ldi	r30, 0x73	; 115
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	80 81       	ld	r24, Z
    12b2:	82 60       	ori	r24, 0x02	; 2
    12b4:	80 83       	st	Z, r24
			break;
		}		
	}
}
    12b6:	d5 c0       	rjmp	.+426    	; 0x1462 <tone+0x6be>
			ocr = (F_CPU / (frequency * 2)) - 1;
			prescalarbits = 0b001; // clk/1 prescaler (No prescaling) : For both timers
			
			if (ocr > 255) // above prescaler failed
			{
				ocr = (F_CPU / (frequency * 2 * 8)) - 1;
    12b8:	98 01       	movw	r18, r16
    12ba:	22 95       	swap	r18
    12bc:	32 95       	swap	r19
    12be:	30 7f       	andi	r19, 0xF0	; 240
    12c0:	32 27       	eor	r19, r18
    12c2:	20 7f       	andi	r18, 0xF0	; 240
    12c4:	32 27       	eor	r19, r18
    12c6:	40 e0       	ldi	r20, 0x00	; 0
    12c8:	50 e0       	ldi	r21, 0x00	; 0
    12ca:	60 e0       	ldi	r22, 0x00	; 0
    12cc:	74 e2       	ldi	r23, 0x24	; 36
    12ce:	84 ef       	ldi	r24, 0xF4	; 244
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	24 d3       	rcall	.+1608   	; 0x191c <__udivmodsi4>
    12d4:	69 01       	movw	r12, r18
    12d6:	7a 01       	movw	r14, r20
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	c8 1a       	sub	r12, r24
    12dc:	d1 08       	sbc	r13, r1
    12de:	e1 08       	sbc	r14, r1
    12e0:	f1 08       	sbc	r15, r1
				prescalarbits = 0b010; // clk/8 prescaler : For both timers
				
				if (_timer == 2 && ocr > 255)
    12e2:	9f ef       	ldi	r25, 0xFF	; 255
    12e4:	c9 16       	cp	r12, r25
    12e6:	d1 04       	cpc	r13, r1
    12e8:	e1 04       	cpc	r14, r1
    12ea:	f1 04       	cpc	r15, r1
    12ec:	11 f0       	breq	.+4      	; 0x12f2 <tone+0x54e>
    12ee:	08 f0       	brcs	.+2      	; 0x12f2 <tone+0x54e>
			prescalarbits = 0b001; // clk/1 prescaler (No prescaling) : For both timers
			
			if (ocr > 255) // above prescaler failed
			{
				ocr = (F_CPU / (frequency * 2 * 8)) - 1;
				prescalarbits = 0b010; // clk/8 prescaler : For both timers
    12f0:	70 ce       	rjmp	.-800    	; 0xfd2 <tone+0x22e>
    12f2:	82 e0       	ldi	r24, 0x02	; 2
		pinMode(_pin, OUTPUT);
		
		//2. if we are using an 8 bit timer, scan through prescalers to find the best fit
		if (_timer == 0 || _timer == 2)
		{
			ocr = (F_CPU / (frequency * 2)) - 1;
    12f4:	dd ce       	rjmp	.-582    	; 0x10b0 <tone+0x30c>
    12f6:	98 01       	movw	r18, r16
    12f8:	22 0f       	add	r18, r18
    12fa:	33 1f       	adc	r19, r19
    12fc:	40 e0       	ldi	r20, 0x00	; 0
    12fe:	50 e0       	ldi	r21, 0x00	; 0
    1300:	60 e0       	ldi	r22, 0x00	; 0
    1302:	74 e2       	ldi	r23, 0x24	; 36
    1304:	84 ef       	ldi	r24, 0xF4	; 244
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	09 d3       	rcall	.+1554   	; 0x191c <__udivmodsi4>
    130a:	69 01       	movw	r12, r18
    130c:	7a 01       	movw	r14, r20
    130e:	81 e0       	ldi	r24, 0x01	; 1
    1310:	c8 1a       	sub	r12, r24
    1312:	d1 08       	sbc	r13, r1
    1314:	e1 08       	sbc	r14, r1
    1316:	f1 08       	sbc	r15, r1
			prescalarbits = 0b001; // clk/1 prescaler (No prescaling) : For both timers
			
			if (ocr > 255) // above prescaler failed
    1318:	9f ef       	ldi	r25, 0xFF	; 255
    131a:	c9 16       	cp	r12, r25
    131c:	d1 04       	cpc	r13, r1
    131e:	e1 04       	cpc	r14, r1
    1320:	f1 04       	cpc	r15, r1
    1322:	09 f0       	breq	.+2      	; 0x1326 <tone+0x582>
    1324:	48 f6       	brcc	.-110    	; 0x12b8 <tone+0x514>
		
		//2. if we are using an 8 bit timer, scan through prescalers to find the best fit
		if (_timer == 0 || _timer == 2)
		{
			ocr = (F_CPU / (frequency * 2)) - 1;
			prescalarbits = 0b001; // clk/1 prescaler (No prescaling) : For both timers
    1326:	81 e0       	ldi	r24, 0x01	; 1
    1328:	c3 ce       	rjmp	.-634    	; 0x10b0 <tone+0x30c>
			
			if (ocr > 255) // above prescaler failed
			{
				ocr = (F_CPU / (frequency * 2 * 8)) - 1;
    132a:	98 01       	movw	r18, r16
    132c:	22 95       	swap	r18
    132e:	32 95       	swap	r19
    1330:	30 7f       	andi	r19, 0xF0	; 240
    1332:	32 27       	eor	r19, r18
    1334:	20 7f       	andi	r18, 0xF0	; 240
    1336:	32 27       	eor	r19, r18
    1338:	40 e0       	ldi	r20, 0x00	; 0
    133a:	50 e0       	ldi	r21, 0x00	; 0
    133c:	60 e0       	ldi	r22, 0x00	; 0
    133e:	74 e2       	ldi	r23, 0x24	; 36
    1340:	84 ef       	ldi	r24, 0xF4	; 244
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	eb d2       	rcall	.+1494   	; 0x191c <__udivmodsi4>
    1346:	69 01       	movw	r12, r18
    1348:	7a 01       	movw	r14, r20
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	c8 1a       	sub	r12, r24
    134e:	d1 08       	sbc	r13, r1
    1350:	e1 08       	sbc	r14, r1
    1352:	f1 08       	sbc	r15, r1
				{
					ocr = (F_CPU / frequency / 2 / 32) - 1;
					prescalarbits = 0b011; // clk/32
				}
					
				if(ocr > 255)
    1354:	9f ef       	ldi	r25, 0xFF	; 255
    1356:	c9 16       	cp	r12, r25
    1358:	d1 04       	cpc	r13, r1
    135a:	e1 04       	cpc	r14, r1
    135c:	f1 04       	cpc	r15, r1
    135e:	11 f0       	breq	.+4      	; 0x1364 <tone+0x5c0>
    1360:	08 f0       	brcs	.+2      	; 0x1364 <tone+0x5c0>
			prescalarbits = 0b001; // clk/1 prescaler (No prescaling) : For both timers
			
			if (ocr > 255) // above prescaler failed
			{
				ocr = (F_CPU / (frequency * 2 * 8)) - 1;
				prescalarbits = 0b010; // clk/8 prescaler : For both timers
    1362:	52 ce       	rjmp	.-860    	; 0x1008 <tone+0x264>
    1364:	82 e0       	ldi	r24, 0x02	; 2
		pinMode(_pin, OUTPUT);
		
		//2. if we are using an 8 bit timer, scan through prescalers to find the best fit
		if (_timer == 0 || _timer == 2)
		{
			ocr = (F_CPU / (frequency * 2)) - 1;
    1366:	96 ce       	rjmp	.-724    	; 0x1094 <tone+0x2f0>
    1368:	98 01       	movw	r18, r16
    136a:	22 0f       	add	r18, r18
    136c:	33 1f       	adc	r19, r19
    136e:	40 e0       	ldi	r20, 0x00	; 0
    1370:	50 e0       	ldi	r21, 0x00	; 0
    1372:	60 e0       	ldi	r22, 0x00	; 0
    1374:	74 e2       	ldi	r23, 0x24	; 36
    1376:	84 ef       	ldi	r24, 0xF4	; 244
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	d0 d2       	rcall	.+1440   	; 0x191c <__udivmodsi4>
    137c:	69 01       	movw	r12, r18
    137e:	7a 01       	movw	r14, r20
    1380:	81 e0       	ldi	r24, 0x01	; 1
    1382:	c8 1a       	sub	r12, r24
    1384:	d1 08       	sbc	r13, r1
    1386:	e1 08       	sbc	r14, r1
    1388:	f1 08       	sbc	r15, r1
			prescalarbits = 0b001; // clk/1 prescaler (No prescaling) : For both timers
			
			if (ocr > 255) // above prescaler failed
    138a:	9f ef       	ldi	r25, 0xFF	; 255
    138c:	c9 16       	cp	r12, r25
    138e:	d1 04       	cpc	r13, r1
    1390:	e1 04       	cpc	r14, r1
    1392:	f1 04       	cpc	r15, r1
    1394:	09 f0       	breq	.+2      	; 0x1398 <tone+0x5f4>
		
		//2. if we are using an 8 bit timer, scan through prescalers to find the best fit
		if (_timer == 0 || _timer == 2)
		{
			ocr = (F_CPU / (frequency * 2)) - 1;
			prescalarbits = 0b001; // clk/1 prescaler (No prescaling) : For both timers
    1396:	48 f6       	brcc	.-110    	; 0x132a <tone+0x586>
    1398:	81 e0       	ldi	r24, 0x01	; 1
					prescalarbits = 0b011; // clk/32
				}
					
				if(ocr > 255)
				{
					ocr = (F_CPU / (frequency * 2 * 64)) - 1;
    139a:	7c ce       	rjmp	.-776    	; 0x1094 <tone+0x2f0>
    139c:	98 01       	movw	r18, r16
    139e:	36 95       	lsr	r19
    13a0:	32 2f       	mov	r19, r18
    13a2:	22 27       	eor	r18, r18
    13a4:	37 95       	ror	r19
    13a6:	27 95       	ror	r18
    13a8:	40 e0       	ldi	r20, 0x00	; 0
    13aa:	50 e0       	ldi	r21, 0x00	; 0
    13ac:	60 e0       	ldi	r22, 0x00	; 0
    13ae:	74 e2       	ldi	r23, 0x24	; 36
    13b0:	84 ef       	ldi	r24, 0xF4	; 244
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	b3 d2       	rcall	.+1382   	; 0x191c <__udivmodsi4>
    13b6:	69 01       	movw	r12, r18
    13b8:	7a 01       	movw	r14, r20
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	c8 1a       	sub	r12, r24
    13be:	d1 08       	sbc	r13, r1
    13c0:	e1 08       	sbc	r14, r1
    13c2:	f1 08       	sbc	r15, r1
					prescalarbits = _timer == 0 ? 0b011 : 0b100; // clk/32 for timer 1: clk/64 for timer 2
					
					if (_timer == 2 && ocr > 255)
    13c4:	9f ef       	ldi	r25, 0xFF	; 255
    13c6:	c9 16       	cp	r12, r25
    13c8:	d1 04       	cpc	r13, r1
    13ca:	e1 04       	cpc	r14, r1
    13cc:	f1 04       	cpc	r15, r1
    13ce:	11 f0       	breq	.+4      	; 0x13d4 <tone+0x630>
    13d0:	08 f0       	brcs	.+2      	; 0x13d4 <tone+0x630>
    13d2:	30 ce       	rjmp	.-928    	; 0x1034 <tone+0x290>
    13d4:	84 e0       	ldi	r24, 0x04	; 4
    13d6:	6c ce       	rjmp	.-808    	; 0x10b0 <tone+0x30c>
		}
	}
	  
	// search for an unused timer.
	for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
		if (tone_pins[i] == 255) {
    13d8:	9f 3f       	cpi	r25, 0xFF	; 255
    13da:	09 f0       	breq	.+2      	; 0x13de <tone+0x63a>
    13dc:	42 c0       	rjmp	.+132    	; 0x1462 <tone+0x6be>
						ocr = (F_CPU / (frequency * 2 * 256))- 1;
						prescalarbits = _timer == 0 ? 0b100 : 0b110;  // clk/64 for timer 1: clk/256 for timer 2
						if (ocr > 255)
						{
							// can't do any better than /1024
							ocr = (F_CPU / (frequency * 2 * 1024)) - 1;
    13de:	f9 cc       	rjmp	.-1550   	; 0xdd2 <tone+0x2e>
    13e0:	98 01       	movw	r18, r16
    13e2:	32 2f       	mov	r19, r18
    13e4:	22 27       	eor	r18, r18
    13e6:	33 0f       	add	r19, r19
    13e8:	33 0f       	add	r19, r19
    13ea:	33 0f       	add	r19, r19
    13ec:	40 e0       	ldi	r20, 0x00	; 0
    13ee:	50 e0       	ldi	r21, 0x00	; 0
    13f0:	60 e0       	ldi	r22, 0x00	; 0
    13f2:	74 e2       	ldi	r23, 0x24	; 36
    13f4:	84 ef       	ldi	r24, 0xF4	; 244
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	91 d2       	rcall	.+1314   	; 0x191c <__udivmodsi4>
    13fa:	69 01       	movw	r12, r18
    13fc:	7a 01       	movw	r14, r20
    13fe:	81 e0       	ldi	r24, 0x01	; 1
    1400:	c8 1a       	sub	r12, r24
    1402:	d1 08       	sbc	r13, r1
    1404:	e1 08       	sbc	r14, r1
    1406:	f1 08       	sbc	r15, r1
							prescalarbits = _timer == 0 ? 0b101 : 0b111; // clk/128 for timer 1: clk/1024 for timer 2
    1408:	85 e0       	ldi	r24, 0x05	; 5
    140a:	44 ce       	rjmp	.-888    	; 0x1094 <tone+0x2f0>

					if (ocr > 255)
					{
						ocr = (F_CPU / (frequency * 2 * 256))- 1;
						prescalarbits = _timer == 0 ? 0b100 : 0b110;  // clk/64 for timer 1: clk/256 for timer 2
						if (ocr > 255)
    140c:	9f ef       	ldi	r25, 0xFF	; 255
    140e:	c9 16       	cp	r12, r25
    1410:	d1 04       	cpc	r13, r1
    1412:	e1 04       	cpc	r14, r1
    1414:	f1 04       	cpc	r15, r1
    1416:	09 f0       	breq	.+2      	; 0x141a <tone+0x676>
					}

					if (ocr > 255)
					{
						ocr = (F_CPU / (frequency * 2 * 256))- 1;
						prescalarbits = _timer == 0 ? 0b100 : 0b110;  // clk/64 for timer 1: clk/256 for timer 2
    1418:	18 f7       	brcc	.-58     	; 0x13e0 <tone+0x63c>
    141a:	84 e0       	ldi	r24, 0x04	; 4
						if (ocr > 255)
						{
							// can't do any better than /1024
							ocr = (F_CPU / (frequency * 2 * 1024)) - 1;
    141c:	39 ce       	rjmp	.-910    	; 0x1090 <tone+0x2ec>
    141e:	98 01       	movw	r18, r16
    1420:	32 2f       	mov	r19, r18
    1422:	22 27       	eor	r18, r18
    1424:	33 0f       	add	r19, r19
    1426:	33 0f       	add	r19, r19
    1428:	33 0f       	add	r19, r19
    142a:	40 e0       	ldi	r20, 0x00	; 0
    142c:	50 e0       	ldi	r21, 0x00	; 0
    142e:	60 e0       	ldi	r22, 0x00	; 0
    1430:	74 e2       	ldi	r23, 0x24	; 36
    1432:	84 ef       	ldi	r24, 0xF4	; 244
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	72 d2       	rcall	.+1252   	; 0x191c <__udivmodsi4>
    1438:	69 01       	movw	r12, r18
    143a:	7a 01       	movw	r14, r20
    143c:	81 e0       	ldi	r24, 0x01	; 1
    143e:	c8 1a       	sub	r12, r24
    1440:	d1 08       	sbc	r13, r1
    1442:	e1 08       	sbc	r14, r1
							prescalarbits = _timer == 0 ? 0b101 : 0b111; // clk/128 for timer 1: clk/1024 for timer 2
    1444:	f1 08       	sbc	r15, r1
    1446:	87 e0       	ldi	r24, 0x07	; 7

					if (ocr > 255)
					{
						ocr = (F_CPU / (frequency * 2 * 256))- 1;
						prescalarbits = _timer == 0 ? 0b100 : 0b110;  // clk/64 for timer 1: clk/256 for timer 2
						if (ocr > 255)
    1448:	33 ce       	rjmp	.-922    	; 0x10b0 <tone+0x30c>
    144a:	9f ef       	ldi	r25, 0xFF	; 255
    144c:	c9 16       	cp	r12, r25
    144e:	d1 04       	cpc	r13, r1
    1450:	e1 04       	cpc	r14, r1
    1452:	f1 04       	cpc	r15, r1
    1454:	09 f0       	breq	.+2      	; 0x1458 <tone+0x6b4>
					}

					if (ocr > 255)
					{
						ocr = (F_CPU / (frequency * 2 * 256))- 1;
						prescalarbits = _timer == 0 ? 0b100 : 0b110;  // clk/64 for timer 1: clk/256 for timer 2
    1456:	18 f7       	brcc	.-58     	; 0x141e <tone+0x67a>
    1458:	86 e0       	ldi	r24, 0x06	; 6
	_timer = toneBegin(_pin);
	
	if (_timer >= 0)
	{
		//1. set the pin as OUTPUT
		pinMode(_pin, OUTPUT);
    145a:	1a ce       	rjmp	.-972    	; 0x1090 <tone+0x2ec>
    145c:	61 e0       	ldi	r22, 0x01	; 1
    145e:	8b d8       	rcall	.-3818   	; 0x576 <pinMode>
    1460:	2e ce       	rjmp	.-932    	; 0x10be <tone+0x31a>
				timer5_toggle_count = toggle_count;
				bitWrite(TIMSK5, OCIE5A, 1);
			break;
		}		
	}
}
    1462:	cf 91       	pop	r28
    1464:	1f 91       	pop	r17
    1466:	0f 91       	pop	r16
    1468:	ff 90       	pop	r15
    146a:	ef 90       	pop	r14
    146c:	df 90       	pop	r13
    146e:	cf 90       	pop	r12
    1470:	bf 90       	pop	r11
    1472:	af 90       	pop	r10
    1474:	9f 90       	pop	r9
    1476:	8f 90       	pop	r8
    1478:	08 95       	ret

0000147a <disableTimer>:
This function only works properly for timer 2 (the only one we use currently).  
for the others, it should end the tone, but won't restore proper PWM functionality for the timer. TODO
*/
void disableTimer(uint8_t _timer)
{
	switch(_timer)
    147a:	82 30       	cpi	r24, 0x02	; 2
    147c:	a9 f0       	breq	.+42     	; 0x14a8 <disableTimer+0x2e>
    147e:	28 f4       	brcc	.+10     	; 0x148a <disableTimer+0x10>
    1480:	88 23       	and	r24, r24
    1482:	49 f0       	breq	.+18     	; 0x1496 <disableTimer+0x1c>
    1484:	81 30       	cpi	r24, 0x01	; 1
    1486:	51 f0       	breq	.+20     	; 0x149c <disableTimer+0x22>
    1488:	08 95       	ret
    148a:	84 30       	cpi	r24, 0x04	; 4
    148c:	21 f1       	breq	.+72     	; 0x14d6 <disableTimer+0x5c>
    148e:	e8 f0       	brcs	.+58     	; 0x14ca <disableTimer+0x50>
    1490:	85 30       	cpi	r24, 0x05	; 5
    1492:	39 f1       	breq	.+78     	; 0x14e2 <disableTimer+0x68>
    1494:	08 95       	ret
	{
		case 0:
		TIMSK0 = 0;
    1496:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
		break;
    149a:	08 95       	ret
		case 1:
			bitWrite(TIMSK1, OCIE1A, 0);
    149c:	ef e6       	ldi	r30, 0x6F	; 111
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	80 81       	ld	r24, Z
    14a2:	8d 7f       	andi	r24, 0xFD	; 253
    14a4:	80 83       	st	Z, r24
		break;
    14a6:	08 95       	ret
		case 2:
			bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
    14a8:	e0 e7       	ldi	r30, 0x70	; 112
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	80 81       	ld	r24, Z
    14ae:	8d 7f       	andi	r24, 0xFD	; 253
    14b0:	80 83       	st	Z, r24
			TCCR2A = (1 << WGM20);		 // restore normal  PWM mode
    14b2:	81 e0       	ldi	r24, 0x01	; 1
    14b4:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
			TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22); //clk/64 prescaler
    14b8:	e1 eb       	ldi	r30, 0xB1	; 177
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	80 81       	ld	r24, Z
    14be:	88 7f       	andi	r24, 0xF8	; 248
    14c0:	84 60       	ori	r24, 0x04	; 4
    14c2:	80 83       	st	Z, r24
			OCR2A = 0;
    14c4:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
		break;
    14c8:	08 95       	ret
		case 3:
			bitWrite(TIMSK3, OCIE3A, 0);
    14ca:	e1 e7       	ldi	r30, 0x71	; 113
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	80 81       	ld	r24, Z
    14d0:	8d 7f       	andi	r24, 0xFD	; 253
    14d2:	80 83       	st	Z, r24
		break;
    14d4:	08 95       	ret
		case 4:
			bitWrite(TIMSK4, OCIE4A, 0);
    14d6:	e2 e7       	ldi	r30, 0x72	; 114
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	80 81       	ld	r24, Z
    14dc:	8d 7f       	andi	r24, 0xFD	; 253
    14de:	80 83       	st	Z, r24
		break;
    14e0:	08 95       	ret
		case 5:
			bitWrite(TIMSK5, OCIE5A, 0);
    14e2:	e3 e7       	ldi	r30, 0x73	; 115
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	80 81       	ld	r24, Z
    14e8:	8d 7f       	andi	r24, 0xFD	; 253
    14ea:	80 83       	st	Z, r24
    14ec:	08 95       	ret

000014ee <noTone>:
	}
}


void noTone(uint8_t _pin)
{
    14ee:	cf 93       	push	r28
    14f0:	c8 2f       	mov	r28, r24
	int8_t _timer = -1;
	  
	for (int i = 0; i < AVAILABLE_TONE_PINS; i++)
	{
		if (tone_pins[i] == _pin) {
    14f2:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <tone_pins>
    14f6:	c8 13       	cpse	r28, r24
    14f8:	07 c0       	rjmp	.+14     	; 0x1508 <noTone+0x1a>
			_timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
    14fa:	eb e7       	ldi	r30, 0x7B	; 123
    14fc:	f2 e0       	ldi	r31, 0x02	; 2
    14fe:	84 91       	lpm	r24, Z
			tone_pins[i] = 255;
    1500:	9f ef       	ldi	r25, 0xFF	; 255
    1502:	90 93 10 02 	sts	0x0210, r25	; 0x800210 <tone_pins>
			break;
    1506:	01 c0       	rjmp	.+2      	; 0x150a <noTone+0x1c>
}


void noTone(uint8_t _pin)
{
	int8_t _timer = -1;
    1508:	8f ef       	ldi	r24, 0xFF	; 255
			tone_pins[i] = 255;
			break;
		}
	}
	  
	disableTimer(_timer);
    150a:	b7 df       	rcall	.-146    	; 0x147a <disableTimer>
	digitalWrite(_pin, 0);
    150c:	60 e0       	ldi	r22, 0x00	; 0
    150e:	8c 2f       	mov	r24, r28
    1510:	71 d8       	rcall	.-3870   	; 0x5f4 <digitalWrite>
}
    1512:	cf 91       	pop	r28
    1514:	08 95       	ret

00001516 <__vector_32>:
}
#endif

#ifdef USE_TIMER3
ISR(TIMER3_COMPA_vect)
{
    1516:	1f 92       	push	r1
    1518:	0f 92       	push	r0
    151a:	0f b6       	in	r0, 0x3f	; 63
    151c:	0f 92       	push	r0
    151e:	11 24       	eor	r1, r1
    1520:	0b b6       	in	r0, 0x3b	; 59
    1522:	0f 92       	push	r0
    1524:	2f 93       	push	r18
    1526:	3f 93       	push	r19
    1528:	4f 93       	push	r20
    152a:	5f 93       	push	r21
    152c:	6f 93       	push	r22
    152e:	7f 93       	push	r23
    1530:	8f 93       	push	r24
    1532:	9f 93       	push	r25
    1534:	af 93       	push	r26
    1536:	bf 93       	push	r27
    1538:	ef 93       	push	r30
    153a:	ff 93       	push	r31
	if (timer3_toggle_count != 0)
    153c:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <timer3_toggle_count>
    1540:	90 91 78 02 	lds	r25, 0x0278	; 0x800278 <timer3_toggle_count+0x1>
    1544:	a0 91 79 02 	lds	r26, 0x0279	; 0x800279 <timer3_toggle_count+0x2>
    1548:	b0 91 7a 02 	lds	r27, 0x027A	; 0x80027a <timer3_toggle_count+0x3>
    154c:	89 2b       	or	r24, r25
    154e:	8a 2b       	or	r24, r26
    1550:	8b 2b       	or	r24, r27
    1552:	51 f1       	breq	.+84     	; 0x15a8 <__vector_32+0x92>
	{
		// toggle the pin
		*timer3_pin_port ^= timer3_pin_mask;
    1554:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <timer3_pin_mask>
    1558:	e0 91 71 02 	lds	r30, 0x0271	; 0x800271 <timer3_pin_port>
    155c:	f0 91 72 02 	lds	r31, 0x0272	; 0x800272 <timer3_pin_port+0x1>
    1560:	80 81       	ld	r24, Z
    1562:	89 27       	eor	r24, r25
    1564:	80 83       	st	Z, r24
		
		if (timer3_toggle_count > 0)
    1566:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <timer3_toggle_count>
    156a:	90 91 78 02 	lds	r25, 0x0278	; 0x800278 <timer3_toggle_count+0x1>
    156e:	a0 91 79 02 	lds	r26, 0x0279	; 0x800279 <timer3_toggle_count+0x2>
    1572:	b0 91 7a 02 	lds	r27, 0x027A	; 0x80027a <timer3_toggle_count+0x3>
    1576:	18 16       	cp	r1, r24
    1578:	19 06       	cpc	r1, r25
    157a:	1a 06       	cpc	r1, r26
    157c:	1b 06       	cpc	r1, r27
    157e:	04 f5       	brge	.+64     	; 0x15c0 <__vector_32+0xaa>
			timer3_toggle_count--;
    1580:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <timer3_toggle_count>
    1584:	90 91 78 02 	lds	r25, 0x0278	; 0x800278 <timer3_toggle_count+0x1>
    1588:	a0 91 79 02 	lds	r26, 0x0279	; 0x800279 <timer3_toggle_count+0x2>
    158c:	b0 91 7a 02 	lds	r27, 0x027A	; 0x80027a <timer3_toggle_count+0x3>
    1590:	01 97       	sbiw	r24, 0x01	; 1
    1592:	a1 09       	sbc	r26, r1
    1594:	b1 09       	sbc	r27, r1
    1596:	80 93 77 02 	sts	0x0277, r24	; 0x800277 <timer3_toggle_count>
    159a:	90 93 78 02 	sts	0x0278, r25	; 0x800278 <timer3_toggle_count+0x1>
    159e:	a0 93 79 02 	sts	0x0279, r26	; 0x800279 <timer3_toggle_count+0x2>
    15a2:	b0 93 7a 02 	sts	0x027A, r27	; 0x80027a <timer3_toggle_count+0x3>
    15a6:	0c c0       	rjmp	.+24     	; 0x15c0 <__vector_32+0xaa>
	}
	else
	{
		disableTimer(3);
    15a8:	83 e0       	ldi	r24, 0x03	; 3
    15aa:	67 df       	rcall	.-306    	; 0x147a <disableTimer>
		
		*timer3_pin_port &= ~(timer3_pin_mask);  // keep pin low after stop
    15ac:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <timer3_pin_mask>
    15b0:	e0 91 71 02 	lds	r30, 0x0271	; 0x800271 <timer3_pin_port>
    15b4:	f0 91 72 02 	lds	r31, 0x0272	; 0x800272 <timer3_pin_port+0x1>
    15b8:	90 81       	ld	r25, Z
    15ba:	80 95       	com	r24
    15bc:	89 23       	and	r24, r25
    15be:	80 83       	st	Z, r24
	}
}
    15c0:	ff 91       	pop	r31
    15c2:	ef 91       	pop	r30
    15c4:	bf 91       	pop	r27
    15c6:	af 91       	pop	r26
    15c8:	9f 91       	pop	r25
    15ca:	8f 91       	pop	r24
    15cc:	7f 91       	pop	r23
    15ce:	6f 91       	pop	r22
    15d0:	5f 91       	pop	r21
    15d2:	4f 91       	pop	r20
    15d4:	3f 91       	pop	r19
    15d6:	2f 91       	pop	r18
    15d8:	0f 90       	pop	r0
    15da:	0b be       	out	0x3b, r0	; 59
    15dc:	0f 90       	pop	r0
    15de:	0f be       	out	0x3f, r0	; 63
    15e0:	0f 90       	pop	r0
    15e2:	1f 90       	pop	r1
    15e4:	18 95       	reti

000015e6 <sdDetected>:
    }
}

void sdDetected(void)
{
	LCD_PrintString("SD Detected",0,1);
    15e6:	41 e0       	ldi	r20, 0x01	; 1
    15e8:	60 e0       	ldi	r22, 0x00	; 0
    15ea:	81 e3       	ldi	r24, 0x31	; 49
    15ec:	92 e0       	ldi	r25, 0x02	; 2
    15ee:	0c 94 b0 02 	jmp	0x560	; 0x560 <LCD_PrintString>
    15f2:	08 95       	ret

000015f4 <main>:

void sdDetected(void);

int main(void)
{
	millis_init();
    15f4:	17 db       	rcall	.-2514   	; 0xc24 <millis_init>
	pwm_init();
    15f6:	10 da       	rcall	.-3040   	; 0xa18 <pwm_init>
    15f8:	0e 94 14 02 	call	0x428	; 0x428 <lcd_init>
	
	lcd_init();
    15fc:	0e 94 e7 01 	call	0x3ce	; 0x3ce <lcd_clear>
	lcd_clear();
    1600:	40 e0       	ldi	r20, 0x00	; 0
	LCD_PrintString("MCU TRAINING KIT",0,0);
    1602:	60 e0       	ldi	r22, 0x00	; 0
    1604:	8d e3       	ldi	r24, 0x3D	; 61
    1606:	92 e0       	ldi	r25, 0x02	; 2
    1608:	0e 94 b0 02 	call	0x560	; 0x560 <LCD_PrintString>
    160c:	43 e0       	ldi	r20, 0x03	; 3
	
	attachInterrupt(EXTERNAL_INT_5,sdDetected, RISING);
    160e:	50 e0       	ldi	r21, 0x00	; 0
    1610:	63 ef       	ldi	r22, 0xF3	; 243
    1612:	7a e0       	ldi	r23, 0x0A	; 10
    1614:	85 e0       	ldi	r24, 0x05	; 5
    1616:	2b d8       	rcall	.-4010   	; 0x66e <attachInterrupt>
    1618:	61 e0       	ldi	r22, 0x01	; 1
	
	pinMode(Pin_PK4, OUTPUT);
    161a:	85 e5       	ldi	r24, 0x55	; 85
    161c:	0e 94 bb 02 	call	0x576	; 0x576 <pinMode>
    1620:	61 e0       	ldi	r22, 0x01	; 1
	pinMode(Pin_PK3, OUTPUT);
    1622:	86 e5       	ldi	r24, 0x56	; 86
    1624:	0e 94 bb 02 	call	0x576	; 0x576 <pinMode>
    1628:	60 e0       	ldi	r22, 0x00	; 0
	pinMode(Pin_PJ2, INPUT);
    162a:	81 e4       	ldi	r24, 0x41	; 65
    162c:	0e 94 bb 02 	call	0x576	; 0x576 <pinMode>
    1630:	6f e3       	ldi	r22, 0x3F	; 63
	
	analogWrite(Pin_PH3,255/4);
    1632:	70 e0       	ldi	r23, 0x00	; 0
    1634:	8f e0       	ldi	r24, 0x0F	; 15
    1636:	30 da       	rcall	.-2976   	; 0xa98 <analogWrite>
    1638:	c1 e1       	ldi	r28, 0x11	; 17
    163a:	d2 e0       	ldi	r29, 0x02	; 2
    163c:	01 e2       	ldi	r16, 0x21	; 33
    163e:	12 e0       	ldi	r17, 0x02	; 2
    1640:	0f 2e       	mov	r0, r31
    1642:	f1 e2       	ldi	r31, 0x21	; 33
    1644:	cf 2e       	mov	r12, r31
    1646:	f2 e0       	ldi	r31, 0x02	; 2
    1648:	df 2e       	mov	r13, r31
    164a:	f0 2d       	mov	r31, r0
    164c:	0f 2e       	mov	r0, r31
	//Tone Example	
	for (int thisNote = 0; thisNote < 8; thisNote++) 
	{
		// to calculate the note duration, take one second divided by the note type.
		//e.g. quarter note = 1000 / 4, eighth note = 1000/8, etc.
		int noteDuration = 1000 / noteDurations[thisNote];
    164e:	f8 ee       	ldi	r31, 0xE8	; 232
    1650:	ef 2e       	mov	r14, r31
    1652:	f3 e0       	ldi	r31, 0x03	; 3
    1654:	ff 2e       	mov	r15, r31
    1656:	f0 2d       	mov	r31, r0
    1658:	69 91       	ld	r22, Y+
    165a:	79 91       	ld	r23, Y+
    165c:	c7 01       	movw	r24, r14
    165e:	4b d1       	rcall	.+662    	; 0x18f6 <__divmodhi4>
    1660:	cb 01       	movw	r24, r22
    1662:	f8 01       	movw	r30, r16
		tone(Pin_PE3, melody[thisNote], noteDuration);
    1664:	61 91       	ld	r22, Z+
    1666:	71 91       	ld	r23, Z+
    1668:	8f 01       	movw	r16, r30
    166a:	4c 01       	movw	r8, r24
    166c:	99 0f       	add	r25, r25
    166e:	aa 08       	sbc	r10, r10
    1670:	bb 08       	sbc	r11, r11
    1672:	a5 01       	movw	r20, r10
    1674:	94 01       	movw	r18, r8
    1676:	85 e0       	ldi	r24, 0x05	; 5
    1678:	95 db       	rcall	.-2262   	; 0xda4 <tone>
		// to distinguish the notes, set a minimum time between them.
		// the note's duration + 30% seems to work well:
		int pauseBetweenNotes = noteDuration * 1.30;
		delay_ms(pauseBetweenNotes);		
    167a:	c5 01       	movw	r24, r10
    167c:	b4 01       	movw	r22, r8
    167e:	4c d0       	rcall	.+152    	; 0x1718 <__floatsisf>
    1680:	26 e6       	ldi	r18, 0x66	; 102
    1682:	36 e6       	ldi	r19, 0x66	; 102
    1684:	46 ea       	ldi	r20, 0xA6	; 166
    1686:	5f e3       	ldi	r21, 0x3F	; 63
    1688:	ab d0       	rcall	.+342    	; 0x17e0 <__mulsf3>
    168a:	13 d0       	rcall	.+38     	; 0x16b2 <__fixsfsi>
    168c:	07 2e       	mov	r0, r23
    168e:	00 0c       	add	r0, r0
    1690:	88 0b       	sbc	r24, r24
    1692:	99 0b       	sbc	r25, r25
    1694:	00 db       	rcall	.-2560   	; 0xc96 <delay_ms>
		// stop the tone playing:
		noTone(Pin_PE3);
    1696:	85 e0       	ldi	r24, 0x05	; 5
    1698:	2a df       	rcall	.-428    	; 0x14ee <noTone>
	
	analogWrite(Pin_PH3,255/4);
	

	//Tone Example	
	for (int thisNote = 0; thisNote < 8; thisNote++) 
    169a:	cc 15       	cp	r28, r12
    169c:	dd 05       	cpc	r29, r13
    169e:	e1 f6       	brne	.-72     	; 0x1658 <main+0x64>
			_delay_ms(70);
			togglePin(Pin_PK0);
		}
		*/
		
		delay_ms(1000);
    16a0:	68 ee       	ldi	r22, 0xE8	; 232
    16a2:	73 e0       	ldi	r23, 0x03	; 3
    16a4:	80 e0       	ldi	r24, 0x00	; 0
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	f6 da       	rcall	.-2580   	; 0xc96 <delay_ms>
    16aa:	86 e5       	ldi	r24, 0x56	; 86
		togglePin(Pin_PK3);
    16ac:	0e 94 1c 03 	call	0x638	; 0x638 <togglePin>
    16b0:	f7 cf       	rjmp	.-18     	; 0x16a0 <main+0xac>

000016b2 <__fixsfsi>:
    16b2:	04 d0       	rcall	.+8      	; 0x16bc <__fixunssfsi>
    16b4:	68 94       	set
    16b6:	b1 11       	cpse	r27, r1
    16b8:	8d c0       	rjmp	.+282    	; 0x17d4 <__fp_szero>
    16ba:	08 95       	ret

000016bc <__fixunssfsi>:
    16bc:	70 d0       	rcall	.+224    	; 0x179e <__fp_splitA>
    16be:	88 f0       	brcs	.+34     	; 0x16e2 <__fixunssfsi+0x26>
    16c0:	9f 57       	subi	r25, 0x7F	; 127
    16c2:	90 f0       	brcs	.+36     	; 0x16e8 <__fixunssfsi+0x2c>
    16c4:	b9 2f       	mov	r27, r25
    16c6:	99 27       	eor	r25, r25
    16c8:	b7 51       	subi	r27, 0x17	; 23
    16ca:	a0 f0       	brcs	.+40     	; 0x16f4 <__fixunssfsi+0x38>
    16cc:	d1 f0       	breq	.+52     	; 0x1702 <__fixunssfsi+0x46>
    16ce:	66 0f       	add	r22, r22
    16d0:	77 1f       	adc	r23, r23
    16d2:	88 1f       	adc	r24, r24
    16d4:	99 1f       	adc	r25, r25
    16d6:	1a f0       	brmi	.+6      	; 0x16de <__fixunssfsi+0x22>
    16d8:	ba 95       	dec	r27
    16da:	c9 f7       	brne	.-14     	; 0x16ce <__fixunssfsi+0x12>
    16dc:	12 c0       	rjmp	.+36     	; 0x1702 <__fixunssfsi+0x46>
    16de:	b1 30       	cpi	r27, 0x01	; 1
    16e0:	81 f0       	breq	.+32     	; 0x1702 <__fixunssfsi+0x46>
    16e2:	77 d0       	rcall	.+238    	; 0x17d2 <__fp_zero>
    16e4:	b1 e0       	ldi	r27, 0x01	; 1
    16e6:	08 95       	ret
    16e8:	74 c0       	rjmp	.+232    	; 0x17d2 <__fp_zero>
    16ea:	67 2f       	mov	r22, r23
    16ec:	78 2f       	mov	r23, r24
    16ee:	88 27       	eor	r24, r24
    16f0:	b8 5f       	subi	r27, 0xF8	; 248
    16f2:	39 f0       	breq	.+14     	; 0x1702 <__fixunssfsi+0x46>
    16f4:	b9 3f       	cpi	r27, 0xF9	; 249
    16f6:	cc f3       	brlt	.-14     	; 0x16ea <__fixunssfsi+0x2e>
    16f8:	86 95       	lsr	r24
    16fa:	77 95       	ror	r23
    16fc:	67 95       	ror	r22
    16fe:	b3 95       	inc	r27
    1700:	d9 f7       	brne	.-10     	; 0x16f8 <__fixunssfsi+0x3c>
    1702:	3e f4       	brtc	.+14     	; 0x1712 <__fixunssfsi+0x56>
    1704:	90 95       	com	r25
    1706:	80 95       	com	r24
    1708:	70 95       	com	r23
    170a:	61 95       	neg	r22
    170c:	7f 4f       	sbci	r23, 0xFF	; 255
    170e:	8f 4f       	sbci	r24, 0xFF	; 255
    1710:	9f 4f       	sbci	r25, 0xFF	; 255
    1712:	08 95       	ret

00001714 <__floatunsisf>:
    1714:	e8 94       	clt
    1716:	09 c0       	rjmp	.+18     	; 0x172a <__floatsisf+0x12>

00001718 <__floatsisf>:
    1718:	97 fb       	bst	r25, 7
    171a:	3e f4       	brtc	.+14     	; 0x172a <__floatsisf+0x12>
    171c:	90 95       	com	r25
    171e:	80 95       	com	r24
    1720:	70 95       	com	r23
    1722:	61 95       	neg	r22
    1724:	7f 4f       	sbci	r23, 0xFF	; 255
    1726:	8f 4f       	sbci	r24, 0xFF	; 255
    1728:	9f 4f       	sbci	r25, 0xFF	; 255
    172a:	99 23       	and	r25, r25
    172c:	a9 f0       	breq	.+42     	; 0x1758 <__floatsisf+0x40>
    172e:	f9 2f       	mov	r31, r25
    1730:	96 e9       	ldi	r25, 0x96	; 150
    1732:	bb 27       	eor	r27, r27
    1734:	93 95       	inc	r25
    1736:	f6 95       	lsr	r31
    1738:	87 95       	ror	r24
    173a:	77 95       	ror	r23
    173c:	67 95       	ror	r22
    173e:	b7 95       	ror	r27
    1740:	f1 11       	cpse	r31, r1
    1742:	f8 cf       	rjmp	.-16     	; 0x1734 <__floatsisf+0x1c>
    1744:	fa f4       	brpl	.+62     	; 0x1784 <__floatsisf+0x6c>
    1746:	bb 0f       	add	r27, r27
    1748:	11 f4       	brne	.+4      	; 0x174e <__floatsisf+0x36>
    174a:	60 ff       	sbrs	r22, 0
    174c:	1b c0       	rjmp	.+54     	; 0x1784 <__floatsisf+0x6c>
    174e:	6f 5f       	subi	r22, 0xFF	; 255
    1750:	7f 4f       	sbci	r23, 0xFF	; 255
    1752:	8f 4f       	sbci	r24, 0xFF	; 255
    1754:	9f 4f       	sbci	r25, 0xFF	; 255
    1756:	16 c0       	rjmp	.+44     	; 0x1784 <__floatsisf+0x6c>
    1758:	88 23       	and	r24, r24
    175a:	11 f0       	breq	.+4      	; 0x1760 <__floatsisf+0x48>
    175c:	96 e9       	ldi	r25, 0x96	; 150
    175e:	11 c0       	rjmp	.+34     	; 0x1782 <__floatsisf+0x6a>
    1760:	77 23       	and	r23, r23
    1762:	21 f0       	breq	.+8      	; 0x176c <__floatsisf+0x54>
    1764:	9e e8       	ldi	r25, 0x8E	; 142
    1766:	87 2f       	mov	r24, r23
    1768:	76 2f       	mov	r23, r22
    176a:	05 c0       	rjmp	.+10     	; 0x1776 <__floatsisf+0x5e>
    176c:	66 23       	and	r22, r22
    176e:	71 f0       	breq	.+28     	; 0x178c <__floatsisf+0x74>
    1770:	96 e8       	ldi	r25, 0x86	; 134
    1772:	86 2f       	mov	r24, r22
    1774:	70 e0       	ldi	r23, 0x00	; 0
    1776:	60 e0       	ldi	r22, 0x00	; 0
    1778:	2a f0       	brmi	.+10     	; 0x1784 <__floatsisf+0x6c>
    177a:	9a 95       	dec	r25
    177c:	66 0f       	add	r22, r22
    177e:	77 1f       	adc	r23, r23
    1780:	88 1f       	adc	r24, r24
    1782:	da f7       	brpl	.-10     	; 0x177a <__floatsisf+0x62>
    1784:	88 0f       	add	r24, r24
    1786:	96 95       	lsr	r25
    1788:	87 95       	ror	r24
    178a:	97 f9       	bld	r25, 7
    178c:	08 95       	ret

0000178e <__fp_split3>:
    178e:	57 fd       	sbrc	r21, 7
    1790:	90 58       	subi	r25, 0x80	; 128
    1792:	44 0f       	add	r20, r20
    1794:	55 1f       	adc	r21, r21
    1796:	59 f0       	breq	.+22     	; 0x17ae <__fp_splitA+0x10>
    1798:	5f 3f       	cpi	r21, 0xFF	; 255
    179a:	71 f0       	breq	.+28     	; 0x17b8 <__fp_splitA+0x1a>
    179c:	47 95       	ror	r20

0000179e <__fp_splitA>:
    179e:	88 0f       	add	r24, r24
    17a0:	97 fb       	bst	r25, 7
    17a2:	99 1f       	adc	r25, r25
    17a4:	61 f0       	breq	.+24     	; 0x17be <__fp_splitA+0x20>
    17a6:	9f 3f       	cpi	r25, 0xFF	; 255
    17a8:	79 f0       	breq	.+30     	; 0x17c8 <__fp_splitA+0x2a>
    17aa:	87 95       	ror	r24
    17ac:	08 95       	ret
    17ae:	12 16       	cp	r1, r18
    17b0:	13 06       	cpc	r1, r19
    17b2:	14 06       	cpc	r1, r20
    17b4:	55 1f       	adc	r21, r21
    17b6:	f2 cf       	rjmp	.-28     	; 0x179c <__fp_split3+0xe>
    17b8:	46 95       	lsr	r20
    17ba:	f1 df       	rcall	.-30     	; 0x179e <__fp_splitA>
    17bc:	08 c0       	rjmp	.+16     	; 0x17ce <__fp_splitA+0x30>
    17be:	16 16       	cp	r1, r22
    17c0:	17 06       	cpc	r1, r23
    17c2:	18 06       	cpc	r1, r24
    17c4:	99 1f       	adc	r25, r25
    17c6:	f1 cf       	rjmp	.-30     	; 0x17aa <__fp_splitA+0xc>
    17c8:	86 95       	lsr	r24
    17ca:	71 05       	cpc	r23, r1
    17cc:	61 05       	cpc	r22, r1
    17ce:	08 94       	sec
    17d0:	08 95       	ret

000017d2 <__fp_zero>:
    17d2:	e8 94       	clt

000017d4 <__fp_szero>:
    17d4:	bb 27       	eor	r27, r27
    17d6:	66 27       	eor	r22, r22
    17d8:	77 27       	eor	r23, r23
    17da:	cb 01       	movw	r24, r22
    17dc:	97 f9       	bld	r25, 7
    17de:	08 95       	ret

000017e0 <__mulsf3>:
    17e0:	0b d0       	rcall	.+22     	; 0x17f8 <__mulsf3x>
    17e2:	78 c0       	rjmp	.+240    	; 0x18d4 <__fp_round>
    17e4:	69 d0       	rcall	.+210    	; 0x18b8 <__fp_pscA>
    17e6:	28 f0       	brcs	.+10     	; 0x17f2 <__mulsf3+0x12>
    17e8:	6e d0       	rcall	.+220    	; 0x18c6 <__fp_pscB>
    17ea:	18 f0       	brcs	.+6      	; 0x17f2 <__mulsf3+0x12>
    17ec:	95 23       	and	r25, r21
    17ee:	09 f0       	breq	.+2      	; 0x17f2 <__mulsf3+0x12>
    17f0:	5a c0       	rjmp	.+180    	; 0x18a6 <__fp_inf>
    17f2:	5f c0       	rjmp	.+190    	; 0x18b2 <__fp_nan>
    17f4:	11 24       	eor	r1, r1
    17f6:	ee cf       	rjmp	.-36     	; 0x17d4 <__fp_szero>

000017f8 <__mulsf3x>:
    17f8:	ca df       	rcall	.-108    	; 0x178e <__fp_split3>
    17fa:	a0 f3       	brcs	.-24     	; 0x17e4 <__mulsf3+0x4>

000017fc <__mulsf3_pse>:
    17fc:	95 9f       	mul	r25, r21
    17fe:	d1 f3       	breq	.-12     	; 0x17f4 <__mulsf3+0x14>
    1800:	95 0f       	add	r25, r21
    1802:	50 e0       	ldi	r21, 0x00	; 0
    1804:	55 1f       	adc	r21, r21
    1806:	62 9f       	mul	r22, r18
    1808:	f0 01       	movw	r30, r0
    180a:	72 9f       	mul	r23, r18
    180c:	bb 27       	eor	r27, r27
    180e:	f0 0d       	add	r31, r0
    1810:	b1 1d       	adc	r27, r1
    1812:	63 9f       	mul	r22, r19
    1814:	aa 27       	eor	r26, r26
    1816:	f0 0d       	add	r31, r0
    1818:	b1 1d       	adc	r27, r1
    181a:	aa 1f       	adc	r26, r26
    181c:	64 9f       	mul	r22, r20
    181e:	66 27       	eor	r22, r22
    1820:	b0 0d       	add	r27, r0
    1822:	a1 1d       	adc	r26, r1
    1824:	66 1f       	adc	r22, r22
    1826:	82 9f       	mul	r24, r18
    1828:	22 27       	eor	r18, r18
    182a:	b0 0d       	add	r27, r0
    182c:	a1 1d       	adc	r26, r1
    182e:	62 1f       	adc	r22, r18
    1830:	73 9f       	mul	r23, r19
    1832:	b0 0d       	add	r27, r0
    1834:	a1 1d       	adc	r26, r1
    1836:	62 1f       	adc	r22, r18
    1838:	83 9f       	mul	r24, r19
    183a:	a0 0d       	add	r26, r0
    183c:	61 1d       	adc	r22, r1
    183e:	22 1f       	adc	r18, r18
    1840:	74 9f       	mul	r23, r20
    1842:	33 27       	eor	r19, r19
    1844:	a0 0d       	add	r26, r0
    1846:	61 1d       	adc	r22, r1
    1848:	23 1f       	adc	r18, r19
    184a:	84 9f       	mul	r24, r20
    184c:	60 0d       	add	r22, r0
    184e:	21 1d       	adc	r18, r1
    1850:	82 2f       	mov	r24, r18
    1852:	76 2f       	mov	r23, r22
    1854:	6a 2f       	mov	r22, r26
    1856:	11 24       	eor	r1, r1
    1858:	9f 57       	subi	r25, 0x7F	; 127
    185a:	50 40       	sbci	r21, 0x00	; 0
    185c:	8a f0       	brmi	.+34     	; 0x1880 <__mulsf3_pse+0x84>
    185e:	e1 f0       	breq	.+56     	; 0x1898 <__mulsf3_pse+0x9c>
    1860:	88 23       	and	r24, r24
    1862:	4a f0       	brmi	.+18     	; 0x1876 <__mulsf3_pse+0x7a>
    1864:	ee 0f       	add	r30, r30
    1866:	ff 1f       	adc	r31, r31
    1868:	bb 1f       	adc	r27, r27
    186a:	66 1f       	adc	r22, r22
    186c:	77 1f       	adc	r23, r23
    186e:	88 1f       	adc	r24, r24
    1870:	91 50       	subi	r25, 0x01	; 1
    1872:	50 40       	sbci	r21, 0x00	; 0
    1874:	a9 f7       	brne	.-22     	; 0x1860 <__mulsf3_pse+0x64>
    1876:	9e 3f       	cpi	r25, 0xFE	; 254
    1878:	51 05       	cpc	r21, r1
    187a:	70 f0       	brcs	.+28     	; 0x1898 <__mulsf3_pse+0x9c>
    187c:	14 c0       	rjmp	.+40     	; 0x18a6 <__fp_inf>
    187e:	aa cf       	rjmp	.-172    	; 0x17d4 <__fp_szero>
    1880:	5f 3f       	cpi	r21, 0xFF	; 255
    1882:	ec f3       	brlt	.-6      	; 0x187e <__mulsf3_pse+0x82>
    1884:	98 3e       	cpi	r25, 0xE8	; 232
    1886:	dc f3       	brlt	.-10     	; 0x187e <__mulsf3_pse+0x82>
    1888:	86 95       	lsr	r24
    188a:	77 95       	ror	r23
    188c:	67 95       	ror	r22
    188e:	b7 95       	ror	r27
    1890:	f7 95       	ror	r31
    1892:	e7 95       	ror	r30
    1894:	9f 5f       	subi	r25, 0xFF	; 255
    1896:	c1 f7       	brne	.-16     	; 0x1888 <__mulsf3_pse+0x8c>
    1898:	fe 2b       	or	r31, r30
    189a:	88 0f       	add	r24, r24
    189c:	91 1d       	adc	r25, r1
    189e:	96 95       	lsr	r25
    18a0:	87 95       	ror	r24
    18a2:	97 f9       	bld	r25, 7
    18a4:	08 95       	ret

000018a6 <__fp_inf>:
    18a6:	97 f9       	bld	r25, 7
    18a8:	9f 67       	ori	r25, 0x7F	; 127
    18aa:	80 e8       	ldi	r24, 0x80	; 128
    18ac:	70 e0       	ldi	r23, 0x00	; 0
    18ae:	60 e0       	ldi	r22, 0x00	; 0
    18b0:	08 95       	ret

000018b2 <__fp_nan>:
    18b2:	9f ef       	ldi	r25, 0xFF	; 255
    18b4:	80 ec       	ldi	r24, 0xC0	; 192
    18b6:	08 95       	ret

000018b8 <__fp_pscA>:
    18b8:	00 24       	eor	r0, r0
    18ba:	0a 94       	dec	r0
    18bc:	16 16       	cp	r1, r22
    18be:	17 06       	cpc	r1, r23
    18c0:	18 06       	cpc	r1, r24
    18c2:	09 06       	cpc	r0, r25
    18c4:	08 95       	ret

000018c6 <__fp_pscB>:
    18c6:	00 24       	eor	r0, r0
    18c8:	0a 94       	dec	r0
    18ca:	12 16       	cp	r1, r18
    18cc:	13 06       	cpc	r1, r19
    18ce:	14 06       	cpc	r1, r20
    18d0:	05 06       	cpc	r0, r21
    18d2:	08 95       	ret

000018d4 <__fp_round>:
    18d4:	09 2e       	mov	r0, r25
    18d6:	03 94       	inc	r0
    18d8:	00 0c       	add	r0, r0
    18da:	11 f4       	brne	.+4      	; 0x18e0 <__fp_round+0xc>
    18dc:	88 23       	and	r24, r24
    18de:	52 f0       	brmi	.+20     	; 0x18f4 <__fp_round+0x20>
    18e0:	bb 0f       	add	r27, r27
    18e2:	40 f4       	brcc	.+16     	; 0x18f4 <__fp_round+0x20>
    18e4:	bf 2b       	or	r27, r31
    18e6:	11 f4       	brne	.+4      	; 0x18ec <__fp_round+0x18>
    18e8:	60 ff       	sbrs	r22, 0
    18ea:	04 c0       	rjmp	.+8      	; 0x18f4 <__fp_round+0x20>
    18ec:	6f 5f       	subi	r22, 0xFF	; 255
    18ee:	7f 4f       	sbci	r23, 0xFF	; 255
    18f0:	8f 4f       	sbci	r24, 0xFF	; 255
    18f2:	9f 4f       	sbci	r25, 0xFF	; 255
    18f4:	08 95       	ret

000018f6 <__divmodhi4>:
    18f6:	97 fb       	bst	r25, 7
    18f8:	07 2e       	mov	r0, r23
    18fa:	16 f4       	brtc	.+4      	; 0x1900 <__divmodhi4+0xa>
    18fc:	00 94       	com	r0
    18fe:	06 d0       	rcall	.+12     	; 0x190c <__divmodhi4_neg1>
    1900:	77 fd       	sbrc	r23, 7
    1902:	08 d0       	rcall	.+16     	; 0x1914 <__divmodhi4_neg2>
    1904:	3f d0       	rcall	.+126    	; 0x1984 <__udivmodhi4>
    1906:	07 fc       	sbrc	r0, 7
    1908:	05 d0       	rcall	.+10     	; 0x1914 <__divmodhi4_neg2>
    190a:	3e f4       	brtc	.+14     	; 0x191a <__divmodhi4_exit>

0000190c <__divmodhi4_neg1>:
    190c:	90 95       	com	r25
    190e:	81 95       	neg	r24
    1910:	9f 4f       	sbci	r25, 0xFF	; 255
    1912:	08 95       	ret

00001914 <__divmodhi4_neg2>:
    1914:	70 95       	com	r23
    1916:	61 95       	neg	r22
    1918:	7f 4f       	sbci	r23, 0xFF	; 255

0000191a <__divmodhi4_exit>:
    191a:	08 95       	ret

0000191c <__udivmodsi4>:
    191c:	a1 e2       	ldi	r26, 0x21	; 33
    191e:	1a 2e       	mov	r1, r26
    1920:	aa 1b       	sub	r26, r26
    1922:	bb 1b       	sub	r27, r27
    1924:	fd 01       	movw	r30, r26
    1926:	0d c0       	rjmp	.+26     	; 0x1942 <__udivmodsi4_ep>

00001928 <__udivmodsi4_loop>:
    1928:	aa 1f       	adc	r26, r26
    192a:	bb 1f       	adc	r27, r27
    192c:	ee 1f       	adc	r30, r30
    192e:	ff 1f       	adc	r31, r31
    1930:	a2 17       	cp	r26, r18
    1932:	b3 07       	cpc	r27, r19
    1934:	e4 07       	cpc	r30, r20
    1936:	f5 07       	cpc	r31, r21
    1938:	20 f0       	brcs	.+8      	; 0x1942 <__udivmodsi4_ep>
    193a:	a2 1b       	sub	r26, r18
    193c:	b3 0b       	sbc	r27, r19
    193e:	e4 0b       	sbc	r30, r20
    1940:	f5 0b       	sbc	r31, r21

00001942 <__udivmodsi4_ep>:
    1942:	66 1f       	adc	r22, r22
    1944:	77 1f       	adc	r23, r23
    1946:	88 1f       	adc	r24, r24
    1948:	99 1f       	adc	r25, r25
    194a:	1a 94       	dec	r1
    194c:	69 f7       	brne	.-38     	; 0x1928 <__udivmodsi4_loop>
    194e:	60 95       	com	r22
    1950:	70 95       	com	r23
    1952:	80 95       	com	r24
    1954:	90 95       	com	r25
    1956:	9b 01       	movw	r18, r22
    1958:	ac 01       	movw	r20, r24
    195a:	bd 01       	movw	r22, r26
    195c:	cf 01       	movw	r24, r30
    195e:	08 95       	ret

00001960 <__tablejump2__>:
    1960:	ee 0f       	add	r30, r30
    1962:	ff 1f       	adc	r31, r31
    1964:	88 1f       	adc	r24, r24
    1966:	8b bf       	out	0x3b, r24	; 59
    1968:	07 90       	elpm	r0, Z+
    196a:	f6 91       	elpm	r31, Z
    196c:	e0 2d       	mov	r30, r0
    196e:	19 94       	eijmp

00001970 <__muluhisi3>:
    1970:	1d d0       	rcall	.+58     	; 0x19ac <__umulhisi3>
    1972:	a5 9f       	mul	r26, r21
    1974:	90 0d       	add	r25, r0
    1976:	b4 9f       	mul	r27, r20
    1978:	90 0d       	add	r25, r0
    197a:	a4 9f       	mul	r26, r20
    197c:	80 0d       	add	r24, r0
    197e:	91 1d       	adc	r25, r1
    1980:	11 24       	eor	r1, r1
    1982:	08 95       	ret

00001984 <__udivmodhi4>:
    1984:	aa 1b       	sub	r26, r26
    1986:	bb 1b       	sub	r27, r27
    1988:	51 e1       	ldi	r21, 0x11	; 17
    198a:	07 c0       	rjmp	.+14     	; 0x199a <__udivmodhi4_ep>

0000198c <__udivmodhi4_loop>:
    198c:	aa 1f       	adc	r26, r26
    198e:	bb 1f       	adc	r27, r27
    1990:	a6 17       	cp	r26, r22
    1992:	b7 07       	cpc	r27, r23
    1994:	10 f0       	brcs	.+4      	; 0x199a <__udivmodhi4_ep>
    1996:	a6 1b       	sub	r26, r22
    1998:	b7 0b       	sbc	r27, r23

0000199a <__udivmodhi4_ep>:
    199a:	88 1f       	adc	r24, r24
    199c:	99 1f       	adc	r25, r25
    199e:	5a 95       	dec	r21
    19a0:	a9 f7       	brne	.-22     	; 0x198c <__udivmodhi4_loop>
    19a2:	80 95       	com	r24
    19a4:	90 95       	com	r25
    19a6:	bc 01       	movw	r22, r24
    19a8:	cd 01       	movw	r24, r26
    19aa:	08 95       	ret

000019ac <__umulhisi3>:
    19ac:	a2 9f       	mul	r26, r18
    19ae:	b0 01       	movw	r22, r0
    19b0:	b3 9f       	mul	r27, r19
    19b2:	c0 01       	movw	r24, r0
    19b4:	a3 9f       	mul	r26, r19
    19b6:	70 0d       	add	r23, r0
    19b8:	81 1d       	adc	r24, r1
    19ba:	11 24       	eor	r1, r1
    19bc:	91 1d       	adc	r25, r1
    19be:	b2 9f       	mul	r27, r18
    19c0:	70 0d       	add	r23, r0
    19c2:	81 1d       	adc	r24, r1
    19c4:	11 24       	eor	r1, r1
    19c6:	91 1d       	adc	r25, r1
    19c8:	08 95       	ret

000019ca <_exit>:
    19ca:	f8 94       	cli

000019cc <__stop_program>:
    19cc:	ff cf       	rjmp	.-2      	; 0x19cc <__stop_program>
